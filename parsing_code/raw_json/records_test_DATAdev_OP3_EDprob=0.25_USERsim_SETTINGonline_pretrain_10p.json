[
    {
        "nl": "How many documents do we have ?",
        "true_sql": "select count ( documents.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "documents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 55, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9999710608915984, 1)]",
        "logprob": "-0.0002573887737182826",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 0
    },
    {
        "nl": "Count the number of documents .",
        "true_sql": "select count ( documents.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "documents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 55, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9992961360398481, 1)]",
        "logprob": "-0.002954501041049309",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1
    },
    {
        "nl": "List document IDs , document names , and document descriptions for all documents .",
        "true_sql": "select documents.document_id , documents.document_name , documents.document_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.document_id",
            ",",
            "documents.document_name",
            ",",
            "documents.document_description",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.990789532661438, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.999897837638855, 3), ('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.9893934726715088, 5)]",
        "logprob": "-0.0204068579834155",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 2
    },
    {
        "nl": "What are the ids , names , and descriptions for all documents ?",
        "true_sql": "select documents.document_id , documents.document_name , documents.document_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.document_id",
            ",",
            "documents.document_name",
            ",",
            "documents.document_description",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.8553926348686218, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9980707764625549, 3), ('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.995541512966156, 5)]",
        "logprob": "-0.16357447673944234",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 3
    },
    {
        "nl": "What is the document name and template id for document with description with the letter ' w ' in it ?",
        "true_sql": "select documents.document_name , documents.template_id where documents.document_description like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 12, False], None], '\"%w%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.document_name",
            ",",
            "documents.template_id",
            "where",
            "documents.document_description",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [45], 6, 47, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.8683280944824219, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.507721483707428, 3), ('WHERE_COL', ('documents', 'document_description', 47), 0.8143230676651001, 5), ('WHERE_OP', (('documents', 'document_description', 47),), ('like', 6), 0.9944071769714355, 6), ('WHERE_ROOT_TERM', (('documents', 'document_description', 47),), ('like', 6), 'terminal', 0.9999946355819702, 7)]",
        "logprob": "-1.0302327965968086",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 4
    },
    {
        "nl": "Return the names and template ids for documents that contain the letter w in their description .",
        "true_sql": "select documents.document_name , documents.template_id where documents.document_description like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 12, False], None], '\"%w%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.template_id",
            ",",
            "documents.template_id",
            "where",
            "documents.document_name",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [45], 6, 46, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5592591166496277, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5867261290550232, 3), ('WHERE_COL', ('documents', 'document_name', 46), 0.7015028595924377, 5), ('WHERE_OP', (('documents', 'document_name', 46),), ('like', 6), 0.7970016598701477, 6), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('like', 6), 'terminal', 0.9999945163726807, 7)]",
        "logprob": "-1.696295237841851",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 5
    },
    {
        "nl": "What is the document id , template id and description for document named `` Robbin CV `` ?",
        "true_sql": "select documents.document_id , documents.template_id , documents.document_description where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Robbin CV\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.template_id",
            ",",
            "documents.template_id",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [45], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5343794226646423, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.8178644180297852, 3), ('WHERE_COL', ('documents', 'document_name', 46), 0.923608124256134, 5), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999810457229614, 6), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999983310699463, 7)]",
        "logprob": "-0.9679608817117119",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 6
    },
    {
        "nl": "Return the document id , template id , and description for the document with the name Robbin CV .",
        "true_sql": "select documents.document_id , documents.template_id , documents.document_description where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Robbin CV\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.document_id",
            ",",
            "documents.template_id",
            ",",
            "documents.document_description",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 8, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.9230912327766418, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.7720437049865723, 3), ('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.9303155541419983, 5), ('WHERE_COL', ('documents', 'document_name', 46), 0.9981903433799744, 7), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999940395355225, 8), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999985694885254, 9)]",
        "logprob": "-0.41919471160715704",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 7
    },
    {
        "nl": "How many different templates do all document use ?",
        "true_sql": "select count ( distinct documents.template_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 10, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "documents.template_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9998207030331174, 1)]",
        "logprob": "-0.0009074133141863472",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 8
    },
    {
        "nl": "Count the number of different templates used for documents .",
        "true_sql": "select count ( distinct documents.template_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 10, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "documents.template_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9998083637371318, 1)]",
        "logprob": "-0.0009721015087807739",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 9
    },
    {
        "nl": "How many documents are using the template with type code 'PPT ' ?",
        "true_sql": "select count ( * ) where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"PPT\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "documents.template_id",
            ")",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9060502932557947, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9997958540916443, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.49362700758021016",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 10
    },
    {
        "nl": "Count the number of documents that use the PPT template type .",
        "true_sql": "select count ( * ) where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"PPT\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "templates.template_type_code",
            ")",
            "where",
            "templates.version_number",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 40, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.9393237696568276, 1), ('WHERE_COL', ('templates', 'version_number', 39), 0.916771650314331, 3), ('WHERE_OP', (('templates', 'version_number', 39),), ('=', 0), 0.9990665316581726, 4), ('WHERE_ROOT_TERM', (('templates', 'version_number', 39),), ('=', 0), 'terminal', 0.9999892711639404, 5)]",
        "logprob": "-0.40748031722983186",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 11
    },
    {
        "nl": "Show all template ids and number of documents using each template .",
        "true_sql": "select documents.template_id , count ( documents.* ) group_by documents.template_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.template_id",
            ",",
            "count",
            "(",
            "templates.*",
            ")",
            "group_by",
            "documents.template_id",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [9, 5, 54, 4], 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9887337684631348, 1), ('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.8748196609188195, 3), ('GROUP_COL', ('documents', 'template_id', 45), 0.9984598159790039, 5)]",
        "logprob": "-0.5479639520263946",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 12
    },
    {
        "nl": "What are all different template ids used for documents , and how many times were each of them used ?",
        "true_sql": "select documents.template_id , count ( documents.* ) group_by documents.template_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "documents.template_id",
            ",",
            "count",
            "(",
            "distinct",
            "documents.document_id",
            ")",
            "group_by",
            "documents.template_id",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [45], 8, [9, 5, 15, 44, 4], 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9846612811088562, 2), ('SELECT_AGG_v2', ('documents', 'document_id', 44), ('count', 3), True, 0.7770011976363975, 4), ('GROUP_COL', ('documents', 'template_id', 45), 0.9927414655685425, 6)]",
        "logprob": "-1.2885955361311217",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 13
    },
    {
        "nl": "What is the id and type code for the template used by the most documents ?",
        "true_sql": "select documents.template_id , templates.template_type_code group_by documents.template_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "ref_template_types.template_type_code",
            "group_by",
            "documents.template_id",
            "order_by",
            "count",
            "(",
            "documents.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [36], 10, 45, 11, [9, 5, 55, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.6493398547172546, 1), ('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.7047988176345825, 3), ('GROUP_COL', ('documents', 'template_id', 45), 0.9512693285942078, 5), ('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9907660954738342, 7), ('ORDER_DESC_ASC', (('documents', '*', 55), ('count', 3), False), 'desc', 0.9984685778617859, 8), ('ORDER_LIMIT', (('documents', '*', 55), ('count', 3), False), 'limit_value', 0.9999346733093262, 9)]",
        "logprob": "-0.8724850722165364",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 14
    },
    {
        "nl": "Return the id and type code of the template that is used for the greatest number of documents .",
        "true_sql": "select documents.template_id , templates.template_type_code group_by documents.template_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            ",",
            "templates.template_type_code",
            "group_by",
            "documents.template_id",
            "order_by",
            "count",
            "(",
            "documents.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 10, 45, 11, [9, 5, 55, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.6800110936164856, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.7641205191612244, 3), ('GROUP_COL', ('documents', 'template_id', 45), 0.9770725965499878, 5), ('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9033567471783641, 7), ('ORDER_DESC_ASC', (('documents', '*', 55), ('count', 3), False), 'desc', 0.9966338276863098, 8), ('ORDER_LIMIT', (('documents', '*', 55), ('count', 3), False), 'limit_value', 0.9999407529830933, 9)]",
        "logprob": "-1.0889670338470288",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 15
    },
    {
        "nl": "Show ids for all templates that are used by more than one document .",
        "true_sql": "select documents.template_id group_by documents.template_id having count ( documents.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            "group_by",
            "documents.template_id",
            "having",
            "count",
            "(",
            "templates.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 45, 18, [9, 5, 54, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.6642941832542419, 1), ('GROUP_COL', ('documents', 'template_id', 45), 0.9961295127868652, 3), ('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9821597365212753, 5), ('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('>', 1), 0.9998584985733032, 6), ('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('>', 1), 'terminal', 0.9985551238059998, 7)]",
        "logprob": "-0.48801114927193123",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 16
    },
    {
        "nl": "What are the template ids of any templates used in more than a single document ?",
        "true_sql": "select documents.template_id group_by documents.template_id having count ( documents.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.template_id",
            "group_by",
            "documents.template_id",
            "having",
            "count",
            "(",
            "templates.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 45, 18, [9, 5, 54, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5249492526054382, 1), ('GROUP_COL', ('documents', 'template_id', 45), 0.9886217713356018, 3), ('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9997374805526269, 5), ('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('>', 1), 0.999909520149231, 6), ('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('>', 1), 'terminal', 0.9936932325363159, 7)]",
        "logprob": "-0.6726505092813059",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 17
    },
    {
        "nl": "Show ids for all templates not used by any document .",
        "true_sql": "select templates.template_id except select documents.template_id",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "documents.document_id",
            "not",
            "in",
            "(",
            "select",
            "paragraphs.document_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 44, [22, 20], 5, 2, [50], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9761552810668945, 1), ('WHERE_COL', ('documents', 'document_id', 44), 0.99974125623703, 3), ('WHERE_OP', (('documents', 'document_id', 44),), ('not in', 7), 0.9988648268234354, 4), ('WHERE_ROOT_TERM', (('documents', 'document_id', 44),), ('not in', 7), 'root', 0.9999939203262329, 5), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9952502250671387, 7), ('O', '##END_NESTED##', 0.9996465444564819, 8)]",
        "logprob": "-0.042977490909796",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 18
    },
    {
        "nl": "What are the ids for templates that are not used in any documents ?",
        "true_sql": "select templates.template_id except select documents.template_id",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "documents.document_id",
            "not",
            "in",
            "(",
            "select",
            "paragraphs.document_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 44, [22, 20], 5, 2, [50], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.8686740398406982, 1), ('WHERE_COL', ('documents', 'document_id', 44), 0.9997420907020569, 3), ('WHERE_OP', (('documents', 'document_id', 44),), ('not in', 7), 0.9997138631266126, 4), ('WHERE_ROOT_TERM', (('documents', 'document_id', 44),), ('not in', 7), 'root', 0.9999920129776001, 5), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9616237878799438, 7), ('O', '##END_NESTED##', 0.9998794794082642, 8)]",
        "logprob": "-0.18209561683377723",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 19
    },
    {
        "nl": "How many templates do we have ?",
        "true_sql": "select count ( templates.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "templates.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9999920725023695, 1)]",
        "logprob": "-0.0001388850105427464",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 20
    },
    {
        "nl": "Count the number of templates .",
        "true_sql": "select count ( templates.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "templates.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9995911469182479, 1)]",
        "logprob": "-0.0018378864950635385",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 21
    },
    {
        "nl": "Show template ids , version numbers , and template type codes for all templates .",
        "true_sql": "select templates.template_id , templates.version_number , templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            ",",
            "templates.version_number",
            ",",
            "templates.version_number",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9998880624771118, 1), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999953508377075, 3), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.7865139245986938, 5)]",
        "logprob": "-0.24083743872461214",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 22
    },
    {
        "nl": "What are the ids , version numbers , and type codes for each template ?",
        "true_sql": "select templates.template_id , templates.version_number , templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            ",",
            "templates.version_number",
            ",",
            "templates.version_number",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9994038343429565, 1), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999490976333618, 3), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9048439264297485, 5)]",
        "logprob": "-0.10557338252717913",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 23
    },
    {
        "nl": "Show all distinct template type codes for all templates .",
        "true_sql": "select distinct templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9996254444122314, 2)]",
        "logprob": "-0.0004053819980797552",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 24
    },
    {
        "nl": "What are the different template type codes ?",
        "true_sql": "select distinct templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9980138540267944, 2)]",
        "logprob": "-0.002091597531789478",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 25
    },
    {
        "nl": "What are the ids of templates with template type code PP or PPT ?",
        "true_sql": "select templates.template_id where templates.template_type_code = value or templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"PP\"', None], 'or', [False, 2, [0, [0, 5, False], None], '\"PPT\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "or",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 40, [7], 3, 25, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.999992847442627, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9999287128448486, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999568462371826, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999984502792358, 5), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9996089339256287, 7), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999654293060303, 8), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999960660934448, 9)]",
        "logprob": "-0.001999037090264589",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 26
    },
    {
        "nl": "Return the ids of templates that have the code PP or PPT .",
        "true_sql": "select templates.template_id where templates.template_type_code = value or templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"PP\"', None], 'or', [False, 2, [0, [0, 5, False], None], '\"PPT\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "templates.template_id",
            "=",
            "value",
            "or",
            "templates.template_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 38, [7], 3, 25, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9999979734420776, 1), ('WHERE_COL', ('templates', 'template_id', 38), 0.6545297503471375, 3), ('WHERE_OP', (('templates', 'template_id', 38),), ('=', 0), 0.9981993436813354, 4), ('WHERE_ROOT_TERM', (('templates', 'template_id', 38),), ('=', 0), 'terminal', 0.9999988079071045, 5), ('WHERE_COL', ('templates', 'template_id', 38), 0.9518386125564575, 7), ('WHERE_OP', (('templates', 'template_id', 38),), ('=', 0), 0.9996558427810669, 8), ('WHERE_ROOT_TERM', (('templates', 'template_id', 38),), ('=', 0), 'terminal', 0.9999793767929077, 9)]",
        "logprob": "-0.4787015774492438",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 27
    },
    {
        "nl": "How many templates have template type code CV ?",
        "true_sql": "select count ( templates.* ) where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"CV\"', None]], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "templates.template_type_code",
            ")",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 40, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.9551447762398528, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9996317625045776, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999922513961792, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.25304796473201246",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 28
    },
    {
        "nl": "Count the number of templates of the type CV .",
        "true_sql": "select count ( templates.* ) where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"CV\"', None]], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "templates.template_type_code",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 40, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.9191332042180156, 1)]",
        "logprob": "-0.4857422651492296",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 29
    },
    {
        "nl": "What is the version number and template type code for the template with version number later than 5 ?",
        "true_sql": "select templates.version_number , templates.template_type_code where templates.version_number > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 5.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.version_number",
            ",",
            "templates.template_type_code",
            "where",
            "templates.template_type_code",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [40], 6, 40, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999912977218628, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9988675117492676, 3), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.7216849327087402, 5), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('<', 2), 0.9224005937576294, 6), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('<', 2), 'terminal', 0.9999394416809082, 7)]",
        "logprob": "-0.4367944287150108",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 30
    },
    {
        "nl": "Return the version numbers and template type codes of templates with a version number greater than 5 .",
        "true_sql": "select templates.version_number , templates.template_type_code where templates.version_number > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 5.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.version_number",
            ",",
            "templates.template_type_code",
            "where",
            "templates.template_details",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [40], 6, 43, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9993940591812134, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9736813902854919, 3), ('WHERE_COL', ('templates', 'template_details', 43), 0.9513131380081177, 5), ('WHERE_OP', (('templates', 'template_details', 43),), ('>', 1), 0.9996281862258911, 6), ('WHERE_ROOT_TERM', (('templates', 'template_details', 43),), ('>', 1), 'terminal', 0.9999597072601318, 7)]",
        "logprob": "-0.3124207809662293",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 31
    },
    {
        "nl": "Show all template type codes and number of templates for each .",
        "true_sql": "select templates.template_type_code , count ( templates.* ) group_by templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "templates.*",
            ")",
            "group_by",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 54, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999939203262329, 1), ('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9996585955440193, 3), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9999924898147583, 5)]",
        "logprob": "-0.0014886396419644139",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 32
    },
    {
        "nl": "What are the different template type codes , and how many templates correspond to each ?",
        "true_sql": "select templates.template_type_code , count ( templates.* ) group_by templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "distinct",
            "templates.template_id",
            ")",
            "group_by",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 15, 38, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.5522801280021667, 1), ('SELECT_AGG_v2', ('templates', 'template_id', 38), ('count', 3), True, 0.8944439955217293, 3), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9998587369918823, 5)]",
        "logprob": "-1.1517104058740932",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 33
    },
    {
        "nl": "Which template type code has most number of templates ?",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( templates.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "order_by",
            "count",
            "(",
            "templates.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 54, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.999664306640625, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9995304346084595, 3), ('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9848314253472972, 5), ('ORDER_DESC_ASC', (('templates', '*', 54), ('count', 3), False), 'desc', 0.9971863627433777, 6), ('ORDER_LIMIT', (('templates', '*', 54), ('count', 3), False), 'limit_value', 0.9999439716339111, 7)]",
        "logprob": "-0.06506221815578563",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 34
    },
    {
        "nl": "Return the type code of the template type that the most templates belong to .",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( templates.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "order_by",
            "count",
            "(",
            "templates.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 54, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999179840087891, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9998363256454468, 3), ('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9660453374116178, 5), ('ORDER_DESC_ASC', (('templates', '*', 54), ('count', 3), False), 'desc', 0.9986409544944763, 6), ('ORDER_LIMIT', (('templates', '*', 54), ('count', 3), False), 'limit_value', 0.9999699592590332, 7)]",
        "logprob": "-0.13987611645687995",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 35
    },
    {
        "nl": "Show all template type codes with less than three templates .",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code having count ( templates.* ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 4, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "having",
            "count",
            "(",
            "templates.*",
            ")",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 18, [9, 5, 54, 4], [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9993340373039246, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9976966977119446, 3), ('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.99081542641714, 5), ('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 0.9577691555023193, 6), ('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 'terminal', 0.9969160556793213, 7)]",
        "logprob": "-0.6878443070239667",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 36
    },
    {
        "nl": "What are the codes of template types that have fewer than 3 templates ?",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code having count ( templates.* ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 4, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "having",
            "count",
            "(",
            "templates.*",
            ")",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 18, [9, 5, 54, 4], [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998437166213989, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9979619979858398, 3), ('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.8962140352552788, 5), ('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 0.9238836765289307, 6), ('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 'terminal', 0.9988971948623657, 7)]",
        "logprob": "-0.8459474804259614",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 37
    },
    {
        "nl": "What the smallest version number and its template type code ?",
        "true_sql": "select min ( templates.version_number ) , templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.version_number",
            ",",
            "templates.template_type_code",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [40], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999452829360962, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9919291734695435, 3), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.8172749280929565, 5), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999372959136963, 6), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9998236298561096, 7)]",
        "logprob": "-0.6592703410240836",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 38
    },
    {
        "nl": "Return the lowest version number , along with its corresponding template type code .",
        "true_sql": "select min ( templates.version_number ) , templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "templates.version_number",
            "order_by",
            "templates.version_number",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [39], 11, [39], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9002822041511536, 1), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.7428106069564819, 3), ('ORDER_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999878406524658, 5), ('ORDER_DESC_ASC', (('templates', 'version_number', 39), ('none_agg', 0), False), 'asc', 0.9310892820358276, 6), ('ORDER_LIMIT', (('templates', 'version_number', 39), ('none_agg', 0), False), 'limit_value', 0.9993569254875183, 7)]",
        "logprob": "-1.0904294507032914",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 39
    },
    {
        "nl": "What is the template type code of the template used by document with the name `` Data base `` ?",
        "true_sql": "select templates.template_type_code where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Data base\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9866699576377869, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.9999998807907104, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999274015426636, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.014184880391063966",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 40
    },
    {
        "nl": "Return the template type code of the template that is used by a document named Data base .",
        "true_sql": "select templates.template_type_code where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Data base\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9958800077438354, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.9999945163726807, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999972581863403, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.03967779236015642",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 41
    },
    {
        "nl": "Show all document names using templates with template type code BK .",
        "true_sql": "select documents.document_name where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"BK\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.document_name",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.7200365662574768, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9995433688163757, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999953508377075, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.3289690268509545",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 42
    },
    {
        "nl": "What are the names of documents that use templates with the code BK ?",
        "true_sql": "select documents.document_name where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"BK\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "documents.document_name",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9998400211334229, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.9978100657463074, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999889135360718, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.002425523600020553",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 43
    },
    {
        "nl": "Show all template type codes and the number of documents using each type .",
        "true_sql": "select templates.template_type_code , count ( * ) group_by templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "documents.*",
            ")",
            "group_by",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 55, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999558925628662, 1), ('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9859995812619402, 3), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9999604225158691, 5)]",
        "logprob": "-0.056642620339173284",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 44
    },
    {
        "nl": "What are the different template type codes , and how many documents use each type ?",
        "true_sql": "select templates.template_type_code , count ( * ) group_by templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "distinct",
            "documents.template_id",
            ")",
            "group_by",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 15, 45, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9963988065719604, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9678066500316349, 3), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9997747540473938, 5)]",
        "logprob": "-0.1675169931953475",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 45
    },
    {
        "nl": "Which template type code is used by most number of documents ?",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "order_by",
            "count",
            "(",
            "documents.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 55, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998414516448975, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9983347058296204, 3), ('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.8768034565976569, 5), ('ORDER_DESC_ASC', (('documents', '*', 55), ('count', 3), False), 'desc', 0.9985100626945496, 6), ('ORDER_LIMIT', (('documents', '*', 55), ('count', 3), False), 'limit_value', 0.9999297857284546, 7)]",
        "logprob": "-0.5294599059603773",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 46
    },
    {
        "nl": "Return the code of the template type that is most commonly used in documents .",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998481273651123, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.7742002606391907, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9942090878988584, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9962975382804871, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999430179595947, 7)]",
        "logprob": "-0.2831730670636358",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 47
    },
    {
        "nl": "Show all template type codes that are not used by any document .",
        "true_sql": "select templates.template_type_code except select templates.template_type_code",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "where",
            "documents.document_id",
            "not",
            "in",
            "(",
            "select",
            "documents.template_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 44, [22, 20], 5, 2, [45], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9994552731513977, 1), ('WHERE_COL', ('documents', 'document_id', 44), 0.94737708568573, 3), ('WHERE_OP', (('documents', 'document_id', 44),), ('not in', 7), 0.9996494040876561, 4), ('WHERE_ROOT_TERM', (('documents', 'document_id', 44),), ('not in', 7), 'root', 0.9999940395355225, 5), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9374505877494812, 7), ('O', '##END_NESTED##', 0.9998730421066284, 8)]",
        "logprob": "-0.12581612764870678",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 48
    },
    {
        "nl": "What are the codes of template types that are not used for any document ?",
        "true_sql": "select templates.template_type_code except select templates.template_type_code",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "where",
            "documents.document_id",
            "not",
            "in",
            "(",
            "select",
            "documents.template_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 44, [22, 20], 5, 2, [45], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9983007311820984, 1), ('WHERE_COL', ('documents', 'document_id', 44), 0.47807663679122925, 3), ('WHERE_OP', (('documents', 'document_id', 44),), ('not in', 7), 0.999629185810856, 4), ('WHERE_ROOT_TERM', (('documents', 'document_id', 44),), ('not in', 7), 'root', 0.9999910593032837, 5), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9979320764541626, 7), ('O', '##END_NESTED##', 0.9999059438705444, 8)]",
        "logprob": "-0.7445558086547863",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 49
    },
    {
        "nl": "Show all template type codes and descriptions .",
        "true_sql": "select ref_template_types.template_type_code , ref_template_types.template_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "ref_template_types.template_type_code",
            ",",
            "ref_template_types.template_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.5721782445907593, 1), ('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9933356046676636, 3)]",
        "logprob": "-0.5653981506959678",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 50
    },
    {
        "nl": "What are the type codes and descriptions for all template types ?",
        "true_sql": "select ref_template_types.template_type_code , ref_template_types.template_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "ref_template_types.template_type_code",
            ",",
            "ref_template_types.template_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.9782055020332336, 1), ('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.99998939037323, 3)]",
        "logprob": "-0.022232095704942344",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 51
    },
    {
        "nl": "What is the template type descriptions for template type code `` AD `` .",
        "true_sql": "select ref_template_types.template_type_description where ref_template_types.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 1, False], None], '\"AD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "ref_template_types.template_type_description",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9999493360519409, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9724226593971252, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999964237213135, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999982118606567, 5)]",
        "logprob": "-0.028057719368578718",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 52
    },
    {
        "nl": "Return the template type description of the template type with the code AD .",
        "true_sql": "select ref_template_types.template_type_description where ref_template_types.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 1, False], None], '\"AD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "ref_template_types.template_type_description",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.999954104423523, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9514228701591492, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999864101409912, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.049883442531946924",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 53
    },
    {
        "nl": "What is the template type code for template type description `` Book `` .",
        "true_sql": "select ref_template_types.template_type_code where ref_template_types.template_type_description = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Book\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "where",
            "ref_template_types.template_type_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.8171349763870239, 1), ('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999984502792358, 3), ('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999947547912598, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.999997615814209, 5)]",
        "logprob": "-0.2118655467437051",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 54
    },
    {
        "nl": "Return the type code of the template type with the description `` Book `` .",
        "true_sql": "select ref_template_types.template_type_code where ref_template_types.template_type_description = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Book\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "where",
            "ref_template_types.template_type_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.7448206543922424, 1), ('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999997615814209, 3), ('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999799728393555, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.29468525602618795",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 55
    },
    {
        "nl": "What are the distinct template type descriptions for the templates ever used by any document ?",
        "true_sql": "select distinct ref_template_types.template_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "ref_template_types.template_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9974871873855591, 2)]",
        "logprob": "-0.29710921523868117",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 56
    },
    {
        "nl": "Return the different descriptions for templates that have been used in a document .",
        "true_sql": "select distinct ref_template_types.template_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "ref_template_types.template_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.71755450963974, 2)]",
        "logprob": "-0.3341777389256723",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 57
    },
    {
        "nl": "What are the template ids with template type description `` Presentation `` .",
        "true_sql": "select templates.template_id where ref_template_types.template_type_description = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Presentation\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "ref_template_types.template_type_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9999204874038696, 1), ('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999998807907104, 3), ('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999954700469971, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.0003744131485024255",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 58
    },
    {
        "nl": "Return the ids corresponding to templates with the description 'Presentation ' .",
        "true_sql": "select templates.template_id where ref_template_types.template_type_description = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Presentation\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "documents.document_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9997463822364807, 1), ('WHERE_COL', ('documents', 'document_description', 47), 0.9237912893295288, 3), ('WHERE_OP', (('documents', 'document_description', 47),), ('=', 0), 0.9999865293502808, 4), ('WHERE_ROOT_TERM', (('documents', 'document_description', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.07960716213368428",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 59
    },
    {
        "nl": "How many paragraphs in total ?",
        "true_sql": "select count ( paragraphs.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "paragraphs.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 56, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.9935159437663132, 1)]",
        "logprob": "-0.026125347394903756",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 60
    },
    {
        "nl": "Count the number of paragraphs .",
        "true_sql": "select count ( paragraphs.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "paragraphs.paragraph_text",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), False, 0.9926379991028118, 1)]",
        "logprob": "-0.02966816512893504",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 61
    },
    {
        "nl": "How many paragraphs for the document with name 'Summer Show ' ?",
        "true_sql": "select count ( * ) where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Summer Show\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.660888135433197, 1), ('WHERE_COL', ('documents', 'document_name', 46), 1.0, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999961853027344, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.4142116971689284",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 62
    },
    {
        "nl": "Count the number of paragraphs in the document named 'Summer Show ' .",
        "true_sql": "select count ( * ) where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Summer Show\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "paragraphs.paragraph_text",
            ")",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), False, 0.9783528060774531, 1), ('WHERE_COL', ('documents', 'document_name', 46), 1.0, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.08775228793182427",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 63
    },
    {
        "nl": "Show paragraph details for paragraph with text 'Korea ' .",
        "true_sql": "select paragraphs.other_details where paragraphs.paragraph_text = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Korea\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "templates.template_details",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_details', 43), ('none_agg', 0), False, 0.48724597692489624, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 1.0, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.999913215637207, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.7191064836818858",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 64
    },
    {
        "nl": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "true_sql": "select paragraphs.other_details where paragraphs.paragraph_text = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Korea\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_text",
            "where",
            "paragraphs.paragraph_text",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 51, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.6513240337371826, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999901056289673, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('like', 6), 0.9060408473014832, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('like', 6), 'terminal', 0.999996542930603, 5)]",
        "logprob": "-0.527452638033062",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 65
    },
    {
        "nl": "Show all paragraph ids and texts for the document with name 'Welcome to NY ' .",
        "true_sql": "select paragraphs.paragraph_id , paragraphs.paragraph_text where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Welcome to NY\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9995576739311218, 1), ('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.9997332692146301, 3), ('WHERE_COL', ('documents', 'document_name', 46), 0.9999997615814209, 5), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999938011169434, 6), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999990463256836, 7)]",
        "logprob": "-0.0012786667492753197",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 66
    },
    {
        "nl": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY ' ?",
        "true_sql": "select paragraphs.paragraph_id , paragraphs.paragraph_text where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Welcome to NY\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9999151229858398, 1), ('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.9999675750732422, 3), ('WHERE_COL', ('documents', 'document_name', 46), 0.7391000986099243, 5), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999945163726807, 6), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999977350234985, 7)]",
        "logprob": "-0.30300625789689634",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 67
    },
    {
        "nl": "Show all paragraph texts for the document `` Customer reviews `` .",
        "true_sql": "select paragraphs.paragraph_text where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Customer reviews\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.9990547299385071, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-0.0062463802862765296",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 68
    },
    {
        "nl": "What are the paragraph texts for the document with the name 'Customer reviews ' ?",
        "true_sql": "select paragraphs.paragraph_text where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Customer reviews\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('documents', 'document_name', 46), 1.0, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999794960021973, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-7.367248836906361e-05",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 69
    },
    {
        "nl": "Show all document ids and the number of paragraphs in each document . Order by document id .",
        "true_sql": "select paragraphs.document_id , count ( paragraphs.* ) group_by paragraphs.document_id order_by paragraphs.document_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "count",
            "(",
            "documents.*",
            ")",
            "group_by",
            "paragraphs.paragraph_id",
            "order_by",
            "count",
            "(",
            "documents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [9, 5, 55, 4], 10, 49, 11, [9, 5, 55, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9926856756210327, 1), ('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9961645410878468, 3), ('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.6513366103172302, 5), ('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9932325201116015, 7)]",
        "logprob": "-0.5990240420909656",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 70
    },
    {
        "nl": "Return the different document ids along with the number of paragraphs corresponding to each , ordered by id .",
        "true_sql": "select paragraphs.document_id , count ( paragraphs.* ) group_by paragraphs.document_id order_by paragraphs.document_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "count",
            "(",
            "documents.*",
            ")",
            "group_by",
            "paragraphs.paragraph_id",
            "order_by",
            "count",
            "(",
            "documents.*",
            ")",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [9, 5, 55, 4], 10, 49, 11, [9, 5, 55, 4], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9856239557266235, 1), ('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9946386502277849, 3), ('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.9093419909477234, 5), ('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9898995726264663, 7), ('ORDER_DESC_ASC', (('documents', '*', 55), ('count', 3), False), 'asc', 0.9448126554489136, 8)]",
        "logprob": "-0.23127422984429258",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 71
    },
    {
        "nl": "Show all document ids , names and the number of paragraphs in each document .",
        "true_sql": "select paragraphs.document_id , documents.document_name , count ( * ) group_by paragraphs.document_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "documents.document_name",
            ",",
            "count",
            "(",
            "documents.*",
            ")",
            "group_by",
            "paragraphs.document_id",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [46], 8, [9, 5, 55, 4], 10, 50, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.659341037273407, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9830141067504883, 3), ('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9743686872152522, 5), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9747938513755798, 7)]",
        "logprob": "-0.563547567061045",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 72
    },
    {
        "nl": "What are the ids and names of each document , as well as the number of paragraphs in each ?",
        "true_sql": "select paragraphs.document_id , documents.document_name , count ( * ) group_by paragraphs.document_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "documents.document_name",
            ",",
            "count",
            "(",
            "documents.*",
            ")",
            "group_by",
            "paragraphs.paragraph_id",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [46], 8, [9, 5, 55, 4], 10, 49, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9988675117492676, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9943506717681885, 3), ('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.992511868107653, 5), ('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.9005423784255981, 7)]",
        "logprob": "-0.14195659260847115",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 73
    },
    {
        "nl": "List all document ids with at least two paragraphs .",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "having",
            "count",
            "(",
            "documents.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 18, [9, 5, 55, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9714403748512268, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.983474850654602, 3), ('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.8486519211671488, 5), ('HAV_OP_v2', (('documents', '*', 55), ('count', 3), False), ('>=', 3), 0.999687194967541, 6), ('HAV_ROOT_TERM_v2', (('documents', '*', 55), ('count', 3), False), ('>=', 3), 'terminal', 0.9999704360961914, 7)]",
        "logprob": "-1.3106975686747988",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 74
    },
    {
        "nl": "What are the ids of documents that have 2 or more paragraphs ?",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "having",
            "count",
            "(",
            "documents.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 18, [9, 5, 55, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9842514991760254, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9989890456199646, 3), ('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9999873040652022, 5), ('HAV_OP_v2', (('documents', '*', 55), ('count', 3), False), ('>=', 3), 0.9998965263075631, 6), ('HAV_ROOT_TERM_v2', (('documents', '*', 55), ('count', 3), False), ('>=', 3), 'terminal', 0.9999825954437256, 7)]",
        "logprob": "-0.024858918724250074",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 75
    },
    {
        "nl": "What is the document id and name with greatest number of paragraphs ?",
        "true_sql": "select paragraphs.document_id , documents.document_name group_by paragraphs.document_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            "order_by",
            "templates.version_number",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [46], 11, [39], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9816226959228516, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9307815432548523, 3), ('ORDER_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.664181649684906, 5), ('ORDER_DESC_ASC', (('templates', 'version_number', 39), ('none_agg', 0), False), 'desc', 0.9747597575187683, 6), ('ORDER_LIMIT', (('templates', 'version_number', 39), ('none_agg', 0), False), 'limit_value', 0.9999028444290161, 7)]",
        "logprob": "-1.137706308310538",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 76
    },
    {
        "nl": "Return the id and name of the document with the most paragraphs .",
        "true_sql": "select paragraphs.document_id , documents.document_name group_by paragraphs.document_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            "group_by",
            "paragraphs.document_id",
            "order_by",
            "count",
            "(",
            "documents.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [46], 10, 50, 11, [9, 5, 55, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8249620795249939, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.5966126322746277, 3), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9906486868858337, 5), ('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9051053466413344, 7), ('ORDER_DESC_ASC', (('documents', '*', 55), ('count', 3), False), 'desc', 0.9998894929885864, 8), ('ORDER_LIMIT', (('documents', '*', 55), ('count', 3), False), 'limit_value', 0.9999743700027466, 9)]",
        "logprob": "-1.3079664355486038",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 77
    },
    {
        "nl": "What is the document id with least number of paragraphs ?",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id order_by count ( paragraphs.* ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9710744023323059, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.987969160079956, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.940724244689079, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9100063443183899, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998859167098999, 7)]",
        "logprob": "-0.40128369099456856",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 78
    },
    {
        "nl": "Return the id of the document with the fewest paragraphs .",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id order_by count ( paragraphs.* ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "order_by",
            "count",
            "(",
            "documents.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 11, [9, 5, 55, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8240602016448975, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9901847839355469, 3), ('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9252963191890754, 5), ('ORDER_DESC_ASC', (('documents', '*', 55), ('count', 3), False), 'desc', 0.5078121423721313, 6), ('ORDER_LIMIT', (('documents', '*', 55), ('count', 3), False), 'limit_value', 0.9999771118164062, 7)]",
        "logprob": "-1.2081054055096045",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 79
    },
    {
        "nl": "What is the document id with 1 to 2 paragraphs ?",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [[False, 1, [0, [3, 0, False], None], 1.0, 2.0]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "intersect",
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 6, 51, [7], 3, 23, 2, [50], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9251238107681274, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.5698946118354797, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9978746175765991, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999978542327881, 5), ('IUEN_v2', ('intersect', 1), 0.581390917301178, 6), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9382806420326233, 8), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9720864295959473, 10), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9985800981521606, 11), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999984502792358, 12)]",
        "logprob": "-1.5748706136493402",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 80
    },
    {
        "nl": "Give the ids of documents that have between one and two paragraphs .",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [[False, 1, [0, [3, 0, False], None], 1.0, 2.0]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            ">",
            "value",
            "intersect",
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 6, 51, [14], 3, 23, 2, [50], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8323736786842346, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.8034229278564453, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('>', 1), 0.47264161705970764, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('>', 1), 'terminal', 0.999951958656311, 5), ('IUEN_v2', ('intersect', 1), 0.9639937281608582, 6), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9573569893836975, 8), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9712892770767212, 10), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.993691086769104, 11), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999983310699463, 12)]",
        "logprob": "-1.3030672098503118",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 81
    },
    {
        "nl": "Show the document id with paragraph text 'Brazil ' and 'Ireland ' .",
        "true_sql": "select paragraphs.document_id where paragraphs.paragraph_text = value intersect select paragraphs.document_id where paragraphs.paragraph_text = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Ireland\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Brazil\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "intersect",
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 6, 51, [7], 3, 23, 2, [50], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.848696768283844, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999911785125732, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9998281002044678, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.875771164894104, 6), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.6937642693519592, 8), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999322891235352, 10), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.999992847442627, 11), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999986886978149, 12)]",
        "logprob": "-0.6629666791141817",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 82
    },
    {
        "nl": "What are the ids of documents that contain the paragraph text 'Brazil ' and 'Ireland ' ?",
        "true_sql": "select paragraphs.document_id where paragraphs.paragraph_text = value intersect select paragraphs.document_id where paragraphs.paragraph_text = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Ireland\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Brazil\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "intersect",
            "select",
            "documents.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 6, 51, [7], 3, 23, 2, [44], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.4709724485874176, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999969005584717, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9997267127037048, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999988079071045, 5), ('IUEN_v2', ('intersect', 1), 0.9775704145431519, 6), ('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.6024567484855652, 8), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.999976634979248, 10), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.999991774559021, 11), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999978542327881, 12)]",
        "logprob": "-1.283447736892743",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 83
    },
    {
        "nl": "Which states have both owners and professionals living there ?",
        "true_sql": "select owners.state intersect select professionals.state",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.state",
            "where",
            "professionals.professional_id",
            "=",
            "value",
            "intersect",
            "select",
            "professionals.state",
            "_EOS"
        ],
        "dec_seq": "[2, [73], 6, 68, [7], 3, 23, 2, [73], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.9596202969551086, 1), ('WHERE_COL', ('professionals', 'professional_id', 68), 0.9396800994873047, 3), ('WHERE_OP', (('professionals', 'professional_id', 68),), ('=', 0), 0.9948053956031799, 4), ('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('=', 0), 'terminal', 0.9999972581863403, 5), ('IUEN_v2', ('intersect', 1), 0.7108388543128967, 6), ('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.9365058541297913, 8)]",
        "logprob": "-1.3459690143997651",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 84
    },
    {
        "nl": "Find the states where both owners and professionals live .",
        "true_sql": "select owners.state intersect select professionals.state",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.state",
            ",",
            "owners.state",
            "_EOS"
        ],
        "dec_seq": "[2, [73], 8, [50], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.9719731211662292, 1), ('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 0.5020681023597717, 3)]",
        "logprob": "-1.2994149700243989",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 85
    },
    {
        "nl": "What is the average age of the dogs who have gone through any treatments ?",
        "true_sql": "select avg ( dogs.age ) where dogs.dog_id in ( select treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            "where",
            "dogs.abandoned_yn",
            "not",
            "in",
            "(",
            "select",
            "treatments.treatment_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 61, 4], 6, 57, [22, 20], 5, 2, [79], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9997570616586434, 1), ('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.6853321194648743, 3), ('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('not in', 7), 0.9984481229171428, 4), ('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('not in', 7), 'root', 0.9999808073043823, 5), ('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.8735938668251038, 7), ('O', '##END_NESTED##', 0.9994947910308838, 8)]",
        "logprob": "-0.6196055559605945",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 86
    },
    {
        "nl": "Find the average age of the dogs who went through treatments .",
        "true_sql": "select avg ( dogs.age ) where dogs.dog_id in ( select treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 61, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9998347565732147, 1)]",
        "logprob": "-0.0012260611434567615",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 87
    },
    {
        "nl": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments ? List his or her id , last name and cell phone .",
        "true_sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number where professionals.state = value union select professionals.professional_id , professionals.last_name , professionals.cell_number group_by professionals.professional_id having count ( professionals.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'union': None, 'where': []}, 'where': [[False, 2, [0, [0, 38, False], None], '\"Indiana\"', None]], 'extracted_clause_asterisk': {'having': 'professionals.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.last_name",
            ",",
            "professionals.home_phone",
            "where",
            "professionals.home_phone",
            "=",
            "value",
            "group_by",
            "treatments.treatment_id",
            "having",
            "count",
            "(",
            "treatment_types.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [75], 8, [77], 6, 77, [7], 3, 10, 79, 18, [9, 5, 88, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.512191653251648, 1), ('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.6353569626808167, 3), ('WHERE_COL', ('professionals', 'home_phone', 77), 0.4666442573070526, 5), ('WHERE_OP', (('professionals', 'home_phone', 77),), ('=', 0), 0.9997244477272034, 6), ('WHERE_ROOT_TERM', (('professionals', 'home_phone', 77),), ('=', 0), 'terminal', 0.9999986886978149, 7), ('GROUP_COL', ('treatments', 'treatment_id', 79), 0.5325418710708618, 9), ('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.8939168404567492, 11), ('HAV_OP_v2', (('treatment_types', '*', 88), ('count', 3), False), ('>', 1), 0.9997406601905823, 12), ('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('count', 3), False), ('>', 1), 'terminal', 0.7385097742080688, 13)]",
        "logprob": "-3.9263885880487712",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 88
    },
    {
        "nl": "Find the id , last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments .",
        "true_sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number where professionals.state = value union select professionals.professional_id , professionals.last_name , professionals.cell_number group_by professionals.professional_id having count ( professionals.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'union': None, 'where': []}, 'where': [[False, 2, [0, [0, 38, False], None], '\"Indiana\"', None]], 'extracted_clause_asterisk': {'having': 'professionals.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.first_name",
            ",",
            "professionals.last_name",
            ",",
            "owners.home_phone",
            "where",
            "professionals.state",
            "=",
            "value",
            "or",
            "owners.cell_number",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [75], 8, [53], 6, 73, [7], 3, 25, 54, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.4380170404911041, 1), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.5127849578857422, 3), ('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.3064420223236084, 5), ('WHERE_COL', ('professionals', 'state', 73), 0.7403760552406311, 7), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999964237213135, 8), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.999998927116394, 9), ('WHERE_COL', ('owners', 'cell_number', 54), 0.6715723276138306, 11), ('WHERE_OP', (('owners', 'cell_number', 54),), ('>', 1), 0.6364534497261047, 12), ('WHERE_ROOT_TERM', (('owners', 'cell_number', 54),), ('>', 1), 'terminal', 0.9986624717712402, 13)]",
        "logprob": "-4.451066822096489",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 89
    },
    {
        "nl": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "true_sql": "select dogs.name where dogs.dog_id not in ( select treatments.dog_id group_by treatments.dog_id having sum ( treatments.cost_of_treatment ) > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [[0, 45, False]], 'having': [[False, 3, [0, [4, 49, False], None], 1000.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            "where",
            "treatments.cost_of_treatment",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 6, 84, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999986886978149, 1), ('WHERE_COL', ('treatments', 'cost_of_treatment', 84), 0.3891652226448059, 3), ('WHERE_OP', (('treatments', 'cost_of_treatment', 84),), ('>', 1), 0.9399272203445435, 4), ('WHERE_ROOT_TERM', (('treatments', 'cost_of_treatment', 84),), ('>', 1), 'terminal', 0.99979168176651, 5)]",
        "logprob": "-1.64939207629378",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 90
    },
    {
        "nl": "What are the names of the dogs for which the owner spent more than 1000 for treatment ?",
        "true_sql": "select dogs.name where dogs.dog_id not in ( select treatments.dog_id group_by treatments.dog_id having sum ( treatments.cost_of_treatment ) > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [[0, 45, False]], 'having': [[False, 3, [0, [4, 49, False], None], 1000.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            "where",
            "dogs.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 6, 61, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.999998927116394, 1), ('WHERE_COL', ('dogs', 'age', 61), 0.42550042271614075, 3), ('WHERE_OP', (('dogs', 'age', 61),), ('>', 1), 0.9981012940406799, 4), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('>', 1), 'terminal', 0.9999567270278931, 5)]",
        "logprob": "-0.8797959107335726",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 91
    },
    {
        "nl": "Which first names are used for professionals or owners but are not used as dog names ?",
        "true_sql": "select professionals.first_name union select owners.first_name except select dogs.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': {'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': []}, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.first_name",
            "except",
            "select",
            "professionals.last_name",
            "where",
            "owners.last_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 28, 2, [75], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.993316650390625, 1), ('IUEN_v2', ('except', 3), 0.5608303546905518, 2), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.3679761290550232, 4), ('WHERE_COL', ('owners', 'last_name', 47), 0.5517117977142334, 6), ('WHERE_OP', (('owners', 'last_name', 47),), ('=', 0), 0.7155281901359558, 7), ('WHERE_ROOT_TERM', (('owners', 'last_name', 47),), ('=', 0), 'terminal', 0.9999942779541016, 8)]",
        "logprob": "-2.662146807400573",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 92
    },
    {
        "nl": "Find the first names that are used for professionals or owners but are not used as dog names .",
        "true_sql": "select professionals.first_name union select owners.first_name except select dogs.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': {'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': []}, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.first_name",
            "except",
            "select",
            "professionals.last_name",
            "where",
            "owners.last_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 28, 2, [75], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9892646670341492, 1), ('IUEN_v2', ('except', 3), 0.8134218454360962, 2), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.34202185273170477, 4), ('WHERE_COL', ('owners', 'last_name', 47), 0.5740161538124084, 6), ('WHERE_OP', (('owners', 'last_name', 47),), ('=', 0), 0.7601460814476013, 7), ('WHERE_ROOT_TERM', (('owners', 'last_name', 47),), ('=', 0), 'terminal', 0.999996542930603, 8)]",
        "logprob": "-2.1356665509372044",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 93
    },
    {
        "nl": "Which professional did not operate any treatment on dogs ? List the professional 's id , role and email .",
        "true_sql": "select professionals.professional_id , professionals.role_code , professionals.email_address except select professionals.professional_id , professionals.role_code , professionals.email_address",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.professional_id",
            ",",
            "treatments.dog_id",
            "where",
            "treatments.treatment_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.dog_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [68], 8, [80], 6, 79, [22, 20], 5, 2, [55], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.8974162340164185, 1), ('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('none_agg', 0), False, 0.3823360204696655, 3), ('WHERE_COL', ('treatments', 'treatment_id', 79), 0.6102613806724548, 5), ('WHERE_OP', (('treatments', 'treatment_id', 79),), ('not in', 7), 0.9904929724597068, 6), ('WHERE_ROOT_TERM', (('treatments', 'treatment_id', 79),), ('not in', 7), 'root', 0.9999895095825195, 7), ('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.9102824926376343, 9), ('O', '##END_NESTED##', 0.9975346326828003, 10)]",
        "logprob": "-1.6836251513441503",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 94
    },
    {
        "nl": "Give me the id , role and email of the professionals who did not perform any treatment on dogs .",
        "true_sql": "select professionals.professional_id , professionals.role_code , professionals.email_address except select professionals.professional_id , professionals.role_code , professionals.email_address",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.role_code",
            "where",
            "professionals.professional_id",
            "not",
            "in",
            "(",
            "select",
            "treatments.professional_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [68], 8, [69], 6, 68, [22, 20], 5, 2, [81], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.8334246277809143, 1), ('SELECT_AGG_v2', ('professionals', 'role_code', 69), ('none_agg', 0), False, 0.8734912276268005, 3), ('WHERE_COL', ('professionals', 'professional_id', 68), 0.4340321123600006, 5), ('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9984802628664919, 6), ('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999862909317017, 7), ('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.6888645887374878, 9), ('O', '##END_NESTED##', 0.9976539015769958, 10)]",
        "logprob": "-1.5335085281878411",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 95
    },
    {
        "nl": "Which owner owns the most dogs ? List the owner id , first name and last name .",
        "true_sql": "select dogs.owner_id , owners.first_name , owners.last_name group_by dogs.owner_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [[0, 21, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 21, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.first_name",
            ",",
            "count",
            "(",
            "owners.*",
            ")",
            "group_by",
            "dogs.owner_id",
            "order_by",
            "count",
            "(",
            "owners.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 8, [46], 8, [9, 5, 89, 4], 10, 56, 11, [9, 5, 89, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7792750000953674, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.8988446593284607, 3), ('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.8906096155501092, 5), ('GROUP_COL', ('dogs', 'owner_id', 56), 0.9999858140945435, 7), ('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9096281466978332, 9), ('ORDER_DESC_ASC', (('owners', '*', 89), ('count', 3), False), 'desc', 0.9886720180511475, 10), ('ORDER_LIMIT', (('owners', '*', 89), ('count', 3), False), 'limit_value', 0.9988085031509399, 11)]",
        "logprob": "-1.24067597212366",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 96
    },
    {
        "nl": "Return the owner id , first name and last name of the owner who has the most dogs .",
        "true_sql": "select dogs.owner_id , owners.first_name , owners.last_name group_by dogs.owner_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [[0, 21, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 21, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "group_by",
            "dogs.owner_id",
            "order_by",
            "count",
            "(",
            "owners.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 8, [46], 8, [47], 10, 56, 11, [9, 5, 89, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7779780030250549, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.965837836265564, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9324459433555603, 5), ('GROUP_COL', ('dogs', 'owner_id', 56), 0.9999947547912598, 7), ('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9270113774256674, 9), ('ORDER_DESC_ASC', (('owners', '*', 89), ('count', 3), False), 'desc', 0.9976835250854492, 10), ('ORDER_LIMIT', (('owners', '*', 89), ('count', 3), False), 'limit_value', 0.9999397993087769, 11)]",
        "logprob": "-0.739114998033014",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 97
    },
    {
        "nl": "Which professionals have done at least two treatments ? List the professional 's id , role , and first name .",
        "true_sql": "select professionals.professional_id , professionals.role_code , professionals.first_name group_by professionals.professional_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.professional_id",
            ",",
            "professionals.first_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "treatments.professional_id",
            "having",
            "count",
            "(",
            "treatments.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [81], 8, [70], 8, [9, 5, 35, 4], 10, 81, 18, [9, 5, 92, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.421908438205719, 1), ('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9380156993865967, 3), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6747484249079203, 5), ('GROUP_COL', ('treatments', 'professional_id', 81), 0.9411163926124573, 7), ('HAV_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.8962014933846438, 9), ('HAV_OP_v2', (('treatments', '*', 92), ('count', 3), False), ('>=', 3), 0.9971416305303438, 10), ('HAV_ROOT_TERM_v2', (('treatments', '*', 92), ('count', 3), False), ('>=', 3), 'terminal', 0.9999872446060181, 11)]",
        "logprob": "-3.134573632139668",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 98
    },
    {
        "nl": "What are the id , role , and first name of the professionals who have performed two or more treatments ?",
        "true_sql": "select professionals.professional_id , professionals.role_code , professionals.first_name group_by professionals.professional_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.professional_id",
            ",",
            "professionals.first_name",
            ",",
            "professionals.last_name",
            "group_by",
            "treatments.professional_id",
            "having",
            "count",
            "(",
            "treatment_types.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [81], 8, [70], 8, [75], 10, 81, 18, [9, 5, 88, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.4499512314796448, 1), ('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9995419979095459, 3), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.4866459369659424, 5), ('GROUP_COL', ('treatments', 'professional_id', 81), 0.8022053241729736, 7), ('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.9708803105129507, 9), ('HAV_OP_v2', (('treatment_types', '*', 88), ('count', 3), False), ('>=', 3), 0.9950870458932027, 10), ('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('count', 3), False), ('>=', 3), 'terminal', 0.9999716281890869, 11)]",
        "logprob": "-1.9386010938191753",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 99
    },
    {
        "nl": "What is the name of the breed with the most dogs ?",
        "true_sql": "select breeds.breed_name group_by breeds.breed_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 5]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "breeds.breed_name",
            "group_by",
            "dogs.breed_code",
            "order_by",
            "count",
            "(",
            "dogs.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 58, 11, [9, 5, 90, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.8997538089752197, 1), ('GROUP_COL', ('dogs', 'breed_code', 58), 0.9882204532623291, 3), ('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9467931525349481, 5), ('ORDER_DESC_ASC', (('dogs', '*', 90), ('count', 3), False), 'desc', 0.9991632699966431, 6), ('ORDER_LIMIT', (('dogs', '*', 90), ('count', 3), False), 'limit_value', 0.9999643564224243, 7)]",
        "logprob": "-0.33998732733419473",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 100
    },
    {
        "nl": "Which breed do the most dogs have ? Give me the breed name .",
        "true_sql": "select breeds.breed_name group_by breeds.breed_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 5]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "breeds.breed_name",
            "group_by",
            "dogs.breed_code",
            "order_by",
            "count",
            "(",
            "dogs.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 58, 11, [9, 5, 90, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.7418335676193237, 1), ('GROUP_COL', ('dogs', 'breed_code', 58), 0.9520811438560486, 3), ('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.994401922685479, 5), ('ORDER_DESC_ASC', (('dogs', '*', 90), ('count', 3), False), 'desc', 0.9954752326011658, 6), ('ORDER_LIMIT', (('dogs', '*', 90), ('count', 3), False), 'limit_value', 0.9999662637710571, 7)]",
        "logprob": "-0.39001548220029375",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 101
    },
    {
        "nl": "Which owner has paid for the most treatments on his or her dogs ? List the owner id and last name .",
        "true_sql": "select owners.owner_id , owners.last_name group_by owners.owner_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.last_name",
            "group_by",
            "dogs.owner_id",
            "order_by",
            "count",
            "(",
            "treatments.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 8, [47], 10, 56, 11, [9, 5, 92, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.4754788875579834, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9943629503250122, 3), ('GROUP_COL', ('dogs', 'owner_id', 56), 0.9875839352607727, 5), ('ORDER_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9125286101613428, 7), ('ORDER_DESC_ASC', (('treatments', '*', 92), ('count', 3), False), 'desc', 0.9961720108985901, 8), ('ORDER_LIMIT', (('treatments', '*', 92), ('count', 3), False), 'limit_value', 0.9999579191207886, 9)]",
        "logprob": "-1.140274579498195",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 102
    },
    {
        "nl": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs .",
        "true_sql": "select owners.owner_id , owners.last_name group_by owners.owner_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.last_name",
            "group_by",
            "dogs.owner_id",
            "order_by",
            "count",
            "(",
            "treatments.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 8, [47], 10, 56, 11, [9, 5, 92, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7551766037940979, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9984468817710876, 3), ('GROUP_COL', ('dogs', 'owner_id', 56), 0.9978249073028564, 5), ('ORDER_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9949944657615807, 7), ('ORDER_DESC_ASC', (('treatments', '*', 92), ('count', 3), False), 'desc', 0.9744239449501038, 8), ('ORDER_LIMIT', (('treatments', '*', 92), ('count', 3), False), 'limit_value', 0.9999462366104126, 9)]",
        "logprob": "-1.0743319217954497",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 103
    },
    {
        "nl": "What is the description of the treatment type that costs the least money in total ?",
        "true_sql": "select treatment_types.treatment_type_description group_by treatment_types.treatment_type_code order_by sum ( treatments.cost_of_treatment ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [4, 49, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatment_types.treatment_type_description",
            "group_by",
            "treatment_types.treatment_type_description",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 44, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.9999380111694336, 1), ('GROUP_COL', ('treatment_types', 'treatment_type_description', 44), 0.9685613512992859, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.956676190818662, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9072269797325134, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998821020126343, 7)]",
        "logprob": "-0.3479884003109259",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 104
    },
    {
        "nl": "Give me the description of the treatment type whose total cost is the lowest .",
        "true_sql": "select treatment_types.treatment_type_description group_by treatment_types.treatment_type_code order_by sum ( treatments.cost_of_treatment ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [4, 49, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatment_types.treatment_type_description",
            ",",
            "treatment_types.treatment_type_code",
            "order_by",
            "treatment_types.*",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [43], 11, [88], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.9999986886978149, 1), ('SELECT_AGG_v2', ('treatment_types', 'treatment_type_code', 43), ('none_agg', 0), False, 0.9705483913421631, 3), ('ORDER_AGG_v2', ('treatment_types', '*', 88), ('none_agg', 0), False, 0.40993326902389526, 5), ('ORDER_DESC_ASC', (('treatment_types', '*', 88), ('none_agg', 0), False), 'asc', 0.5476766228675842, 6), ('ORDER_LIMIT', (('treatment_types', '*', 88), ('none_agg', 0), False), 'limit_value', 0.9985620379447937, 7)]",
        "logprob": "-2.282133768846643",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 105
    },
    {
        "nl": "Which owner has paid the largest amount of money in total for their dogs ? Show the owner id and zip code .",
        "true_sql": "select owners.owner_id , owners.zip_code group_by owners.owner_id order_by sum ( treatments.cost_of_treatment ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [4, 49, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 16, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.owner_id",
            ",",
            "sum",
            "(",
            "charges.charge_amount",
            ")",
            "group_by",
            "dogs.owner_id",
            "order_by",
            "sum",
            "(",
            "charges.charge_amount",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 8, [24, 5, 40, 4], 10, 56, 11, [24, 5, 40, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.881878137588501, 1), ('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9989994404713063, 3), ('GROUP_COL', ('dogs', 'owner_id', 56), 0.9860323667526245, 5), ('ORDER_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9982236414543934, 7), ('ORDER_DESC_ASC', (('charges', 'charge_amount', 40), ('sum', 4), False), 'desc', 0.9942535758018494, 8), ('ORDER_LIMIT', (('charges', 'charge_amount', 40), ('sum', 4), False), 'limit_value', 0.9995033740997314, 9)]",
        "logprob": "-0.2424455950071191",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 106
    },
    {
        "nl": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs .",
        "true_sql": "select owners.owner_id , owners.zip_code group_by owners.owner_id order_by sum ( treatments.cost_of_treatment ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [4, 49, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 16, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.zip_code",
            ",",
            "sum",
            "(",
            "owners.*",
            ")",
            "group_by",
            "dogs.owner_id",
            "order_by",
            "sum",
            "(",
            "owners.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 8, [51], 8, [24, 5, 89, 4], 10, 56, 11, [24, 5, 89, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7427526712417603, 1), ('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 0.9950627684593201, 3), ('SELECT_AGG_v2', ('owners', '*', 89), ('sum', 4), False, 0.888050015629308, 5), ('GROUP_COL', ('dogs', 'owner_id', 56), 0.9980314373970032, 7), ('ORDER_AGG_v2', ('owners', '*', 89), ('sum', 4), False, 0.8205849272827117, 9), ('ORDER_DESC_ASC', (('owners', '*', 89), ('sum', 4), False), 'desc', 0.9439834356307983, 10), ('ORDER_LIMIT', (('owners', '*', 89), ('sum', 4), False), 'limit_value', 0.9959480166435242, 11)]",
        "logprob": "-2.2783740452854637",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 107
    },
    {
        "nl": "Which professionals have done at least two types of treatments ? List the professional id and cell phone .",
        "true_sql": "select professionals.professional_id , professionals.cell_number group_by professionals.professional_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 43, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.professional_id",
            ",",
            "professionals.cell_number",
            "group_by",
            "treatments.treatment_id",
            "having",
            "count",
            "(",
            "treatment_types.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [81], 8, [78], 10, 79, 18, [9, 5, 88, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.4462500214576721, 1), ('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.5823145508766174, 3), ('GROUP_COL', ('treatments', 'treatment_id', 79), 0.3388366103172302, 5), ('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.979670157220732, 7), ('HAV_OP_v2', (('treatment_types', '*', 88), ('count', 3), False), ('>=', 3), 0.9994107008955349, 8), ('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('count', 3), False), ('>=', 3), 'terminal', 0.9999721050262451, 9)]",
        "logprob": "-2.5196424349118622",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 108
    },
    {
        "nl": "Find the id and cell phone of the professionals who operate two or more types of treatments .",
        "true_sql": "select professionals.professional_id , professionals.cell_number group_by professionals.professional_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 43, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.professional_id",
            ",",
            "professionals.home_phone",
            "group_by",
            "treatments.treatment_id",
            "having",
            "count",
            "(",
            "treatment_types.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [81], 8, [77], 10, 79, 18, [9, 5, 88, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.40879103541374207, 1), ('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.7070993781089783, 3), ('GROUP_COL', ('treatments', 'treatment_id', 79), 0.685408890247345, 5), ('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.9999793765162615, 7), ('HAV_OP_v2', (('treatment_types', '*', 88), ('count', 3), False), ('>=', 3), 0.9975970770251616, 8), ('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('count', 3), False), ('>=', 3), 'terminal', 0.9999830722808838, 9)]",
        "logprob": "-1.6310615494083394",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 109
    },
    {
        "nl": "What are the first name and last name of the professionals who have done treatment with cost below average ?",
        "true_sql": "select distinct professionals.first_name , professionals.last_name where treatments.cost_of_treatment < ( select avg ( treatments.cost_of_treatment ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 40, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 49, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 49, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.first_name",
            ",",
            "professionals.last_name",
            "where",
            "treatments.cost_of_treatment",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [75], 6, 84, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.999631404876709, 1), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.9966199398040771, 3), ('WHERE_COL', ('treatments', 'cost_of_treatment', 84), 0.9942330718040466, 5), ('WHERE_OP', (('treatments', 'cost_of_treatment', 84),), ('>', 1), 0.9965819716453552, 6), ('WHERE_ROOT_TERM', (('treatments', 'cost_of_treatment', 84),), ('>', 1), 'terminal', 0.6318475604057312, 7)]",
        "logprob": "-0.47920071311412316",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 110
    },
    {
        "nl": "Which professionals have operated a treatment that costs less than the average ? Give me theor first names and last names .",
        "true_sql": "select distinct professionals.first_name , professionals.last_name where treatments.cost_of_treatment < ( select avg ( treatments.cost_of_treatment ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 40, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 49, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 49, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.cost_of_treatment",
            ",",
            "professionals.last_name",
            "where",
            "professionals.first_name",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "professionals.last_name",
            ")",
            "where",
            "professionals.first_name",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [84], 8, [75], 6, 70, [21], 5, 2, [17, 5, 75, 4], 6, 70, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.6189349889755249, 1), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.9870287179946899, 3), ('WHERE_COL', ('professionals', 'first_name', 70), 0.8176671266555786, 5), ('WHERE_OP', (('professionals', 'first_name', 70),), ('<', 2), 0.9881436228752136, 6), ('WHERE_ROOT_TERM', (('professionals', 'first_name', 70),), ('<', 2), 'root', 0.9548419117927551, 7), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('avg', 5), False, 0.8297499017178019, 9), ('WHERE_COL', ('professionals', 'first_name', 70), 0.7343195080757141, 11), ('WHERE_OP', (('professionals', 'first_name', 70),), ('=', 0), 0.9998242259025574, 12), ('WHERE_ROOT_TERM', (('professionals', 'first_name', 70),), ('=', 0), 'terminal', 0.999985933303833, 13), ('O', '##END_NESTED##', 0.9959861636161804, 14)]",
        "logprob": "-1.8599930185469042",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 111
    },
    {
        "nl": "List the date of each treatment , together with the first name of the professional who operated it .",
        "true_sql": "select treatments.date_of_treatment , professionals.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 46, False], None], [0, 33, False], None]], 'table_units': [['table_unit', 7], ['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 48, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.date_of_treatment",
            ",",
            "owners.last_name",
            ",",
            "owners.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [83], 8, [47], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9999833106994629, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.6345487833023071, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9975287318229675, 5)]",
        "logprob": "-0.5158045875720746",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 112
    },
    {
        "nl": "What are the date and the operating professional 's first name of each treatment ?",
        "true_sql": "select treatments.date_of_treatment , professionals.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 46, False], None], [0, 33, False], None]], 'table_units': [['table_unit', 7], ['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 48, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.date_of_treatment",
            ",",
            "professionals.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [83], 8, [75], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9997782111167908, 1), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.7281056046485901, 3)]",
        "logprob": "-0.34821037198282057",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 113
    },
    {
        "nl": "List the cost of each treatment and the corresponding treatment type description .",
        "true_sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 47, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 7], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 49, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.cost_of_treatment",
            ",",
            "treatment_types.treatment_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [84], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.8880085349082947, 1), ('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.7154087424278259, 3)]",
        "logprob": "-0.8006745081810169",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 114
    },
    {
        "nl": "What are the cost and treatment type description of each treatment ?",
        "true_sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 47, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 7], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 49, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "treatments.treatment_type_code",
            ",",
            "treatment_types.treatment_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [82], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'treatment_type_code', 82), ('none_agg', 0), False, 0.5272490382194519, 1), ('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.820152759552002, 3)]",
        "logprob": "-0.8965690520027951",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 115
    },
    {
        "nl": "List each owner 's first name , last name , and the size of his for her dog .",
        "true_sql": "select owners.first_name , owners.last_name , dogs.size_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "owners.first_name",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "where",
            "owners.first_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [46], 8, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9232169985771179, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9372178912162781, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9210454821586609, 5), ('WHERE_COL', ('owners', 'first_name', 46), 0.9927532076835632, 7), ('WHERE_OP', (('owners', 'first_name', 46),), ('=', 0), 0.9999898672103882, 8), ('WHERE_ROOT_TERM', (('owners', 'first_name', 46),), ('=', 0), 'terminal', 0.9999940395355225, 9)]",
        "logprob": "-0.2496034513142491",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 116
    },
    {
        "nl": "What are each owner 's first name , last name , and the size of their dog ?",
        "true_sql": "select owners.first_name , owners.last_name , dogs.size_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "owners.first_name",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9801310896873474, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.8748235702514648, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9149361848831177, 5)]",
        "logprob": "-0.26311620952200493",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 117
    },
    {
        "nl": "List pairs of the owner 's first name and the dogs 's name .",
        "true_sql": "select owners.first_name , dogs.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "owners.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9996474981307983, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9783532023429871, 3)]",
        "logprob": "-0.027674835125642862",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 118
    },
    {
        "nl": "What are each owner 's first name and their dogs 's name ?",
        "true_sql": "select owners.first_name , dogs.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "owners.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9876211285591125, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9834643602371216, 3)]",
        "logprob": "-0.032857869567648745",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 119
    },
    {
        "nl": "List the names of the dogs of the rarest breed and the treatment dates of them .",
        "true_sql": "select dogs.name , treatments.date_of_treatment where dogs.breed_code = ( select dogs.breed_code group_by dogs.breed_code order_by count ( dogs.* ) asc limit_value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 48, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'order_by': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "treatments.date_of_treatment",
            "order_by",
            "treatments.date_of_treatment",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [83], 11, [83], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9903136491775513, 1), ('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9563726782798767, 3), ('ORDER_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.2718072533607483, 5), ('ORDER_LIMIT', (('treatments', 'date_of_treatment', 83), ('none_agg', 0), False), 'limit_value', 0.7644011974334717, 6)]",
        "logprob": "-2.024870249364632",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 120
    },
    {
        "nl": "Which dogs are of the rarest breed ? Show their names and treatment dates .",
        "true_sql": "select dogs.name , treatments.date_of_treatment where dogs.breed_code = ( select dogs.breed_code group_by dogs.breed_code order_by count ( dogs.* ) asc limit_value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 48, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'order_by': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "treatments.date_of_treatment",
            "group_by",
            "treatments.treatment_id",
            "order_by",
            "count",
            "(",
            "treatment_types.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [83], 10, 79, 11, [9, 5, 88, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9966251850128174, 1), ('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9813050627708435, 3), ('GROUP_COL', ('treatments', 'treatment_id', 79), 0.8046896457672119, 5), ('ORDER_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.8557809794591987, 7), ('ORDER_DESC_ASC', (('treatment_types', '*', 88), ('count', 3), False), 'asc', 0.5895146727561951, 8), ('ORDER_LIMIT', (('treatment_types', '*', 88), ('count', 3), False), 'limit_value', 0.9995086193084717, 9)]",
        "logprob": "-2.0568226560916787",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 121
    },
    {
        "nl": "Which dogs are owned by someone who lives in Virginia ? List the owner 's first name and the dog 's name .",
        "true_sql": "select owners.first_name , dogs.name where owners.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"Virginia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "owners.last_name",
            "where",
            "owners.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [47], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.996392548084259, 3), ('WHERE_COL', ('owners', 'state', 50), 0.8964055776596069, 5), ('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999896287918091, 6), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999994039535522, 7)]",
        "logprob": "-0.11320024087745657",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 122
    },
    {
        "nl": "Find the first names of owners living in Virginia and the names of dogs they own .",
        "true_sql": "select owners.first_name , dogs.name where owners.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"Virginia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "owners.first_name",
            ",",
            "owners.last_name",
            "where",
            "owners.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9941583871841431, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9999139308929443, 3), ('WHERE_COL', ('owners', 'state', 50), 0.9988541603088379, 5), ('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999947547912598, 6), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999994039535522, 7)]",
        "logprob": "-0.007290040902182569",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 123
    },
    {
        "nl": "What are the arriving date and the departing date of the dogs who have gone through a treatment ?",
        "true_sql": "select distinct dogs.date_arrived , dogs.date_departed",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            "where",
            "treatments.date_of_treatment",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [65], 8, [67], 6, 83, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.9914440512657166, 1), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.5096889138221741, 3), ('WHERE_COL', ('treatments', 'date_of_treatment', 83), 0.8979354500770569, 5), ('WHERE_OP', (('treatments', 'date_of_treatment', 83),), ('=', 0), 0.9724947214126587, 6), ('WHERE_ROOT_TERM', (('treatments', 'date_of_treatment', 83),), ('=', 0), 'terminal', 0.9999978542327881, 7)]",
        "logprob": "-0.8355333445883865",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 124
    },
    {
        "nl": "Find the arriving date and the departing date of the dogs that received a treatment .",
        "true_sql": "select distinct dogs.date_arrived , dogs.date_departed",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            "_EOS"
        ],
        "dec_seq": "[2, [65], 8, [67], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.9992842078208923, 1), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9212190508842468, 3)]",
        "logprob": "-0.10209459015749889",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 125
    },
    {
        "nl": "List the last name of the owner owning the youngest dog .",
        "true_sql": "select owners.last_name where dogs.age = ( select max ( dogs.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 26, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 26, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "owners.last_name",
            "order_by",
            "dogs.age",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 11, [61], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.6627684235572815, 1), ('ORDER_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.9999995231628418, 3), ('ORDER_LIMIT', (('dogs', 'age', 61), ('none_agg', 0), False), 'limit_value', 0.8250263333320618, 4)]",
        "logprob": "-0.6417986663132291",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 126
    },
    {
        "nl": "Who owns the youngest dog ? Give me his or her last name .",
        "true_sql": "select owners.last_name where dogs.age = ( select max ( dogs.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 26, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 26, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            "where",
            "owners.first_name",
            "=",
            "value",
            "or",
            "dogs.age",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dogs.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 6, 46, [7], 3, 25, 61, [7], 5, 2, [19, 5, 61, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9774166345596313, 1), ('WHERE_COL', ('owners', 'first_name', 46), 0.8311192393302917, 3), ('WHERE_OP', (('owners', 'first_name', 46),), ('=', 0), 0.9998784065246582, 4), ('WHERE_ROOT_TERM', (('owners', 'first_name', 46),), ('=', 0), 'terminal', 0.9990319013595581, 5), ('WHERE_COL', ('dogs', 'age', 61), 0.5483097434043884, 7), ('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 0.9958034157752991, 8), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('=', 0), 'root', 0.9997609257698059, 9), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.9933053918256272, 11), ('O', '##END_NESTED##', 0.9393967390060425, 12)]",
        "logprob": "-1.0248385387599808",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 127
    },
    {
        "nl": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin .",
        "true_sql": "select professionals.email_address where professionals.state = value or professionals.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 41, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], '\"Hawaii\"', None], 'or', [False, 2, [0, [0, 38, False], None], '\"Wisconsin\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.email_address",
            "where",
            "professionals.state",
            "=",
            "value",
            "or",
            "owners.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 6, 73, [7], 3, 25, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9977783560752869, 1), ('WHERE_COL', ('professionals', 'state', 73), 0.9744322896003723, 3), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9997019171714783, 4), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999971389770508, 5), ('WHERE_COL', ('owners', 'state', 50), 0.9025849103927612, 7), ('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999716281890869, 8), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999980926513672, 9)]",
        "logprob": "-0.507507898616345",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 128
    },
    {
        "nl": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin ?",
        "true_sql": "select professionals.email_address where professionals.state = value or professionals.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 41, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], '\"Hawaii\"', None], 'or', [False, 2, [0, [0, 38, False], None], '\"Wisconsin\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.email_address",
            "where",
            "professionals.state",
            "=",
            "value",
            "union",
            "select",
            "professionals.email_address",
            "where",
            "professionals.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 6, 73, [7], 3, 31, 2, [76], 6, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9944612979888916, 1), ('WHERE_COL', ('professionals', 'state', 73), 0.860262930393219, 3), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9996800422668457, 4), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999948740005493, 5), ('IUEN_v2', ('union', 2), 0.6646212339401245, 6), ('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9129119515419006, 8), ('WHERE_COL', ('professionals', 'state', 73), 0.5304317474365234, 10), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999978542327881, 11), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.999998927116394, 12)]",
        "logprob": "-1.362473110650164",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 129
    },
    {
        "nl": "What are the arriving date and the departing date of all the dogs ?",
        "true_sql": "select dogs.date_arrived , dogs.date_departed",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            ",",
            "dogs.date_departed",
            "_EOS"
        ],
        "dec_seq": "[2, [65], 8, [67], 8, [67], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.999995231628418, 1), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9999034404754639, 3), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9996179342269897, 5)]",
        "logprob": "-0.44394939601510897",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 130
    },
    {
        "nl": "List the arrival date and the departure date for all the dogs .",
        "true_sql": "select dogs.date_arrived , dogs.date_departed",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            ",",
            "dogs.date_departed",
            "_EOS"
        ],
        "dec_seq": "[2, [65], 8, [67], 8, [67], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.99970942735672, 1), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9818530678749084, 3), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9998800754547119, 5)]",
        "logprob": "-0.23294086572083375",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 131
    },
    {
        "nl": "How many dogs went through any treatments ?",
        "true_sql": "select count ( distinct treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 45, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "treatments.*",
            ")",
            "where",
            "dogs.abandoned_yn",
            "not",
            "in",
            "(",
            "select",
            "treatments.treatment_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 92, 4], 6, 57, [22, 20], 5, 2, [79], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9951325640638652, 1), ('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.8512255549430847, 3), ('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('not in', 7), 0.9994362886409273, 4), ('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('not in', 7), 'root', 0.9999679327011108, 5), ('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.7350055575370789, 7), ('O', '##END_NESTED##', 0.9997085928916931, 8)]",
        "logprob": "-0.50030995615759",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 132
    },
    {
        "nl": "Count the number of dogs that went through a treatment .",
        "true_sql": "select count ( distinct treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 45, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "treatments.treatment_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 79, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('count', 3), True, 0.8846540220794952, 1)]",
        "logprob": "-0.6160104937195675",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 133
    },
    {
        "nl": "How many professionals have performed any treatment to dogs ?",
        "true_sql": "select count ( distinct treatments.professional_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 46, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "treatments.*",
            ")",
            "where",
            "professionals.professional_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.dog_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 92, 4], 6, 68, [22, 20], 5, 2, [55], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9403705994603271, 1), ('WHERE_COL', ('professionals', 'professional_id', 68), 0.6866823434829712, 3), ('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9966074271163821, 4), ('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999767541885376, 5), ('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.9463057518005371, 7), ('O', '##END_NESTED##', 0.9995962977409363, 8)]",
        "logprob": "-0.7760626385394765",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 134
    },
    {
        "nl": "Find the number of professionals who have ever treated dogs .",
        "true_sql": "select count ( distinct treatments.professional_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 46, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "professionals.professional_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 68, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('count', 3), True, 0.854017095263882, 1)]",
        "logprob": "-0.8469639967401772",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 135
    },
    {
        "nl": "Which professionals live in a city containing the substring 'West ' ? List his or her role , street , city and state .",
        "true_sql": "select professionals.role_code , professionals.street , professionals.city , professionals.state where professionals.city like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 38, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 37, False], None], '\"%West%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.street",
            ",",
            "professionals.city",
            "where",
            "professionals.state",
            "=",
            "value",
            "or",
            "owners.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [71], 8, [72], 6, 73, [7], 3, 25, 49, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.6276783347129822, 1), ('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.6011496186256409, 3), ('WHERE_COL', ('professionals', 'state', 73), 0.44774895906448364, 5), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9996163845062256, 6), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999990463256836, 7), ('WHERE_COL', ('owners', 'city', 49), 0.3819676339626312, 9), ('WHERE_OP', (('owners', 'city', 49),), ('=', 0), 0.999567449092865, 10), ('WHERE_ROOT_TERM', (('owners', 'city', 49),), ('=', 0), 'terminal', 0.9999970197677612, 11)]",
        "logprob": "-2.9280293170673257",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 136
    },
    {
        "nl": "Find the role , street , city and state of the professionals living in a city that contains the substring 'West ' .",
        "true_sql": "select professionals.role_code , professionals.street , professionals.city , professionals.state where professionals.city like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 38, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 37, False], None], '\"%West%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.street",
            ",",
            "professionals.city",
            ",",
            "owners.city",
            "where",
            "professionals.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [71], 8, [72], 8, [49], 6, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.9736959934234619, 1), ('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.897678792476654, 3), ('SELECT_AGG_v2', ('owners', 'city', 49), ('none_agg', 0), False, 0.8527439832687378, 5), ('WHERE_COL', ('professionals', 'state', 73), 0.8607969880104065, 7), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9997937083244324, 8), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999990463256836, 9)]",
        "logprob": "-0.5031073117235437",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 137
    },
    {
        "nl": "Which owners live in the state whose name contains the substring 'North ' ? List his first name , last name and email .",
        "true_sql": "select owners.first_name , owners.last_name , owners.email_address where owners.state like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 15, False], None], '\"%North%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "owners.last_name",
            ",",
            "owners.last_name",
            "where",
            "owners.state",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [47], 6, 50, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.7422950863838196, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9575163125991821, 3), ('WHERE_COL', ('owners', 'state', 50), 0.5449410676956177, 5), ('WHERE_OP', (('owners', 'state', 50),), ('like', 6), 0.9991223216056824, 6), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('like', 6), 'terminal', 0.9999982118606567, 7)]",
        "logprob": "-0.9761081375565835",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 138
    },
    {
        "nl": "Return the first name , last name and email of the owners living in a state whose name contains the substring 'North ' .",
        "true_sql": "select owners.first_name , owners.last_name , owners.email_address where owners.state like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 15, False], None], '\"%North%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "owners.last_name",
            ",",
            "owners.last_name",
            "where",
            "owners.state",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [47], 8, [47], 6, 50, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.5847743153572083, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9749196171760559, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.7034600377082825, 5), ('WHERE_COL', ('owners', 'state', 50), 0.9936233162879944, 7), ('WHERE_OP', (('owners', 'state', 50),), ('like', 6), 0.9972715973854065, 8), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('like', 6), 'terminal', 0.999995231628418, 9)]",
        "logprob": "-0.9759939778924812",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 139
    },
    {
        "nl": "How many dogs have an age below the average ?",
        "true_sql": "select count ( dogs.* ) where dogs.age < ( select avg ( dogs.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 26, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "dogs.*",
            ")",
            "where",
            "dogs.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 90, 4], 6, 61, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9347292673249068, 1), ('WHERE_COL', ('dogs', 'age', 61), 0.9999359846115112, 3), ('WHERE_OP', (('dogs', 'age', 61),), ('>', 1), 0.9993158578872681, 4), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('>', 1), 'terminal', 0.7377246022224426, 5)]",
        "logprob": "-0.5815332307614086",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 140
    },
    {
        "nl": "Count the number of dogs of an age below the average .",
        "true_sql": "select count ( dogs.* ) where dogs.age < ( select avg ( dogs.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 26, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "dogs.*",
            ")",
            "where",
            "dogs.age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 90, 4], 6, 61, [14], 5, 2, [17, 5, 61, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.949699361403825, 1), ('WHERE_COL', ('dogs', 'age', 61), 0.9999995231628418, 3), ('WHERE_OP', (('dogs', 'age', 61),), ('>', 1), 0.9994447827339172, 4), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('>', 1), 'root', 0.5583295822143555, 5), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9956233748067945, 7), ('O', '##END_NESTED##', 0.9999097585678101, 8)]",
        "logprob": "-0.8267396154023215",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 141
    },
    {
        "nl": "How much does the most recent treatment cost ?",
        "true_sql": "select treatments.cost_of_treatment order_by treatments.date_of_treatment desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 48, False], None]]], 'select': [False, [[0, [0, [0, 49, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "treatments.cost_of_treatment",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 84, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('sum', 4), False, 0.825531744334821, 1)]",
        "logprob": "-0.7876481206916734",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 142
    },
    {
        "nl": "Show me the cost of the most recently performed treatment .",
        "true_sql": "select treatments.cost_of_treatment order_by treatments.date_of_treatment desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 48, False], None]]], 'select': [False, [[0, [0, [0, 49, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "treatments.cost_of_treatment",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 84, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('max', 1), False, 0.9613029849273699, 1)]",
        "logprob": "-0.16013446174934712",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 143
    },
    {
        "nl": "How many dogs have not gone through any treatment ?",
        "true_sql": "select count ( dogs.* ) where dogs.dog_id not in ( select treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "dogs.*",
            ")",
            "where",
            "treatments.treatment_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.dog_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 90, 4], 6, 79, [22, 20], 5, 2, [55], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.8484731065191006, 1), ('WHERE_COL', ('treatments', 'treatment_id', 79), 0.4722249209880829, 3), ('WHERE_OP', (('treatments', 'treatment_id', 79),), ('not in', 7), 0.9998081602518494, 4), ('WHERE_ROOT_TERM', (('treatments', 'treatment_id', 79),), ('not in', 7), 'root', 0.9999657869338989, 5), ('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.6057459712028503, 7), ('O', '##END_NESTED##', 0.9999059438705444, 8)]",
        "logprob": "-1.9104746316934398",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 144
    },
    {
        "nl": "Tell me the number of dogs that have received any treatment .",
        "true_sql": "select count ( dogs.* ) where dogs.dog_id not in ( select treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "dogs.*",
            ")",
            "where",
            "dogs.abandoned_yn",
            "not",
            "in",
            "(",
            "select",
            "treatments.treatment_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 90, 4], 6, 57, [22, 20], 5, 2, [79], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.8967639700627335, 1), ('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.977425217628479, 3), ('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('not in', 7), 0.9552200059090026, 4), ('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('not in', 7), 'root', 0.9999773502349854, 5), ('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.6796671152114868, 7), ('O', '##END_NESTED##', 0.9993703961372375, 8)]",
        "logprob": "-1.0657396021859207",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 145
    },
    {
        "nl": "How many owners temporarily do not have any dogs ?",
        "true_sql": "select count ( owners.* ) where owners.owner_id not in ( select dogs.owner_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 10, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 21, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'owners.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "owners.*",
            ")",
            "where",
            "owners.owner_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.owner_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 89, 4], 6, 45, [22, 20], 5, 2, [56], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.941424559008926, 1), ('WHERE_COL', ('owners', 'owner_id', 45), 0.9333003163337708, 3), ('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.9998801032702851, 4), ('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('not in', 7), 'root', 0.999953031539917, 5), ('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.9654662609100342, 7), ('O', '##END_NESTED##', 0.9974798560142517, 8)]",
        "logprob": "-0.35000870278587626",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 146
    },
    {
        "nl": "Find the number of owners who do not own any dogs at this moment .",
        "true_sql": "select count ( owners.* ) where owners.owner_id not in ( select dogs.owner_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 10, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 21, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'owners.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "owners.*",
            ")",
            "where",
            "owners.owner_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.owner_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 89, 4], 6, 45, [22, 20], 5, 2, [56], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9923661274347672, 1), ('WHERE_COL', ('owners', 'owner_id', 45), 0.9897331595420837, 3), ('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.999849464527983, 4), ('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('not in', 7), 'root', 0.999975323677063, 5), ('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.9977779984474182, 7), ('O', '##END_NESTED##', 0.9995396137237549, 8)]",
        "logprob": "-0.04493528587238793",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 147
    },
    {
        "nl": "How many professionals did not operate any treatment on dogs ?",
        "true_sql": "select count ( professionals.* ) where professionals.professional_id not in ( select treatments.professional_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 33, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'professionals.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "treatments.*",
            ")",
            "where",
            "professionals.professional_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.dog_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 92, 4], 6, 68, [22, 20], 5, 2, [55], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.8730716423773298, 1), ('WHERE_COL', ('professionals', 'professional_id', 68), 0.7517887353897095, 3), ('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9998207938656744, 4), ('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999606609344482, 5), ('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.7875672578811646, 7), ('O', '##END_NESTED##', 0.9998360872268677, 8)]",
        "logprob": "-1.0696695101723859",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 148
    },
    {
        "nl": "Find the number of professionals who have not treated any dogs .",
        "true_sql": "select count ( professionals.* ) where professionals.professional_id not in ( select treatments.professional_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 33, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'professionals.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "professionals.*",
            ")",
            "where",
            "professionals.professional_id",
            "not",
            "in",
            "(",
            "select",
            "treatments.professional_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 91, 4], 6, 68, [22, 20], 5, 2, [81], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', '*', 91), ('count', 3), False, 0.9527059575214537, 1), ('WHERE_COL', ('professionals', 'professional_id', 68), 0.830245316028595, 3), ('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9998300917375613, 4), ('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999537467956543, 5), ('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.694108247756958, 7), ('O', '##END_NESTED##', 0.9998612403869629, 8)]",
        "logprob": "-0.749715568801766",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 149
    },
    {
        "nl": "List the dog name , age and weight of the dogs who have been abandoned ? 1 stands for yes , and 0 stands for no .",
        "true_sql": "select dogs.name , dogs.age , dogs.weight where dogs.abandoned_yn = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]], [0, [0, [0, 29, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "dogs.abandoned_yn",
            ",",
            "dogs.age",
            "where",
            "dogs.abandoned_yn",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [57], 8, [61], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.999995231628418, 1), ('SELECT_AGG_v2', ('dogs', 'abandoned_yn', 57), ('none_agg', 0), False, 0.915351390838623, 3), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.7113527059555054, 5), ('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.9999649524688721, 7), ('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('=', 0), 0.9998565912246704, 8), ('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('=', 0), 'terminal', 0.9999986886978149, 9)]",
        "logprob": "-0.4305866070500423",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 150
    },
    {
        "nl": "What are the dog name , age and weight of the dogs that were abandoned ? Note that 1 stands for yes , and 0 stands for no in the tables .",
        "true_sql": "select dogs.name , dogs.age , dogs.weight where dogs.abandoned_yn = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]], [0, [0, [0, 29, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "dogs.abandoned_yn",
            ",",
            "dogs.weight",
            "where",
            "dogs.abandoned_yn",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [57], 8, [64], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999972581863403, 1), ('SELECT_AGG_v2', ('dogs', 'abandoned_yn', 57), ('none_agg', 0), False, 0.47624704241752625, 3), ('SELECT_AGG_v2', ('dogs', 'weight', 64), ('none_agg', 0), False, 0.5275472402572632, 5), ('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.9998531341552734, 7), ('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('=', 0), 0.9697611927986145, 8), ('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('=', 0), 'terminal', 0.9999986886978149, 9)]",
        "logprob": "-1.4134884802557446",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 151
    },
    {
        "nl": "What is the average age of all the dogs ?",
        "true_sql": "select avg ( dogs.age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "dogs.weight",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 64, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'weight', 64), ('avg', 5), False, 0.8852604361633761, 1)]",
        "logprob": "-0.487513623820479",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 152
    },
    {
        "nl": "Compute the average age of all the dogs .",
        "true_sql": "select avg ( dogs.age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 61, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9826783304976768, 1)]",
        "logprob": "-0.06990927669266425",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 153
    },
    {
        "nl": "What is the age of the oldest dog ?",
        "true_sql": "select max ( dogs.age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "dogs.weight",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 64, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'weight', 64), ('max', 1), False, 0.8123914095306569, 1)]",
        "logprob": "-0.8361192478287651",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 154
    },
    {
        "nl": "Tell me the age of the oldest dog .",
        "true_sql": "select max ( dogs.age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "dogs.age",
            "where",
            "dogs.age",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dogs.weight",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [61], 6, 61, [7], 5, 2, [19, 5, 64, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.9849527478218079, 1), ('WHERE_COL', ('dogs', 'age', 61), 0.9706817269325256, 3), ('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 0.999941349029541, 4), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('=', 0), 'root', 0.9999971389770508, 5), ('SELECT_AGG_v2', ('dogs', 'weight', 64), ('max', 1), False, 0.9969913887608114, 7), ('O', '##END_NESTED##', 0.9999802112579346, 8)]",
        "logprob": "-0.40524686508729124",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 155
    },
    {
        "nl": "How much does each charge type costs ? List both charge type and amount .",
        "true_sql": "select charges.charge_type , charges.charge_amount",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "charges.charge_type",
            ",",
            "sum",
            "(",
            "charges.charge_amount",
            ")",
            "group_by",
            "charges.charge_type",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [24, 5, 40, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 0.9999969005584717, 1), ('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9441597802908518, 3), ('GROUP_COL', ('charges', 'charge_type', 39), 1.0, 5)]",
        "logprob": "-0.3330132676575389",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 156
    },
    {
        "nl": "List each charge type and its amount .",
        "true_sql": "select charges.charge_type , charges.charge_amount",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "charges.charge_type",
            ",",
            "charges.charge_amount",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.9081186652183533, 3)]",
        "logprob": "-0.13425460985903967",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 157
    },
    {
        "nl": "How much does the most expensive charge type costs ?",
        "true_sql": "select max ( charges.charge_amount )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "charges.charge_amount",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 40, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.952553792035349, 1)]",
        "logprob": "-0.21226268883680535",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 158
    },
    {
        "nl": "What is the charge amount of the most expensive charge type ?",
        "true_sql": "select max ( charges.charge_amount )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "charges.charge_type",
            "where",
            "charges.charge_amount",
            "=",
            "(",
            "select",
            "max",
            "(",
            "charges.charge_amount",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 40, [7], 5, 2, [19, 5, 40, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 0.9525675773620605, 1), ('WHERE_COL', ('charges', 'charge_amount', 40), 0.9986664056777954, 3), ('WHERE_OP', (('charges', 'charge_amount', 40),), ('=', 0), 0.999263346195221, 4), ('WHERE_ROOT_TERM', (('charges', 'charge_amount', 40),), ('=', 0), 'root', 0.9999711513519287, 5), ('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('max', 1), False, 0.9984593681640425, 7), ('O', '##END_NESTED##', 0.9999395608901978, 8)]",
        "logprob": "-0.28433220197742093",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 159
    },
    {
        "nl": "List the email , cell phone and home phone of all the professionals .",
        "true_sql": "select professionals.email_address , professionals.cell_number , professionals.home_phone",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 41, False], None]], [0, [0, [0, 43, False], None]], [0, [0, [0, 42, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.email_address",
            ",",
            "professionals.home_phone",
            ",",
            "owners.home_phone",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 8, [77], 8, [53], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9987024068832397, 1), ('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.7612213492393494, 3), ('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.7319141626358032, 5)]",
        "logprob": "-0.5870647985552289",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 160
    },
    {
        "nl": "What are the email , cell phone and home phone of each professional ?",
        "true_sql": "select professionals.email_address , professionals.cell_number , professionals.home_phone",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 41, False], None]], [0, [0, [0, 43, False], None]], [0, [0, [0, 42, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.email_address",
            ",",
            "owners.home_phone",
            ",",
            "owners.home_phone",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 8, [53], 8, [53], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9378561973571777, 1), ('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.9586955308914185, 3), ('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.9670546054840088, 5)]",
        "logprob": "-0.14179505089174693",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 161
    },
    {
        "nl": "What are all the possible breed type and size type combinations ?",
        "true_sql": "select distinct dogs.breed_code , dogs.size_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]], [0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "breeds.breed_name",
            ",",
            "sizes.size_description",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 8, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.8495317101478577, 2), ('SELECT_AGG_v2', ('sizes', 'size_description', 42), ('none_agg', 0), False, 0.9649521708488464, 4)]",
        "logprob": "-0.1997716911884257",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 162
    },
    {
        "nl": "Find the distinct breed type and size type combinations for dogs .",
        "true_sql": "select distinct dogs.breed_code , dogs.size_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]], [0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "breeds.breed_name",
            ",",
            "sizes.size_description",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 8, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.5066496729850769, 2), ('SELECT_AGG_v2', ('sizes', 'size_description', 42), ('none_agg', 0), False, 0.7909803986549377, 4)]",
        "logprob": "-0.9149784233437276",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 163
    },
    {
        "nl": "List the first name of all the professionals along with the description of the treatment they have done .",
        "true_sql": "select distinct professionals.first_name , treatment_types.treatment_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.first_name",
            ",",
            "professionals.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [75], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9999991655349731, 1), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.8231756687164307, 3)]",
        "logprob": "-0.19696900400630893",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 164
    },
    {
        "nl": "What are each professional 's first name and description of the treatment they have performed ?",
        "true_sql": "select distinct professionals.first_name , treatment_types.treatment_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "professionals.first_name",
            ",",
            "professionals.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [75], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9990735054016113, 1), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.9035765528678894, 3)]",
        "logprob": "-0.10284542397472765",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 165
    },
    {
        "nl": "How many available features are there in total ?",
        "true_sql": "select count ( other_available_features.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'other_available_features.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_feature_types.feature_type_code': 1, 'ref_feature_types.feature_type_name': 2, 'ref_property_types.property_type_code': 3, 'ref_property_types.property_type_description': 4, 'other_available_features.feature_id': 5, 'other_available_features.feature_type_code': 6, 'other_available_features.feature_name': 7, 'other_available_features.feature_description': 8, 'properties.property_id': 9, 'properties.property_type_code': 10, 'properties.date_on_market': 11, 'properties.date_sold': 12, 'properties.property_name': 13, 'properties.property_address': 14, 'properties.room_count': 15, 'properties.vendor_requested_price': 16, 'properties.buyer_offered_price': 17, 'properties.agreed_selling_price': 18, 'properties.apt_feature_1': 19, 'properties.apt_feature_2': 20, 'properties.apt_feature_3': 21, 'properties.fld_feature_1': 22, 'properties.fld_feature_2': 23, 'properties.fld_feature_3': 24, 'properties.hse_feature_1': 25, 'properties.hse_feature_2': 26, 'properties.hse_feature_3': 27, 'properties.oth_feature_1': 28, 'properties.oth_feature_2': 29, 'properties.oth_feature_3': 30, 'properties.shp_feature_1': 31, 'properties.shp_feature_2': 32, 'properties.shp_feature_3': 33, 'properties.other_property_details': 34, 'other_property_features.property_id': 35, 'other_property_features.feature_id': 36, 'other_property_features.property_feature_description': 37, 'ref_feature_types.*': 38, 'ref_property_types.*': 39, 'other_available_features.*': 40, 'properties.*': 41, 'other_property_features.*': 42}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "other_available_features.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 75, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('other_available_features', '*', 75), ('count', 3), False, 0.9943029626629701, 1)]",
        "logprob": "-0.022979440796934987",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 166
    },
    {
        "nl": "What is the feature type name of feature AirCon ?",
        "true_sql": "select ref_feature_types.feature_type_name where other_available_features.feature_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"AirCon\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_feature_types.feature_type_code': 1, 'ref_feature_types.feature_type_name': 2, 'ref_property_types.property_type_code': 3, 'ref_property_types.property_type_description': 4, 'other_available_features.feature_id': 5, 'other_available_features.feature_type_code': 6, 'other_available_features.feature_name': 7, 'other_available_features.feature_description': 8, 'properties.property_id': 9, 'properties.property_type_code': 10, 'properties.date_on_market': 11, 'properties.date_sold': 12, 'properties.property_name': 13, 'properties.property_address': 14, 'properties.room_count': 15, 'properties.vendor_requested_price': 16, 'properties.buyer_offered_price': 17, 'properties.agreed_selling_price': 18, 'properties.apt_feature_1': 19, 'properties.apt_feature_2': 20, 'properties.apt_feature_3': 21, 'properties.fld_feature_1': 22, 'properties.fld_feature_2': 23, 'properties.fld_feature_3': 24, 'properties.hse_feature_1': 25, 'properties.hse_feature_2': 26, 'properties.hse_feature_3': 27, 'properties.oth_feature_1': 28, 'properties.oth_feature_2': 29, 'properties.oth_feature_3': 30, 'properties.shp_feature_1': 31, 'properties.shp_feature_2': 32, 'properties.shp_feature_3': 33, 'properties.other_property_details': 34, 'other_property_features.property_id': 35, 'other_property_features.feature_id': 36, 'other_property_features.property_feature_description': 37, 'ref_feature_types.*': 38, 'ref_property_types.*': 39, 'other_available_features.*': 40, 'properties.*': 41, 'other_property_features.*': 42}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "ref_feature_types.feature_type_name",
            "where",
            "other_available_features.feature_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 41, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_feature_types', 'feature_type_name', 37), ('none_agg', 0), False, 0.9995446801185608, 1), ('WHERE_COL', ('other_available_features', 'feature_type_code', 41), 0.9017761945724487, 3), ('WHERE_OP', (('other_available_features', 'feature_type_code', 41),), ('=', 0), 0.9999984502792358, 4), ('WHERE_ROOT_TERM', (('other_available_features', 'feature_type_code', 41),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.10388832354792002",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 167
    },
    {
        "nl": "Show the property type descriptions of properties belonging to that code .",
        "true_sql": "select ref_property_types.property_type_description group_by properties.property_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_feature_types.feature_type_code': 1, 'ref_feature_types.feature_type_name': 2, 'ref_property_types.property_type_code': 3, 'ref_property_types.property_type_description': 4, 'other_available_features.feature_id': 5, 'other_available_features.feature_type_code': 6, 'other_available_features.feature_name': 7, 'other_available_features.feature_description': 8, 'properties.property_id': 9, 'properties.property_type_code': 10, 'properties.date_on_market': 11, 'properties.date_sold': 12, 'properties.property_name': 13, 'properties.property_address': 14, 'properties.room_count': 15, 'properties.vendor_requested_price': 16, 'properties.buyer_offered_price': 17, 'properties.agreed_selling_price': 18, 'properties.apt_feature_1': 19, 'properties.apt_feature_2': 20, 'properties.apt_feature_3': 21, 'properties.fld_feature_1': 22, 'properties.fld_feature_2': 23, 'properties.fld_feature_3': 24, 'properties.hse_feature_1': 25, 'properties.hse_feature_2': 26, 'properties.hse_feature_3': 27, 'properties.oth_feature_1': 28, 'properties.oth_feature_2': 29, 'properties.oth_feature_3': 30, 'properties.shp_feature_1': 31, 'properties.shp_feature_2': 32, 'properties.shp_feature_3': 33, 'properties.other_property_details': 34, 'other_property_features.property_id': 35, 'other_property_features.feature_id': 36, 'other_property_features.property_feature_description': 37, 'ref_feature_types.*': 38, 'ref_property_types.*': 39, 'other_available_features.*': 40, 'properties.*': 41, 'other_property_features.*': 42}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "ref_property_types.property_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_property_types', 'property_type_description', 39), ('none_agg', 0), False, 0.994889497756958, 1)]",
        "logprob": "-0.4750400727335204",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 168
    },
    {
        "nl": "What are the names of properties that are either houses or apartments with more than 1 room ?",
        "true_sql": "select properties.property_name where properties.property_type_code = value union select properties.property_name where properties.property_type_code = value and properties.room_count > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Apartment\"', None], 'and', [False, 3, [0, [0, 15, False], None], 1.0, None]]}, 'where': [[False, 2, [0, [0, 10, False], None], '\"House\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_feature_types.feature_type_code': 1, 'ref_feature_types.feature_type_name': 2, 'ref_property_types.property_type_code': 3, 'ref_property_types.property_type_description': 4, 'other_available_features.feature_id': 5, 'other_available_features.feature_type_code': 6, 'other_available_features.feature_name': 7, 'other_available_features.feature_description': 8, 'properties.property_id': 9, 'properties.property_type_code': 10, 'properties.date_on_market': 11, 'properties.date_sold': 12, 'properties.property_name': 13, 'properties.property_address': 14, 'properties.room_count': 15, 'properties.vendor_requested_price': 16, 'properties.buyer_offered_price': 17, 'properties.agreed_selling_price': 18, 'properties.apt_feature_1': 19, 'properties.apt_feature_2': 20, 'properties.apt_feature_3': 21, 'properties.fld_feature_1': 22, 'properties.fld_feature_2': 23, 'properties.fld_feature_3': 24, 'properties.hse_feature_1': 25, 'properties.hse_feature_2': 26, 'properties.hse_feature_3': 27, 'properties.oth_feature_1': 28, 'properties.oth_feature_2': 29, 'properties.oth_feature_3': 30, 'properties.shp_feature_1': 31, 'properties.shp_feature_2': 32, 'properties.shp_feature_3': 33, 'properties.other_property_details': 34, 'other_property_features.property_id': 35, 'other_property_features.feature_id': 36, 'other_property_features.property_feature_description': 37, 'ref_feature_types.*': 38, 'ref_property_types.*': 39, 'other_available_features.*': 40, 'properties.*': 41, 'other_property_features.*': 42}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "properties.property_name",
            "where",
            "properties.room_count",
            ">",
            "value",
            "or",
            "properties.room_count",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [48], 6, 50, [14], 3, 25, 50, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('properties', 'property_name', 48), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('properties', 'room_count', 50), 0.9999414682388306, 3), ('WHERE_OP', (('properties', 'room_count', 50),), ('>', 1), 0.999057948589325, 4), ('WHERE_ROOT_TERM', (('properties', 'room_count', 50),), ('>', 1), 'terminal', 0.999160647392273, 5), ('WHERE_COL', ('properties', 'room_count', 50), 0.9999644756317139, 7), ('WHERE_OP', (('properties', 'room_count', 50),), ('>', 1), 0.9928200840950012, 8), ('WHERE_ROOT_TERM', (('properties', 'room_count', 50),), ('>', 1), 'terminal', 0.9809550642967224, 9)]",
        "logprob": "-0.03012811628017488",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 169
    },
    {
        "nl": "How many singers are there ?",
        "true_sql": "select count ( singer.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.8429548649622118, 1)]",
        "logprob": "-0.6834221720959096",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 170
    },
    {
        "nl": "What is the count of singers ?",
        "true_sql": "select count ( singer.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9997760919692487, 1)]",
        "logprob": "-0.0015288745226323145",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 171
    },
    {
        "nl": "List the name of singers in ascending order of net worth .",
        "true_sql": "select singer.name order_by singer.net_worth_millions asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "order_by",
            "singer.net_worth_millions",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 1.0, 3)]",
        "logprob": "-0.1650639325189549",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 172
    },
    {
        "nl": "What are the names of singers ordered by ascending net worth ?",
        "true_sql": "select singer.name order_by singer.net_worth_millions asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "order_by",
            "singer.net_worth_millions",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 1.0, 3)]",
        "logprob": "-0.021533317743630813",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 173
    },
    {
        "nl": "What are the birth year and citizenship of singers ?",
        "true_sql": "select singer.birth_year , singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.birth_year",
            ",",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'birth_year', 38), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9987640380859375, 3)]",
        "logprob": "-0.02491088796031923",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 174
    },
    {
        "nl": "What are the birth years and citizenships of the singers ?",
        "true_sql": "select singer.birth_year , singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.birth_year",
            ",",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'birth_year', 38), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9977570176124573, 3)]",
        "logprob": "-0.0038250748069865934",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 175
    },
    {
        "nl": "List the name of singers whose citizenship is not `` France `` .",
        "true_sql": "select singer.name where singer.citizenship != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 5, False], None], '\"France\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.citizenship",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.99981290102005, 1), ('WHERE_COL', ('singer', 'citizenship', 40), 0.9997461438179016, 3), ('WHERE_OP', (('singer', 'citizenship', 40),), ('!=', 5), 0.9991550445556641, 4), ('WHERE_ROOT_TERM', (('singer', 'citizenship', 40),), ('!=', 5), 'terminal', 0.9999700784683228, 5)]",
        "logprob": "-0.0016069578548064578",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 176
    },
    {
        "nl": "What are the names of the singers who are not French citizens ?",
        "true_sql": "select singer.name where singer.citizenship != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 5, False], None], '\"France\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.citizenship",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('singer', 'citizenship', 40), 0.999890923500061, 3), ('WHERE_OP', (('singer', 'citizenship', 40),), ('!=', 5), 0.9983479976654053, 4), ('WHERE_ROOT_TERM', (('singer', 'citizenship', 40),), ('!=', 5), 'terminal', 0.9999597072601318, 5)]",
        "logprob": "-0.0020901307554768186",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 177
    },
    {
        "nl": "Show the name of singers whose birth year is either 1948 or 1949 ?",
        "true_sql": "select singer.name where singer.birth_year = value or singer.birth_year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 1948.0, None], 'or', [False, 2, [0, [0, 3, False], None], 1949.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.birth_year",
            "=",
            "value",
            "or",
            "singer.birth_year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 25, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999980926513672, 1), ('WHERE_COL', ('singer', 'birth_year', 38), 0.997251570224762, 3), ('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9257925152778625, 4), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999977350234985, 5), ('WHERE_COL', ('singer', 'birth_year', 38), 1.0, 7), ('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.995824933052063, 8), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999891519546509, 9)]",
        "logprob": "-0.11980912336948801",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 178
    },
    {
        "nl": "What are the names of the singers whose birth years are either 1948 or 1949 ?",
        "true_sql": "select singer.name where singer.birth_year = value or singer.birth_year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 1948.0, None], 'or', [False, 2, [0, [0, 3, False], None], 1949.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.birth_year",
            "=",
            "value",
            "or",
            "singer.birth_year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 25, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9999420642852783, 3), ('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.908946692943573, 4), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999977350234985, 5), ('WHERE_COL', ('singer', 'birth_year', 38), 1.0, 7), ('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9744712114334106, 8), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999890327453613, 9)]",
        "logprob": "-0.1699597103533472",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 179
    },
    {
        "nl": "What is the name of the singer with the largest net worth ?",
        "true_sql": "select singer.name order_by singer.net_worth_millions desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "order_by",
            "singer.net_worth_millions",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [39], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'desc', 0.9996882677078247, 4), ('ORDER_LIMIT', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'limit_value', 0.9998770952224731, 5)]",
        "logprob": "-0.0006529277905372371",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 180
    },
    {
        "nl": "What is the name of the singer who is worth the most ?",
        "true_sql": "select singer.name order_by singer.net_worth_millions desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "group_by",
            "song.singer_id",
            "order_by",
            "count",
            "(",
            "singer.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 11, [9, 5, 46, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('GROUP_COL', ('song', 'singer_id', 43), 0.9999783039093018, 3), ('ORDER_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9817386082872703, 5), ('ORDER_DESC_ASC', (('singer', '*', 46), ('count', 3), False), 'desc', 0.9998791217803955, 6), ('ORDER_LIMIT', (('singer', '*', 46), ('count', 3), False), 'limit_value', 0.9998728036880493, 7)]",
        "logprob": "-0.1032001663386787",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 181
    },
    {
        "nl": "Show different citizenship of singers and the number of singers of each citizenship .",
        "true_sql": "select singer.citizenship , count ( singer.* ) group_by singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.citizenship",
            ",",
            "count",
            "(",
            "singer.*",
            ")",
            "group_by",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 46, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9549691532532607, 3), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9999884366989136, 5)]",
        "logprob": "-0.1844685207915221",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 182
    },
    {
        "nl": "For each citizenship , how many singers are from that country ?",
        "true_sql": "select singer.citizenship , count ( singer.* ) group_by singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.citizenship",
            ",",
            "count",
            "(",
            "singer.*",
            ")",
            "group_by",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 46, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.6618422269821167, 1), ('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9964858558811811, 3), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9996562004089355, 5)]",
        "logprob": "-0.7344915531464629",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 183
    },
    {
        "nl": "Please show the most common citizenship of singers .",
        "true_sql": "select singer.citizenship group_by singer.citizenship order_by count ( singer.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.citizenship",
            "group_by",
            "singer.citizenship",
            "order_by",
            "count",
            "(",
            "singer.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 46, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9985284805297852, 1), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9998770952224731, 3), ('ORDER_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9984454905945312, 5), ('ORDER_DESC_ASC', (('singer', '*', 46), ('count', 3), False), 'desc', 0.999568521976471, 6), ('ORDER_LIMIT', (('singer', '*', 46), ('count', 3), False), 'limit_value', 0.9999562501907349, 7)]",
        "logprob": "-0.008411019156087106",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 184
    },
    {
        "nl": "What is the msot common singer citizenship ?",
        "true_sql": "select singer.citizenship group_by singer.citizenship order_by count ( singer.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.citizenship",
            "where",
            "singer.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9663645625114441, 1), ('WHERE_COL', ('singer', 'name', 37), 0.684130072593689, 3), ('WHERE_OP', (('singer', 'name', 37),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('singer', 'name', 37),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.4141233931337634",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 185
    },
    {
        "nl": "Show different citizenships and the maximum net worth of singers of each citizenship .",
        "true_sql": "select singer.citizenship , max ( singer.net_worth_millions ) group_by singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [1, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.citizenship",
            ",",
            "max",
            "(",
            "singer.net_worth_millions",
            ")",
            "group_by",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [19, 5, 39, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.9827362946649506, 3), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9999994039535522, 5)]",
        "logprob": "-0.07017381777279316",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 186
    },
    {
        "nl": "For each citizenship , what is the maximum net worth ?",
        "true_sql": "select singer.citizenship , max ( singer.net_worth_millions ) group_by singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [1, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "singer.net_worth_millions",
            ")",
            ",",
            "max",
            "(",
            "singer.net_worth_millions",
            ")",
            ",",
            "sum",
            "(",
            "singer.net_worth_millions",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 39, 4], 8, [19, 5, 39, 4], 8, [24, 5, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.998290718484544, 1), ('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.9226254651373708, 3), ('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('sum', 4), False, 0.7496149532003047, 5)]",
        "logprob": "-2.732533934965915",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 187
    },
    {
        "nl": "Show titles of songs and names of singers .",
        "true_sql": "select song.title , singer.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "song.title",
            ",",
            "singer.name",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('song', 'title', 42), ('none_agg', 0), False, 0.9999996423721313, 1), ('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9997301697731018, 3)]",
        "logprob": "-0.0007033337711782915",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 188
    },
    {
        "nl": "What are the song titles and singer names ?",
        "true_sql": "select song.title , singer.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "song.title",
            ",",
            "singer.name",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('song', 'title', 42), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999489784240723, 3)]",
        "logprob": "-0.0007973705376953411",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 189
    },
    {
        "nl": "Show distinct names of singers that have songs with sales more than 300000 .",
        "true_sql": "select distinct singer.name where song.sales > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], 300000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "singer.name",
            "where",
            "song.sales",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 6, 44, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 2), ('WHERE_COL', ('song', 'sales', 44), 0.9999850988388062, 4), ('WHERE_OP', (('song', 'sales', 44),), ('>', 1), 0.9999490976333618, 5), ('WHERE_ROOT_TERM', (('song', 'sales', 44),), ('>', 1), 'terminal', 0.9995394945144653, 6)]",
        "logprob": "-0.01476306055212567",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 190
    },
    {
        "nl": "what are the different names of the singers that have sales more than 300000 ?",
        "true_sql": "select distinct singer.name where song.sales > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], 300000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "singer.name",
            "where",
            "song.sales",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 6, 44, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 2), ('WHERE_COL', ('song', 'sales', 44), 0.9986145496368408, 4), ('WHERE_OP', (('song', 'sales', 44),), ('>', 1), 0.9999390840530396, 5), ('WHERE_ROOT_TERM', (('song', 'sales', 44),), ('>', 1), 'terminal', 0.9994760155677795, 6)]",
        "logprob": "-0.0942705445612934",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 191
    },
    {
        "nl": "Show the names of singers that have more than one song .",
        "true_sql": "select singer.name group_by singer.name having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "group_by",
            "song.singer_id",
            "having",
            "count",
            "(",
            "song.singer_id",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 18, [9, 5, 43, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('song', 'singer_id', 43), 0.999997615814209, 3), ('HAV_AGG_v2', ('song', 'singer_id', 43), ('count', 3), False, 0.8862602103370364, 5), ('HAV_OP_v2', (('song', 'singer_id', 43), ('count', 3), False), ('>', 1), 0.9997921586036682, 6), ('HAV_ROOT_TERM_v2', (('song', 'singer_id', 43), ('count', 3), False), ('>', 1), 'terminal', 0.9999157190322876, 7)]",
        "logprob": "-0.48489246539441716",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 192
    },
    {
        "nl": "What are the names of the singers that have more than one songs ?",
        "true_sql": "select singer.name group_by singer.name having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "group_by",
            "song.singer_id",
            "having",
            "count",
            "(",
            "singer.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 18, [9, 5, 46, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999986886978149, 1), ('GROUP_COL', ('song', 'singer_id', 43), 0.9999895095825195, 3), ('HAV_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9924906349132719, 5), ('HAV_OP_v2', (('singer', '*', 46), ('count', 3), False), ('>', 1), 0.999832272529602, 6), ('HAV_ROOT_TERM_v2', (('singer', '*', 46), ('count', 3), False), ('>', 1), 'terminal', 0.9998480081558228, 7)]",
        "logprob": "-0.032023545688372755",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 193
    },
    {
        "nl": "Show the names of singers and the total sales of their songs .",
        "true_sql": "select singer.name , sum ( song.sales ) group_by singer.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [4, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "sum",
            "(",
            "song.sales",
            ")",
            "group_by",
            "singer.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [24, 5, 44, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('song', 'sales', 44), ('sum', 4), False, 0.9952674618926798, 3), ('GROUP_COL', ('singer', 'name', 37), 0.941283106803894, 5)]",
        "logprob": "-0.3324886736193304",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 194
    },
    {
        "nl": "For each singer name , what is the total sales for their songs ?",
        "true_sql": "select singer.name , sum ( song.sales ) group_by singer.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [4, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "song.sales",
            ")",
            ",",
            "singer.name",
            "group_by",
            "song.title",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 44, 4], 8, [37], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('song', 'sales', 44), ('sum', 4), False, 0.9969937439444573, 1), ('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.67365962266922, 3), ('GROUP_COL', ('song', 'title', 42), 0.7685286402702332, 5)]",
        "logprob": "-0.672037896514585",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 195
    },
    {
        "nl": "List the name of singers that do not have any song .",
        "true_sql": "select singer.name where singer.singer_id not in ( select song.singer_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.singer_id",
            "not",
            "in",
            "(",
            "select",
            "song.singer_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [43], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'singer_id', 36), 1.0, 3), ('WHERE_OP', (('singer', 'singer_id', 36),), ('not in', 7), 0.9998408253184915, 4), ('WHERE_ROOT_TERM', (('singer', 'singer_id', 36),), ('not in', 7), 'root', 0.9999809265136719, 5), ('SELECT_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.9999877214431763, 7), ('O', '##END_NESTED##', 0.999816358089447, 8)]",
        "logprob": "-0.0016041766118005643",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 196
    },
    {
        "nl": "What is the sname of every sing that does not have any song ?",
        "true_sql": "select singer.name where singer.singer_id not in ( select song.singer_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.singer_id",
            "not",
            "in",
            "(",
            "select",
            "song.singer_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [43], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9701203107833862, 1), ('WHERE_COL', ('singer', 'singer_id', 36), 0.9981603026390076, 3), ('WHERE_OP', (('singer', 'singer_id', 36),), ('not in', 7), 0.9998291402808852, 4), ('WHERE_ROOT_TERM', (('singer', 'singer_id', 36),), ('not in', 7), 'root', 0.9999877214431763, 5), ('SELECT_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.9998602867126465, 7), ('O', '##END_NESTED##', 0.9998838901519775, 8)]",
        "logprob": "-0.033826242205738474",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 197
    },
    {
        "nl": "Show the citizenship shared by singers with birth year before 1945 and after 1955 .",
        "true_sql": "select singer.citizenship where singer.birth_year < value intersect select singer.citizenship where singer.birth_year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], 1955.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 3, False], None], 1945.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.citizenship",
            "where",
            "singer.birth_year",
            "<",
            "value",
            "intersect",
            "select",
            "singer.citizenship",
            "where",
            "singer.birth_year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 38, [21], 3, 23, 2, [40], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9965839385986328, 3), ('WHERE_OP', (('singer', 'birth_year', 38),), ('<', 2), 0.9713668823242188, 4), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('<', 2), 'terminal', 0.9999786615371704, 5), ('IUEN_v2', ('intersect', 1), 0.9878277778625488, 6), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999971389770508, 8), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9999980926513672, 10), ('WHERE_OP', (('singer', 'birth_year', 38),), ('>', 1), 0.8922862410545349, 11), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('>', 1), 'terminal', 0.9999827146530151, 12)]",
        "logprob": "-0.1589226582333328",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 198
    },
    {
        "nl": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 ?",
        "true_sql": "select singer.citizenship where singer.birth_year < value intersect select singer.citizenship where singer.birth_year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], 1955.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 3, False], None], 1945.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.citizenship",
            "where",
            "singer.birth_year",
            "<",
            "value",
            "intersect",
            "select",
            "singer.citizenship",
            "where",
            "singer.birth_year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 38, [21], 3, 23, 2, [40], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9987125396728516, 3), ('WHERE_OP', (('singer', 'birth_year', 38),), ('<', 2), 0.9721426367759705, 4), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('<', 2), 'terminal', 0.9999704360961914, 5), ('IUEN_v2', ('intersect', 1), 0.9965527057647705, 6), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999836683273315, 8), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9999991655349731, 10), ('WHERE_OP', (('singer', 'birth_year', 38),), ('>', 1), 0.8741199374198914, 11), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('>', 1), 'terminal', 0.9999654293060303, 12)]",
        "logprob": "-0.16783274461604786",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 199
    },
    {
        "nl": "How many high schoolers are there ?",
        "true_sql": "select count ( highschooler.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999823864319924, 1)]",
        "logprob": "-0.0009723221000961053",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 200
    },
    {
        "nl": "Count the number of high schoolers .",
        "true_sql": "select count ( highschooler.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999615827010695, 1)]",
        "logprob": "-0.0023580141876500932",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 201
    },
    {
        "nl": "Show the names and grades of each high schooler .",
        "true_sql": "select highschooler.name , highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999898672103882, 3)]",
        "logprob": "-0.0004159408100792885",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 202
    },
    {
        "nl": "What are the names and grades for each high schooler ?",
        "true_sql": "select highschooler.name , highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999992847442627, 3)]",
        "logprob": "-0.00277019038005199",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 203
    },
    {
        "nl": "Show all the grades of the high schoolers .",
        "true_sql": "select highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9998555183410645, 2)]",
        "logprob": "-0.8985933918663569",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 204
    },
    {
        "nl": "What is the grade of each high schooler ?",
        "true_sql": "select highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "highschooler.grade",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 38, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('max', 1), False, 0.8247885617442509, 1)]",
        "logprob": "-0.7705578000716348",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 205
    },
    {
        "nl": "What grade is Kyle in ?",
        "true_sql": "select highschooler.grade where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.grade",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.7177073359489441, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 0.999847412109375, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9999953508377075, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.4161415337418315",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 206
    },
    {
        "nl": "Return the grade for the high schooler named Kyle .",
        "true_sql": "select highschooler.grade where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.8547155857086182, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.9989878535270691, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.18905436549800492",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 207
    },
    {
        "nl": "Show the names of all high schoolers in grade 10 .",
        "true_sql": "select highschooler.name where highschooler.grade = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 10.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9996190071105957, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999960660934448, 5)]",
        "logprob": "-0.001001444825058971",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 208
    },
    {
        "nl": "What are the names of all high schoolers in grade 10 ?",
        "true_sql": "select highschooler.name where highschooler.grade = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 10.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9995748400688171, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999969005584717, 5)]",
        "logprob": "-0.0016234607738706078",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 209
    },
    {
        "nl": "Show the ID of the high schooler named Kyle .",
        "true_sql": "select highschooler.id where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.id",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.9999762773513794, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.9999998807907104, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.0010413631231166022",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 210
    },
    {
        "nl": "What is Kyle 's id ?",
        "true_sql": "select highschooler.id where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "friend.friend_id",
            "where",
            "friend.friend_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [40], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.9809735417366028, 2), ('WHERE_COL', ('friend', 'friend_id', 40), 0.974376380443573, 4), ('WHERE_OP', (('friend', 'friend_id', 40),), ('=', 0), 0.999998927116394, 5), ('WHERE_ROOT_TERM', (('friend', 'friend_id', 40),), ('=', 0), 'terminal', 0.9999992847442627, 6)]",
        "logprob": "-0.1485801439996057",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 211
    },
    {
        "nl": "How many high schoolers are there in grade 9 or 10 ?",
        "true_sql": "select count ( highschooler.* ) where highschooler.grade = value or highschooler.grade = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 9.0, None], 'or', [False, 2, [0, [0, 3, False], None], 10.0, None]], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "or",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 6, 38, [7], 3, 25, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.999958155305078, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9933288097381592, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999980926513672, 5), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 7), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9747288227081299, 8), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999963045120239, 9)]",
        "logprob": "-0.11316411535777536",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 212
    },
    {
        "nl": "Count the number of high schoolers in grades 9 or 10 .",
        "true_sql": "select count ( highschooler.* ) where highschooler.grade = value or highschooler.grade = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 9.0, None], 'or', [False, 2, [0, [0, 3, False], None], 10.0, None]], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "and",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 6, 38, [7], 3, 16, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999885558332606, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9779090881347656, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.999998927116394, 5), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9999984502792358, 7), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.8631157279014587, 8), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999903440475464, 9)]",
        "logprob": "-0.6079395411124824",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 213
    },
    {
        "nl": "Show the number of high schoolers for each grade .",
        "true_sql": "select highschooler.grade , count ( highschooler.* ) group_by highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "highschooler.*",
            ")",
            "group_by",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [9, 5, 43, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.8254922032356262, 1), ('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999948441642292, 3), ('GROUP_COL', ('highschooler', 'name', 37), 0.9707889556884766, 5)]",
        "logprob": "-0.22170961647869009",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 214
    },
    {
        "nl": "How many high schoolers are in each grade ?",
        "true_sql": "select highschooler.grade , count ( highschooler.* ) group_by highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            ",",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 8, [38], 10, 38, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.991185979586683, 1), ('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.7914847135543823, 3), ('GROUP_COL', ('highschooler', 'grade', 38), 0.5487236380577087, 5)]",
        "logprob": "-0.8696201067149247",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 215
    },
    {
        "nl": "Which grade has the most high schoolers ?",
        "true_sql": "select highschooler.grade group_by highschooler.grade order_by count ( highschooler.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "order_by",
            "count",
            "(",
            "highschooler.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 38, 11, [9, 5, 43, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9974454641342163, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.9994819760322571, 3), ('ORDER_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999639670958519, 5), ('ORDER_DESC_ASC', (('highschooler', '*', 43), ('count', 3), False), 'desc', 0.9977756142616272, 6), ('ORDER_LIMIT', (('highschooler', '*', 43), ('count', 3), False), 'limit_value', 0.999951958656311, 7)]",
        "logprob": "-0.0639157138194164",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 216
    },
    {
        "nl": "Return the grade that has the greatest number of high schoolers .",
        "true_sql": "select highschooler.grade group_by highschooler.grade order_by count ( highschooler.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "order_by",
            "count",
            "(",
            "highschooler.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 38, 11, [9, 5, 43, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9734470844268799, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.9844682812690735, 3), ('ORDER_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999319406127002, 5), ('ORDER_DESC_ASC', (('highschooler', '*', 43), ('count', 3), False), 'desc', 0.9981111288070679, 6), ('ORDER_LIMIT', (('highschooler', '*', 43), ('count', 3), False), 'limit_value', 0.9999616146087646, 7)]",
        "logprob": "-0.06303898794820738",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 217
    },
    {
        "nl": "Show me all grades that have at least 4 students .",
        "true_sql": "select highschooler.grade group_by highschooler.grade having count ( highschooler.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 4.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "having",
            "count",
            "(",
            "highschooler.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 38, 18, [9, 5, 43, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.8974369764328003, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.9981623291969299, 3), ('HAV_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9997845571388786, 5), ('HAV_OP_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 0.9995035135331575, 6), ('HAV_ROOT_TERM_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 'terminal', 0.9999922513961792, 7)]",
        "logprob": "-0.11250240693520044",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 218
    },
    {
        "nl": "Which grades have 4 or more high schoolers ?",
        "true_sql": "select highschooler.grade group_by highschooler.grade having count ( highschooler.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 4.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "having",
            "count",
            "(",
            "highschooler.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 38, 18, [9, 5, 43, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999915361404419, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.9999995231628418, 3), ('HAV_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999839957965903, 5), ('HAV_OP_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 0.9997866440665688, 6), ('HAV_ROOT_TERM_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 'terminal', 0.9999911785125732, 7)]",
        "logprob": "-0.0077810803268110644",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 219
    },
    {
        "nl": "Show the student IDs and numbers of friends corresponding to each .",
        "true_sql": "select friend.student_id , count ( friend.* ) group_by friend.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'friend.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "friend.student_id",
            ",",
            "count",
            "(",
            "friend.*",
            ")",
            "group_by",
            "friend.friend_id",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 44, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.6106705665588379, 1), ('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.9248990038726644, 3), ('GROUP_COL', ('friend', 'friend_id', 40), 0.9277043342590332, 5)]",
        "logprob": "-0.8807136356316049",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 220
    },
    {
        "nl": "How many friends does each student have ?",
        "true_sql": "select friend.student_id , count ( friend.* ) group_by friend.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'friend.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "friend.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.9988694784930323, 1)]",
        "logprob": "-0.019651640714974217",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 221
    },
    {
        "nl": "Show the names of high school students and their corresponding number of friends .",
        "true_sql": "select highschooler.name , count ( * ) group_by friend.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999995231628418, 1), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9144808650016785, 3)]",
        "logprob": "-0.696390900274049",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 222
    },
    {
        "nl": "What are the names of the high schoolers and how many friends does each have ?",
        "true_sql": "select highschooler.name , count ( * ) group_by friend.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9639403223991394, 3)]",
        "logprob": "-0.20091907632599837",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 223
    },
    {
        "nl": "What is the name of the high schooler who has the greatest number of friends ?",
        "true_sql": "select highschooler.name group_by friend.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "friend.friend_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('friend', 'friend_id', 40), 0.6547403335571289, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999228984973436, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9961991906166077, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999476671218872, 7)]",
        "logprob": "-0.42786847896493535",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 224
    },
    {
        "nl": "Return the name of the high school student with the most friends .",
        "true_sql": "select highschooler.name group_by friend.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "friend.friend_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('friend', 'friend_id', 40), 0.7416408658027649, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999279652065088, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.985535740852356, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999377727508545, 7)]",
        "logprob": "-0.3138812376939609",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 225
    },
    {
        "nl": "Show the names of high schoolers who have at least 3 friends .",
        "true_sql": "select highschooler.name group_by friend.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "friend.friend_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 40, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999885559082031, 1), ('GROUP_COL', ('friend', 'friend_id', 40), 0.7725746035575867, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8989233252704196, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9988154881249326, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999946355819702, 7)]",
        "logprob": "-0.6872442588603392",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 226
    },
    {
        "nl": "What are the names of high schoolers who have 3 or more friends ?",
        "true_sql": "select highschooler.name group_by friend.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "friend.friend_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 40, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('friend', 'friend_id', 40), 0.5700968503952026, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9971954994573025, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994808873857306, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.999996542930603, 7)]",
        "logprob": "-0.5751015176173672",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 227
    },
    {
        "nl": "Show the names of all of the high schooler Kyle 's friends .",
        "true_sql": "select highschooler.name where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999866485595703, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.9999768733978271, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.0007228477428010865",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 228
    },
    {
        "nl": "Return the names of friends of the high school student Kyle .",
        "true_sql": "select highschooler.name where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9723883867263794, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.9999390840530396, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.999997615814209, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.028245086250111063",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 229
    },
    {
        "nl": "How many friends does the high school student Kyle have ?",
        "true_sql": "select count ( * ) where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "friend.friend_id",
            ")",
            "where",
            "highschooler.name",
            "=",
            "value",
            "and",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 40, 4], 6, 37, [7], 3, 16, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('count', 3), True, 0.9138797828715717, 1), ('WHERE_COL', ('highschooler', 'name', 37), 1.0, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), ('WHERE_COL', ('highschooler', 'name', 37), 0.9996316432952881, 7), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999885559082031, 8), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999985694885254, 9)]",
        "logprob": "-0.7534640689955763",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 230
    },
    {
        "nl": "Count the number of friends Kyle has .",
        "true_sql": "select count ( * ) where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "friend.*",
            ")",
            "where",
            "friend.friend_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 44, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.9949991217586031, 1), ('WHERE_COL', ('friend', 'friend_id', 40), 0.900269627571106, 3), ('WHERE_OP', (('friend', 'friend_id', 40),), ('=', 0), 0.9999356269836426, 4), ('WHERE_ROOT_TERM', (('friend', 'friend_id', 40),), ('=', 0), 'terminal', 0.9999979734420776, 5)]",
        "logprob": "-0.12651744040568869",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 231
    },
    {
        "nl": "Show ids of all students who do not have any friends .",
        "true_sql": "select highschooler.id except select friend.student_id",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "friend.student_id",
            "where",
            "friend.friend_id",
            "not",
            "in",
            "(",
            "select",
            "likes.student_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 40, [22, 20], 5, 2, [41], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.9984710812568665, 1), ('WHERE_COL', ('friend', 'friend_id', 40), 0.5519651770591736, 3), ('WHERE_OP', (('friend', 'friend_id', 40),), ('not in', 7), 0.9997409849459481, 4), ('WHERE_ROOT_TERM', (('friend', 'friend_id', 40),), ('not in', 7), 'root', 0.9999852180480957, 5), ('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.8571372032165527, 7), ('O', '##END_NESTED##', 0.9996978044509888, 8)]",
        "logprob": "-0.7516398222869234",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 232
    },
    {
        "nl": "What are the ids of high school students who do not have friends ?",
        "true_sql": "select highschooler.id except select friend.student_id",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "friend.student_id",
            "where",
            "friend.student_id",
            "not",
            "in",
            "(",
            "select",
            "likes.student_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 39, [22, 20], 5, 2, [41], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.9462544322013855, 1), ('WHERE_COL', ('friend', 'student_id', 39), 0.8410896062850952, 3), ('WHERE_OP', (('friend', 'student_id', 39),), ('not in', 7), 0.9958682959248508, 4), ('WHERE_ROOT_TERM', (('friend', 'student_id', 39),), ('not in', 7), 'root', 0.9999876022338867, 5), ('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.9955552220344543, 7), ('O', '##END_NESTED##', 0.9948182702064514, 8)]",
        "logprob": "-0.25753716314035024",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 233
    },
    {
        "nl": "Show names of all high school students who do not have any friends .",
        "true_sql": "select highschooler.name except select highschooler.name",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.id",
            "not",
            "in",
            "(",
            "select",
            "likes.student_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [41], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('highschooler', 'id', 36), 0.9978094696998596, 3), ('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9998095034397683, 4), ('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.999985933303833, 5), ('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.8879953622817993, 7), ('O', '##END_NESTED##', 0.9996780157089233, 8)]",
        "logprob": "-0.12304365873374942",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 234
    },
    {
        "nl": "What are the names of students who have no friends ?",
        "true_sql": "select highschooler.name except select highschooler.name",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "friend.friend_id",
            "not",
            "in",
            "(",
            "select",
            "friend.friend_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [22, 20], 5, 2, [40], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9858594536781311, 1), ('WHERE_COL', ('friend', 'friend_id', 40), 0.541709303855896, 3), ('WHERE_OP', (('friend', 'friend_id', 40),), ('not in', 7), 0.9992175215541422, 4), ('WHERE_ROOT_TERM', (('friend', 'friend_id', 40),), ('not in', 7), 'root', 0.9999898672103882, 5), ('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.645548939704895, 7), ('O', '##END_NESTED##', 0.9997403025627136, 8)]",
        "logprob": "-1.1070161621626622",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 235
    },
    {
        "nl": "Show the ids of high schoolers who have friends and are also liked by someone else .",
        "true_sql": "select friend.student_id intersect select likes.liked_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "friend.friend_id",
            "where",
            "highschooler.name",
            "=",
            "value",
            "intersect",
            "select",
            "friend.friend_id",
            "where",
            "likes.liked_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 37, [7], 3, 23, 2, [40], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.7477113604545593, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.4803950786590576, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9996989965438843, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.7254908680915833, 6), ('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.657590389251709, 8), ('WHERE_COL', ('likes', 'liked_id', 42), 0.9707264304161072, 10), ('WHERE_OP', (('likes', 'liked_id', 42),), ('=', 0), 0.9999924898147583, 11), ('WHERE_ROOT_TERM', (('likes', 'liked_id', 42),), ('=', 0), 'terminal', 0.9999991655349731, 12)]",
        "logprob": "-1.906904560489703",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 236
    },
    {
        "nl": "What are the ids of students who both have friends and are liked ?",
        "true_sql": "select friend.student_id intersect select likes.liked_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "friend.student_id",
            "where",
            "friend.friend_id",
            "=",
            "value",
            "intersect",
            "select",
            "likes.student_id",
            "where",
            "likes.liked_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 40, [7], 3, 23, 2, [41], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.9505080580711365, 1), ('WHERE_COL', ('friend', 'friend_id', 40), 0.940106213092804, 3), ('WHERE_OP', (('friend', 'friend_id', 40),), ('=', 0), 0.9988846182823181, 4), ('WHERE_ROOT_TERM', (('friend', 'friend_id', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.7884701490402222, 6), ('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.8432448506355286, 8), ('WHERE_COL', ('likes', 'liked_id', 42), 0.9967731833457947, 10), ('WHERE_OP', (('likes', 'liked_id', 42),), ('=', 0), 0.9999827146530151, 11), ('WHERE_ROOT_TERM', (('likes', 'liked_id', 42),), ('=', 0), 'terminal', 0.9999984502792358, 12)]",
        "logprob": "-1.3801433207080558",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 237
    },
    {
        "nl": "Show name of all students who have some friends and also are liked by someone else .",
        "true_sql": "select highschooler.name intersect select highschooler.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "likes.liked_id",
            "=",
            "value",
            "intersect",
            "select",
            "likes.liked_id",
            "where",
            "likes.liked_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [7], 3, 23, 2, [42], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.44455212354660034, 1), ('WHERE_COL', ('likes', 'liked_id', 42), 0.7688471078872681, 3), ('WHERE_OP', (('likes', 'liked_id', 42),), ('=', 0), 0.9933405518531799, 4), ('WHERE_ROOT_TERM', (('likes', 'liked_id', 42),), ('=', 0), 'terminal', 0.9999961853027344, 5), ('IUEN_v2', ('intersect', 1), 0.9570714831352234, 6), ('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.33452147245407104, 8), ('WHERE_COL', ('likes', 'liked_id', 42), 0.978829026222229, 10), ('WHERE_OP', (('likes', 'liked_id', 42),), ('=', 0), 0.9999830722808838, 11), ('WHERE_ROOT_TERM', (('likes', 'liked_id', 42),), ('=', 0), 'terminal', 0.9999983310699463, 12)]",
        "logprob": "-2.543357882173446",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 238
    },
    {
        "nl": "What are the names of high schoolers who both have friends and are liked ?",
        "true_sql": "select highschooler.name intersect select highschooler.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999984502792358, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.7957718372344971, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9990371465682983, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.7546574214226127",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 239
    },
    {
        "nl": "Count the number of likes for each student id .",
        "true_sql": "select likes.student_id , count ( likes.* ) group_by likes.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'likes.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "likes.liked_id",
            ",",
            "count",
            "(",
            "likes.*",
            ")",
            "group_by",
            "likes.liked_id",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [9, 5, 45, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.6698960661888123, 1), ('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.9999648326327284, 3), ('GROUP_COL', ('likes', 'liked_id', 42), 0.9767886400222778, 5)]",
        "logprob": "-0.42447795415679085",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 240
    },
    {
        "nl": "How many likes correspond to each student id ?",
        "true_sql": "select likes.student_id , count ( likes.* ) group_by likes.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'likes.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "likes.*",
            ")",
            ",",
            "likes.liked_id",
            "group_by",
            "likes.liked_id",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 45, 4], 8, [42], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.9999498547276476, 1), ('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.7909128665924072, 3), ('GROUP_COL', ('likes', 'liked_id', 42), 0.8144611120223999, 5)]",
        "logprob": "-0.441789313952308",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 241
    },
    {
        "nl": "Show the names of high schoolers who have likes , and numbers of likes for each .",
        "true_sql": "select highschooler.name , count ( * ) group_by likes.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 8, [9, 5, 35, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.999998927116394, 1), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9753065705299377, 3), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8569494656472922, 5), ('GROUP_COL', ('highschooler', 'name', 37), 0.9131840467453003, 7)]",
        "logprob": "-0.7604560092668068",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 242
    },
    {
        "nl": "What are the names of high schoolers who have likes , and how many likes does each have ?",
        "true_sql": "select highschooler.name , count ( * ) group_by likes.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 8, [9, 5, 35, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999983310699463, 1), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9995563626289368, 3), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6862038478223557, 5), ('GROUP_COL', ('highschooler', 'name', 37), 0.994438886642456, 7)]",
        "logprob": "-2.1110066902441655",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 243
    },
    {
        "nl": "What is the name of the high schooler who has the greatest number of likes ?",
        "true_sql": "select highschooler.name group_by likes.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "highschooler.name",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 37, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('highschooler', 'name', 37), 0.9605264663696289, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998956702440576, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9983501434326172, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999690055847168, 7)]",
        "logprob": "-0.07550643957936073",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 244
    },
    {
        "nl": "Give the name of the student with the most likes .",
        "true_sql": "select highschooler.name group_by likes.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "likes.student_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 41, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9962357878684998, 1), ('GROUP_COL', ('likes', 'student_id', 41), 0.907905638217926, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999936590272149, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997121691703796, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999539852142334, 7)]",
        "logprob": "-0.10536815464075192",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 245
    },
    {
        "nl": "Show the names of students who have at least 2 likes .",
        "true_sql": "select highschooler.name group_by likes.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "likes.student_id",
            "group_by",
            "likes.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [41], 10, 41, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.7270438075065613, 2), ('GROUP_COL', ('likes', 'student_id', 41), 0.6116018295288086, 4), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9887427750902453, 6), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9997444741600662, 7), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999903440475464, 8)]",
        "logprob": "-1.5918872502926993",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 246
    },
    {
        "nl": "What are the names of students who have 2 or more likes ?",
        "true_sql": "select highschooler.name group_by likes.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "likes.liked_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 42, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9614921808242798, 1), ('GROUP_COL', ('likes', 'liked_id', 42), 0.6462586522102356, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9966747080125729, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9998841283247087, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999914169311523, 7)]",
        "logprob": "-0.49001936676204333",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 247
    },
    {
        "nl": "Show the names of students who have a grade higher than 5 and have at least 2 friends .",
        "true_sql": "select highschooler.name where highschooler.grade > value group_by friend.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], 5.0, None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            ">",
            "value",
            "intersect",
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [14], 3, 23, 2, [37], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.989006757736206, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9999992847442627, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9990395903587341, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.99996018409729, 5), ('IUEN_v2', ('intersect', 1), 0.9032370448112488, 6), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9005944132804871, 8), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9768685102462769, 10), ('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9128511548042297, 11), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.9984960556030273, 12)]",
        "logprob": "-0.3373440543915352",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 248
    },
    {
        "nl": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends ?",
        "true_sql": "select highschooler.name where highschooler.grade > value group_by friend.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], 5.0, None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            ">",
            "value",
            "intersect",
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [14], 3, 23, 2, [37], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999994039535522, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9999967813491821, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9920148849487305, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.9999667406082153, 5), ('IUEN_v2', ('intersect', 1), 0.6064507961273193, 6), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9811016917228699, 8), ('WHERE_COL', ('highschooler', 'grade', 38), 0.999388575553894, 10), ('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.8270770311355591, 11), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.9993085861206055, 12)]",
        "logprob": "-0.7205786266100553",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 249
    },
    {
        "nl": "How many likes does Kyle have ?",
        "true_sql": "select count ( * ) where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "likes.*",
            ")",
            "where",
            "likes.liked_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 45, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.9986459936407869, 1), ('WHERE_COL', ('likes', 'liked_id', 42), 0.9711659550666809, 3), ('WHERE_OP', (('likes', 'liked_id', 42),), ('=', 0), 0.9988238215446472, 4), ('WHERE_ROOT_TERM', (('likes', 'liked_id', 42),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.05128660859967567",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 250
    },
    {
        "nl": "Return the number of likes that the high schooler named Kyle has .",
        "true_sql": "select count ( * ) where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "likes.*",
            ")",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 45, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.8663598813260438, 1), ('WHERE_COL', ('highschooler', 'name', 37), 1.0, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999971389770508, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.6562198200751184",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 251
    },
    {
        "nl": "Find the average grade of all students who have some friends .",
        "true_sql": "select avg ( highschooler.grade ) where highschooler.id in ( select friend.student_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "highschooler.grade",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 38, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('avg', 5), False, 0.9864824163779548, 1)]",
        "logprob": "-0.05900097146839892",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 252
    },
    {
        "nl": "What is the average grade of students who have friends ?",
        "true_sql": "select avg ( highschooler.grade ) where highschooler.id in ( select friend.student_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "highschooler.grade",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 38, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('avg', 5), False, 0.9997012299345075, 1)]",
        "logprob": "-0.0013486929507062829",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 253
    },
    {
        "nl": "Find the minimum grade of students who have no friends .",
        "true_sql": "select min ( highschooler.grade ) where highschooler.id not in ( select friend.student_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 3, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "highschooler.grade",
            ")",
            "where",
            "highschooler.grade",
            "not",
            "in",
            "(",
            "select",
            "friend.friend_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 38, 4], 6, 38, [22, 20], 5, 2, [40], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('min', 2), False, 0.9516364863112068, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9362492561340332, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('not in', 7), 0.9993034041366091, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('not in', 7), 'root', 0.9999798536300659, 5), ('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.9898395538330078, 7), ('O', '##END_NESTED##', 0.9990814924240112, 8)]",
        "logprob": "-1.1157257683860344",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 254
    },
    {
        "nl": "What is the lowest grade of students who do not have any friends ?",
        "true_sql": "select min ( highschooler.grade ) where highschooler.id not in ( select friend.student_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 3, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "highschooler.*",
            "where",
            "highschooler.grade",
            "not",
            "in",
            "(",
            "select",
            "likes.student_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 38, [22, 20], 5, 2, [41], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('none_agg', 0), False, 0.9051545858383179, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9921991229057312, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('not in', 7), 0.9992649303869902, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('not in', 7), 'root', 0.9999985694885254, 5), ('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.7162057161331177, 7), ('O', '##END_NESTED##', 0.9998373985290527, 8)]",
        "logprob": "-0.4457571025306024",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 255
    },
    {
        "nl": "How many poker players are there ?",
        "true_sql": "select count ( poker_player.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'poker_player.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "poker_player.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', '*', 47), ('count', 3), False, 0.9998450572674978, 1)]",
        "logprob": "-0.0007105413339686006",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 256
    },
    {
        "nl": "Count the number of poker players .",
        "true_sql": "select count ( poker_player.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'poker_player.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "poker_player.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', '*', 47), ('count', 3), False, 0.9998530138435862, 1)]",
        "logprob": "-0.000703865969006051",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 257
    },
    {
        "nl": "List the earnings of poker players in descending order .",
        "true_sql": "select poker_player.earnings order_by poker_player.earnings desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "poker_player.earnings",
            "order_by",
            "poker_player.earnings",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999701976776123, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999986886978149, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9998562335968018, 4)]",
        "logprob": "-0.00022805897052266224",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 258
    },
    {
        "nl": "What are the earnings of poker players , ordered descending by value ?",
        "true_sql": "select poker_player.earnings order_by poker_player.earnings desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "poker_player.earnings",
            "order_by",
            "poker_player.money_rank",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 11, [40], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9997506737709045, 1), ('ORDER_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.8995999097824097, 3), ('ORDER_DESC_ASC', (('poker_player', 'money_rank', 40), ('none_agg', 0), False), 'desc', 0.9947742819786072, 4)]",
        "logprob": "-0.11151193023654772",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 259
    },
    {
        "nl": "List the final tables made and the best finishes of poker players .",
        "true_sql": "select poker_player.final_table_made , poker_player.best_finish",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "poker_player.final_table_made",
            ",",
            "max",
            "(",
            "poker_player.best_finish",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [19, 5, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.998969316482544, 1), ('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('max', 1), False, 0.921770302826693, 3)]",
        "logprob": "-0.616962176050333",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 260
    },
    {
        "nl": "What are the final tables made and best finishes for all poker players ?",
        "true_sql": "select poker_player.final_table_made , poker_player.best_finish",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "poker_player.final_table_made",
            ",",
            "poker_player.best_finish",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.9935171604156494, 1), ('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('none_agg', 0), False, 0.8785499334335327, 3)]",
        "logprob": "-0.1522133045376093",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 261
    },
    {
        "nl": "What is the average earnings of poker players ?",
        "true_sql": "select avg ( poker_player.earnings )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9995575439929975, 1)]",
        "logprob": "-0.0017880972314827743",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 262
    },
    {
        "nl": "Return the average earnings across all poker players .",
        "true_sql": "select avg ( poker_player.earnings )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9998505029179386, 1)]",
        "logprob": "-0.0006117421937243649",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 263
    },
    {
        "nl": "What is the money rank of the poker player with the highest earnings ?",
        "true_sql": "select poker_player.money_rank order_by poker_player.earnings desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "poker_player.money_rank",
            "order_by",
            "poker_player.earnings",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [41], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.9999995231628418, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9996143579483032, 4), ('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999649524688721, 5)]",
        "logprob": "-0.0005938701240746756",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 264
    },
    {
        "nl": "Return the money rank of the player with the greatest earnings .",
        "true_sql": "select poker_player.money_rank order_by poker_player.earnings desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "poker_player.money_rank",
            "order_by",
            "poker_player.earnings",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [41], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.999998927116394, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999885559082031, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9656098484992981, 4), ('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999604225158691, 5)]",
        "logprob": "-0.03748631137162782",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 265
    },
    {
        "nl": "What is the maximum number of final tables made among poker players with earnings less than 200000 ?",
        "true_sql": "select max ( poker_player.final_table_made ) where poker_player.earnings < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 6, False], None], 200000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "poker_player.final_table_made",
            ")",
            "where",
            "poker_player.earnings",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 38, 4], 6, 41, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.9930235838396736, 1), ('WHERE_COL', ('poker_player', 'earnings', 41), 0.43780001997947693, 3), ('WHERE_OP', (('poker_player', 'earnings', 41),), ('<', 2), 0.7707818746566772, 4), ('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('<', 2), 'terminal', 0.9809386730194092, 5)]",
        "logprob": "-1.1342265451833462",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 266
    },
    {
        "nl": "Return the maximum final tables made across all poker players who have earnings below 200000 .",
        "true_sql": "select max ( poker_player.final_table_made ) where poker_player.earnings < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 6, False], None], 200000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "poker_player.final_table_made",
            ")",
            "where",
            "poker_player.earnings",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 38, 4], 6, 41, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.9957159784182918, 1), ('WHERE_COL', ('poker_player', 'earnings', 41), 0.9810232520103455, 3), ('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.9998894929885864, 4), ('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('>', 1), 'terminal', 0.9993730187416077, 5)]",
        "logprob": "-0.6212122454197437",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 267
    },
    {
        "nl": "What are the names of poker players ?",
        "true_sql": "select people.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999324083328247, 1)]",
        "logprob": "-0.014551240323252924",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 268
    },
    {
        "nl": "Return the names of all the poker players .",
        "true_sql": "select people.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.932122528553009, 1)]",
        "logprob": "-0.07337140336896351",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 269
    },
    {
        "nl": "What are the names of poker players whose earnings is higher than 300000 ?",
        "true_sql": "select people.name where poker_player.earnings > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 6, False], None], 300000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "poker_player.earnings",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 41, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('poker_player', 'earnings', 41), 0.6810551285743713, 3), ('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.9999260902404785, 4), ('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('>', 1), 'terminal', 0.9994856119155884, 5)]",
        "logprob": "-0.5987232348489595",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 270
    },
    {
        "nl": "Give the names of poker players who have earnings above 300000 .",
        "true_sql": "select people.name where poker_player.earnings > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 6, False], None], 300000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "poker_player.money_rank",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 40, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999979734420776, 1), ('WHERE_COL', ('poker_player', 'money_rank', 40), 0.6786306500434875, 3), ('WHERE_OP', (('poker_player', 'money_rank', 40),), ('>', 1), 0.9997109770774841, 4), ('WHERE_ROOT_TERM', (('poker_player', 'money_rank', 40),), ('>', 1), 'terminal', 0.9999339580535889, 5)]",
        "logprob": "-0.5479028236382568",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 271
    },
    {
        "nl": "List the names of poker players ordered by the final tables made in ascending order .",
        "true_sql": "select people.name order_by poker_player.final_table_made",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "order_by",
            "poker_player.final_table_made",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.999998927116394, 1), ('ORDER_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 1.0, 3)]",
        "logprob": "-0.07511824726364852",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 272
    },
    {
        "nl": "What are the names of poker players , ordered ascending by the number of final tables they have made ?",
        "true_sql": "select people.name order_by poker_player.final_table_made",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "order_by",
            "poker_player.final_table_made",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [38], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999773502349854, 1), ('ORDER_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.9999998807907104, 3), ('ORDER_DESC_ASC', (('poker_player', 'final_table_made', 38), ('none_agg', 0), False), 'asc', 0.9846353530883789, 4)]",
        "logprob": "-0.017323477391668278",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 273
    },
    {
        "nl": "What is the birth date of the poker player with the lowest earnings ?",
        "true_sql": "select people.birth_date order_by poker_player.earnings asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.birth_date",
            "order_by",
            "poker_player.earnings",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 11, [41], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.7008479833602905, 4), ('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999828338623047, 5)]",
        "logprob": "-0.35590680445545986",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 274
    },
    {
        "nl": "Return the birth date of the poker player with the lowest earnings .",
        "true_sql": "select people.birth_date order_by poker_player.earnings asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.birth_date",
            "order_by",
            "poker_player.earnings",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 11, [41], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.7944013476371765, 4)]",
        "logprob": "-0.23749511309006252",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 275
    },
    {
        "nl": "What is the money rank of the tallest poker player ?",
        "true_sql": "select poker_player.money_rank order_by people.height desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "poker_player.money_rank",
            "order_by",
            "poker_player.money_rank",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [40], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.999962568283081, 1), ('ORDER_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.5756094455718994, 3), ('ORDER_DESC_ASC', (('poker_player', 'money_rank', 40), ('none_agg', 0), False), 'desc', 0.7422619462013245, 4), ('ORDER_LIMIT', (('poker_player', 'money_rank', 40), ('none_agg', 0), False), 'limit_value', 0.9999111890792847, 5)]",
        "logprob": "-1.203019572201751",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 276
    },
    {
        "nl": "Return the money rank of the poker player with the greatest height .",
        "true_sql": "select poker_player.money_rank order_by people.height desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "poker_player.money_rank",
            "order_by",
            "people.height",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [46], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('people', 'height', 46), ('none_agg', 0), False, 0.8883946537971497, 3), ('ORDER_DESC_ASC', (('people', 'height', 46), ('none_agg', 0), False), 'desc', 0.7894171476364136, 4), ('ORDER_LIMIT', (('people', 'height', 46), ('none_agg', 0), False), 'limit_value', 0.9999752044677734, 5)]",
        "logprob": "-0.35843114861657205",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 277
    },
    {
        "nl": "What is the average earnings of poker players with height higher than 200 ?",
        "true_sql": "select avg ( poker_player.earnings ) where people.height > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 11, False], None], 200.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "where",
            "poker_player.money_rank",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 41, 4], 6, 40, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9998964592710715, 1), ('WHERE_COL', ('poker_player', 'money_rank', 40), 0.9997207522392273, 3), ('WHERE_OP', (('poker_player', 'money_rank', 40),), ('>', 1), 0.9999783039093018, 4), ('WHERE_ROOT_TERM', (('poker_player', 'money_rank', 40),), ('>', 1), 'terminal', 0.9983585476875305, 5)]",
        "logprob": "-0.011937961802358411",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 278
    },
    {
        "nl": "Give average earnings of poker players who are taller than 200 .",
        "true_sql": "select avg ( poker_player.earnings ) where people.height > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 11, False], None], 200.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "where",
            "poker_player.money_rank",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 41, 4], 6, 40, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9992618669275936, 1), ('WHERE_COL', ('poker_player', 'money_rank', 40), 0.9884478449821472, 3), ('WHERE_OP', (('poker_player', 'money_rank', 40),), ('>', 1), 0.9999699592590332, 4), ('WHERE_ROOT_TERM', (('poker_player', 'money_rank', 40),), ('>', 1), 'terminal', 0.9926087260246277, 5)]",
        "logprob": "-0.037429100464425824",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 279
    },
    {
        "nl": "What are the names of poker players in descending order of earnings ?",
        "true_sql": "select people.name order_by poker_player.earnings desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "order_by",
            "poker_player.earnings",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.999913215637207, 4)]",
        "logprob": "-0.0001452015937210832",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 280
    },
    {
        "nl": "Return the names of poker players sorted by their earnings descending .",
        "true_sql": "select people.name order_by poker_player.earnings desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "order_by",
            "poker_player.earnings",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.999998927116394, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9996463060379028, 4)]",
        "logprob": "-0.0004628374169716551",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 281
    },
    {
        "nl": "What are different nationalities of people and the corresponding number of people from each nation ?",
        "true_sql": "select people.nationality , count ( people.* ) group_by people.nationality",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.nationality",
            ",",
            "count",
            "(",
            "people.*",
            ")",
            "group_by",
            "people.nationality",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [9, 5, 48, 4], 10, 43, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9990442395210266, 1), ('SELECT_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9071485302245709, 3), ('GROUP_COL', ('people', 'nationality', 43), 1.0, 5)]",
        "logprob": "-0.391206671636638",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 282
    },
    {
        "nl": "How many people are there of each nationality ?",
        "true_sql": "select people.nationality , count ( people.* ) group_by people.nationality",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "people.*",
            ")",
            ",",
            "people.nationality",
            "group_by",
            "people.nationality",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 48, 4], 8, [43], 10, 43, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9683481036177033, 1), ('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.999994158744812, 3), ('GROUP_COL', ('people', 'nationality', 43), 0.9999974966049194, 5)]",
        "logprob": "-0.12891875978007797",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 283
    },
    {
        "nl": "What is the most common nationality of people ?",
        "true_sql": "select people.nationality group_by people.nationality order_by count ( people.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.nationality",
            "group_by",
            "people.nationality",
            "order_by",
            "count",
            "(",
            "people.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 10, 43, 11, [9, 5, 48, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9984422326087952, 1), ('GROUP_COL', ('people', 'nationality', 43), 0.9761676788330078, 3), ('ORDER_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.8805551082411123, 5), ('ORDER_DESC_ASC', (('people', '*', 48), ('count', 3), False), 'desc', 0.9971151351928711, 6), ('ORDER_LIMIT', (('people', '*', 48), ('count', 3), False), 'limit_value', 0.9999275207519531, 7)]",
        "logprob": "-0.5389459442046202",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 284
    },
    {
        "nl": "Give the nationality that is most common across all people .",
        "true_sql": "select people.nationality group_by people.nationality order_by count ( people.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.nationality",
            "group_by",
            "people.nationality",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 10, 43, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('people', 'nationality', 43), 0.9995180368423462, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9903858433367502, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9976063966751099, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998819828033447, 7)]",
        "logprob": "-0.04242317283332435",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 285
    },
    {
        "nl": "What are the nationalities that are shared by at least two people ?",
        "true_sql": "select people.nationality group_by people.nationality having count ( people.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.nationality",
            "group_by",
            "people.nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 10, 43, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9999290704727173, 1), ('GROUP_COL', ('people', 'nationality', 43), 0.9998034834861755, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9151309617995608, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9997478716088136, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999877214431763, 7)]",
        "logprob": "-0.3562584359501716",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 286
    },
    {
        "nl": "Return the nationalities for which there are two or more people .",
        "true_sql": "select people.nationality group_by people.nationality having count ( people.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.nationality",
            "group_by",
            "people.nationality",
            "having",
            "count",
            "(",
            "people.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 10, 43, 18, [9, 5, 48, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.999981164932251, 1), ('GROUP_COL', ('people', 'nationality', 43), 0.9999972581863403, 3), ('HAV_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9994995288430752, 5), ('HAV_OP_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 0.999846458384915, 6), ('HAV_ROOT_TERM_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 'terminal', 0.9999861717224121, 7)]",
        "logprob": "-0.052419611403155",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 287
    },
    {
        "nl": "List the names and birth dates of people in ascending alphabetical order of name .",
        "true_sql": "select people.name , people.birth_date order_by people.name asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            ",",
            "people.birth_date",
            "order_by",
            "people.birth_date",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 11, [45], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.9999973773956299, 3), ('ORDER_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.9017120003700256, 5)]",
        "logprob": "-0.30448444834944716",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 288
    },
    {
        "nl": "What are the names and birth dates of people , ordered by their names in alphabetical order ?",
        "true_sql": "select people.name , people.birth_date order_by people.name asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            ",",
            "people.birth_date",
            "order_by",
            "people.name",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 11, [44], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999847412109375, 1), ('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.999996542930603, 3), ('ORDER_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9939290285110474, 5), ('ORDER_DESC_ASC', (('people', 'name', 44), ('none_agg', 0), False), 'asc', 0.9978185892105103, 6)]",
        "logprob": "-0.00851832330499966",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 289
    },
    {
        "nl": "Show names of people whose nationality is not `` Russia `` .",
        "true_sql": "select people.name where people.nationality != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 8, False], None], '\"Russia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "people.nationality",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 43, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('people', 'nationality', 43), 1.0, 3), ('WHERE_OP', (('people', 'nationality', 43),), ('!=', 5), 0.9992362260818481, 4), ('WHERE_ROOT_TERM', (('people', 'nationality', 43),), ('!=', 5), 'terminal', 0.9999740123748779, 5)]",
        "logprob": "-0.0015674782532915012",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 290
    },
    {
        "nl": "What are the names of people who are not from Russia ?",
        "true_sql": "select people.name where people.nationality != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 8, False], None], '\"Russia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "people.nationality",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 43, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('people', 'nationality', 43), 0.999998927116394, 3), ('WHERE_OP', (('people', 'nationality', 43),), ('!=', 5), 0.9977250695228577, 4), ('WHERE_ROOT_TERM', (('people', 'nationality', 43),), ('!=', 5), 'terminal', 0.9999911785125732, 5)]",
        "logprob": "-0.0023263983284637344",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 291
    },
    {
        "nl": "List the names of people that are not poker players .",
        "true_sql": "select people.name where people.people_id not in ( select poker_player.people_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 7, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "poker_player.people_id",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 37, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('poker_player', 'people_id', 37), 0.894010603427887, 3), ('WHERE_OP', (('poker_player', 'people_id', 37),), ('!=', 5), 0.5771077275276184, 4), ('WHERE_ROOT_TERM', (('poker_player', 'people_id', 37),), ('!=', 5), 'terminal', 0.9998863935470581, 5)]",
        "logprob": "-0.6745081889439539",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 292
    },
    {
        "nl": "What are the names of people who do not play poker ?",
        "true_sql": "select people.name where people.people_id not in ( select poker_player.people_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 7, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "people.people_id",
            "not",
            "in",
            "(",
            "select",
            "poker_player.people_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 42, [22, 20], 5, 2, [37], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('people', 'people_id', 42), 0.554574191570282, 3), ('WHERE_OP', (('people', 'people_id', 42),), ('not in', 7), 0.9807864916489921, 4), ('WHERE_ROOT_TERM', (('people', 'people_id', 42),), ('not in', 7), 'root', 0.9999903440475464, 5), ('SELECT_AGG_v2', ('poker_player', 'people_id', 37), ('none_agg', 0), False, 0.9999113082885742, 7), ('O', '##END_NESTED##', 0.9998804330825806, 8)]",
        "logprob": "-0.6334831344900116",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 293
    },
    {
        "nl": "How many distinct nationalities are there ?",
        "true_sql": "select count ( distinct people.nationality )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 8, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "people.nationality",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 43, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.9954873071846345, 1)]",
        "logprob": "-0.022620966073584152",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 294
    },
    {
        "nl": "Count the number of different nationalities .",
        "true_sql": "select count ( distinct people.nationality )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 8, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "people.nationality",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 43, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.9871053246987244, 1)]",
        "logprob": "-0.06490613717807261",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 295
    },
    {
        "nl": "How many visitors below age 30 are there ?",
        "true_sql": "select count ( visitor.* ) where visitor.age < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 8, False], None], 30.0, None]], 'extracted_clause_asterisk': {'select': 'visitor.*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "visit.*",
            ")",
            "where",
            "visitor.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 50, 4], 6, 43, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.998317850965135, 1), ('WHERE_COL', ('visitor', 'age', 43), 0.9999998807907104, 3), ('WHERE_OP', (('visitor', 'age', 43),), ('>', 1), 0.9548598527908325, 4), ('WHERE_ROOT_TERM', (('visitor', 'age', 43),), ('>', 1), 'terminal', 0.9999903440475464, 5)]",
        "logprob": "-0.0545005085235449",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 296
    },
    {
        "nl": "Find the names of the visitors whose membership level is higher than 4 , and order the results by the level from high to low .",
        "true_sql": "select visitor.name where visitor.level_of_membership > value order_by visitor.level_of_membership desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 7, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "visitor.name",
            "where",
            "visitor.level_of_membership",
            ">",
            "value",
            "order_by",
            "visitor.level_of_membership",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 42, [14], 3, 11, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.8217045664787292, 1), ('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9999988079071045, 3), ('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.9994369149208069, 4), ('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('>', 1), 'terminal', 0.999982476234436, 5), ('ORDER_AGG_v2', ('visitor', 'level_of_membership', 42), ('none_agg', 0), False, 0.9999834299087524, 7)]",
        "logprob": "-0.2363279428844311",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 297
    },
    {
        "nl": "What is the average age of the visitors whose membership level is not higher than 4 ?",
        "true_sql": "select avg ( visitor.age ) where visitor.level_of_membership < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 6, [0, [0, 7, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "visitor.level_of_membership",
            ")",
            "where",
            "visitor.level_of_membership",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 42, 4], 6, 42, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('avg', 5), False, 0.9959877229928715, 1), ('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9990697503089905, 3), ('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('<', 2), 0.6779651045799255, 4), ('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('<', 2), 'terminal', 0.9679705500602722, 5)]",
        "logprob": "-0.4638605675089263",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 298
    },
    {
        "nl": "Find the name and membership level of the visitors whose membership level is higher than 4 , and sort by their age from old to young .",
        "true_sql": "select visitor.name , visitor.level_of_membership where visitor.level_of_membership > value order_by visitor.age desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 8, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 7, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "museum.name",
            ",",
            "visitor.level_of_membership",
            "where",
            "visitor.level_of_membership",
            ">",
            "value",
            "order_by",
            "visitor.age",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [42], 6, 42, [14], 3, 11, [43], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9385255575180054, 1), ('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('none_agg', 0), False, 0.9382774829864502, 3), ('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9880934357643127, 5), ('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.9997368454933167, 6), ('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('>', 1), 'terminal', 0.9999157190322876, 7), ('ORDER_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.9470505118370056, 9)]",
        "logprob": "-0.1982362817945661",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 299
    },
    {
        "nl": "Find the id and name of the museum that has the most staff members ?",
        "true_sql": "select museum.museum_id , museum.name order_by museum.num_of_staff desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "museum.name",
            ",",
            "museum.name",
            "group_by",
            "visit.museum_id",
            "order_by",
            "count",
            "(",
            "museum.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 10, 44, 11, [9, 5, 48, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.6737853288650513, 1), ('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9999324083328247, 3), ('GROUP_COL', ('visit', 'museum_id', 44), 0.9996570348739624, 5), ('ORDER_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.9990056534714608, 7), ('ORDER_DESC_ASC', (('museum', '*', 48), ('count', 3), False), 'desc', 0.999686598777771, 8), ('ORDER_LIMIT', (('museum', '*', 48), ('count', 3), False), 'limit_value', 0.9998753070831299, 9)]",
        "logprob": "-0.4005919992812272",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 300
    },
    {
        "nl": "Find the average number of staff working for the museums that were open before 2009 .",
        "true_sql": "select avg ( museum.num_of_staff ) where museum.open_year < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 4, False], None], 2009.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "museum.num_of_staff",
            ")",
            "where",
            "museum.open_year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 38, 4], 6, 39, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('avg', 5), False, 0.9994103801121579, 1), ('WHERE_COL', ('museum', 'open_year', 39), 0.9998738765716553, 3), ('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.7621412873268127, 4), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9979210495948792, 5)]",
        "logprob": "-0.2763555733464152",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 301
    },
    {
        "nl": "What are the opening year and staff number of the museum named Plaza Museum ?",
        "true_sql": "select museum.num_of_staff , museum.open_year where museum.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Plaza Museum\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "museum.open_year",
            ",",
            "museum.num_of_staff",
            "where",
            "museum.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'open_year', 39), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('none_agg', 0), False, 0.9949843883514404, 3), ('WHERE_COL', ('museum', 'name', 37), 0.9999738931655884, 5), ('WHERE_OP', (('museum', 'name', 37),), ('=', 0), 0.9999982118606567, 6), ('WHERE_ROOT_TERM', (('museum', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 7)]",
        "logprob": "-0.005135045843685354",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 302
    },
    {
        "nl": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010 .",
        "true_sql": "select museum.name where museum.num_of_staff > ( select min ( museum.num_of_staff ) where museum.open_year > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 2010.0, None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "museum.name",
            "where",
            "museum.num_of_staff",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9999992847442627, 1), ('WHERE_COL', ('museum', 'num_of_staff', 38), 0.9885953068733215, 3), ('WHERE_OP', (('museum', 'num_of_staff', 38),), ('>', 1), 0.9994551539421082, 4), ('WHERE_ROOT_TERM', (('museum', 'num_of_staff', 38),), ('>', 1), 'terminal', 0.9997501969337463, 5)]",
        "logprob": "-0.26624004891482134",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 303
    },
    {
        "nl": "find the id , name and age for visitors who visited some museums more than once .",
        "true_sql": "select visitor.id , visitor.name , visitor.age group_by visitor.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "museum.museum_id",
            ",",
            "museum.name",
            ",",
            "museum.name",
            "where",
            "museum.open_year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 8, [37], 8, [37], 6, 39, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'museum_id', 36), ('none_agg', 0), False, 0.7767966985702515, 1), ('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9959396123886108, 3), ('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.31203925609588623, 5), ('WHERE_COL', ('museum', 'open_year', 39), 0.7264205813407898, 7), ('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.9996116757392883, 8), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9975290894508362, 9)]",
        "logprob": "-2.188877225971669",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 304
    },
    {
        "nl": "What are the id , name and membership level of visitors who have spent the largest amount of money in total in all museum tickets ?",
        "true_sql": "select visit.visitor_id , visitor.name , visitor.level_of_membership group_by visit.visitor_id order_by sum ( visit.total_spent ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [4, 12, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "visit.museum_id",
            ",",
            "museum.name",
            ",",
            "sum",
            "(",
            "visit.total_spent",
            ")",
            "group_by",
            "visit.museum_id",
            "order_by",
            "sum",
            "(",
            "visit.total_spent",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [37], 8, [24, 5, 47, 4], 10, 44, 11, [24, 5, 47, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.632712185382843, 1), ('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.8155011534690857, 3), ('SELECT_AGG_v2', ('visit', 'total_spent', 47), ('sum', 4), False, 0.9676548769537993, 5), ('GROUP_COL', ('visit', 'museum_id', 44), 0.9670113921165466, 7), ('ORDER_AGG_v2', ('visit', 'total_spent', 47), ('sum', 4), False, 0.8117660595235738, 9), ('ORDER_DESC_ASC', (('visit', 'total_spent', 47), ('sum', 4), False), 'desc', 0.9776161909103394, 10), ('ORDER_LIMIT', (('visit', 'total_spent', 47), ('sum', 4), False), 'limit_value', 0.9917961359024048, 11)]",
        "logprob": "-1.9592583802005283",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 305
    },
    {
        "nl": "What are the id and name of the museum visited most times ?",
        "true_sql": "select visit.museum_id , museum.name group_by visit.museum_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "museum.name",
            ",",
            "museum.name",
            "group_by",
            "visit.museum_id",
            "order_by",
            "count",
            "(",
            "visit.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 10, 44, 11, [9, 5, 50, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.5441085696220398, 1), ('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9962833523750305, 3), ('GROUP_COL', ('visit', 'museum_id', 44), 0.9999121427536011, 5), ('ORDER_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9418346456559279, 7), ('ORDER_DESC_ASC', (('visit', '*', 50), ('count', 3), False), 'desc', 0.9981400966644287, 8), ('ORDER_LIMIT', (('visit', '*', 50), ('count', 3), False), 'limit_value', 0.9998881816864014, 9)]",
        "logprob": "-0.8548089812097589",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 306
    },
    {
        "nl": "What is the name of the museum that had no visitor yet ?",
        "true_sql": "select museum.name where museum.museum_id not in ( select visit.museum_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "museum.name",
            "where",
            "museum.museum_id",
            "not",
            "in",
            "(",
            "select",
            "visit.museum_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('museum', 'museum_id', 36), 0.9793670773506165, 3), ('WHERE_OP', (('museum', 'museum_id', 36),), ('not in', 7), 0.9947195548845527, 4), ('WHERE_ROOT_TERM', (('museum', 'museum_id', 36),), ('not in', 7), 'root', 0.9999905824661255, 5), ('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.9999959468841553, 7), ('O', '##END_NESTED##', 0.9997841715812683, 8)]",
        "logprob": "-0.04864260351915234",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 307
    },
    {
        "nl": "Find the name and age of the visitor who bought the most tickets at once .",
        "true_sql": "select visitor.name , visitor.age order_by visit.num_of_ticket desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "visitor.name",
            ",",
            "visitor.age",
            "group_by",
            "visit.num_of_ticket",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [43], 10, 46, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.9996345043182373, 1), ('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.960210382938385, 3), ('GROUP_COL', ('visit', 'num_of_ticket', 46), 0.8183055520057678, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998992552352747, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9995585083961487, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998992681503296, 9)]",
        "logprob": "-0.2493623993862764",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 308
    },
    {
        "nl": "What are the average and maximum number of tickets bought in all visits ?",
        "true_sql": "select avg ( visit.num_of_ticket ) , max ( visit.num_of_ticket )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 11, False], None]], [1, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "visit.num_of_ticket",
            ")",
            ",",
            "max",
            "(",
            "visit.num_of_ticket",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 46, 4], 8, [19, 5, 46, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('avg', 5), False, 0.9792317796813937, 1), ('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('max', 1), False, 0.8252707380256419, 3)]",
        "logprob": "-0.8667990782311834",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 309
    },
    {
        "nl": "What is the total ticket expense of the visitors whose membership level is 1 ?",
        "true_sql": "select sum ( visit.total_spent ) where visitor.level_of_membership = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "visit.num_of_ticket",
            ")",
            "where",
            "visitor.level_of_membership",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 46, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('sum', 4), False, 0.9999215277850515, 1), ('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.6900539994239807, 3), ('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('=', 0), 0.9850919842720032, 4), ('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('=', 0), 'terminal', 0.9999942779541016, 5)]",
        "logprob": "-0.388669768278259",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 310
    },
    {
        "nl": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011 ?",
        "true_sql": "select visitor.name where museum.open_year < value intersect select visitor.name where museum.open_year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 2011.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 4, False], None], 2009.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "museum.name",
            "where",
            "museum.open_year",
            "<",
            "value",
            "intersect",
            "select",
            "museum.name",
            "where",
            "museum.open_year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 39, [21], 3, 23, 2, [37], 6, 39, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9990498423576355, 1), ('WHERE_COL', ('museum', 'open_year', 39), 0.9999911785125732, 3), ('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.6042547225952148, 4), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9999681711196899, 5), ('IUEN_v2', ('intersect', 1), 0.9460994601249695, 6), ('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9972777962684631, 8), ('WHERE_COL', ('museum', 'open_year', 39), 0.9998672008514404, 10), ('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.8581793904304504, 11), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999570846557617, 12)]",
        "logprob": "-0.716171327580105",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 311
    },
    {
        "nl": "Find the number of visitors who did not visit any museum opened after 2010 .",
        "true_sql": "select count ( visitor.* ) where visitor.id not in ( select visit.visitor_id where museum.open_year > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 2010.0, None]]}, None]], 'extracted_clause_asterisk': {'select': 'visitor.*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "visit.*",
            ")",
            "where",
            "museum.museum_id",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 50, 4], 6, 36, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9768038920192129, 1), ('WHERE_COL', ('museum', 'museum_id', 36), 0.9725989699363708, 3), ('WHERE_OP', (('museum', 'museum_id', 36),), ('>', 1), 0.504450261592865, 4), ('WHERE_ROOT_TERM', (('museum', 'museum_id', 36),), ('>', 1), 'terminal', 0.9986151456832886, 5)]",
        "logprob": "-0.8079585761150185",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 312
    },
    {
        "nl": "How many museums were opened after 2013 or before 2008 ?",
        "true_sql": "select count ( museum.* ) where museum.open_year > value or museum.open_year < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 2013.0, None], 'or', [False, 4, [0, [0, 4, False], None], 2008.0, None]], 'extracted_clause_asterisk': {'select': 'museum.*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "museum.*",
            ")",
            "where",
            "museum.open_year",
            ">",
            "value",
            "or",
            "museum.open_year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 48, 4], 6, 39, [14], 3, 25, 39, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.9999281881389063, 1), ('WHERE_COL', ('museum', 'open_year', 39), 0.9992930889129639, 3), ('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.9859364032745361, 4), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999822378158569, 5), ('WHERE_COL', ('museum', 'open_year', 39), 0.9999915361404419, 7), ('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.9807918667793274, 8), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9998595714569092, 9)]",
        "logprob": "-0.18641092091683922",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 313
    },
    {
        "nl": "List the title of all cartoons in alphabetical order .",
        "true_sql": "select cartoon.title order_by cartoon.title",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            "order_by",
            "cartoon.title",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 11, [55], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.996243953704834, 3)]",
        "logprob": "-0.0038398902362671494",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 314
    },
    {
        "nl": "What are the titles of the cartoons sorted alphabetically ?",
        "true_sql": "select cartoon.title order_by cartoon.title",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            "order_by",
            "cartoon.title",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 11, [55], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9971319437026978, 3)]",
        "logprob": "-0.003028943463232608",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 315
    },
    {
        "nl": "List all cartoon directed by `` Ben Jones `` .",
        "true_sql": "select cartoon.title where cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9996414184570312, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9970303773880005, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999978542327881, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999967813491821, 5)]",
        "logprob": "-0.003463823616474514",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 316
    },
    {
        "nl": "What are the names of all cartoons directed by Ben Jones ?",
        "true_sql": "select cartoon.title where cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.999995231628418, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999789297580719, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999996542930603, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.00024088470128641129",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 317
    },
    {
        "nl": "How many cartoons were written by `` Joseph Kuhr `` ?",
        "true_sql": "select count ( cartoon.* ) where cartoon.written_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Joseph Kuhr\"', None]], 'extracted_clause_asterisk': {'select': 'cartoon.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "cartoon.written_by",
            ")",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 57, 4], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'written_by', 57), ('count', 3), True, 0.9516296938678815, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.9999020099639893, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999974966049194, 5)]",
        "logprob": "-0.24833200743029124",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 318
    },
    {
        "nl": "What is the number of cartoones written by Joseph Kuhr ?",
        "true_sql": "select count ( cartoon.* ) where cartoon.written_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Joseph Kuhr\"', None]], 'extracted_clause_asterisk': {'select': 'cartoon.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "cartoon.*",
            ")",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 63, 4], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9192481202906391, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.998701810836792, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999949932098389, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.3448532175498102",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 319
    },
    {
        "nl": "list all cartoon titles and their directors ordered by their air date",
        "true_sql": "select cartoon.title , cartoon.directed_by order_by cartoon.original_air_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 21, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            ",",
            "cartoon.directed_by",
            "order_by",
            "cartoon.original_air_date",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 8, [56], 11, [58], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.9649810194969177, 3), ('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9861187934875488, 5)]",
        "logprob": "-0.6173215596632304",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 320
    },
    {
        "nl": "What is the name and directors of all the cartoons that are ordered by air date ?",
        "true_sql": "select cartoon.title , cartoon.directed_by order_by cartoon.original_air_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 21, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            ",",
            "cartoon.directed_by",
            "order_by",
            "cartoon.original_air_date",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 8, [56], 11, [58], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.9718252420425415, 3), ('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.693194568157196, 5)]",
        "logprob": "-0.39970830116321004",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 321
    },
    {
        "nl": "List the title of all cartoon directed by `` Ben Jones `` or `` Brandon Vietti `` .",
        "true_sql": "select cartoon.title where cartoon.directed_by = value or cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None], 'or', [False, 2, [0, [0, 21, False], None], '\"Brandon Vietti\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "or",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 56, [7], 3, 25, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9962837100028992, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999666213989258, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999958276748657, 5), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.5123862028121948, 7), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999617338180542, 8), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999973773956299, 9)]",
        "logprob": "-0.6761387368336857",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 322
    },
    {
        "nl": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti ?",
        "true_sql": "select cartoon.title where cartoon.directed_by = value or cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None], 'or', [False, 2, [0, [0, 21, False], None], '\"Brandon Vietti\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "or",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 56, [7], 3, 25, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998476505279541, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999622106552124, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999982118606567, 5), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9529662132263184, 7), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999675750732422, 8), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999963045120239, 9)]",
        "logprob": "-0.05200995147456946",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 323
    },
    {
        "nl": "Which country has the most of TV Channels ? List the country and number of TV Channels it has .",
        "true_sql": "select tv_channel.country , count ( tv_channel.* ) group_by tv_channel.country order_by count ( tv_channel.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*', 'order_by': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.country",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.country",
            "order_by",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [9, 5, 61, 4], 10, 38, 11, [9, 5, 61, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999997615814209, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9794000271178795, 3), ('GROUP_COL', ('tv_channel', 'country', 38), 1.0, 5), ('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9907768879193602, 7), ('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'desc', 0.9994944334030151, 8), ('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.999747097492218, 9)]",
        "logprob": "-0.13059265929127653",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 324
    },
    {
        "nl": "What is the country with the most number of TV Channels and how many does it have ?",
        "true_sql": "select tv_channel.country , count ( tv_channel.* ) group_by tv_channel.country order_by count ( tv_channel.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*', 'order_by': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "tv_channel.country",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [9, 5, 35, 4], 10, 38, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999923706054688, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9812626229921418, 3), ('GROUP_COL', ('tv_channel', 'country', 38), 0.9999992847442627, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.960602039454497, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996323585510254, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999747097492218, 9)]",
        "logprob": "-0.2691416605226518",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 325
    },
    {
        "nl": "List the number of different series names and contents in the TV Channel table .",
        "true_sql": "select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 2, True], None]], [3, [0, [0, 5, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "tv_channel.series_name",
            ")",
            ",",
            "tv_channel.series_name",
            "group_by",
            "tv_channel.series_name",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 37, 4], 8, [37], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('count', 3), True, 0.9012423295145019, 1), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9777652621269226, 3), ('GROUP_COL', ('tv_channel', 'series_name', 37), 0.9993376135826111, 5)]",
        "logprob": "-0.5783490621802871",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 326
    },
    {
        "nl": "How many different series and contents are listed in the TV Channel table ?",
        "true_sql": "select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 2, True], None]], [3, [0, [0, 5, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "tv_channel.series_name",
            ")",
            ",",
            "tv_channel.series_name",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 37, 4], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('count', 3), True, 0.9998515170322833, 1), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9475364089012146, 3)]",
        "logprob": "-0.5656252113605493",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 327
    },
    {
        "nl": "What is the content of TV Channel with serial name `` Sky Radio `` ?",
        "true_sql": "select tv_channel.content where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.content",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.9975064396858215, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9945496916770935, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999915361404419, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.008114964652165598",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 328
    },
    {
        "nl": "What is the content of the series Sky Radio ?",
        "true_sql": "select tv_channel.content where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.content",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.9971904158592224, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9998912811279297, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999988079071045, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.0029858034173744666",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 329
    },
    {
        "nl": "What is the Package Option of TV Channel with serial name `` Sky Radio `` ?",
        "true_sql": "select tv_channel.package_option where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9999973773956299, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9974145889282227, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.999992847442627, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.0027369454152921806",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 330
    },
    {
        "nl": "What are the Package Options of the TV Channels whose series names are Sky Radio ?",
        "true_sql": "select tv_channel.package_option where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9989270567893982, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999995231628418, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999901056289673, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.0019385022610090834",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 331
    },
    {
        "nl": "How many TV Channel using language English ?",
        "true_sql": "select count ( tv_channel.* ) where tv_channel.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {'select': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "where",
            "tv_channel.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9793148707377752, 1), ('WHERE_COL', ('tv_channel', 'language', 39), 1.0, 3), ('WHERE_OP', (('tv_channel', 'language', 39),), ('=', 0), 0.9999270439147949, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.08431613649041354",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 332
    },
    {
        "nl": "How many TV Channels use the English language ?",
        "true_sql": "select count ( tv_channel.* ) where tv_channel.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {'select': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "where",
            "tv_channel.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9810576573254005, 1), ('WHERE_COL', ('tv_channel', 'language', 39), 1.0, 3), ('WHERE_OP', (('tv_channel', 'language', 39),), ('=', 0), 0.999981164932251, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.07685422872520116",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 333
    },
    {
        "nl": "List the language used least number of TV Channel . List language and number of TV Channel .",
        "true_sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language order_by count ( tv_channel.* ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*', 'order_by': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "tv_channel.language",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 35, 4], 10, 39, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.9999996423721313, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9696910825585096, 3), ('GROUP_COL', ('tv_channel', 'language', 39), 0.9999995231628418, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9186491599008081, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.917178213596344, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9930603504180908, 9)]",
        "logprob": "-0.7464036547729695",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 334
    },
    {
        "nl": "What are the languages used by the least number of TV Channels and how many channels use it ?",
        "true_sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language order_by count ( tv_channel.* ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*', 'order_by': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "tv_channel.language",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 35, 4], 10, 39, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9743968990687648, 3), ('GROUP_COL', ('tv_channel', 'language', 39), 0.9999996423721313, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9376787437858384, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9215078949928284, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.99379563331604, 9)]",
        "logprob": "-0.6395961744448166",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 335
    },
    {
        "nl": "List each language and the number of TV Channels using it .",
        "true_sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.language",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.language",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 61, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9999336709951248, 3), ('GROUP_COL', ('tv_channel', 'language', 39), 1.0, 5)]",
        "logprob": "-0.0005461531039786946",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 336
    },
    {
        "nl": "For each language , list the number of TV Channels that use it .",
        "true_sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.language",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.language",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 61, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.999281108379364, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9937030270378051, 3), ('GROUP_COL', ('tv_channel', 'language', 39), 0.9999997615814209, 5)]",
        "logprob": "-0.027635314590412137",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 337
    },
    {
        "nl": "What is the TV Channel that shows the cartoon `` The Rise of the Blue Beetle ! `` ? List the TV Channel 's series name .",
        "true_sql": "select tv_channel.series_name where cartoon.title = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"The Rise of the Blue Beetle!\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.channel",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.7920108437538147, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.6131166219711304, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999986886978149, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999977350234985, 5)]",
        "logprob": "-0.7226617231395888",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 338
    },
    {
        "nl": "What is the series name of the TV Channel that shows the cartoon `` The Rise of the Blue Beetle `` ?",
        "true_sql": "select tv_channel.series_name where cartoon.title = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"The Rise of the Blue Beetle!\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            "where",
            "cartoon.title",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.6558051109313965, 1), ('WHERE_COL', ('cartoon', 'title', 55), 0.9997060894966125, 3), ('WHERE_OP', (('cartoon', 'title', 55),), ('=', 0), 0.9999945163726807, 4), ('WHERE_ROOT_TERM', (('cartoon', 'title', 55),), ('=', 0), 'terminal', 0.9999973773956299, 5)]",
        "logprob": "-0.4226965017843616",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 339
    },
    {
        "nl": "List the title of all Cartoons showed on TV Channel with series name `` Sky Radio `` .",
        "true_sql": "select cartoon.title where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9999986886978149, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999791383743286, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999963045120239, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.002801901299818367",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 340
    },
    {
        "nl": "What is the title of all the cartools that are on the TV Channel with the series name `` Sky Radio `` ?",
        "true_sql": "select cartoon.title where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.channel",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.6806944012641907, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999996423721313, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9998935461044312, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999969005584717, 5)]",
        "logprob": "-0.3849941765943499",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 341
    },
    {
        "nl": "List the Episode of all TV series sorted by rating .",
        "true_sql": "select tv_series.episode order_by tv_series.rating",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.episode",
            "order_by",
            "tv_series.rating",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 11, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9999995231628418, 1), ('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.9995085000991821, 3)]",
        "logprob": "-0.00131740351642327",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 342
    },
    {
        "nl": "What are all of the episodes ordered by ratings ?",
        "true_sql": "select tv_series.episode order_by tv_series.rating",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.episode",
            "order_by",
            "tv_series.rating",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 11, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9498251676559448, 1), ('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.9900422096252441, 3)]",
        "logprob": "-0.06177933779474385",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 343
    },
    {
        "nl": "List top 3 highest Rating TV series . List the TV series 's Episode and Rating .",
        "true_sql": "select tv_series.episode , tv_series.rating order_by tv_series.rating desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            ",",
            "tv_series.rating",
            "order_by",
            "tv_series.rating",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [48], 11, [48], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9894621968269348, 1), ('SELECT_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.8945344090461731, 3), ('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.786291241645813, 5), ('ORDER_DESC_ASC', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'desc', 0.9925270080566406, 6), ('ORDER_LIMIT', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'limit_value', 0.9999446868896484, 7)]",
        "logprob": "-0.3817250016057915",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 344
    },
    {
        "nl": "What are 3 most highly rated episodes in the TV series table and what were those ratings ?",
        "true_sql": "select tv_series.episode , tv_series.rating order_by tv_series.rating desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.episode",
            ",",
            "count",
            "(",
            "tv_series.*",
            ")",
            "group_by",
            "tv_series.episode",
            "order_by",
            "count",
            "(",
            "tv_series.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [9, 5, 62, 4], 10, 46, 11, [9, 5, 62, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9952436089515686, 1), ('SELECT_AGG_v2', ('tv_series', '*', 62), ('count', 3), False, 0.8802941992899301, 3), ('GROUP_COL', ('tv_series', 'episode', 46), 0.8275492787361145, 5), ('ORDER_AGG_v2', ('tv_series', '*', 62), ('count', 3), False, 0.9872498857060428, 7), ('ORDER_DESC_ASC', (('tv_series', '*', 62), ('count', 3), False), 'desc', 0.9991186261177063, 8), ('ORDER_LIMIT', (('tv_series', '*', 62), ('count', 3), False), 'limit_value', 0.9989739656448364, 9)]",
        "logprob": "-0.7583336951695745",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 345
    },
    {
        "nl": "What is minimum and maximum share of TV series ?",
        "true_sql": "select max ( tv_series.share ) , min ( tv_series.share )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]], [2, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "tv_series.share",
            ")",
            ",",
            "max",
            "(",
            "tv_series.share",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 49, 4], 8, [19, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'share', 49), ('min', 2), False, 0.9824144441764974, 1), ('SELECT_AGG_v2', ('tv_series', 'share', 49), ('max', 1), False, 0.9318134003021777, 3)]",
        "logprob": "-0.3535725987097667",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 346
    },
    {
        "nl": "What is the maximum and minimum share for the TV series ?",
        "true_sql": "select max ( tv_series.share ) , min ( tv_series.share )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]], [2, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "tv_series.share",
            ")",
            ",",
            "min",
            "(",
            "tv_series.share",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 49, 4], 8, [26, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'share', 49), ('max', 1), False, 0.8410383927336298, 1), ('SELECT_AGG_v2', ('tv_series', 'share', 49), ('min', 2), False, 0.9242978635273007, 3)]",
        "logprob": "-1.0085943095601106",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 347
    },
    {
        "nl": "What is the air date of TV series with Episode `` A Love of a Lifetime `` ?",
        "true_sql": "select tv_series.air_date where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.air_date",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'air_date', 47), ('none_agg', 0), False, 0.9999947547912598, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.9999997615814209, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999381303787231, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9998354911804199, 5)]",
        "logprob": "-0.000560510296746952",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 348
    },
    {
        "nl": "When did the episode `` A Love of a Lifetime `` air ?",
        "true_sql": "select tv_series.air_date where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.episode",
            "where",
            "tv_series.air_date",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9679570198059082, 1), ('WHERE_COL', ('tv_series', 'air_date', 47), 0.8532360196113586, 3), ('WHERE_OP', (('tv_series', 'air_date', 47),), ('=', 0), 0.9999814033508301, 4), ('WHERE_ROOT_TERM', (('tv_series', 'air_date', 47),), ('=', 0), 'terminal', 0.999891996383667, 5)]",
        "logprob": "-0.19185338797189622",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 349
    },
    {
        "nl": "What is Weekly Rank of TV series with Episode `` A Love of a Lifetime `` ?",
        "true_sql": "select tv_series.weekly_rank where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.weekly_rank",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'weekly_rank', 52), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.9999997615814209, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999496936798096, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.999830961227417, 5)]",
        "logprob": "-0.0003527624643191828",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 350
    },
    {
        "nl": "What is the weekly rank for the episode `` A Love of a Lifetime `` ?",
        "true_sql": "select tv_series.weekly_rank where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.weekly_rank",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'weekly_rank', 52), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.999996542930603, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999539852142334, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9991699457168579, 5)]",
        "logprob": "-0.001456771026712698",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 351
    },
    {
        "nl": "What is the TV Channel of TV series with Episode `` A Love of a Lifetime `` ? List the TV Channel 's series name .",
        "true_sql": "select tv_channel.series_name where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.channel",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.9997195601463318, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.9999879598617554, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9998447895050049, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9894741177558899, 5)]",
        "logprob": "-0.011722019958278224",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 352
    },
    {
        "nl": "What is the name of the series that has the episode `` A Love of a Lifetime `` ?",
        "true_sql": "select tv_channel.series_name where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9999995231628418, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.9999985694885254, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9998481273651123, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9998449087142944, 5)]",
        "logprob": "-0.0011325796327662369",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 353
    },
    {
        "nl": "List the Episode of all TV series showed on TV Channel with series name `` Sky Radio `` .",
        "true_sql": "select tv_series.episode where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.episode",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9998831748962402, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999955892562866, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999971389770508, 5)]",
        "logprob": "-0.0007603427313536384",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 354
    },
    {
        "nl": "What is the episode for the TV series named `` Sky Radio `` ?",
        "true_sql": "select tv_series.episode where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_series.episode",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999995231628418, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.00018318057344470594",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 355
    },
    {
        "nl": "Find the number of cartoons directed by each of the listed directors .",
        "true_sql": "select count ( cartoon.* ) , cartoon.directed_by group_by cartoon.directed_by",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 21, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 21, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'cartoon.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "cartoon.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 63, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.996158595464759, 1)]",
        "logprob": "-0.04689327391574391",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 356
    },
    {
        "nl": "How many cartoons did each director create ?",
        "true_sql": "select count ( cartoon.* ) , cartoon.directed_by group_by cartoon.directed_by",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 21, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 21, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'cartoon.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "cartoon.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 63, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9975330698615654, 1)]",
        "logprob": "-0.009976595504454204",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 357
    },
    {
        "nl": "Find the production code and channel of the most recently aired cartoon .",
        "true_sql": "select cartoon.production_code , cartoon.channel order_by cartoon.original_air_date limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.production_code",
            ",",
            "cartoon.channel",
            "order_by",
            "cartoon.original_air_date",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 8, [60], 11, [58], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'production_code', 59), ('none_agg', 0), False, 0.9999990463256836, 1), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9959850311279297, 3), ('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9975948929786682, 5), ('ORDER_DESC_ASC', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'desc', 0.8614485859870911, 6), ('ORDER_LIMIT', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'limit_value', 0.9999345541000366, 7)]",
        "logprob": "-0.504563224561213",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 358
    },
    {
        "nl": "What is the produdction code and channel of the most recent cartoon ?",
        "true_sql": "select cartoon.production_code , cartoon.channel order_by cartoon.original_air_date limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.production_code",
            ",",
            "cartoon.channel",
            "order_by",
            "cartoon.original_air_date",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 8, [60], 11, [58], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'production_code', 59), ('none_agg', 0), False, 0.9971826076507568, 1), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9944522976875305, 3), ('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.934988260269165, 5), ('ORDER_DESC_ASC', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'desc', 0.9928908348083496, 6), ('ORDER_LIMIT', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'limit_value', 0.999967098236084, 7)]",
        "logprob": "-0.08440731259920753",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 359
    },
    {
        "nl": "Find the package choice and series name of the TV channel that has high definition TV .",
        "true_sql": "select tv_channel.package_option , tv_channel.series_name where tv_channel.hight_definition_tv = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"yes\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            ",",
            "tv_channel.series_name",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [37], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9996343851089478, 1), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9990620017051697, 3), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.49970585107803345, 5), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999865293502808, 6), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999904632568359, 7)]",
        "logprob": "-0.7254510184206421",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 360
    },
    {
        "nl": "What are the package options and the name of the series for the TV Channel that supports high definition TV ?",
        "true_sql": "select tv_channel.package_option , tv_channel.series_name where tv_channel.hight_definition_tv = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"yes\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            ",",
            "tv_channel.series_name",
            "where",
            "tv_channel.hight_definition_tv",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [37], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9999023675918579, 1), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9693878889083862, 3), ('WHERE_COL', ('tv_channel', 'hight_definition_tv', 42), 0.458269327878952, 5), ('WHERE_OP', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 0.9990893602371216, 6), ('WHERE_ROOT_TERM', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 'terminal', 0.9999754428863525, 7)]",
        "logprob": "-0.8295738522884613",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 361
    },
    {
        "nl": "which countries ' tv channels are playing some cartoon written by Todd Casey ?",
        "true_sql": "select tv_channel.country where cartoon.written_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Todd Casey\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.country",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.990672767162323, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.9838829636573792, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999961853027344, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.02576954362498556",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 362
    },
    {
        "nl": "What are the countries that have cartoons on TV that were written by Todd Casey ?",
        "true_sql": "select tv_channel.country where cartoon.written_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Todd Casey\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.country",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.987198531627655, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999881982803345, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.01688628276636969",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 363
    },
    {
        "nl": "which countries ' tv channels are not playing any cartoon written by Todd Casey ?",
        "true_sql": "select tv_channel.country except select tv_channel.country where cartoon.written_by = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Todd Casey\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.country",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9850541949272156, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.5761244893074036, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.7642615437507629, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999799728393555, 5)]",
        "logprob": "-0.8741953896096715",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 364
    },
    {
        "nl": "What are the countries that are not playing cartoons written by Todd Casey ?",
        "true_sql": "select tv_channel.country except select tv_channel.country where cartoon.written_by = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Todd Casey\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.country",
            "where",
            "cartoon.written_by",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 57, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.999762237071991, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.9991821646690369, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('!=', 5), 0.8682719469070435, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('!=', 5), 'terminal', 0.999943733215332, 5)]",
        "logprob": "-0.14537977723506745",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 365
    },
    {
        "nl": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang ?",
        "true_sql": "select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value intersect select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Michael Chang\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            ",",
            "tv_channel.country",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "intersect",
            "select",
            "tv_channel.series_name",
            ",",
            "tv_channel.country",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 56, [7], 3, 23, 2, [37], 8, [38], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9413647055625916, 1), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9985645413398743, 3), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998075366020203, 5), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999728202819824, 6), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999991655349731, 7), ('IUEN_v2', ('intersect', 1), 0.8933481574058533, 8), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.8974182605743408, 10), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9978164434432983, 12), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9997777342796326, 14), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999942779541016, 15), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999997615814209, 16)]",
        "logprob": "-0.3041990395460068",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 366
    },
    {
        "nl": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang ?",
        "true_sql": "select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value intersect select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Michael Chang\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            ",",
            "tv_channel.country",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "intersect",
            "select",
            "tv_channel.series_name",
            ",",
            "tv_channel.country",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 56, [7], 3, 23, 2, [37], 8, [38], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9762229919433594, 1), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999709129333496, 3), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999871015548706, 5), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999703168869019, 6), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999988079071045, 7), ('IUEN_v2', ('intersect', 1), 0.9696956276893616, 8), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9395159482955933, 10), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999303817749023, 12), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9996891021728516, 14), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999995231628418, 15), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999996423721313, 16)]",
        "logprob": "-0.14222947471708924",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 367
    },
    {
        "nl": "find the pixel aspect ratio and nation of the tv channels that do not use English .",
        "true_sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country where tv_channel.language != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.pixel_aspect_ratio_par",
            ",",
            "tv_channel.language",
            "where",
            "tv_channel.language",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [39], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'pixel_aspect_ratio_par', 41), ('none_agg', 0), False, 0.9950645565986633, 1), ('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.9969610571861267, 3), ('WHERE_COL', ('tv_channel', 'language', 39), 0.9973652958869934, 5), ('WHERE_OP', (('tv_channel', 'language', 39),), ('!=', 5), 0.9983893632888794, 6), ('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('!=', 5), 'terminal', 0.9999223947525024, 7)]",
        "logprob": "-0.012918866766629303",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 368
    },
    {
        "nl": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English ?",
        "true_sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country where tv_channel.language != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.country",
            ",",
            "tv_channel.country",
            "where",
            "tv_channel.country",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [38], 6, 38, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.5475361347198486, 1), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9557302594184875, 3), ('WHERE_COL', ('tv_channel', 'country', 38), 0.8532623052597046, 5), ('WHERE_OP', (('tv_channel', 'country', 38),), ('!=', 5), 0.9967005848884583, 6), ('WHERE_ROOT_TERM', (('tv_channel', 'country', 38),), ('!=', 5), 'terminal', 0.9998998641967773, 7)]",
        "logprob": "-0.8098859943386805",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 369
    },
    {
        "nl": "find id of the tv channels that from the countries where have more than two tv channels .",
        "true_sql": "select tv_channel.id group_by tv_channel.country having count ( tv_channel.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.id",
            "group_by",
            "tv_channel.country",
            "having",
            "count",
            "(",
            "tv_channel.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 10, 38, 18, [9, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.9948484897613525, 1), ('GROUP_COL', ('tv_channel', 'country', 38), 0.8542946577072144, 3), ('HAV_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9992190818144154, 5), ('HAV_OP_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 0.9995468258857727, 6), ('HAV_ROOT_TERM_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9999284744262695, 7)]",
        "logprob": "-0.18732286465238446",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 370
    },
    {
        "nl": "What are the ids of all tv channels that have more than 2 TV channels ?",
        "true_sql": "select tv_channel.id group_by tv_channel.country having count ( tv_channel.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.id",
            "group_by",
            "tv_channel.id",
            "having",
            "count",
            "(",
            "tv_channel.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 10, 36, 18, [9, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.9998579025268555, 1), ('GROUP_COL', ('tv_channel', 'id', 36), 0.9997866749763489, 3), ('HAV_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9995520743697752, 5), ('HAV_OP_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 0.9998390674591064, 6), ('HAV_ROOT_TERM_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.999698281288147, 7)]",
        "logprob": "-0.003747762816759833",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 371
    },
    {
        "nl": "find the id of tv channels that do not play any cartoon directed by Ben Jones .",
        "true_sql": "select tv_channel.id except select cartoon.channel where cartoon.directed_by = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.id",
            "where",
            "cartoon.directed_by",
            "not",
            "in",
            "(",
            "select",
            "tv_series.id",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 56, [22, 20], 5, 2, [45], 6, 56, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.7283329367637634, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.6414785981178284, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('not in', 7), 0.8443584653874542, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('not in', 7), 'root', 0.9998708963394165, 5), ('SELECT_AGG_v2', ('tv_series', 'id', 45), ('none_agg', 0), False, 0.5323672890663147, 7), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9986947178840637, 9), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9989824891090393, 10), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999973773956299, 11), ('O', '##END_NESTED##', 0.9976886510848999, 12)]",
        "logprob": "-1.74294512950711",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 372
    },
    {
        "nl": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones ?",
        "true_sql": "select tv_channel.id except select cartoon.channel where cartoon.directed_by = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cartoon.id",
            "where",
            "cartoon.directed_by",
            "not",
            "in",
            "(",
            "select",
            "cartoon.channel",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [54], 6, 56, [22, 20], 5, 2, [60], 6, 56, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'id', 54), ('none_agg', 0), False, 0.6962046027183533, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9246904850006104, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('not in', 7), 0.9420334265948839, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('not in', 7), 'root', 0.9998251795768738, 5), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9603155851364136, 7), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998401403427124, 9), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9987168312072754, 10), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999980926513672, 11), ('O', '##END_NESTED##', 0.9971265196800232, 12)]",
        "logprob": "-0.6113044485092263",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 373
    },
    {
        "nl": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones .",
        "true_sql": "select tv_channel.package_option where tv_channel.id not in ( select cartoon.channel where cartoon.directed_by = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            "where",
            "cartoon.directed_by",
            "not",
            "in",
            "(",
            "select",
            "cartoon.channel",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 56, [22, 20], 5, 2, [60], 6, 56, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9990934133529663, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9919133186340332, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('not in', 7), 0.9284032998174814, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('not in', 7), 'root', 0.9998564720153809, 5), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9986427426338196, 7), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9997608065605164, 9), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9978442192077637, 10), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999971389770508, 11), ('O', '##END_NESTED##', 0.996117353439331, 12)]",
        "logprob": "-0.17579027446293818",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 374
    },
    {
        "nl": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones ?",
        "true_sql": "select tv_channel.package_option where tv_channel.id not in ( select cartoon.channel where cartoon.directed_by = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            "where",
            "cartoon.directed_by",
            "not",
            "in",
            "(",
            "select",
            "cartoon.channel",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 56, [22, 20], 5, 2, [60], 6, 56, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9996764659881592, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9994438290596008, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('not in', 7), 0.865061039955063, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('not in', 7), 'root', 0.9998045563697815, 5), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9433732628822327, 7), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999944806098938, 9), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9986850619316101, 10), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999982118606567, 11), ('O', '##END_NESTED##', 0.9955829977989197, 12)]",
        "logprob": "-0.3600666549290827",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 375
    },
    {
        "nl": "Find the number of pets whose weight is heavier than 10 .",
        "true_sql": "select count ( pets.* ) where pets.weight > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 14, False], None], 10.0, None]], 'extracted_clause_asterisk': {'select': 'pets.*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "pets.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 49, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.893894016232564, 1), ('WHERE_COL', ('pets', 'weight', 49), 0.8562179803848267, 3), ('WHERE_OP', (('pets', 'weight', 49),), ('>', 1), 0.9996681213378906, 4), ('WHERE_ROOT_TERM', (('pets', 'weight', 49),), ('>', 1), 'terminal', 0.9998242259025574, 5)]",
        "logprob": "-0.6284720223261331",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 376
    },
    {
        "nl": "How many pets have a greater weight than 10 ?",
        "true_sql": "select count ( pets.* ) where pets.weight > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 14, False], None], 10.0, None]], 'extracted_clause_asterisk': {'select': 'pets.*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "pets.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 49, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9969652095358876, 1), ('WHERE_COL', ('pets', 'weight', 49), 0.8450515866279602, 3), ('WHERE_OP', (('pets', 'weight', 49),), ('>', 1), 0.9994980096817017, 4), ('WHERE_ROOT_TERM', (('pets', 'weight', 49),), ('>', 1), 'terminal', 0.9996991157531738, 5)]",
        "logprob": "-0.18588535200009673",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 377
    },
    {
        "nl": "Find the weight of the youngest dog .",
        "true_sql": "select pets.weight order_by pets.pet_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "pets.weight",
            "where",
            "pets.pet_age",
            "=",
            "(",
            "select",
            "max",
            "(",
            "pets.pet_age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 6, 48, [7], 5, 2, [19, 5, 48, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9999971389770508, 1), ('WHERE_COL', ('pets', 'pet_age', 48), 0.999575674533844, 3), ('WHERE_OP', (('pets', 'pet_age', 48),), ('=', 0), 0.9999538660049438, 4), ('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('=', 0), 'root', 0.9999963045120239, 5), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('max', 1), False, 0.9965213142262114, 7), ('O', '##END_NESTED##', 0.9999836683273315, 8)]",
        "logprob": "-0.1332641325970281",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 378
    },
    {
        "nl": "How much does the youngest dog weigh ?",
        "true_sql": "select pets.weight order_by pets.pet_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "pets.weight",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.8540007760753295, 1)]",
        "logprob": "-0.8581657963588645",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 379
    },
    {
        "nl": "Find the maximum weight for each type of pet . List the maximum weight and pet type .",
        "true_sql": "select max ( pets.weight ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "pets.pettype",
            ",",
            "max",
            "(",
            "pets.weight",
            ")",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [19, 5, 49, 4], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.42390376329421997, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.9858044045795815, 3), ('GROUP_COL', ('pets', 'pettype', 47), 1.0, 5)]",
        "logprob": "-1.0453716054517235",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 380
    },
    {
        "nl": "List the maximum weight and type for each type of pet .",
        "true_sql": "select max ( pets.weight ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "pets.weight",
            ")",
            ",",
            "pets.pettype",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 49, 4], 8, [47], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('min', 2), False, 0.9253023226899332, 1), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9395387768745422, 3), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9958459734916687, 5), ('GROUP_COL', ('pets', 'pettype', 47), 0.9999963045120239, 7)]",
        "logprob": "-0.9475211182685206",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 381
    },
    {
        "nl": "Find number of pets owned by students who are older than 20 .",
        "true_sql": "select count ( * ) where student.age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 20.0, None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "pets.*",
            ")",
            "where",
            "student.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 52, 4], 6, 39, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.897312274211679, 1), ('WHERE_COL', ('student', 'age', 39), 0.9950942993164062, 3), ('WHERE_OP', (('student', 'age', 39),), ('>', 1), 0.9481002688407898, 4), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('>', 1), 'terminal', 0.9999383687973022, 5)]",
        "logprob": "-0.4925444954465241",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 382
    },
    {
        "nl": "How many pets are owned by students that have an age greater than 20 ?",
        "true_sql": "select count ( * ) where student.age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 20.0, None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "pets.*",
            ")",
            "where",
            "student.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 52, 4], 6, 39, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.9357459068051495, 1), ('WHERE_COL', ('student', 'age', 39), 0.9931780099868774, 3), ('WHERE_OP', (('student', 'age', 39),), ('>', 1), 0.9997890591621399, 4), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('>', 1), 'terminal', 0.9999575614929199, 5)]",
        "logprob": "-0.27366601626262255",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 383
    },
    {
        "nl": "Find the number of dog pets that are raised by female students ( with sex F ) .",
        "true_sql": "select count ( * ) where student.sex = value and pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"F\"', None], 'and', [False, 2, [0, [0, 12, False], None], '\"dog\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "student.sex",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9278184646255865, 1), ('WHERE_COL', ('student', 'sex', 40), 0.9999991655349731, 3), ('WHERE_OP', (('student', 'sex', 40),), ('=', 0), 0.999997615814209, 4), ('WHERE_ROOT_TERM', (('student', 'sex', 40),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.37877412389413234",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 384
    },
    {
        "nl": "How many dog pets are raised by female students ?",
        "true_sql": "select count ( * ) where student.sex = value and pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"F\"', None], 'and', [False, 2, [0, [0, 12, False], None], '\"dog\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "pets.*",
            ")",
            "where",
            "student.sex",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 52, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.9180319211995305, 1), ('WHERE_COL', ('student', 'sex', 40), 0.9999995231628418, 3), ('WHERE_OP', (('student', 'sex', 40),), ('=', 0), 0.9999984502792358, 4), ('WHERE_ROOT_TERM', (('student', 'sex', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.3425958878677993",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 385
    },
    {
        "nl": "Find the number of distinct type of pets .",
        "true_sql": "select count ( distinct pets.pettype )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 12, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "pets.pettype",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.99228352199942, 1)]",
        "logprob": "-0.03873666949988016",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 386
    },
    {
        "nl": "How many different types of pet are there ?",
        "true_sql": "select count ( distinct pets.pettype )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 12, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "pets.pettype",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.9998909380247404, 1)]",
        "logprob": "-0.0005489158998276453",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 387
    },
    {
        "nl": "Find the first name of students who have cat or dog pet .",
        "true_sql": "select distinct student.fname where pets.pettype = value or pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None], 'or', [False, 2, [0, [0, 12, False], None], '\"dog\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "or",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 47, [7], 3, 25, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('pets', 'pettype', 47), 0.9999948740005493, 3), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999891519546509, 4), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('WHERE_COL', ('pets', 'pettype', 47), 0.9852815270423889, 7), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999233484268188, 8), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999953508377075, 9)]",
        "logprob": "-0.016660870027150297",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 388
    },
    {
        "nl": "What are the first names of every student who has a cat or dog as a pet ?",
        "true_sql": "select distinct student.fname where pets.pettype = value or pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None], 'or', [False, 2, [0, [0, 12, False], None], '\"dog\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "or",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 47, [7], 3, 25, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('pets', 'pettype', 47), 0.9716291427612305, 3), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999964237213135, 4), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999994039535522, 5), ('WHERE_COL', ('pets', 'pettype', 47), 0.6775496602058411, 7), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.999958872795105, 8), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999929666519165, 9)]",
        "logprob": "-0.420304529744339",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 389
    },
    {
        "nl": "Find the name of students who have both cat and dog pets .",
        "true_sql": "select student.fname where pets.pettype = value intersect select student.fname where pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"dog\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "pets.pettype",
            "where",
            "pets.pettype",
            "=",
            "value",
            "intersect",
            "select",
            "pets.pettype",
            "where",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 47, [7], 3, 23, 2, [47], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.5941420197486877, 1), ('WHERE_COL', ('pets', 'pettype', 47), 0.9999998807907104, 3), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999934434890747, 4), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('IUEN_v2', ('intersect', 1), 0.993359386920929, 6), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.2930273115634919, 8), ('WHERE_COL', ('pets', 'pettype', 47), 0.9999995231628418, 10), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999959468841553, 11), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 12)]",
        "logprob": "-1.7919167332010675",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 390
    },
    {
        "nl": "What are the students ' first names who have both cats and dogs as pets ?",
        "true_sql": "select student.fname where pets.pettype = value intersect select student.fname where pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"dog\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "intersect",
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 47, [7], 3, 23, 2, [38], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999991655349731, 1), ('WHERE_COL', ('pets', 'pettype', 47), 0.9541963338851929, 3), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999810457229614, 4), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.9984778761863708, 6), ('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9957433342933655, 8), ('WHERE_COL', ('pets', 'pettype', 47), 0.9999101161956787, 10), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999960660934448, 11), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.999998927116394, 12)]",
        "logprob": "-0.05756200073948978",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 391
    },
    {
        "nl": "Find the major and age of students who do not have a cat pet .",
        "true_sql": "select student.major , student.age where student.stuid not in ( select student.stuid where pets.pettype = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.major",
            ",",
            "pets.pet_age",
            "where",
            "student.age",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [48], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.9949048757553101, 1), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9802229404449463, 3), ('WHERE_COL', ('student', 'age', 39), 0.9997815489768982, 5), ('WHERE_OP', (('student', 'age', 39),), ('!=', 5), 0.8527812361717224, 6), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('!=', 5), 'terminal', 0.9999923706054688, 7)]",
        "logprob": "-0.18492441534646226",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 392
    },
    {
        "nl": "What major is every student who does not own a cat as a pet , and also how old are they ?",
        "true_sql": "select student.major , student.age where student.stuid not in ( select student.stuid where pets.pettype = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.major",
            ",",
            "pets.pet_age",
            "where",
            "student.age",
            "not",
            "in",
            "(",
            "select",
            "has_pet.stuid",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [48], 6, 39, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.9999996423721313, 1), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.8301781415939331, 3), ('WHERE_COL', ('student', 'age', 39), 0.9992796778678894, 5), ('WHERE_OP', (('student', 'age', 39),), ('not in', 7), 0.7554239454541927, 6), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('not in', 7), 'root', 0.9999932050704956, 7), ('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.9834772944450378, 9), ('O', '##END_NESTED##', 0.9928829669952393, 10)]",
        "logprob": "-0.7729656192766068",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 393
    },
    {
        "nl": "Find the id of students who do not have a cat pet .",
        "true_sql": "select student.stuid except select student.stuid where pets.pettype = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.stuid",
            "where",
            "has_pet.petid",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 45, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.4953080713748932, 1), ('WHERE_COL', ('has_pet', 'petid', 45), 0.8924708962440491, 3), ('WHERE_OP', (('has_pet', 'petid', 45),), ('!=', 5), 0.7030766010284424, 4), ('WHERE_ROOT_TERM', (('has_pet', 'petid', 45),), ('!=', 5), 'terminal', 0.999980092048645, 5)]",
        "logprob": "-1.1691711344153022",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 394
    },
    {
        "nl": "What are the ids of the students who do not own cats as pets ?",
        "true_sql": "select student.stuid except select student.stuid where pets.pettype = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.stuid",
            "where",
            "pets.petid",
            "not",
            "in",
            "(",
            "select",
            "has_pet.petid",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 46, [22, 20], 5, 2, [45], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.5826770067214966, 1), ('WHERE_COL', ('pets', 'petid', 46), 0.6895771026611328, 3), ('WHERE_OP', (('pets', 'petid', 46),), ('not in', 7), 0.6578938956239109, 4), ('WHERE_ROOT_TERM', (('pets', 'petid', 46),), ('not in', 7), 'root', 0.9999858140945435, 5), ('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.6640974879264832, 7), ('O', '##END_NESTED##', 0.9611256718635559, 8)]",
        "logprob": "-2.2041255769513355",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 395
    },
    {
        "nl": "Find the first name and age of students who have a dog but do not have a cat as a pet .",
        "true_sql": "select student.fname , student.age where pets.pettype = value and student.stuid not in ( select student.stuid where pets.pettype = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"dog\"', None], 'and', [True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.fname",
            ",",
            "pets.pet_age",
            "where",
            "student.age",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [48], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999992847442627, 1), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.987316906452179, 3), ('WHERE_COL', ('student', 'age', 39), 0.9652786254882812, 5), ('WHERE_OP', (('student', 'age', 39),), ('=', 0), 0.6517484188079834, 6), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('=', 0), 'terminal', 0.9999940395355225, 7)]",
        "logprob": "-0.4775482171607839",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 396
    },
    {
        "nl": "What is the first name of every student who has a dog but does not have a cat ?",
        "true_sql": "select student.fname , student.age where pets.pettype = value and student.stuid not in ( select student.stuid where pets.pettype = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"dog\"', None], 'and', [True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "student.fname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999995231628418, 1), ('WHERE_COL', ('student', 'fname', 38), 0.9373419880867004, 3), ('WHERE_OP', (('student', 'fname', 38),), ('=', 0), 0.977616548538208, 4), ('WHERE_ROOT_TERM', (('student', 'fname', 38),), ('=', 0), 'terminal', 0.9999982118606567, 5)]",
        "logprob": "-0.6832857935925942",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 397
    },
    {
        "nl": "Find the type and weight of the youngest pet .",
        "true_sql": "select pets.pettype , pets.weight order_by pets.pet_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 12, False], None]], [0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "pets.pettype",
            ",",
            "pets.weight",
            "order_by",
            "pets.pet_age",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [49], 11, [48], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9872697591781616, 3), ('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.98032146692276, 5), ('ORDER_DESC_ASC', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'desc', 0.7240162491798401, 6), ('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.9998395442962646, 7)]",
        "logprob": "-0.3658450034089802",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 398
    },
    {
        "nl": "What type of pet is the youngest animal , and how much does it weigh ?",
        "true_sql": "select pets.pettype , pets.weight order_by pets.pet_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 12, False], None]], [0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "pets.pettype",
            ",",
            "pets.pet_age",
            "order_by",
            "pets.weight",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [48], 11, [49], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9489924311637878, 3), ('ORDER_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.8056461811065674, 5), ('ORDER_DESC_ASC', (('pets', 'weight', 49), ('none_agg', 0), False), 'desc', 0.3677549362182617, 6), ('ORDER_LIMIT', (('pets', 'weight', 49), ('none_agg', 0), False), 'limit_value', 0.9999160766601562, 7)]",
        "logprob": "-1.2821451811317002",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 399
    },
    {
        "nl": "Find the id and weight of all pets whose age is older than 1 .",
        "true_sql": "select pets.petid , pets.weight where pets.pet_age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "pets.petid",
            ",",
            "pets.weight",
            "where",
            "pets.pet_age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [49], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.9899576306343079, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9987820982933044, 3), ('WHERE_COL', ('pets', 'pet_age', 48), 0.9997313618659973, 5), ('WHERE_OP', (('pets', 'pet_age', 48),), ('>', 1), 0.9788255095481873, 6), ('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('>', 1), 'terminal', 0.9991422891616821, 7)]",
        "logprob": "-0.03423354710940137",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 400
    },
    {
        "nl": "What is the id and weight of every pet who is older than 1 ?",
        "true_sql": "select pets.petid , pets.weight where pets.pet_age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "has_pet.petid",
            ",",
            "pets.weight",
            "where",
            "pets.pet_age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [49], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.5956171751022339, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9990307092666626, 3), ('WHERE_COL', ('pets', 'pet_age', 48), 0.9999754428863525, 5), ('WHERE_OP', (('pets', 'pet_age', 48),), ('>', 1), 0.8808475136756897, 6), ('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('>', 1), 'terminal', 0.9999561309814453, 7)]",
        "logprob": "-0.6466037578592138",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 401
    },
    {
        "nl": "Find the average and maximum age for each type of pet .",
        "true_sql": "select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "pets.pet_age",
            ")",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 48, 4], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('min', 2), False, 0.9682218904946494, 1), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9159780740737915, 3), ('GROUP_COL', ('pets', 'pettype', 47), 1.0, 5)]",
        "logprob": "-0.6527944751812682",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 402
    },
    {
        "nl": "What is the average and maximum age for each pet type ?",
        "true_sql": "select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "pets.pet_age",
            ")",
            ",",
            "max",
            "(",
            "pets.pet_age",
            ")",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 48, 4], 8, [19, 5, 48, 4], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('min', 2), False, 0.9354342880980415, 1), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('max', 1), False, 0.8374018386316864, 3), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9980450868606567, 5), ('GROUP_COL', ('pets', 'pettype', 47), 0.9999954700469971, 7)]",
        "logprob": "-0.9814328534537663",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 403
    },
    {
        "nl": "Find the average weight for each pet type .",
        "true_sql": "select avg ( pets.weight ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "pets.weight",
            ")",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 49, 4], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('avg', 5), False, 0.9841186565296445, 1), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 1.0, 3), ('GROUP_COL', ('pets', 'pettype', 47), 1.0, 5)]",
        "logprob": "-0.06542115361060427",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 404
    },
    {
        "nl": "What is the average weight for each type of pet ?",
        "true_sql": "select avg ( pets.weight ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "pets.weight",
            ")",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 49, 4], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('avg', 5), False, 0.9993094274087932, 1), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9999842643737793, 3), ('GROUP_COL', ('pets', 'pettype', 47), 0.9999983310699463, 5)]",
        "logprob": "-0.004159028524355936",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 405
    },
    {
        "nl": "Find the first name and age of students who have a pet .",
        "true_sql": "select distinct student.fname , student.age",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.fname",
            ",",
            "pets.pet_age",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9959595799446106, 3)]",
        "logprob": "-0.018649180803025408",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 406
    },
    {
        "nl": "What are the different first names and ages of the students who do have pets ?",
        "true_sql": "select distinct student.fname , student.age",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "student.fname",
            ",",
            "pets.pet_age",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [38], 8, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9986899495124817, 2), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9994674324989319, 4)]",
        "logprob": "-0.005614860760191317",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 407
    },
    {
        "nl": "Find the id of the pet owned by student whose last name is \u2018 Smith \u2019 .",
        "true_sql": "select has_pet.petid where student.lname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Smith\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "has_pet.petid",
            "where",
            "student.lname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9529095888137817, 1), ('WHERE_COL', ('student', 'lname', 37), 0.9999840259552002, 3), ('WHERE_OP', (('student', 'lname', 37),), ('=', 0), 0.9999679327011108, 4), ('WHERE_ROOT_TERM', (('student', 'lname', 37),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.0555054375101186",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 408
    },
    {
        "nl": "What is the id of the pet owned by the student whose last name is 'Smith ' ?",
        "true_sql": "select has_pet.petid where student.lname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Smith\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "has_pet.petid",
            "where",
            "student.lname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9553436636924744, 1), ('WHERE_COL', ('student', 'lname', 37), 0.9999984502792358, 3), ('WHERE_OP', (('student', 'lname', 37),), ('=', 0), 0.9999902248382568, 4), ('WHERE_ROOT_TERM', (('student', 'lname', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.04629208470904379",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 409
    },
    {
        "nl": "Find the number of pets for each student who has any pet and student id .",
        "true_sql": "select count ( * ) , student.stuid group_by student.stuid",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "pets.petid",
            ",",
            "count",
            "(",
            "has_pet.*",
            ")",
            "group_by",
            "has_pet.petid",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [9, 5, 51, 4], 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.7559700608253479, 1), ('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.9738634032461893, 3), ('GROUP_COL', ('has_pet', 'petid', 45), 0.9565335512161255, 5)]",
        "logprob": "-1.1077671195794818",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 410
    },
    {
        "nl": "For students who have pets , how many pets does each student have ?",
        "true_sql": "select count ( * ) , student.stuid group_by student.stuid",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "pets.pettype",
            ",",
            "count",
            "(",
            "has_pet.*",
            ")",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [9, 5, 51, 4], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.740058422088623, 1), ('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.9766043405566402, 3), ('GROUP_COL', ('pets', 'pettype', 47), 0.5087147355079651, 5)]",
        "logprob": "-1.0758112654767094",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 411
    },
    {
        "nl": "Find the first name and gender of student who have more than one pet .",
        "true_sql": "select student.fname , student.sex group_by student.stuid having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.fname",
            ",",
            "student.lname",
            "group_by",
            "has_pet.petid",
            "having",
            "count",
            "(",
            "has_pet.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [37], 10, 45, 18, [9, 5, 51, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.999993085861206, 1), ('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 0.6800346374511719, 3), ('GROUP_COL', ('has_pet', 'petid', 45), 0.9766091704368591, 5), ('HAV_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.8834547746979097, 7), ('HAV_OP_v2', (('has_pet', '*', 51), ('count', 3), False), ('>', 1), 0.9998772144317627, 8), ('HAV_ROOT_TERM_v2', (('has_pet', '*', 51), ('count', 3), False), ('>', 1), 'terminal', 0.9936438798904419, 9)]",
        "logprob": "-1.2413992355862653",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 412
    },
    {
        "nl": "What is the first name and gender of the all the students who have more than one pet ?",
        "true_sql": "select student.fname , student.sex group_by student.stuid having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.fname",
            ",",
            "student.sex",
            "group_by",
            "has_pet.petid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 10, 45, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999997615814209, 1), ('SELECT_AGG_v2', ('student', 'sex', 40), ('none_agg', 0), False, 0.9951323866844177, 3), ('GROUP_COL', ('has_pet', 'petid', 45), 0.9862676858901978, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9972611484451498, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998952150344849, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9956046342849731, 9)]",
        "logprob": "-0.6284343225135223",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 413
    },
    {
        "nl": "Find the last name of the student who has a cat that is age 3 .",
        "true_sql": "select student.lname where pets.pet_age = value and pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], 3.0, None], 'and', [False, 2, [0, [0, 12, False], None], '\"cat\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.lname",
            "where",
            "student.age",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('student', 'age', 39), 0.999160885810852, 3), ('WHERE_OP', (('student', 'age', 39),), ('=', 0), 0.9993221759796143, 4), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.008491464002318008",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 414
    },
    {
        "nl": "What is the last name of the student who has a cat that is 3 years old ?",
        "true_sql": "select student.lname where pets.pet_age = value and pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], 3.0, None], 'and', [False, 2, [0, [0, 12, False], None], '\"cat\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student.lname",
            "where",
            "student.age",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('student', 'age', 39), 0.9997420907020569, 3), ('WHERE_OP', (('student', 'age', 39),), ('=', 0), 0.999855637550354, 4), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.002179565645721953",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 415
    },
    {
        "nl": "Find the average age of students who do not have any pet .",
        "true_sql": "select avg ( student.age ) where student.stuid not in ( select student.stuid )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 4, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "student.age",
            ")",
            "where",
            "student.age",
            "not",
            "in",
            "(",
            "select",
            "has_pet.petid",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 39, 4], 6, 39, [22, 20], 5, 2, [45], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'age', 39), ('avg', 5), False, 0.9996822595740787, 1), ('WHERE_COL', ('student', 'age', 39), 0.8829587697982788, 3), ('WHERE_OP', (('student', 'age', 39),), ('not in', 7), 0.9992124578815698, 4), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('not in', 7), 'root', 0.9999790191650391, 5), ('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.5452225804328918, 7), ('O', '##END_NESTED##', 0.9993458390235901, 8)]",
        "logprob": "-0.7802955578993441",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 416
    },
    {
        "nl": "What is the average age for all students who do not own any pets ?",
        "true_sql": "select avg ( student.age ) where student.stuid not in ( select student.stuid )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 4, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "student.age",
            ")",
            "where",
            "student.age",
            "not",
            "in",
            "(",
            "select",
            "has_pet.stuid",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 39, 4], 6, 39, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'age', 39), ('avg', 5), False, 0.9963832158140218, 1), ('WHERE_COL', ('student', 'age', 39), 0.7604206204414368, 3), ('WHERE_OP', (('student', 'age', 39),), ('not in', 7), 0.9993811412718139, 4), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('not in', 7), 'root', 0.9999532699584961, 5), ('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.9241058826446533, 7), ('O', '##END_NESTED##', 0.999816358089447, 8)]",
        "logprob": "-0.41495399376243136",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 417
    },
    {
        "nl": "How many teachers are there ?",
        "true_sql": "select count ( teacher.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "teacher.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9996325343052256, 1)]",
        "logprob": "-0.001572538930390492",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 418
    },
    {
        "nl": "What is the total count of teachers ?",
        "true_sql": "select count ( teacher.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "teacher.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9037420579251404, 1)]",
        "logprob": "-0.418285398311235",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 419
    },
    {
        "nl": "List the names of teachers in ascending order of age .",
        "true_sql": "select teacher.name order_by teacher.age asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "order_by",
            "teacher.age",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9999997615814209, 3), ('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.8600766658782959, 4)]",
        "logprob": "-0.15074686040110588",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 420
    },
    {
        "nl": "What are the names of the teachers ordered by ascending age ?",
        "true_sql": "select teacher.name order_by teacher.age asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "order_by",
            "teacher.age",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9999991655349731, 3), ('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.5616841912269592, 4)]",
        "logprob": "-0.5768255379562734",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 421
    },
    {
        "nl": "What are the age and hometown of teachers ?",
        "true_sql": "select teacher.age , teacher.hometown",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.age",
            ",",
            "teacher.hometown",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9998717308044434, 1), ('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9990757703781128, 3)]",
        "logprob": "-0.004534809568117961",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 422
    },
    {
        "nl": "What is the age and hometown of every teacher ?",
        "true_sql": "select teacher.age , teacher.hometown",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.age",
            ",",
            "teacher.hometown",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9115421772003174, 1), ('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9990874528884888, 3)]",
        "logprob": "-0.0958836945890007",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 423
    },
    {
        "nl": "List the name of teachers whose hometown is not `` Little Lever Urban District `` .",
        "true_sql": "select teacher.name where teacher.hometown != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 7, False], None], '\"Little Lever Urban Distric\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.hometown",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 42, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999985694885254, 1), ('WHERE_COL', ('teacher', 'hometown', 42), 0.9999978542327881, 3), ('WHERE_OP', (('teacher', 'hometown', 42),), ('!=', 5), 0.9989495873451233, 4), ('WHERE_ROOT_TERM', (('teacher', 'hometown', 42),), ('!=', 5), 'terminal', 0.9996253252029419, 5)]",
        "logprob": "-0.0021009839614893866",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 424
    },
    {
        "nl": "What are the names of the teachers whose hometown is not `` Little Lever Urban District `` ?",
        "true_sql": "select teacher.name where teacher.hometown != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 7, False], None], '\"Little Lever Urban Distric\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.hometown",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 42, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999997615814209, 1), ('WHERE_COL', ('teacher', 'hometown', 42), 0.9999967813491821, 3), ('WHERE_OP', (('teacher', 'hometown', 42),), ('!=', 5), 0.9990013241767883, 4), ('WHERE_ROOT_TERM', (('teacher', 'hometown', 42),), ('!=', 5), 'terminal', 0.9995183944702148, 5)]",
        "logprob": "-0.00230251723539745",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 425
    },
    {
        "nl": "Show the name of teachers aged either 32 or 33 ?",
        "true_sql": "select teacher.name where teacher.age = value or teacher.age = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], 32.0, None], 'or', [False, 2, [0, [0, 6, False], None], 33.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.age",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 41, [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999990463256836, 1), ('WHERE_COL', ('teacher', 'age', 41), 0.9999895095825195, 3), ('WHERE_OP', (('teacher', 'age', 41),), ('between', 9), 0.4294632077217102, 4), ('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('between', 9), 'terminal', 0.9999161958694458, 5)]",
        "logprob": "-0.8472817844092645",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 426
    },
    {
        "nl": "What are the names of the teachers who are aged either 32 or 33 ?",
        "true_sql": "select teacher.name where teacher.age = value or teacher.age = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], 32.0, None], 'or', [False, 2, [0, [0, 6, False], None], 33.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.age",
            "<",
            "value",
            "or",
            "teacher.age",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 41, [21], 3, 25, 41, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('teacher', 'age', 41), 0.9999951124191284, 3), ('WHERE_OP', (('teacher', 'age', 41),), ('<', 2), 0.39970651268959045, 4), ('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('<', 2), 'terminal', 0.9994266033172607, 5), ('WHERE_COL', ('teacher', 'age', 41), 0.9999992847442627, 7), ('WHERE_OP', (('teacher', 'age', 41),), ('<', 2), 0.8594304919242859, 8), ('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('<', 2), 'terminal', 0.9945377707481384, 9)]",
        "logprob": "-1.100294044076897",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 427
    },
    {
        "nl": "What is the hometown of the youngest teacher ?",
        "true_sql": "select teacher.hometown order_by teacher.age asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.hometown",
            "order_by",
            "teacher.age",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 11, [41], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999208450317383, 1), ('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.9928826093673706, 4), ('ORDER_LIMIT', (('teacher', 'age', 41), ('none_agg', 0), False), 'limit_value', 0.9998830556869507, 5)]",
        "logprob": "-0.014603817428564824",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 428
    },
    {
        "nl": "Where is the youngest teacher from ?",
        "true_sql": "select teacher.hometown order_by teacher.age asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.age",
            "=",
            "(",
            "select",
            "max",
            "(",
            "teacher.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 41, [7], 5, 2, [19, 5, 41, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9981147050857544, 1), ('WHERE_COL', ('teacher', 'age', 41), 0.9999752044677734, 3), ('WHERE_OP', (('teacher', 'age', 41),), ('=', 0), 0.9999154806137085, 4), ('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('=', 0), 'root', 0.9999974966049194, 5), ('SELECT_AGG_v2', ('teacher', 'age', 41), ('max', 1), False, 0.9978230586083839, 7), ('O', '##END_NESTED##', 0.9999772310256958, 8)]",
        "logprob": "-0.5228401743176849",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 429
    },
    {
        "nl": "Show different hometown of teachers and the number of teachers from each hometown .",
        "true_sql": "select teacher.hometown , count ( teacher.* ) group_by teacher.hometown",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.hometown",
            ",",
            "count",
            "(",
            "teacher.*",
            ")",
            "group_by",
            "teacher.hometown",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [9, 5, 47, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999872446060181, 1), ('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9479246810287769, 3), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9999879598617554, 5)]",
        "logprob": "-0.2141784277037334",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 430
    },
    {
        "nl": "For each hometown , how many teachers are there ?",
        "true_sql": "select teacher.hometown , count ( teacher.* ) group_by teacher.hometown",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.hometown",
            ",",
            "count",
            "(",
            "teacher.*",
            ")",
            "group_by",
            "teacher.hometown",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [9, 5, 47, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.8435454368591309, 1), ('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9807123717336014, 3), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9966172575950623, 5)]",
        "logprob": "-0.25196418036461016",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 431
    },
    {
        "nl": "List the most common hometown of teachers .",
        "true_sql": "select teacher.hometown group_by teacher.hometown order_by count ( teacher.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.hometown",
            "group_by",
            "teacher.hometown",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 10, 42, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9927248954772949, 1), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9984283447265625, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9994833161717708, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9940944314002991, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999562501907349, 7)]",
        "logprob": "-0.017335954566179188",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 432
    },
    {
        "nl": "What is the most commmon hometowns for teachers ?",
        "true_sql": "select teacher.hometown group_by teacher.hometown order_by count ( teacher.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.hometown",
            "where",
            "teacher.age",
            "=",
            "value",
            "order_by",
            "teacher.hometown",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [7], 3, 11, [42], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999594688415527, 1), ('WHERE_COL', ('teacher', 'age', 41), 0.6284343004226685, 3), ('WHERE_OP', (('teacher', 'age', 41),), ('=', 0), 0.9990724325180054, 4), ('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('=', 0), 'terminal', 0.997610330581665, 5), ('ORDER_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9899271726608276, 7), ('ORDER_DESC_ASC', (('teacher', 'hometown', 42), ('none_agg', 0), False), 'desc', 0.9969311952590942, 8), ('ORDER_LIMIT', (('teacher', 'hometown', 42), ('none_agg', 0), False), 'limit_value', 0.9991034865379333, 9)]",
        "logprob": "-1.0712055179182312",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 433
    },
    {
        "nl": "Show the hometowns shared by at least two teachers .",
        "true_sql": "select teacher.hometown group_by teacher.hometown having count ( teacher.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.hometown",
            "group_by",
            "teacher.hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 10, 42, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9993614554405212, 1), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9475314617156982, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.992124389803271, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9996171564687416, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.999991774559021, 7)]",
        "logprob": "-0.08839913733977735",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 434
    },
    {
        "nl": "What are the towns from which at least two teachers come from ?",
        "true_sql": "select teacher.hometown group_by teacher.hometown having count ( teacher.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "group_by",
            "teacher.teacher_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 39, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.8454343676567078, 1), ('GROUP_COL', ('teacher', 'teacher_id', 39), 0.9858536720275879, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9737516271740271, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994626619572077, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999936819076538, 7)]",
        "logprob": "-0.29323127836460366",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 435
    },
    {
        "nl": "Show names of teachers and the courses they are arranged to teach .",
        "true_sql": "select teacher.name , course.course",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.815339982509613, 3)]",
        "logprob": "-0.20554828536512054",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 436
    },
    {
        "nl": "What is the name of each teacher and what course they teach ?",
        "true_sql": "select teacher.name , course.course",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.6043664216995239, 3)]",
        "logprob": "-0.5060492100370851",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 437
    },
    {
        "nl": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher 's name .",
        "true_sql": "select teacher.name , course.course order_by teacher.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "order_by",
            "course.course",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 11, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9239115715026855, 3), ('ORDER_AGG_v2', ('course', 'course', 38), ('none_agg', 0), False, 0.6960639357566833, 5)]",
        "logprob": "-0.8749238273712269",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 438
    },
    {
        "nl": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher ?",
        "true_sql": "select teacher.name , course.course order_by teacher.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "order_by",
            "course.course",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 11, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.8895992636680603, 3), ('ORDER_AGG_v2', ('course', 'course', 38), ('none_agg', 0), False, 0.9008687734603882, 5)]",
        "logprob": "-0.2741325786443355",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 439
    },
    {
        "nl": "Show the name of the teacher for the math course .",
        "true_sql": "select teacher.name where course.course = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], '\"Math\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "course.course",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('course', 'course', 38), 0.8681645393371582, 3), ('WHERE_OP', (('course', 'course', 38),), ('=', 0), 0.9999815225601196, 4), ('WHERE_ROOT_TERM', (('course', 'course', 38),), ('=', 0), 'terminal', 0.9999935626983643, 5)]",
        "logprob": "-0.14186221241116959",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 440
    },
    {
        "nl": "What are the names of the people who teach math courses ?",
        "true_sql": "select teacher.name where course.course = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], '\"Math\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999996423721313, 1), ('WHERE_COL', ('teacher', 'name', 40), 0.7643554210662842, 3), ('WHERE_OP', (('teacher', 'name', 40),), ('=', 0), 0.9999973773956299, 4), ('WHERE_ROOT_TERM', (('teacher', 'name', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.2690034540375517",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 441
    },
    {
        "nl": "Show names of teachers and the number of courses they teach .",
        "true_sql": "select teacher.name , count ( * ) group_by teacher.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "count",
            "(",
            "course.*",
            ")",
            "group_by",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 46, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('course', '*', 46), ('count', 3), False, 0.8305476058299344, 3), ('GROUP_COL', ('teacher', 'name', 40), 0.770291805267334, 5)]",
        "logprob": "-1.0039805477606782",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 442
    },
    {
        "nl": "What are the names of the teachers and how many courses do they teach ?",
        "true_sql": "select teacher.name , count ( * ) group_by teacher.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.44743847846984863, 3)]",
        "logprob": "-0.8101965597474081",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 443
    },
    {
        "nl": "Show names of teachers that teach at least two courses .",
        "true_sql": "select teacher.name group_by teacher.name having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "group_by",
            "course_arrange.teacher_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 44, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999997615814209, 1), ('GROUP_COL', ('course_arrange', 'teacher_id', 44), 0.9938920736312866, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.994379418095253, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9992101606211692, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999879598617554, 7)]",
        "logprob": "-0.03195152881159457",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 444
    },
    {
        "nl": "What are the names of the teachers who teach at least two courses ?",
        "true_sql": "select teacher.name group_by teacher.name having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "group_by",
            "course_arrange.teacher_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 44, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('GROUP_COL', ('course_arrange', 'teacher_id', 44), 0.9927400946617126, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9940721487876685, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994594075854268, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999877214431763, 7)]",
        "logprob": "-0.033091685321199195",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 445
    },
    {
        "nl": "List the names of teachers who have not been arranged to teach courses .",
        "true_sql": "select teacher.name where teacher.teacher_id not in ( select course_arrange.teacher_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 4, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "course_arrange.course_id",
            "not",
            "in",
            "(",
            "select",
            "course_arrange.teacher_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 43, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('course_arrange', 'course_id', 43), 0.46604523062705994, 3), ('WHERE_OP', (('course_arrange', 'course_id', 43),), ('not in', 7), 0.9899103124548517, 4), ('WHERE_ROOT_TERM', (('course_arrange', 'course_id', 43),), ('not in', 7), 'root', 0.9999945163726807, 5), ('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.9931214451789856, 7), ('O', '##END_NESTED##', 0.9997656941413879, 8)]",
        "logprob": "-1.1606276683675416",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 446
    },
    {
        "nl": "What are the names of the teachers whose courses have not been arranged ?",
        "true_sql": "select teacher.name where teacher.teacher_id not in ( select course_arrange.teacher_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 4, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "course_arrange.course_id",
            "not",
            "in",
            "(",
            "select",
            "course_arrange.teacher_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 43, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('course_arrange', 'course_id', 43), 0.7897221446037292, 3), ('WHERE_OP', (('course_arrange', 'course_id', 43),), ('not in', 7), 0.9852191995780818, 4), ('WHERE_ROOT_TERM', (('course_arrange', 'course_id', 43),), ('not in', 7), 'root', 0.999990701675415, 5), ('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.9806559085845947, 7), ('O', '##END_NESTED##', 0.9998393058776855, 8)]",
        "logprob": "-0.3045485757033828",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 447
    },
    {
        "nl": "Find the total number of players .",
        "true_sql": "select count ( players.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "players.hand",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'hand', 39), ('count', 3), True, 0.9280736913201123, 1)]",
        "logprob": "-0.37326314239519065",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 448
    },
    {
        "nl": "How many players are there ?",
        "true_sql": "select count ( players.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "players.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 79, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9765201776147876, 1)]",
        "logprob": "-0.09514389550614916",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 449
    },
    {
        "nl": "Find the total number of matches .",
        "true_sql": "select count ( matches.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.match_num",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9008509155829831, 1)]",
        "logprob": "-0.41984268932456503",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 450
    },
    {
        "nl": "Count the number of matches .",
        "true_sql": "select count ( matches.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.match_num",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.8979740798018089, 1)]",
        "logprob": "-0.43106206846953293",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 451
    },
    {
        "nl": "List the first name and birth date of all players from the country with code USA .",
        "true_sql": "select players.first_name , players.birth_date where players.country_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "where",
            "players.country_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 41, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9999407529830933, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.6678990125656128, 3), ('WHERE_COL', ('players', 'country_code', 41), 0.9963977336883545, 5), ('WHERE_OP', (('players', 'country_code', 41),), ('=', 0), 0.9999908208847046, 6), ('WHERE_ROOT_TERM', (('players', 'country_code', 41),), ('=', 0), 'terminal', 0.9999990463256836, 7)]",
        "logprob": "-0.4075013789397711",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 452
    },
    {
        "nl": "What are the first names and birth dates of players from the USA ?",
        "true_sql": "select players.first_name , players.birth_date where players.country_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "where",
            "players.first_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9999146461486816, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9965898990631104, 3), ('WHERE_COL', ('players', 'first_name', 37), 0.8822131752967834, 5), ('WHERE_OP', (('players', 'first_name', 37),), ('=', 0), 0.9999902248382568, 6), ('WHERE_ROOT_TERM', (('players', 'first_name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 7)]",
        "logprob": "-0.12896184486295348",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 453
    },
    {
        "nl": "Find the average age of losers and winners of all matches .",
        "true_sql": "select avg ( matches.loser_age ) , avg ( matches.winner_age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 9, False], None]], [5, [0, [0, 28, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "matches.winner_age",
            ")",
            ",",
            "avg",
            "(",
            "matches.loser_age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 63, 4], 8, [17, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_age', 63), ('avg', 5), False, 0.9971271875621452, 1), ('SELECT_AGG_v2', ('matches', 'loser_age', 44), ('avg', 5), False, 0.890393105791261, 3)]",
        "logprob": "-0.4763308050935253",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 454
    },
    {
        "nl": "What are the average ages of losers and winners across matches ?",
        "true_sql": "select avg ( matches.loser_age ) , avg ( matches.winner_age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 9, False], None]], [5, [0, [0, 28, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "matches.winner_age",
            ")",
            ",",
            "avg",
            "(",
            "matches.loser_age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 63, 4], 8, [17, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_age', 63), ('avg', 5), False, 0.9961289224842748, 1), ('SELECT_AGG_v2', ('matches', 'loser_age', 44), ('avg', 5), False, 0.9099941386750091, 3)]",
        "logprob": "-0.3935360885228726",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 455
    },
    {
        "nl": "Find the average rank of winners in all matches .",
        "true_sql": "select avg ( matches.winner_rank )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "matches.winner_rank_points",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 71, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('avg', 5), False, 0.9724349672939745, 1)]",
        "logprob": "-0.11329482127442439",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 456
    },
    {
        "nl": "What is the average rank for winners in all matches ?",
        "true_sql": "select avg ( matches.winner_rank )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "matches.winner_rank_points",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 71, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('avg', 5), False, 0.9363100856031334, 1)]",
        "logprob": "-0.26356001014732716",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 457
    },
    {
        "nl": "Find the highest rank of losers in all matches .",
        "true_sql": "select min ( matches.loser_rank )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 16, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "matches.loser_rank_points",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 52, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('min', 2), False, 0.8659338416485383, 1)]",
        "logprob": "-0.8062948123295375",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 458
    },
    {
        "nl": "What is the best rank of losers across all matches ?",
        "true_sql": "select min ( matches.loser_rank )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 16, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "matches.loser_rank_points",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 52, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('max', 1), False, 0.8269012996582347, 1)]",
        "logprob": "-0.868995833378205",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 459
    },
    {
        "nl": "find the number of distinct country codes of all players .",
        "true_sql": "select count ( distinct players.country_code )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 6, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "players.country_code",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('count', 3), True, 0.9999925136410199, 1)]",
        "logprob": "-4.124663911603395e-05",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 460
    },
    {
        "nl": "How many distinct countries do players come from ?",
        "true_sql": "select count ( distinct players.country_code )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 6, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "players.country_code",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('count', 3), True, 0.9997168144468903, 1)]",
        "logprob": "-0.0014565410494887456",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 461
    },
    {
        "nl": "Find the number of distinct name of losers .",
        "true_sql": "select count ( distinct matches.loser_name )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 15, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "matches.winner_name",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 69, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.8912833855636222, 1)]",
        "logprob": "-0.5754812905561523",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 462
    },
    {
        "nl": "How many different loser names are there ?",
        "true_sql": "select count ( distinct matches.loser_name )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 15, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "matches.winner_name",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 69, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.9111304738426441, 1)]",
        "logprob": "-0.46536755389006945",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 463
    },
    {
        "nl": "Find the name of tourney that has more than 10 matches .",
        "true_sql": "select matches.tourney_name group_by matches.tourney_name having count ( matches.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 27, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 27, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.tourney_name",
            "group_by",
            "matches.tourney_id",
            "having",
            "count",
            "(",
            "matches.winner_ht",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [62], 10, 60, 18, [9, 5, 66, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.9997891783714294, 1), ('GROUP_COL', ('matches', 'tourney_id', 60), 0.9999901056289673, 3), ('HAV_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.9247099458719829, 5), ('HAV_OP_v2', (('matches', 'winner_ht', 66), ('count', 3), False), ('>', 1), 0.9998940229415894, 6), ('HAV_ROOT_TERM_v2', (('matches', 'winner_ht', 66), ('count', 3), False), ('>', 1), 'terminal', 0.9858611822128296, 7)]",
        "logprob": "-0.32876239945299657",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 464
    },
    {
        "nl": "What are the names of tournaments that have more than 10 matches ?",
        "true_sql": "select matches.tourney_name group_by matches.tourney_name having count ( matches.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 27, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 27, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            "group_by",
            "matches.round",
            "having",
            "count",
            "(",
            "matches.winner_ht",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 10, 56, 18, [9, 5, 66, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.8597049713134766, 1), ('GROUP_COL', ('matches', 'round', 56), 0.9632174968719482, 3), ('HAV_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.9305086339424553, 5), ('HAV_OP_v2', (('matches', 'winner_ht', 66), ('count', 3), False), ('>', 1), 0.999924898147583, 6), ('HAV_ROOT_TERM_v2', (('matches', 'winner_ht', 66), ('count', 3), False), ('>', 1), 'terminal', 0.9885222911834717, 7)]",
        "logprob": "-0.4899763342220128",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 465
    },
    {
        "nl": "List the names of all winners who played in both 2013 and 2016 .",
        "true_sql": "select matches.winner_name where matches.year = value intersect select matches.winner_name where matches.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2016.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            "where",
            "players.first_name",
            "=",
            "value",
            "intersect",
            "select",
            "matches.winner_name",
            "where",
            "matches.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 6, 37, [7], 3, 23, 2, [69], 6, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9990554451942444, 1), ('WHERE_COL', ('players', 'first_name', 37), 0.9433497190475464, 3), ('WHERE_OP', (('players', 'first_name', 37),), ('=', 0), 0.9999604225158691, 4), ('WHERE_ROOT_TERM', (('players', 'first_name', 37),), ('=', 0), 'terminal', 0.9999979734420776, 5), ('IUEN_v2', ('intersect', 1), 0.994795024394989, 6), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9864044189453125, 8), ('WHERE_COL', ('matches', 'year', 73), 0.8893765211105347, 10), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.999976396560669, 11), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999984502792358, 12)]",
        "logprob": "-0.19573837580468031",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 466
    },
    {
        "nl": "What are the names of players who won in both 2013 and 2016 ?",
        "true_sql": "select matches.winner_name where matches.year = value intersect select matches.winner_name where matches.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2016.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            "where",
            "matches.winner_name",
            "=",
            "value",
            "intersect",
            "select",
            "players.first_name",
            "where",
            "matches.loser_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 69, [7], 3, 23, 2, [37], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9083669781684875, 1), ('WHERE_COL', ('matches', 'winner_name', 69), 0.7185353636741638, 3), ('WHERE_OP', (('matches', 'winner_name', 69),), ('=', 0), 0.9998809099197388, 4), ('WHERE_ROOT_TERM', (('matches', 'winner_name', 69),), ('=', 0), 'terminal', 0.9999983310699463, 5), ('IUEN_v2', ('intersect', 1), 0.9976274371147156, 6), ('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.47229599952697754, 8), ('WHERE_COL', ('matches', 'loser_name', 50), 0.5535419583320618, 10), ('WHERE_OP', (('matches', 'loser_name', 50),), ('=', 0), 0.9999946355819702, 11), ('WHERE_ROOT_TERM', (('matches', 'loser_name', 50),), ('=', 0), 'terminal', 0.9999992847442627, 12)]",
        "logprob": "-1.7710283216310985",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 467
    },
    {
        "nl": "List the number of all matches who played in years of 2013 or 2016 .",
        "true_sql": "select count ( matches.* ) where matches.year = value or matches.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None], 'or', [False, 2, [0, [0, 38, False], None], 2016.0, None]], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.match_num",
            ")",
            "where",
            "matches.year",
            "=",
            "value",
            "or",
            "matches.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 6, 73, [7], 3, 25, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9122634000411061, 1), ('WHERE_COL', ('matches', 'year', 73), 0.9999788999557495, 3), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9973848462104797, 4), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('matches', 'year', 73), 0.999995231628418, 7), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9862289428710938, 8), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999948740005493, 9)]",
        "logprob": "-0.5269194464275319",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 468
    },
    {
        "nl": "How many matches were played in 2013 or 2016 ?",
        "true_sql": "select count ( matches.* ) where matches.year = value or matches.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None], 'or', [False, 2, [0, [0, 38, False], None], 2016.0, None]], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.winner_ht",
            ")",
            "where",
            "matches.year",
            "=",
            "value",
            "or",
            "matches.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 66, 4], 6, 73, [7], 3, 25, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.7941946400960385, 1), ('WHERE_COL', ('matches', 'year', 73), 0.9999516010284424, 3), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9998528957366943, 4), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999984502792358, 5), ('WHERE_COL', ('matches', 'year', 73), 0.999991774559021, 7), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9978644251823425, 8), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999969005584717, 9)]",
        "logprob": "-1.1795687961874488",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 469
    },
    {
        "nl": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open ?",
        "true_sql": "select players.country_code , players.first_name where matches.tourney_name = value intersect select players.country_code , players.first_name where matches.tourney_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"Australian Open\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"WTA Championships\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.country_code",
            ",",
            "players.last_name",
            "where",
            "players.first_name",
            "=",
            "value",
            "intersect",
            "select",
            "players.country_code",
            ",",
            "players.last_name",
            "where",
            "players.first_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [38], 6, 37, [7], 3, 23, 2, [41], 8, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9998743534088135, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9971573352813721, 3), ('WHERE_COL', ('players', 'first_name', 37), 0.9876991510391235, 5), ('WHERE_OP', (('players', 'first_name', 37),), ('=', 0), 0.9999767541885376, 6), ('WHERE_ROOT_TERM', (('players', 'first_name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 7), ('IUEN_v2', ('intersect', 1), 0.6588815450668335, 8), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9998862743377686, 10), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.997956395149231, 12), ('WHERE_COL', ('players', 'first_name', 37), 0.7942395210266113, 14), ('WHERE_OP', (('players', 'first_name', 37),), ('=', 0), 0.999994158744812, 15), ('WHERE_ROOT_TERM', (('players', 'first_name', 37),), ('=', 0), 'terminal', 0.9999996423721313, 16)]",
        "logprob": "-0.702117806547125",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 470
    },
    {
        "nl": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open ?",
        "true_sql": "select players.country_code , players.first_name where matches.tourney_name = value intersect select players.country_code , players.first_name where matches.tourney_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"Australian Open\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"WTA Championships\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "where",
            "players.first_name",
            "=",
            "value",
            "and",
            "matches.winner_hand",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 37, [7], 3, 16, 65, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9946140646934509, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9986128807067871, 3), ('WHERE_COL', ('players', 'first_name', 37), 0.44913017749786377, 5), ('WHERE_OP', (('players', 'first_name', 37),), ('=', 0), 0.9999078512191772, 6), ('WHERE_ROOT_TERM', (('players', 'first_name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 7), ('WHERE_COL', ('matches', 'winner_hand', 65), 0.4315917193889618, 9), ('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.9785842299461365, 10), ('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.9999904632568359, 11)]",
        "logprob": "-2.073231213051357",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 471
    },
    {
        "nl": "Find the first name and country code of the oldest player .",
        "true_sql": "select players.first_name , players.country_code order_by players.birth_date limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "order_by",
            "players.birth_date",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 11, [40], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9758442640304565, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.7050433158874512, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.8725131154060364, 5), ('ORDER_LIMIT', (('players', 'birth_date', 40), ('none_agg', 0), False), 'limit_value', 0.8083487749099731, 6)]",
        "logprob": "-0.7308420245573071",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 472
    },
    {
        "nl": "What is the first name and country code of the oldest player ?",
        "true_sql": "select players.first_name , players.country_code order_by players.birth_date limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "order_by",
            "players.birth_date",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 11, [40], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9893660545349121, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.7180246114730835, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.893953263759613, 5), ('ORDER_LIMIT', (('players', 'birth_date', 40), ('none_agg', 0), False), 'limit_value', 0.7437875866889954, 6)]",
        "logprob": "-0.7520799290818614",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 473
    },
    {
        "nl": "List the first and last name of all players in the order of birth date .",
        "true_sql": "select players.first_name , players.last_name order_by players.birth_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "order_by",
            "players.birth_date",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 11, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9998108744621277, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9999790191650391, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.9902592897415161, 5)]",
        "logprob": "-0.4337234740921036",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 474
    },
    {
        "nl": "What are the full names of all players , sorted by birth date ?",
        "true_sql": "select players.first_name , players.last_name order_by players.birth_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "order_by",
            "players.birth_date",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 11, [40], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9911379218101501, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9526699781417847, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.9982544779777527, 5), ('ORDER_DESC_ASC', (('players', 'birth_date', 40), ('none_agg', 0), False), 'asc', 0.9357521533966064, 6)]",
        "logprob": "-0.13274943061036526",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 475
    },
    {
        "nl": "List the first and last name of all players who are left / L hand in the order of birth date .",
        "true_sql": "select players.first_name , players.last_name where players.hand = value order_by players.birth_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"L\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "where",
            "players.hand",
            "=",
            "value",
            "order_by",
            "players.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 39, [7], 3, 11, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9714114665985107, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9567880630493164, 3), ('WHERE_COL', ('players', 'hand', 39), 0.8777493834495544, 5), ('WHERE_OP', (('players', 'hand', 39),), ('=', 0), 0.9999923706054688, 6), ('WHERE_ROOT_TERM', (('players', 'hand', 39),), ('=', 0), 'terminal', 0.9999957084655762, 7), ('ORDER_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8238940834999084, 9)]",
        "logprob": "-0.4019847468314061",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 476
    },
    {
        "nl": "What are the full names of all left handed players , in order of birth date ?",
        "true_sql": "select players.first_name , players.last_name where players.hand = value order_by players.birth_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"L\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "order_by",
            "players.birth_date",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 11, [40], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9340648055076599, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8904758095741272, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.995431661605835, 5), ('ORDER_DESC_ASC', (('players', 'birth_date', 40), ('none_agg', 0), False), 'asc', 0.9261974096298218, 6)]",
        "logprob": "-0.27482374223822514",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 477
    },
    {
        "nl": "Find the first name and country code of the player who did the most number of tours .",
        "true_sql": "select players.country_code , players.first_name order_by rankings.tours desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "group_by",
            "players.country_code",
            "order_by",
            "count",
            "(",
            "players.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 10, 41, 11, [9, 5, 79, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9543179869651794, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8589439392089844, 3), ('GROUP_COL', ('players', 'country_code', 41), 0.9857369661331177, 5), ('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9756162547200008, 7), ('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9988184571266174, 8), ('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.9999545812606812, 9)]",
        "logprob": "-0.3136563477626635",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 478
    },
    {
        "nl": "What is the first name and country code of the player with the most tours ?",
        "true_sql": "select players.country_code , players.first_name order_by rankings.tours desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "group_by",
            "players.country_code",
            "order_by",
            "count",
            "(",
            "players.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 10, 41, 11, [9, 5, 79, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9955381751060486, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8699846863746643, 3), ('GROUP_COL', ('players', 'country_code', 41), 0.5694745779037476, 5), ('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9776407085540517, 7), ('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9982823133468628, 8), ('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.9999560117721558, 9)]",
        "logprob": "-0.8316961340442048",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 479
    },
    {
        "nl": "Find the year that has the most number of matches .",
        "true_sql": "select matches.year group_by matches.year order_by count ( matches.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 38, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.year",
            "group_by",
            "matches.year",
            "order_by",
            "count",
            "(",
            "matches.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [73], 10, 73, 11, [9, 5, 80, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.926862895488739, 1), ('GROUP_COL', ('matches', 'year', 73), 0.9999984502792358, 3), ('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.995969792302335, 5), ('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.9972677230834961, 6), ('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9998999834060669, 7)]",
        "logprob": "-0.18778076921783143",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 480
    },
    {
        "nl": "Which year had the most matches ?",
        "true_sql": "select matches.year group_by matches.year order_by count ( matches.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 38, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.year",
            "group_by",
            "matches.year",
            "order_by",
            "count",
            "(",
            "matches.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [73], 10, 73, 11, [9, 5, 80, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999018907546997, 1), ('GROUP_COL', ('matches', 'year', 73), 0.9999998807907104, 3), ('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.9095630824722852, 5), ('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.9972888231277466, 6), ('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9999353885650635, 7)]",
        "logprob": "-0.9869763685868106",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 481
    },
    {
        "nl": "Find the name and rank points of the winner who won the most times .",
        "true_sql": "select matches.winner_name , matches.winner_rank_points group_by matches.winner_name order_by count ( matches.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 34, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "players.last_name",
            "group_by",
            "matches.winner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [38], 10, 67, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9993460774421692, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.46817830204963684, 3), ('GROUP_COL', ('matches', 'winner_id', 67), 0.6741737723350525, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9997478483048398, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993516802787781, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999551773071289, 9)]",
        "logprob": "-1.1569385354314525",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 482
    },
    {
        "nl": "What is the name of the winner who has won the most matches , and how many rank points does this player have ?",
        "true_sql": "select matches.winner_name , matches.winner_rank_points group_by matches.winner_name order_by count ( matches.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 34, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.loser_name",
            "group_by",
            "matches.winner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [50], 10, 67, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9979884624481201, 1), ('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.6480781435966492, 3), ('GROUP_COL', ('matches', 'winner_id', 67), 0.9886021018028259, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9957581442219577, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9995483756065369, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999396800994873, 9)]",
        "logprob": "-0.47627128492715565",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 483
    },
    {
        "nl": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney .",
        "true_sql": "select matches.winner_name where matches.tourney_name = value order_by matches.winner_rank_points desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"Australian Open\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.tourney_name",
            "where",
            "rankings.ranking_points",
            "=",
            "value",
            "group_by",
            "matches.winner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [62], 6, 77, [7], 3, 10, 67, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.5024794936180115, 1), ('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.9430919885635376, 3), ('WHERE_COL', ('rankings', 'ranking_points', 77), 0.4160648584365845, 5), ('WHERE_OP', (('rankings', 'ranking_points', 77),), ('=', 0), 0.9861830472946167, 6), ('WHERE_ROOT_TERM', (('rankings', 'ranking_points', 77),), ('=', 0), 'terminal', 0.8234591484069824, 7), ('GROUP_COL', ('matches', 'winner_id', 67), 0.9624812006950378, 9), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9294245038191389, 11), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9886723160743713, 12), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998984336853027, 13)]",
        "logprob": "-2.77085593683547",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 484
    },
    {
        "nl": "What is the name of the winner with the most rank points who participated in the Australian Open tournament ?",
        "true_sql": "select matches.winner_name where matches.tourney_name = value order_by matches.winner_rank_points desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"Australian Open\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            "where",
            "matches.winner_rank",
            "=",
            "value",
            "group_by",
            "matches.winner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 6, 70, [7], 3, 10, 67, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9948369264602661, 1), ('WHERE_COL', ('matches', 'winner_rank', 70), 0.7308359146118164, 3), ('WHERE_OP', (('matches', 'winner_rank', 70),), ('=', 0), 0.9943021535873413, 4), ('WHERE_ROOT_TERM', (('matches', 'winner_rank', 70),), ('=', 0), 'terminal', 0.9907384514808655, 5), ('GROUP_COL', ('matches', 'winner_id', 67), 0.9820459485054016, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.99350512391612, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997546076774597, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999735355377197, 11)]",
        "logprob": "-0.4422407514854553",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 485
    },
    {
        "nl": "find the names of loser and winner who played in the match with greatest number of minutes .",
        "true_sql": "select matches.winner_name , matches.loser_name order_by matches.minutes desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.loser_name",
            ",",
            "matches.winner_name",
            "order_by",
            "matches.minutes",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [69], 11, [55], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.6695362329483032, 1), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.6984661817550659, 3), ('ORDER_AGG_v2', ('matches', 'minutes', 55), ('none_agg', 0), False, 0.9999829530715942, 5), ('ORDER_DESC_ASC', (('matches', 'minutes', 55), ('none_agg', 0), False), 'desc', 0.920788586139679, 6), ('ORDER_LIMIT', (('matches', 'minutes', 55), ('none_agg', 0), False), 'limit_value', 0.9999696016311646, 7)]",
        "logprob": "-0.9348310167709661",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 486
    },
    {
        "nl": "What are the names of the winner and loser who played in the longest match ?",
        "true_sql": "select matches.winner_name , matches.loser_name order_by matches.minutes desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.loser_name",
            "order_by",
            "matches.minutes",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [50], 11, [55], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9867156147956848, 1), ('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.9888629913330078, 3), ('ORDER_AGG_v2', ('matches', 'minutes', 55), ('none_agg', 0), False, 0.9999921321868896, 5), ('ORDER_LIMIT', (('matches', 'minutes', 55), ('none_agg', 0), False), 'limit_value', 0.974132776260376, 6)]",
        "logprob": "-0.06802097468772628",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 487
    },
    {
        "nl": "Find the average ranking for each player and their first name .",
        "true_sql": "select avg ( rankings.ranking ) , players.first_name group_by players.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 40, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "rankings.ranking_points",
            ")",
            ",",
            "players.first_name",
            "group_by",
            "players.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 77, 4], 8, [37], 10, 38, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('avg', 5), False, 0.9991536944048581, 1), ('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.49483078718185425, 3), ('GROUP_COL', ('players', 'last_name', 38), 0.5628867745399475, 5)]",
        "logprob": "-1.283852716673898",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 488
    },
    {
        "nl": "What are the first names of all players , and their average rankings ?",
        "true_sql": "select avg ( rankings.ranking ) , players.first_name group_by players.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 40, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9994251728057861, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9998103976249695, 3)]",
        "logprob": "-0.538520667255336",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 489
    },
    {
        "nl": "Find the total ranking points for each player and their first name .",
        "true_sql": "select sum ( rankings.ranking_points ) , players.first_name group_by players.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 42, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "rankings.ranking_points",
            ")",
            ",",
            "players.first_name",
            "group_by",
            "players.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 77, 4], 8, [37], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.9994170960416185, 1), ('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.8294938206672668, 3), ('GROUP_COL', ('players', 'first_name', 37), 0.9955991506576538, 5)]",
        "logprob": "-0.21134391417955115",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 490
    },
    {
        "nl": "What are the first names of all players , and their total ranking points ?",
        "true_sql": "select sum ( rankings.ranking_points ) , players.first_name group_by players.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 42, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.999728262424469, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9776466488838196, 3)]",
        "logprob": "-0.4927622225409634",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 491
    },
    {
        "nl": "find the number of players for each country .",
        "true_sql": "select count ( players.* ) , players.country_code group_by players.country_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "players.*",
            ")",
            ",",
            "players.country_code",
            "group_by",
            "players.country_code",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 79, 4], 8, [41], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9983542431758401, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999366819858551, 3), ('GROUP_COL', ('players', 'country_code', 41), 0.9999181032180786, 5)]",
        "logprob": "-0.007493639902780936",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 492
    },
    {
        "nl": "How many players are from each country ?",
        "true_sql": "select count ( players.* ) , players.country_code group_by players.country_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "players.*",
            ")",
            ",",
            "players.country_code",
            "group_by",
            "players.country_code",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 79, 4], 8, [41], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9944147697268042, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9995983242988586, 3), ('GROUP_COL', ('players', 'country_code', 41), 0.9999188184738159, 5)]",
        "logprob": "-0.02305159461553012",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 493
    },
    {
        "nl": "find the code of the country where has the greatest number of players .",
        "true_sql": "select players.country_code group_by players.country_code order_by count ( players.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.country_code",
            "group_by",
            "players.country_code",
            "order_by",
            "count",
            "(",
            "players.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 79, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('players', 'country_code', 41), 1.0, 3), ('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9270140805857472, 5), ('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9988431930541992, 6), ('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.999976396560669, 7)]",
        "logprob": "-0.30606601121028426",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 494
    },
    {
        "nl": "What is the code of the country with the most players ?",
        "true_sql": "select players.country_code group_by players.country_code order_by count ( players.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.country_code",
            "group_by",
            "players.country_code",
            "order_by",
            "count",
            "(",
            "players.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 79, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('players', 'country_code', 41), 1.0, 3), ('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9995519355512335, 5), ('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9996566772460938, 6), ('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.9999535083770752, 7)]",
        "logprob": "-0.002959517419448924",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 495
    },
    {
        "nl": "Find the codes of countries that have more than 50 players .",
        "true_sql": "select players.country_code group_by players.country_code having count ( players.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 50.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.country_code",
            "group_by",
            "players.country_code",
            "having",
            "count",
            "(",
            "players.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 18, [9, 5, 79, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999987006187439, 1), ('GROUP_COL', ('players', 'country_code', 41), 1.0, 3), ('HAV_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9856957624127313, 5), ('HAV_OP_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 0.9996664524078369, 6), ('HAV_ROOT_TERM_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 'terminal', 0.9989935755729675, 7)]",
        "logprob": "-0.0708985157509066",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 496
    },
    {
        "nl": "What are the codes of countries with more than 50 players ?",
        "true_sql": "select players.country_code group_by players.country_code having count ( players.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 50.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.country_code",
            "group_by",
            "players.country_code",
            "having",
            "count",
            "(",
            "players.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 18, [9, 5, 79, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('players', 'country_code', 41), 1.0, 3), ('HAV_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9863460980355632, 5), ('HAV_OP_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 0.9996347427368164, 6), ('HAV_ROOT_TERM_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 'terminal', 0.999038815498352, 7)]",
        "logprob": "-0.07560933211910115",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 497
    },
    {
        "nl": "Find the total number of tours for each ranking date .",
        "true_sql": "select sum ( rankings.tours ) , rankings.ranking_date group_by rankings.ranking_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 39, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 43, False], None]], [0, [0, [0, 39, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "rankings.tours",
            ")",
            ",",
            "rankings.ranking_date",
            "group_by",
            "rankings.ranking_date",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 78, 4], 8, [74], 10, 74, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('rankings', 'tours', 78), ('count', 3), False, 0.7902110056030539, 1), ('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.9432294964790344, 3), ('GROUP_COL', ('rankings', 'ranking_date', 74), 0.992546021938324, 5)]",
        "logprob": "-1.0096523336865513",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 498
    },
    {
        "nl": "How many total tours were there for each ranking date ?",
        "true_sql": "select sum ( rankings.tours ) , rankings.ranking_date group_by rankings.ranking_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 39, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 43, False], None]], [0, [0, [0, 39, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "rankings.*",
            ")",
            ",",
            "rankings.ranking_date",
            "group_by",
            "rankings.ranking_date",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 81, 4], 8, [74], 10, 74, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('rankings', '*', 81), ('count', 3), False, 0.8635747373771364, 1), ('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.8761539459228516, 3), ('GROUP_COL', ('rankings', 'ranking_date', 74), 0.9315376281738281, 5)]",
        "logprob": "-0.7906761529001584",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 499
    },
    {
        "nl": "Find the number of matches happened in each year .",
        "true_sql": "select count ( matches.* ) , matches.year group_by matches.year",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 38, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 38, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.match_num",
            ")",
            ",",
            "matches.year",
            "group_by",
            "matches.year",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 8, [73], 10, 73, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9657743996988823, 1), ('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999953508377075, 3), ('GROUP_COL', ('matches', 'year', 73), 0.9999998807907104, 5)]",
        "logprob": "-0.13960543238320278",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 500
    },
    {
        "nl": "How many matches were played in each year ?",
        "true_sql": "select count ( matches.* ) , matches.year group_by matches.year",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 38, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 38, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.*",
            ")",
            ",",
            "matches.year",
            "group_by",
            "matches.year",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 80, 4], 8, [73], 10, 73, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.9912575291304352, 1), ('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999921321868896, 3), ('GROUP_COL', ('matches', 'year', 73), 0.9999992847442627, 5)]",
        "logprob": "-0.03529197174919315",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 501
    },
    {
        "nl": "Find the name and rank of the 3 youngest winners across all matches .",
        "true_sql": "select distinct matches.winner_name , matches.winner_rank order_by matches.winner_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['asc', [[0, [0, 28, False], None]]], 'select': [True, [[0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.winner_rank",
            "order_by",
            "matches.winner_rank_points",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [70], 11, [71], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9970787763595581, 1), ('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.47297245264053345, 3), ('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.7621876001358032, 5), ('ORDER_DESC_ASC', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'desc', 0.7295128703117371, 6), ('ORDER_LIMIT', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'limit_value', 0.9995957016944885, 7)]",
        "logprob": "-1.3549217766995483",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 502
    },
    {
        "nl": "What are the names and ranks of the three youngest winners across all matches ?",
        "true_sql": "select distinct matches.winner_name , matches.winner_rank order_by matches.winner_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['asc', [[0, [0, 28, False], None]]], 'select': [True, [[0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.winner_rank",
            "order_by",
            "matches.winner_age",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [70], 11, [63], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9958398342132568, 1), ('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.96274733543396, 3), ('ORDER_AGG_v2', ('matches', 'winner_age', 63), ('none_agg', 0), False, 0.6012274622917175, 5), ('ORDER_LIMIT', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'limit_value', 0.7789384722709656, 6)]",
        "logprob": "-0.8085771019985666",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 503
    },
    {
        "nl": "How many different winners both participated in the WTA Championships and were left handed ?",
        "true_sql": "select count ( distinct matches.winner_name ) where matches.tourney_name = value and matches.winner_hand = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 34, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"WTA Championships\"', None], 'and', [False, 2, [0, [0, 30, False], None], '\"L\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "matches.winner_hand",
            ")",
            "where",
            "matches.loser_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 65, 4], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_hand', 65), ('count', 3), True, 0.8414495751339965, 1), ('WHERE_COL', ('matches', 'loser_name', 50), 0.3786649703979492, 3), ('WHERE_OP', (('matches', 'loser_name', 50),), ('=', 0), 0.9999961853027344, 4), ('WHERE_ROOT_TERM', (('matches', 'loser_name', 50),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-1.85078657700604",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 504
    },
    {
        "nl": "Find the number of left handed winners who participated in the WTA Championships .",
        "true_sql": "select count ( distinct matches.winner_name ) where matches.tourney_name = value and matches.winner_hand = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 34, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"WTA Championships\"', None], 'and', [False, 2, [0, [0, 30, False], None], '\"L\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "matches.winner_name",
            ")",
            "where",
            "matches.winner_hand",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 69, 4], 6, 65, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.9665982049590995, 1), ('WHERE_COL', ('matches', 'winner_hand', 65), 0.9301323890686035, 3), ('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.9999434947967529, 4), ('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.2427688060235232",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 505
    },
    {
        "nl": "Find the first name , country code and birth date of the winner who has the highest rank points in all matches .",
        "true_sql": "select players.first_name , players.country_code , players.birth_date order_by matches.winner_rank_points desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "matches.winner_name",
            ",",
            "rankings.ranking_date",
            "order_by",
            "matches.winner_rank_points",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [69], 8, [74], 11, [71], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9480066299438477, 1), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9098740220069885, 3), ('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.38844916224479675, 5), ('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.9362024664878845, 7), ('ORDER_DESC_ASC', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'desc', 0.8073659539222717, 8), ('ORDER_LIMIT', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'limit_value', 0.9999274015426636, 9)]",
        "logprob": "-1.5642536792071904",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 506
    },
    {
        "nl": "What is the first name , country code , and birth date of the player with the most winner rank points across all matches ?",
        "true_sql": "select players.first_name , players.country_code , players.birth_date order_by matches.winner_rank_points desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            ",",
            "players.birth_date",
            "group_by",
            "players.country_code",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 8, [40], 10, 41, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9904057383537292, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9843132495880127, 3), ('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.4606078267097473, 5), ('GROUP_COL', ('players', 'country_code', 41), 0.9829385280609131, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9873337511721303, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9976220726966858, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999393224716187, 11)]",
        "logprob": "-1.583448237449282",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 507
    },
    {
        "nl": "Find the number of players for each hand type .",
        "true_sql": "select count ( players.* ) , players.hand group_by players.hand",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.hand",
            ",",
            "count",
            "(",
            "players.*",
            ")",
            "group_by",
            "players.hand",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 79, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.9740152359008789, 1), ('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.8480367854826, 3), ('GROUP_COL', ('players', 'hand', 39), 0.9979606866836548, 5)]",
        "logprob": "-0.6878705101685493",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 508
    },
    {
        "nl": "How many players are there for each hand type ?",
        "true_sql": "select count ( players.* ) , players.hand group_by players.hand",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "players.hand",
            ",",
            "count",
            "(",
            "players.*",
            ")",
            "group_by",
            "players.hand",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 79, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.9644754528999329, 1), ('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.8917870013324468, 3), ('GROUP_COL', ('players', 'hand', 39), 0.9977879524230957, 5)]",
        "logprob": "-0.49685115153693166",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 509
    },
    {
        "nl": "How many conductors are there ?",
        "true_sql": "select count ( conductor.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'conductor.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "conductor.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9999946057563156, 1)]",
        "logprob": "-4.3273358995443904e-05",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 510
    },
    {
        "nl": "Count the number of conductors .",
        "true_sql": "select count ( conductor.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'conductor.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "conductor.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9997374290146719, 1)]",
        "logprob": "-0.001096676121057096",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 511
    },
    {
        "nl": "List the names of conductors in ascending order of age .",
        "true_sql": "select conductor.name order_by conductor.age asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.age",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [38], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('conductor', 'age', 38), ('none_agg', 0), False, 0.9999995231628418, 3), ('ORDER_DESC_ASC', (('conductor', 'age', 38), ('none_agg', 0), False), 'desc', 0.5786417722702026, 4)]",
        "logprob": "-0.5470797998748772",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 512
    },
    {
        "nl": "What are the names of conductors , ordered by age ?",
        "true_sql": "select conductor.name order_by conductor.age asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.age",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [38], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('ORDER_AGG_v2', ('conductor', 'age', 38), ('none_agg', 0), False, 0.9997475743293762, 3), ('ORDER_DESC_ASC', (('conductor', 'age', 38), ('none_agg', 0), False), 'asc', 0.8880760073661804, 4)]",
        "logprob": "-0.11920881390855609",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 513
    },
    {
        "nl": "What are the names of conductors whose nationalities are not `` USA `` ?",
        "true_sql": "select conductor.name where conductor.nationality != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "where",
            "conductor.nationality",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('conductor', 'nationality', 39), 0.9334855079650879, 3), ('WHERE_OP', (('conductor', 'nationality', 39),), ('!=', 5), 0.9992786049842834, 4), ('WHERE_ROOT_TERM', (('conductor', 'nationality', 39),), ('!=', 5), 'terminal', 0.9999632835388184, 5)]",
        "logprob": "-0.06983815819008539",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 514
    },
    {
        "nl": "Return the names of conductors that do not have the nationality `` USA `` .",
        "true_sql": "select conductor.name where conductor.nationality != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "where",
            "conductor.nationality",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999810457229614, 1), ('WHERE_COL', ('conductor', 'nationality', 39), 0.9998658895492554, 3), ('WHERE_OP', (('conductor', 'nationality', 39),), ('!=', 5), 0.9991952776908875, 4), ('WHERE_ROOT_TERM', (('conductor', 'nationality', 39),), ('!=', 5), 'terminal', 0.9990180730819702, 5)]",
        "logprob": "-0.0034164637759331535",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 515
    },
    {
        "nl": "What are the record companies of orchestras in descending order of years in which they were founded ?",
        "true_sql": "select orchestra.record_company order_by orchestra.year_of_founded desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 10, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "order_by",
            "orchestra.year_of_founded",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [45], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999985694885254, 1), ('ORDER_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.9998997449874878, 3), ('ORDER_DESC_ASC', (('orchestra', 'year_of_founded', 45), ('none_agg', 0), False), 'desc', 0.9996273517608643, 4)]",
        "logprob": "-0.0005372327224952431",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 516
    },
    {
        "nl": "Return the record companies of orchestras , sorted descending by the years in which they were founded .",
        "true_sql": "select orchestra.record_company order_by orchestra.year_of_founded desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 10, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "order_by",
            "orchestra.year_of_founded",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [45], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.999982476234436, 3), ('ORDER_DESC_ASC', (('orchestra', 'year_of_founded', 45), ('none_agg', 0), False), 'desc', 0.9389998912811279, 4)]",
        "logprob": "-0.06426624614895513",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 517
    },
    {
        "nl": "What is the average attendance of shows ?",
        "true_sql": "select avg ( show.attendance )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "show.attendance",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 58, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('show', 'attendance', 58), ('avg', 5), False, 0.9998606236859975, 1)]",
        "logprob": "-0.0005761409332241844",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 518
    },
    {
        "nl": "Return the average attendance across all shows .",
        "true_sql": "select avg ( show.attendance )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "show.attendance",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 58, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('show', 'attendance', 58), ('avg', 5), False, 0.9994604320003899, 1)]",
        "logprob": "-0.0024156046071790774",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 519
    },
    {
        "nl": "What are the maximum and minimum share of performances whose type is not `` Live final `` .",
        "true_sql": "select max ( performance.share ) , min ( performance.share ) where performance.type != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 18, False], None]], [2, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 14, False], None], '\"Live final\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "performance.share",
            ")",
            ",",
            "min",
            "(",
            "performance.share",
            ")",
            "where",
            "performance.type",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 53, 4], 8, [26, 5, 53, 4], 6, 49, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('performance', 'share', 53), ('max', 1), False, 0.9573298842746187, 1), ('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.9937620854907133, 3), ('WHERE_COL', ('performance', 'type', 49), 0.9999828338623047, 5), ('WHERE_OP', (('performance', 'type', 49),), ('!=', 5), 0.9793773293495178, 6), ('WHERE_ROOT_TERM', (('performance', 'type', 49),), ('!=', 5), 'terminal', 0.9999372959136963, 7)]",
        "logprob": "-0.22078900781370778",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 520
    },
    {
        "nl": "Return the maximum and minimum shares for performances that do not have the type `` Live final `` .",
        "true_sql": "select max ( performance.share ) , min ( performance.share ) where performance.type != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 18, False], None]], [2, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 14, False], None], '\"Live final\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "performance.share",
            ")",
            ",",
            "min",
            "(",
            "performance.share",
            ")",
            "where",
            "performance.type",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 53, 4], 8, [26, 5, 53, 4], 6, 49, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.8803000588533646, 1), ('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.976795093661207, 3), ('WHERE_COL', ('performance', 'type', 49), 0.9999997615814209, 5), ('WHERE_OP', (('performance', 'type', 49),), ('=', 0), 0.5539336800575256, 6), ('WHERE_ROOT_TERM', (('performance', 'type', 49),), ('=', 0), 'terminal', 0.9999908208847046, 7)]",
        "logprob": "-1.2050756627291488",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 521
    },
    {
        "nl": "How many different nationalities do conductors have ?",
        "true_sql": "select count ( distinct conductor.nationality )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 4, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "conductor.nationality",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'nationality', 39), ('count', 3), True, 0.9987872828703994, 1)]",
        "logprob": "-0.006076206065970474",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 522
    },
    {
        "nl": "Count the number of different nationalities of conductors .",
        "true_sql": "select count ( distinct conductor.nationality )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 4, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "conductor.nationality",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'nationality', 39), ('count', 3), True, 0.976360868120776, 1)]",
        "logprob": "-0.11961890960191476",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 523
    },
    {
        "nl": "List names of conductors in descending order of years of work .",
        "true_sql": "select conductor.name order_by conductor.year_of_work desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.year_of_work",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [40], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999997615814209, 3), ('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9998989105224609, 4)]",
        "logprob": "-0.00015342834359861576",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 524
    },
    {
        "nl": "What are the names of conductors , sorted descending by the number of years they have worked ?",
        "true_sql": "select conductor.name order_by conductor.year_of_work desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.year_of_work",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [40], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999175071716309, 3), ('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9992250204086304, 4)]",
        "logprob": "-0.001000356281691061",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 525
    },
    {
        "nl": "List the name of the conductor with the most years of work .",
        "true_sql": "select conductor.name order_by conductor.year_of_work desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "order_by",
            "count",
            "(",
            "conductor.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 11, [9, 5, 59, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.872758686542511, 3), ('ORDER_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9991820804179539, 5), ('ORDER_DESC_ASC', (('conductor', '*', 59), ('count', 3), False), 'desc', 0.9999004602432251, 6), ('ORDER_LIMIT', (('conductor', '*', 59), ('count', 3), False), 'limit_value', 0.9999275207519531, 7)]",
        "logprob": "-0.15373898362726937",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 526
    },
    {
        "nl": "What is the name of the conductor who has worked the greatest number of years ?",
        "true_sql": "select conductor.name order_by conductor.year_of_work desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "conductor.conductor_id",
            "order_by",
            "count",
            "(",
            "conductor.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 36, 11, [9, 5, 59, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('conductor', 'conductor_id', 36), 0.5652435421943665, 3), ('ORDER_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9990282056153588, 5), ('ORDER_DESC_ASC', (('conductor', '*', 59), ('count', 3), False), 'desc', 0.9998739957809448, 6), ('ORDER_LIMIT', (('conductor', '*', 59), ('count', 3), False), 'limit_value', 0.9999815225601196, 7)]",
        "logprob": "-0.5849735148419868",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 527
    },
    {
        "nl": "Show the names of conductors and the orchestras they have conducted .",
        "true_sql": "select conductor.name , orchestra.orchestra",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            ",",
            "conductor.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.8092920184135437, 3)]",
        "logprob": "-0.21184188798415216",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 528
    },
    {
        "nl": "What are the names of conductors as well as the corresonding orchestras that they have conducted ?",
        "true_sql": "select conductor.name , orchestra.orchestra",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            ",",
            "conductor.name",
            "where",
            "conductor.conductor_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 6, 36, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9937664270401001, 3), ('WHERE_COL', ('conductor', 'conductor_id', 36), 0.7467142343521118, 5), ('WHERE_OP', (('conductor', 'conductor_id', 36),), ('=', 0), 0.9996758699417114, 6), ('WHERE_ROOT_TERM', (('conductor', 'conductor_id', 36),), ('=', 0), 'terminal', 0.9999984502792358, 7)]",
        "logprob": "-0.30512093936649276",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 529
    },
    {
        "nl": "Show the names of conductors that have conducted more than one orchestras .",
        "true_sql": "select conductor.name group_by orchestra.conductor_id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "having",
            "count",
            "(",
            "orchestra.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 18, [9, 5, 60, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999986886978149, 3), ('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9941610319885242, 5), ('HAV_OP_v2', (('orchestra', '*', 60), ('count', 3), False), ('>', 1), 0.999812662601471, 6), ('HAV_ROOT_TERM_v2', (('orchestra', '*', 60), ('count', 3), False), ('>', 1), 'terminal', 0.9999412298202515, 7)]",
        "logprob": "-0.024732822132285427",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 530
    },
    {
        "nl": "What are the names of conductors who have conducted at more than one orchestra ?",
        "true_sql": "select conductor.name group_by orchestra.conductor_id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "having",
            "count",
            "(",
            "orchestra.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 18, [9, 5, 60, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999994039535522, 3), ('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9977236197336259, 5), ('HAV_OP_v2', (('orchestra', '*', 60), ('count', 3), False), ('>', 1), 0.999832272529602, 6), ('HAV_ROOT_TERM_v2', (('orchestra', '*', 60), ('count', 3), False), ('>', 1), 'terminal', 0.9999197721481323, 7)]",
        "logprob": "-0.011254710941586449",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 531
    },
    {
        "nl": "Show the name of the conductor that has conducted the most number of orchestras .",
        "true_sql": "select conductor.name group_by orchestra.conductor_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999994039535522, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9871082173129454, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9994102716445923, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999945878982544, 7)]",
        "logprob": "-0.05424198575200792",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 532
    },
    {
        "nl": "What is the name of the conductor who has conducted the most orchestras ?",
        "true_sql": "select conductor.name group_by orchestra.conductor_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "order_by",
            "count",
            "(",
            "orchestra.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 11, [9, 5, 60, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 1.0, 3), ('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9969227141861658, 5), ('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9997283816337585, 6), ('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999079704284668, 7)]",
        "logprob": "-0.012977456560882993",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 533
    },
    {
        "nl": "Please show the name of the conductor that has conducted orchestras founded after 2008 .",
        "true_sql": "select conductor.name where orchestra.year_of_founded > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 10, False], None], 2008.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "where",
            "orchestra.year_of_founded",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9999927282333374, 3), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9980266690254211, 4), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999970197677612, 5)]",
        "logprob": "-0.004228934024042662",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 534
    },
    {
        "nl": "What are the names of conductors who have conducted orchestras founded after the year 2008 ?",
        "true_sql": "select conductor.name where orchestra.year_of_founded > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 10, False], None], 2008.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "conductor.name",
            "where",
            "orchestra.year_of_founded",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9999983310699463, 3), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9372432231903076, 4), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999974966049194, 5)]",
        "logprob": "-0.07177576307462402",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 535
    },
    {
        "nl": "Please show the different record companies and the corresponding number of orchestras .",
        "true_sql": "select orchestra.record_company , count ( orchestra.* ) group_by orchestra.record_company",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "orchestra.record_company",
            ",",
            "count",
            "(",
            "orchestra.*",
            ")",
            "group_by",
            "orchestra.record_company",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [44], 8, [9, 5, 60, 4], 10, 44, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999979734420776, 2), ('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9918487157065043, 4), ('GROUP_COL', ('orchestra', 'record_company', 44), 0.9999977350234985, 6)]",
        "logprob": "-0.10454386743331141",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 536
    },
    {
        "nl": "How many orchestras does each record company manage ?",
        "true_sql": "select orchestra.record_company , count ( orchestra.* ) group_by orchestra.record_company",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "orchestra.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9816410230956772, 1)]",
        "logprob": "-0.09252268405198719",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 537
    },
    {
        "nl": "Please show the record formats of orchestras in ascending order of count .",
        "true_sql": "select orchestra.major_record_format group_by orchestra.major_record_format order_by count ( orchestra.* ) asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.major_record_format",
            "order_by",
            "orchestra.orchestra",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 11, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'major_record_format', 46), ('none_agg', 0), False, 0.9999997615814209, 1), ('ORDER_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.8655006289482117, 3)]",
        "logprob": "-0.400798595370941",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 538
    },
    {
        "nl": "What are the major record formats of orchestras , sorted by their frequency ?",
        "true_sql": "select orchestra.major_record_format group_by orchestra.major_record_format order_by count ( orchestra.* ) asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.major_record_format",
            "order_by",
            "orchestra.orchestra",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 11, [42], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'major_record_format', 46), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9825748801231384, 3), ('ORDER_DESC_ASC', (('orchestra', 'orchestra', 42), ('none_agg', 0), False), 'asc', 0.9939640164375305, 4)]",
        "logprob": "-0.060477804887210586",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 539
    },
    {
        "nl": "List the record company shared by the most number of orchestras .",
        "true_sql": "select orchestra.record_company group_by orchestra.record_company order_by count ( orchestra.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "group_by",
            "orchestra.record_company",
            "order_by",
            "count",
            "(",
            "orchestra.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 44, 11, [9, 5, 60, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'record_company', 44), 0.9999992847442627, 3), ('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9941943634633592, 5), ('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9993913173675537, 6), ('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999170303344727, 7)]",
        "logprob": "-0.024624141796668154",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 540
    },
    {
        "nl": "What is the record company used by the greatest number of orchestras ?",
        "true_sql": "select orchestra.record_company group_by orchestra.record_company order_by count ( orchestra.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "group_by",
            "orchestra.record_company",
            "order_by",
            "count",
            "(",
            "orchestra.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 44, 11, [9, 5, 60, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999982118606567, 1), ('GROUP_COL', ('orchestra', 'record_company', 44), 0.9997672438621521, 3), ('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9623643881993336, 5), ('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9992552399635315, 6), ('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999387264251709, 7)]",
        "logprob": "-0.1548541915531417",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 541
    },
    {
        "nl": "List the names of orchestras that have no performance .",
        "true_sql": "select orchestra.orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 6, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.orchestra",
            "where",
            "orchestra.orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "show.performance_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [22, 20], 5, 2, [55], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9048147201538086, 1), ('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.9995052814483643, 3), ('WHERE_OP', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 0.9991968218664549, 4), ('WHERE_ROOT_TERM', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 'root', 0.9999948740005493, 5), ('SELECT_AGG_v2', ('show', 'performance_id', 55), ('none_agg', 0), False, 0.4035153388977051, 7), ('O', '##END_NESTED##', 0.9997497200965881, 8)]",
        "logprob": "-1.1936906714279618",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 542
    },
    {
        "nl": "What are the orchestras that do not have any performances ?",
        "true_sql": "select orchestra.orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 6, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.orchestra",
            "where",
            "orchestra.orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "show.performance_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [22, 20], 5, 2, [55], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9973666071891785, 1), ('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.9999593496322632, 3), ('WHERE_OP', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 0.9998480677444335, 4), ('WHERE_ROOT_TERM', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 'root', 0.9999853372573853, 5), ('SELECT_AGG_v2', ('show', 'performance_id', 55), ('none_agg', 0), False, 0.6455354690551758, 7), ('O', '##END_NESTED##', 0.9999102354049683, 8)]",
        "logprob": "-0.4416428424432773",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 543
    },
    {
        "nl": "Show the record companies shared by orchestras founded before 2003 and after 2003 .",
        "true_sql": "select orchestra.record_company where orchestra.year_of_founded < value intersect select orchestra.record_company where orchestra.year_of_founded > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 10, False], None], 2003.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 10, False], None], 2003.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "where",
            "orchestra.year_of_founded",
            "<",
            "value",
            "intersect",
            "select",
            "orchestra.record_company",
            "where",
            "orchestra.year_of_founded",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 45, [21], 3, 23, 2, [44], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9972715973854065, 3), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('<', 2), 0.5188963413238525, 4), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('<', 2), 'terminal', 0.9999934434890747, 5), ('IUEN_v2', ('intersect', 1), 0.9964137673377991, 6), ('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.999997615814209, 8), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9473387598991394, 10), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.8548519015312195, 11), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999947547912598, 12)]",
        "logprob": "-0.873415371816749",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 544
    },
    {
        "nl": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 ?",
        "true_sql": "select orchestra.record_company where orchestra.year_of_founded < value intersect select orchestra.record_company where orchestra.year_of_founded > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 10, False], None], 2003.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 10, False], None], 2003.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "where",
            "orchestra.year_of_founded",
            "<",
            "value",
            "intersect",
            "select",
            "orchestra.record_company",
            "where",
            "orchestra.year_of_founded",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 45, [21], 3, 23, 2, [44], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999991655349731, 1), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9997389912605286, 3), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('<', 2), 0.958229124546051, 4), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('<', 2), 'terminal', 0.9999878406524658, 5), ('IUEN_v2', ('intersect', 1), 0.9996201992034912, 6), ('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.999974250793457, 8), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9998310804367065, 10), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9659300446510315, 11), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.999985933303833, 12)]",
        "logprob": "-0.07835225058560673",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 545
    },
    {
        "nl": "Find the number of orchestras whose record format is `` CD `` or `` DVD `` .",
        "true_sql": "select count ( orchestra.* ) where orchestra.major_record_format = value or orchestra.major_record_format = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"CD\"', None], 'or', [False, 2, [0, [0, 11, False], None], '\"DVD\"', None]], 'extracted_clause_asterisk': {'select': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "orchestra.*",
            ")",
            "where",
            "orchestra.major_record_format",
            "=",
            "value",
            "or",
            "orchestra.major_record_format",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 6, 46, [7], 3, 25, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.8552522307561726, 1), ('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999992847442627, 3), ('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9999921321868896, 4), ('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999018907546997, 7), ('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9999452829360962, 8), ('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999978542327881, 9)]",
        "logprob": "-0.626053431243288",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 546
    },
    {
        "nl": "Count the number of orchestras that have CD or DVD as their record format .",
        "true_sql": "select count ( orchestra.* ) where orchestra.major_record_format = value or orchestra.major_record_format = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"CD\"', None], 'or', [False, 2, [0, [0, 11, False], None], '\"DVD\"', None]], 'extracted_clause_asterisk': {'select': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "orchestra.*",
            ")",
            "where",
            "orchestra.major_record_format",
            "=",
            "value",
            "or",
            "orchestra.major_record_format",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 6, 46, [7], 3, 25, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9128610714138133, 1), ('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999806880950928, 3), ('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.99997878074646, 4), ('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9895402789115906, 7), ('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9998542070388794, 8), ('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999974966049194, 9)]",
        "logprob": "-0.37608392348875463",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 547
    },
    {
        "nl": "Show the years in which orchestras that have given more than one performance are founded .",
        "true_sql": "select orchestra.year_of_founded group_by performance.orchestra_id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 13, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.orchestra",
            "group_by",
            "orchestra.orchestra",
            "having",
            "count",
            "(",
            "orchestra.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 10, 42, 18, [9, 5, 60, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.5995177626609802, 1), ('GROUP_COL', ('orchestra', 'orchestra', 42), 0.6343129277229309, 3), ('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9426449024429826, 5), ('HAV_OP_v2', (('orchestra', '*', 60), ('count', 3), False), ('>', 1), 0.9999159574508667, 6), ('HAV_ROOT_TERM_v2', (('orchestra', '*', 60), ('count', 3), False), ('>', 1), 'terminal', 0.9995582699775696, 7)]",
        "logprob": "-1.2148609608523238",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 548
    },
    {
        "nl": "What are years of founding for orchestras that have had more than a single performance ?",
        "true_sql": "select orchestra.year_of_founded group_by performance.orchestra_id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 13, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "orchestra.year_of_founded",
            "group_by",
            "orchestra.year_of_founded",
            "having",
            "count",
            "(",
            "orchestra.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 45, 18, [9, 5, 60, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.9999983310699463, 1), ('GROUP_COL', ('orchestra', 'year_of_founded', 45), 0.7730081081390381, 3), ('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.976026080113654, 5), ('HAV_OP_v2', (('orchestra', '*', 60), ('count', 3), False), ('>', 1), 0.9999014139175415, 6), ('HAV_ROOT_TERM_v2', (('orchestra', '*', 60), ('count', 3), False), ('>', 1), 'terminal', 0.988599419593811, 7)]",
        "logprob": "-0.7070497934243846",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 549
    },
    {
        "nl": "Which country does Airline `` JetBlue Airways `` belong to ?",
        "true_sql": "select airlines.country where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.country",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.9994800686836243, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9960076808929443, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.3841206107981153",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 550
    },
    {
        "nl": "What country is Jetblue Airways affiliated with ?",
        "true_sql": "select airlines.country where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.country",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.999874472618103, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9990361928939819, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.006880443227291048",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 551
    },
    {
        "nl": "What is the abbreviation of Airline `` JetBlue Airways `` ?",
        "true_sql": "select airlines.abbreviation where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.abbreviation",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999911785125732, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9999822378158569, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999969005584717, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999971389770508, 5)]",
        "logprob": "-0.00030014269642302194",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 552
    },
    {
        "nl": "Which abbreviation corresponds to Jetblue Airways ?",
        "true_sql": "select airlines.abbreviation where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.abbreviation",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9998408555984497, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999970197677612, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.0004028361601092367",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 553
    },
    {
        "nl": "List all airline names and their abbreviations in `` USA `` .",
        "true_sql": "select airlines.airline , airlines.abbreviation where airlines.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            ",",
            "airlines.abbreviation",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9999947547912598, 1), ('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999608993530273, 3), ('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9226564764976501, 5), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999948740005493, 6), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999977350234985, 7)]",
        "logprob": "-0.08065529811322021",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 554
    },
    {
        "nl": "What are the airline names and abbreviations for airlines in the USA ?",
        "true_sql": "select airlines.airline , airlines.abbreviation where airlines.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            ",",
            "airlines.abbreviation",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9999973773956299, 1), ('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999973773956299, 3), ('WHERE_COL', ('airlines', 'abbreviation', 38), 0.8071698546409607, 5), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999785423278809, 6), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999983310699463, 7)]",
        "logprob": "-0.21504542503673113",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 555
    },
    {
        "nl": "List the airport code and name in the city of Anthony .",
        "true_sql": "select airports.airportcode , airports.airportname where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Anthony\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportcode",
            ",",
            "airports.airportname",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.6381074786186218, 3), ('WHERE_COL', ('airports', 'city', 40), 0.9999996423721313, 5), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999958276748657, 6), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999992847442627, 7)]",
        "logprob": "-0.45048712057945434",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 556
    },
    {
        "nl": "Give the airport code and airport name corresonding to the city Anthony .",
        "true_sql": "select airports.airportcode , airports.airportname where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Anthony\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportcode",
            ",",
            "airports.airportname",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.999841570854187, 1), ('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9840071797370911, 3), ('WHERE_COL', ('airports', 'city', 40), 1.0, 5), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999924898147583, 6), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999986886978149, 7)]",
        "logprob": "-0.0222734217247089",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 557
    },
    {
        "nl": "How many airlines do we have ?",
        "true_sql": "select count ( airlines.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'airlines.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "airlines.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9999909102280864, 1)]",
        "logprob": "-9.608488340265262e-05",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 558
    },
    {
        "nl": "What is the total number of airlines ?",
        "true_sql": "select count ( airlines.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'airlines.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "airlines.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9999536551511933, 1)]",
        "logprob": "-0.002344327791878735",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 559
    },
    {
        "nl": "How many airports do we have ?",
        "true_sql": "select count ( airports.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'airports.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "airports.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 50, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999982416609847, 1)]",
        "logprob": "-0.00020690768590812933",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 560
    },
    {
        "nl": "Return the number of airports .",
        "true_sql": "select count ( airports.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'airports.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "airports.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 50, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999639970179823, 1)]",
        "logprob": "-0.0012217104335960614",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 561
    },
    {
        "nl": "How many flights do we have ?",
        "true_sql": "select count ( flights.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9999899266756905, 1)]",
        "logprob": "-0.00011301381086652475",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 562
    },
    {
        "nl": "Return the number of flights .",
        "true_sql": "select count ( flights.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.999992668600752, 1)]",
        "logprob": "-0.0001624913312087829",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 563
    },
    {
        "nl": "Which airline has abbreviation 'UAL ' ?",
        "true_sql": "select airlines.airline where airlines.abbreviation = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], '\"UAL\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9976983666419983, 1), ('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9997268319129944, 3), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999442100524902, 4), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.005887548907079858",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 564
    },
    {
        "nl": "Give the airline with abbreviation 'UAL ' .",
        "true_sql": "select airlines.airline where airlines.abbreviation = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], '\"UAL\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9673722386360168, 1), ('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9999973773956299, 3), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999847412109375, 4), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.034046202058162764",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 565
    },
    {
        "nl": "How many airlines are from USA ?",
        "true_sql": "select count ( airlines.* ) where airlines.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {'select': 'airlines.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "airlines.*",
            ")",
            "where",
            "airlines.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.999835139602229, 1), ('WHERE_COL', ('airlines', 'country', 39), 0.9999717473983765, 3), ('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999910593032837, 4), ('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.0009193875575851246",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 566
    },
    {
        "nl": "Return the number of airlines in the USA .",
        "true_sql": "select count ( airlines.* ) where airlines.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {'select': 'airlines.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "airlines.*",
            ")",
            "where",
            "airlines.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9992754703637631, 1), ('WHERE_COL', ('airlines', 'country', 39), 0.9771784543991089, 3), ('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.99989914894104, 4), ('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999973773956299, 5)]",
        "logprob": "-0.05389799189715467",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 567
    },
    {
        "nl": "Which city and country is the Alton airport at ?",
        "true_sql": "select airports.city , airports.country where airports.airportname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"Alton\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.city",
            ",",
            "airports.country",
            "where",
            "airports.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [43], 6, 43, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.9189608097076416, 1), ('SELECT_AGG_v2', ('airports', 'country', 43), ('none_agg', 0), False, 0.978544294834137, 3), ('WHERE_COL', ('airports', 'country', 43), 0.9630018472671509, 5), ('WHERE_OP', (('airports', 'country', 43),), ('=', 0), 0.999996542930603, 6), ('WHERE_ROOT_TERM', (('airports', 'country', 43),), ('=', 0), 'terminal', 0.999998927116394, 7)]",
        "logprob": "-0.14748516241592935",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 568
    },
    {
        "nl": "Give the city and country for the Alton airport .",
        "true_sql": "select airports.city , airports.country where airports.airportname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"Alton\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportname",
            ",",
            "airports.country",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [43], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9042653441429138, 1), ('SELECT_AGG_v2', ('airports', 'country', 43), ('none_agg', 0), False, 0.7009788155555725, 3), ('WHERE_COL', ('airports', 'airportname', 42), 0.6764525175094604, 5), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999966621398926, 6), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999991655349731, 7)]",
        "logprob": "-0.8485224033020363",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 569
    },
    {
        "nl": "What is the airport name for airport 'AKO ' ?",
        "true_sql": "select airports.airportname where airports.airportcode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], '\"AKO\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999945163726807, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9799216985702515, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999963045120239, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.02059372369293018",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 570
    },
    {
        "nl": "Return the name of the airport with code 'AKO ' .",
        "true_sql": "select airports.airportname where airports.airportcode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], '\"AKO\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.airportcode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999889135360718, 1), ('WHERE_COL', ('airports', 'airportcode', 41), 0.9999998807907104, 3), ('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999889135360718, 4), ('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.0007258704436041981",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 571
    },
    {
        "nl": "What are airport names at City 'Aberdeen ' ?",
        "true_sql": "select airports.airportname where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999592304229736, 1), ('WHERE_COL', ('airports', 'city', 40), 1.0, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-0.0016589576661316255",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 572
    },
    {
        "nl": "What are the names of airports in Aberdeen ?",
        "true_sql": "select airports.airportname where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 1.0, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999972581863403, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.005148536420039187",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 573
    },
    {
        "nl": "How many flights depart from 'APG ' ?",
        "true_sql": "select count ( flights.* ) where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9999515102822221, 1), ('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9907519817352295, 3), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999986886978149, 4), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.009954800400522035",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 574
    },
    {
        "nl": "Count the number of flights departing from 'APG ' .",
        "true_sql": "select count ( flights.* ) where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.flightno",
            ")",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.9184414929558158, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9548529982566833, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999984502792358, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.39082957159243037",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 575
    },
    {
        "nl": "How many flights have destination ATO ?",
        "true_sql": "select count ( flights.* ) where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"ATO\"', None]], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9364777810949784, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9860829710960388, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999978542327881, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.2766953180325449",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 576
    },
    {
        "nl": "Count the number of flights into ATO .",
        "true_sql": "select count ( flights.* ) where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"ATO\"', None]], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9923404727151486, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9137469530105591, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999954700469971, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.1235616804727594",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 577
    },
    {
        "nl": "How many flights depart from City Aberdeen ?",
        "true_sql": "select count ( * ) where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9940781866191127, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9991821646690369, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.03491442028004075",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 578
    },
    {
        "nl": "Return the number of flights departing from Aberdeen .",
        "true_sql": "select count ( * ) where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9513277713105408, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9952539205551147, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999997615814209, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.9105931317186569",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 579
    },
    {
        "nl": "How many flights arriving in Aberdeen city ?",
        "true_sql": "select count ( * ) where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9878122877233663, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9999898672103882, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999985694885254, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.0680161705284036",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 580
    },
    {
        "nl": "Return the number of flights arriving in Aberdeen .",
        "true_sql": "select count ( * ) where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.flightno",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.9686353122282189, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9994757771492004, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.6902364779768166",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 581
    },
    {
        "nl": "How many flights depart from City 'Aberdeen ' and have destination City 'Ashley ' ?",
        "true_sql": "select count ( * ) where airports.city = value and airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Ashley\"', None], 'and', [False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "and",
            "flights.destairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 40, [7], 3, 16, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9973230760574123, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9992988109588623, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999958276748657, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), ('WHERE_COL', ('flights', 'destairport', 48), 0.669561505317688, 7), ('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.999934196472168, 8), ('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999954700469971, 9)]",
        "logprob": "-0.448853872504038",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 582
    },
    {
        "nl": "How many flights fly from Aberdeen to Ashley ?",
        "true_sql": "select count ( * ) where airports.city = value and airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Ashley\"', None], 'and', [False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "and",
            "airports.countryabbrev",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 40, [7], 3, 16, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9284720396886763, 1), ('WHERE_COL', ('airports', 'city', 40), 0.8352367281913757, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999949932098389, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('airports', 'countryabbrev', 44), 0.6269484758377075, 7), ('WHERE_OP', (('airports', 'countryabbrev', 44),), ('=', 0), 0.9996261596679688, 8), ('WHERE_ROOT_TERM', (('airports', 'countryabbrev', 44),), ('=', 0), 'terminal', 0.9998964071273804, 9)]",
        "logprob": "-0.9521531254631133",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 583
    },
    {
        "nl": "How many flights does airline 'JetBlue Airways ' have ?",
        "true_sql": "select count ( * ) where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.8984729225363848, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9997134804725647, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.999997615814209, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.42897871826044864",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 584
    },
    {
        "nl": "Give the number of Jetblue Airways flights .",
        "true_sql": "select count ( * ) where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9933609962463379, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9219279885292053, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999992847442627, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999958276748657, 5)]",
        "logprob": "-0.09074636486914463",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 585
    },
    {
        "nl": "How many 'United Airlines ' flights go to Airport 'ASY ' ?",
        "true_sql": "select count ( * ) where airlines.airline = value and flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None], 'and', [False, 2, [0, [0, 13, False], None], '\"ASY\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "flights.flightno",
            ")",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 46, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), True, 0.8538707709497421, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9997395873069763, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.999998927116394, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.8045613134112853",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 586
    },
    {
        "nl": "Count the number of United Airlines flights arriving in ASY Airport .",
        "true_sql": "select count ( * ) where airlines.airline = value and flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None], 'and', [False, 2, [0, [0, 13, False], None], '\"ASY\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9191012978553772, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9905045628547668, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999991655349731, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999978542327881, 5)]",
        "logprob": "-0.24274564492119005",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 587
    },
    {
        "nl": "How many 'United Airlines ' flights depart from Airport 'AHD ' ?",
        "true_sql": "select count ( * ) where airlines.airline = value and flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None], 'and', [False, 2, [0, [0, 12, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8752813919804566, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9931598901748657, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999985694885254, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.6095273222122585",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 588
    },
    {
        "nl": "Return the number of United Airlines flights leaving from AHD Airport .",
        "true_sql": "select count ( * ) where airlines.airline = value and flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None], 'and', [False, 2, [0, [0, 12, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.flightno",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.8411633816923411, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.8751036524772644, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.869078733809652",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 589
    },
    {
        "nl": "How many United Airlines flights go to City 'Aberdeen ' ?",
        "true_sql": "select count ( * ) where airports.city = value and airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None], 'and', [False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.921434592656347, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9974178075790405, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.38254994814514365",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 590
    },
    {
        "nl": "Count the number of United Airlines flights that arrive in Aberdeen .",
        "true_sql": "select count ( * ) where airports.city = value and airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None], 'and', [False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "and",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 16, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.8328254222869873, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9996799230575562, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999998927116394, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999979734420776, 5), ('WHERE_COL', ('airports', 'airportname', 42), 0.5216995477676392, 7), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999707937240601, 8), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999650716781616, 9)]",
        "logprob": "-1.4862160171314474",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 591
    },
    {
        "nl": "Which city has most number of arriving flights ?",
        "true_sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "group_by",
            "airports.city",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9635085463523865, 1), ('GROUP_COL', ('airports', 'city', 40), 0.9977893829345703, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9993534618631827, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9985643029212952, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999397993087769, 7)]",
        "logprob": "-0.043593336480805135",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 592
    },
    {
        "nl": "Which city has the most frequent destination airport ?",
        "true_sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.city",
            "group_by",
            "airports.city",
            "order_by",
            "count",
            "(",
            "airports.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 50, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.9443734884262085, 1), ('GROUP_COL', ('airports', 'city', 40), 0.9974623918533325, 3), ('ORDER_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9715228552353508, 5), ('ORDER_DESC_ASC', (('airports', '*', 50), ('count', 3), False), 'desc', 0.9979721903800964, 6), ('ORDER_LIMIT', (('airports', '*', 50), ('count', 3), False), 'limit_value', 0.9999351501464844, 7)]",
        "logprob": "-0.17861259020398623",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 593
    },
    {
        "nl": "Which city has most number of departing flights ?",
        "true_sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 12, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "group_by",
            "airports.city",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9689334034919739, 1), ('GROUP_COL', ('airports', 'city', 40), 0.9976555109024048, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9984492838310758, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9989330172538757, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999444484710693, 7)]",
        "logprob": "-0.04134852863889259",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 594
    },
    {
        "nl": "Which city is the most frequent source airport ?",
        "true_sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 12, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.city",
            "group_by",
            "airports.city",
            "order_by",
            "count",
            "(",
            "airports.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 50, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.8299604058265686, 1), ('GROUP_COL', ('airports', 'city', 40), 0.9997023940086365, 3), ('ORDER_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999470697108619, 5), ('ORDER_DESC_ASC', (('airports', '*', 50), ('count', 3), False), 'desc', 0.9989663362503052, 6), ('ORDER_LIMIT', (('airports', '*', 50), ('count', 3), False), 'limit_value', 0.9999104738235474, 7)]",
        "logprob": "-0.18943232908593202",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 595
    },
    {
        "nl": "What is the code of airport that has the highest number of flights ?",
        "true_sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportcode",
            "group_by",
            "airports.airportcode",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9996527433395386, 1), ('GROUP_COL', ('airports', 'airportcode', 41), 0.9702423810958862, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999412422552146, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993003606796265, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999662637710571, 7)]",
        "logprob": "-0.046949140193362965",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 596
    },
    {
        "nl": "What is the airport code of the airport with the most flights ?",
        "true_sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportcode",
            "group_by",
            "airports.airportcode",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9999288320541382, 1), ('GROUP_COL', ('airports', 'airportcode', 41), 0.9966566562652588, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999368610020237, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9995496869087219, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999507665634155, 7)]",
        "logprob": "-0.007166268363067314",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 597
    },
    {
        "nl": "What is the code of airport that has fewest number of flights ?",
        "true_sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportcode",
            "group_by",
            "airports.airportcode",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9997832179069519, 1), ('GROUP_COL', ('airports', 'airportcode', 41), 0.9511130452156067, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999423896956885, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.7858754992485046, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999527931213379, 7)]",
        "logprob": "-0.2936171800276445",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 598
    },
    {
        "nl": "Give the code of the airport with the least flights .",
        "true_sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportcode",
            "order_by",
            "airports.airportname",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 11, [42], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9999977350234985, 1), ('ORDER_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.6471773982048035, 3), ('ORDER_DESC_ASC', (('airports', 'airportname', 42), ('none_agg', 0), False), 'asc', 0.9789698719978333, 4), ('ORDER_LIMIT', (('airports', 'airportname', 42), ('none_agg', 0), False), 'limit_value', 0.9998694658279419, 5)]",
        "logprob": "-0.988362539150144",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 599
    },
    {
        "nl": "Which airline has most number of flights ?",
        "true_sql": "select airlines.airline group_by airlines.airline order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "group_by",
            "flights.airline",
            "order_by",
            "count",
            "(",
            "flights.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 10, 45, 11, [9, 5, 51, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.5227497220039368, 1), ('GROUP_COL', ('flights', 'airline', 45), 0.9827157258987427, 3), ('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.8485906541055499, 5), ('ORDER_DESC_ASC', (('flights', '*', 51), ('count', 3), False), 'desc', 0.9995402097702026, 6), ('ORDER_LIMIT', (('flights', '*', 51), ('count', 3), False), 'limit_value', 0.9999285936355591, 7)]",
        "logprob": "-1.3234376330750326",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 600
    },
    {
        "nl": "What airline serves the most flights ?",
        "true_sql": "select airlines.airline group_by airlines.airline order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "flights.airline",
            "order_by",
            "count",
            "(",
            "flights.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 45, 11, [9, 5, 51, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7972497940063477, 1), ('GROUP_COL', ('flights', 'airline', 45), 0.9909440279006958, 3), ('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9885551105550469, 5), ('ORDER_DESC_ASC', (('flights', '*', 51), ('count', 3), False), 'desc', 0.9997472167015076, 6), ('ORDER_LIMIT', (('flights', '*', 51), ('count', 3), False), 'limit_value', 0.9999556541442871, 7)]",
        "logprob": "-0.2820964533919164",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 601
    },
    {
        "nl": "Find the abbreviation and country of the airline that has fewest number of flights ?",
        "true_sql": "select airlines.abbreviation , airlines.country group_by airlines.airline order_by count ( * ) limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.abbreviation",
            ",",
            "airlines.country",
            "group_by",
            "flights.airline",
            "order_by",
            "count",
            "(",
            "flights.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 10, 45, 11, [9, 5, 51, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9995317459106445, 1), ('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.823855996131897, 3), ('GROUP_COL', ('flights', 'airline', 45), 0.9176672101020813, 5), ('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9976588164021132, 7), ('ORDER_DESC_ASC', (('flights', '*', 51), ('count', 3), False), 'asc', 0.8188254237174988, 8), ('ORDER_LIMIT', (('flights', '*', 51), ('count', 3), False), 'limit_value', 0.999862790107727, 9)]",
        "logprob": "-0.4957221212613591",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 602
    },
    {
        "nl": "What is the abbreviation of the airilne has the fewest flights and what country is it in ?",
        "true_sql": "select airlines.abbreviation , airlines.country group_by airlines.airline order_by count ( * ) limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.abbreviation",
            ",",
            "airlines.country",
            "where",
            "airlines.country",
            "=",
            "value",
            "group_by",
            "airlines.country",
            "order_by",
            "count",
            "(",
            "flights.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 6, 39, [7], 3, 10, 39, 11, [9, 5, 51, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.998956561088562, 1), ('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.8765844106674194, 3), ('WHERE_COL', ('airlines', 'country', 39), 0.5002312660217285, 5), ('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999227523803711, 6), ('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.999901294708252, 7), ('GROUP_COL', ('airlines', 'country', 39), 0.9432632327079773, 9), ('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9635420584842789, 11), ('ORDER_DESC_ASC', (('flights', '*', 51), ('count', 3), False), 'asc', 0.7329203486442566, 12), ('ORDER_LIMIT', (('flights', '*', 51), ('count', 3), False), 'limit_value', 0.963808000087738, 13)]",
        "logprob": "-1.5126723885479243",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 603
    },
    {
        "nl": "What are airlines that have some flight departing from airport 'AHD ' ?",
        "true_sql": "select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.6457944512367249, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.999900221824646, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999971389770508, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.4510385086066429",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 604
    },
    {
        "nl": "Which airlines have a flight with source airport AHD ?",
        "true_sql": "select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "flights.sourceairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7306206822395325, 1), ('WHERE_COL', ('flights', 'sourceairport', 47), 0.853488028049469, 3), ('WHERE_OP', (('flights', 'sourceairport', 47),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('flights', 'sourceairport', 47),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.4733658894377527",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 605
    },
    {
        "nl": "What are airlines that have flights arriving at airport 'AHD ' ?",
        "true_sql": "select airlines.airline where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9931024312973022, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9999874830245972, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.00793971624224356",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 606
    },
    {
        "nl": "Which airlines have a flight with destination airport AHD ?",
        "true_sql": "select airlines.airline where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "flights.destairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.6022388339042664, 1), ('WHERE_COL', ('flights', 'destairport', 48), 0.9057052135467529, 3), ('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.606510043314325",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 607
    },
    {
        "nl": "Find all airlines that have flights from both airports 'APG ' and 'CVO ' .",
        "true_sql": "select airlines.airline where flights.sourceairport = value intersect select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"CVO\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "intersect",
            "select",
            "airlines.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [7], 3, 23, 2, [37], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9968026876449585, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9993300437927246, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999256134033203, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.998233437538147, 6), ('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9294835925102234, 8), ('WHERE_COL', ('airports', 'airportname', 42), 0.996672511100769, 10), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999969005584717, 11), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999994039535522, 12)]",
        "logprob": "-0.08254464651032162",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 608
    },
    {
        "nl": "Which airlines have departing flights from both APG and CVO airports ?",
        "true_sql": "select airlines.airline where flights.sourceairport = value intersect select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"CVO\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "intersect",
            "select",
            "flights.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [7], 3, 23, 2, [45], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7129653692245483, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9513868689537048, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999880790710449, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999991655349731, 5), ('IUEN_v2', ('intersect', 1), 0.9961579442024231, 6), ('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.9425279498100281, 8), ('WHERE_COL', ('airports', 'airportname', 42), 0.5814858675003052, 10), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999982118606567, 11), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999995231628418, 12)]",
        "logprob": "-0.9939574440807586",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 609
    },
    {
        "nl": "Find all airlines that have flights from airport 'CVO ' but not from 'APG ' .",
        "true_sql": "select airlines.airline where flights.sourceairport = value except select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]]}, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"CVO\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "except",
            "select",
            "flights.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [7], 3, 28, 2, [45], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.6609617471694946, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9986374974250793, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9997811913490295, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999979734420776, 5), ('IUEN_v2', ('except', 3), 0.817559540271759, 6), ('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.9157432317733765, 8), ('WHERE_COL', ('airports', 'airportname', 42), 0.999847412109375, 10), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999971389770508, 11), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999992847442627, 12)]",
        "logprob": "-0.7071038902685437",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 610
    },
    {
        "nl": "Which airlines have departures from CVO but not from APG airports ?",
        "true_sql": "select airlines.airline where flights.sourceairport = value except select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]]}, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"CVO\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "except",
            "select",
            "flights.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [7], 3, 28, 2, [45], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9345634579658508, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.4219313859939575, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.999306321144104, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('except', 3), 0.9083456993103027, 6), ('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.9815654158592224, 8), ('WHERE_COL', ('airports', 'airportname', 42), 0.9662415981292725, 10), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999829530715942, 11), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999995231628418, 12)]",
        "logprob": "-1.0813609240400321",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 611
    },
    {
        "nl": "Find all airlines that have at least 10 flights .",
        "true_sql": "select airlines.airline group_by airlines.airline having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "flights.flightno",
            "having",
            "count",
            "(",
            "flights.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 46, 18, [9, 5, 51, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9961382746696472, 1), ('GROUP_COL', ('flights', 'flightno', 46), 0.9052808880805969, 3), ('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9780163533802243, 5), ('HAV_OP_v2', (('flights', '*', 51), ('count', 3), False), ('>=', 3), 0.9994786763182306, 6), ('HAV_ROOT_TERM_v2', (('flights', '*', 51), ('count', 3), False), ('>=', 3), 'terminal', 0.9999866485595703, 7)]",
        "logprob": "-0.19390113339379494",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 612
    },
    {
        "nl": "Which airlines have at least 10 flights ?",
        "true_sql": "select airlines.airline group_by airlines.airline having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "flights.flightno",
            "having",
            "count",
            "(",
            "flights.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 46, 18, [9, 5, 51, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9986258745193481, 1), ('GROUP_COL', ('flights', 'flightno', 46), 0.8957727551460266, 3), ('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9060352711565484, 5), ('HAV_OP_v2', (('flights', '*', 51), ('count', 3), False), ('>=', 3), 0.9991379514535925, 6), ('HAV_ROOT_TERM_v2', (('flights', '*', 51), ('count', 3), False), ('>=', 3), 'terminal', 0.9999725818634033, 7)]",
        "logprob": "-0.5085998422543231",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 613
    },
    {
        "nl": "Find all airlines that have fewer than 200 flights .",
        "true_sql": "select airlines.airline group_by airlines.airline having count ( * ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 4, [0, [3, 0, False], None], 200.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.uid",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9984157085418701, 1), ('WHERE_COL', ('airlines', 'uid', 36), 0.8293484449386597, 3), ('WHERE_OP', (('airlines', 'uid', 36),), ('<', 2), 0.46110790967941284, 4), ('WHERE_ROOT_TERM', (('airlines', 'uid', 36),), ('<', 2), 'terminal', 0.9998655319213867, 5)]",
        "logprob": "-1.636093584739641",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 614
    },
    {
        "nl": "Which airlines have less than 200 flights ?",
        "true_sql": "select airlines.airline group_by airlines.airline having count ( * ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 4, [0, [3, 0, False], None], 200.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.uid",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9982032775878906, 1), ('WHERE_COL', ('airlines', 'uid', 36), 0.6588577032089233, 3), ('WHERE_OP', (('airlines', 'uid', 36),), ('<', 2), 0.8936895728111267, 4), ('WHERE_ROOT_TERM', (('airlines', 'uid', 36),), ('<', 2), 'terminal', 0.9995730519294739, 5)]",
        "logprob": "-0.8351921787310295",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 615
    },
    {
        "nl": "What are flight numbers of Airline `` United Airlines `` ?",
        "true_sql": "select flights.flightno where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9999339580535889, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999980926513672, 5)]",
        "logprob": "-0.00014114836803672117",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 616
    },
    {
        "nl": "Which flight numbers correspond to United Airlines flights ?",
        "true_sql": "select flights.flightno where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9966529011726379, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999977350234985, 5)]",
        "logprob": "-0.003548943636613529",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 617
    },
    {
        "nl": "What are flight numbers of flights departing from Airport `` APG `` ?",
        "true_sql": "select flights.flightno where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9999850988388062, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.00047199204830981943",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 618
    },
    {
        "nl": "Give the flight numbers of flights leaving from APG .",
        "true_sql": "select flights.flightno where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "flights.flightno",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('flights', 'flightno', 46), 0.8605077266693115, 3), ('WHERE_OP', (('flights', 'flightno', 46),), ('=', 0), 0.9999984502792358, 4), ('WHERE_ROOT_TERM', (('flights', 'flightno', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.1502847795597994",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 619
    },
    {
        "nl": "What are flight numbers of flights arriving at Airport `` APG `` ?",
        "true_sql": "select flights.flightno where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'airportname', 42), 0.9999828338623047, 3), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.00037640640214976317",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 620
    },
    {
        "nl": "Give the flight numbers of flights landing at APG .",
        "true_sql": "select flights.flightno where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.7491285800933838, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999986886978149, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.28896445312685126",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 621
    },
    {
        "nl": "What are flight numbers of flights departing from City `` Aberdeen `` ?",
        "true_sql": "select flights.flightno where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9999573230743408, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.003269371447023373",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 622
    },
    {
        "nl": "Give the flight numbers of flights leaving from Aberdeen .",
        "true_sql": "select flights.flightno where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9998065829277039, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999985694885254, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.007782339021081105",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 623
    },
    {
        "nl": "What are flight numbers of flights arriving at City `` Aberdeen `` ?",
        "true_sql": "select flights.flightno where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9993689656257629, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999978542327881, 5)]",
        "logprob": "-0.007737649084824262",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 624
    },
    {
        "nl": "Give the flight numbers of flights arriving in Aberdeen .",
        "true_sql": "select flights.flightno where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9999020099639893, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999988079071045, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.01920693594600622",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 625
    },
    {
        "nl": "Find the number of flights landing in the city of Aberdeen or Abilene .",
        "true_sql": "select count ( * ) where airports.city = value or airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None], 'or', [False, 2, [0, [0, 5, False], None], '\"Abilene\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "or",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 40, [7], 3, 25, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9747905130684793, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9987228512763977, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999963045120239, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999982118606567, 5), ('WHERE_COL', ('airports', 'city', 40), 0.9980161190032959, 7), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999974250793457, 8), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 9)]",
        "logprob": "-0.14436359959453823",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 626
    },
    {
        "nl": "How many flights land in Aberdeen or Abilene ?",
        "true_sql": "select count ( * ) where airports.city = value or airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None], 'or', [False, 2, [0, [0, 5, False], None], '\"Abilene\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "or",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 40, [7], 3, 25, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9478680648223176, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9076086282730103, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999954700469971, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('WHERE_COL', ('airports', 'airportname', 42), 0.3970571458339691, 7), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999707937240601, 8), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999990463256836, 9)]",
        "logprob": "-1.2401152601478531",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 627
    },
    {
        "nl": "Find the name of airports which do not have any flight in and out .",
        "true_sql": "select airports.airportname where airports.airportcode not in ( select flights.sourceairport union select flights.destairport )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 6, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.airportcode",
            "not",
            "in",
            "(",
            "select",
            "flights.flightno",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [22, 20], 5, 2, [46], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'airportcode', 41), 0.9927398562431335, 3), ('WHERE_OP', (('airports', 'airportcode', 41),), ('not in', 7), 0.9994108698526121, 4), ('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('not in', 7), 'root', 0.9999833106994629, 5), ('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9976683259010315, 7), ('O', '##END_NESTED##', 0.9993823766708374, 8)]",
        "logprob": "-0.3339380097173952",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 628
    },
    {
        "nl": "Which airports do not have departing or arriving flights ?",
        "true_sql": "select airports.airportname where airports.airportcode not in ( select flights.sourceairport union select flights.destairport )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 6, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "flights.destairport",
            "=",
            "value",
            "or",
            "flights.destairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 48, [7], 3, 25, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9984164237976074, 1), ('WHERE_COL', ('flights', 'destairport', 48), 0.4694872796535492, 3), ('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.747316837310791, 4), ('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999860525131226, 5), ('WHERE_COL', ('flights', 'destairport', 48), 0.8443609476089478, 7), ('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.5672091245651245, 8), ('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999746084213257, 9)]",
        "logprob": "-1.8039367111176543",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 629
    },
    {
        "nl": "How many singers do we have ?",
        "true_sql": "select count ( singer.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 58, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9999295577215352, 1)]",
        "logprob": "-0.0003331595623073045",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 630
    },
    {
        "nl": "What is the total number of singers ?",
        "true_sql": "select count ( singer.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 58, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9948026038019923, 1)]",
        "logprob": "-0.0218143946494798",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 631
    },
    {
        "nl": "Show name , country , age for all singers ordered by age from the oldest to the youngest .",
        "true_sql": "select singer.name , singer.country , singer.age order_by singer.age desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.country",
            ",",
            "singer.country",
            ",",
            "order_by",
            "singer.age",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [45], 8, 11, [48], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.5063170194625854, 1), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9923343062400818, 3), ('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9999998807907104, 6), ('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9820162653923035, 7)]",
        "logprob": "-1.2596655491164797",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 632
    },
    {
        "nl": "What are the names , countries , and ages for every singer in descending order of age ?",
        "true_sql": "select singer.name , singer.country , singer.age order_by singer.age desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "singer.country",
            ",",
            "singer.age",
            "order_by",
            "singer.age",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 8, [48], 11, [48], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.99964439868927, 1), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9960401058197021, 3), ('SELECT_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9925931096076965, 5), ('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9999984502792358, 7), ('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9997920393943787, 8)]",
        "logprob": "-0.016682171286703875",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 633
    },
    {
        "nl": "What is the average , minimum , and maximum age of all singers from France ?",
        "true_sql": "select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) where singer.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]], [2, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"France\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "singer.age",
            ")",
            ",",
            "max",
            "(",
            "singer.age",
            ")",
            ",",
            "avg",
            "(",
            "singer.age",
            ")",
            "where",
            "singer.age",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 48, 4], 8, [19, 5, 48, 4], 8, [17, 5, 48, 4], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9952509446841613, 1), ('SELECT_AGG_v2', ('singer', 'age', 48), ('max', 1), False, 0.9248959792464571, 3), ('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9316933287623616, 5), ('WHERE_COL', ('singer', 'age', 48), 0.6582496762275696, 7), ('WHERE_OP', (('singer', 'age', 48),), ('=', 0), 0.998307466506958, 8), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('=', 0), 'terminal', 0.9999822378158569, 9)]",
        "logprob": "-1.0755409362112318",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 634
    },
    {
        "nl": "What is the average , minimum , and maximum age for all French singers ?",
        "true_sql": "select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) where singer.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]], [2, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"France\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "singer.age",
            ")",
            ",",
            "max",
            "(",
            "singer.age",
            ")",
            ",",
            "avg",
            "(",
            "singer.age",
            ")",
            "where",
            "singer.age",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 48, 4], 8, [19, 5, 48, 4], 8, [17, 5, 48, 4], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9295765635251197, 1), ('SELECT_AGG_v2', ('singer', 'age', 48), ('max', 1), False, 0.9445986214210362, 3), ('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.8955221265819264, 5), ('WHERE_COL', ('singer', 'age', 48), 0.7272149920463562, 7), ('WHERE_OP', (('singer', 'age', 48),), ('=', 0), 0.9983236193656921, 8), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('=', 0), 'terminal', 0.9999828338623047, 9)]",
        "logprob": "-1.3170731990400915",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 635
    },
    {
        "nl": "Show the name and the release year of the song by the youngest singer .",
        "true_sql": "select singer.song_name , singer.song_release_year order_by singer.age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.song_name",
            ",",
            "singer.song_release_year",
            "order_by",
            "singer.age",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 11, [48], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.6867271661758423, 1), ('SELECT_AGG_v2', ('singer', 'song_release_year', 47), ('none_agg', 0), False, 0.9999936819076538, 3), ('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9927096366882324, 5), ('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9707444906234741, 6), ('ORDER_LIMIT', (('singer', 'age', 48), ('none_agg', 0), False), 'limit_value', 0.9985339641571045, 7)]",
        "logprob": "-0.41444171791884854",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 636
    },
    {
        "nl": "What are the names and release years for all the songs of the youngest singer ?",
        "true_sql": "select singer.song_name , singer.song_release_year order_by singer.age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.song_name",
            ",",
            "singer.song_release_year",
            "order_by",
            "singer.age",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 11, [48], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.8036455512046814, 1), ('SELECT_AGG_v2', ('singer', 'song_release_year', 47), ('none_agg', 0), False, 0.9999339580535889, 3), ('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.998487114906311, 5), ('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.968142032623291, 6), ('ORDER_LIMIT', (('singer', 'age', 48), ('none_agg', 0), False), 'limit_value', 0.9996013045310974, 7)]",
        "logprob": "-0.25457694499335576",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 637
    },
    {
        "nl": "What are all distinct countries where singers above age 20 are from ?",
        "true_sql": "select distinct singer.country where singer.age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 20.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "singer.country",
            "where",
            "singer.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [45], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999979734420776, 2), ('WHERE_COL', ('singer', 'age', 48), 0.9999970197677612, 4), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9994035959243774, 5), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999357461929321, 6)]",
        "logprob": "-0.0008480039654938236",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 638
    },
    {
        "nl": "What are the different countries with singers above age 20 ?",
        "true_sql": "select distinct singer.country where singer.age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 20.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "singer.country",
            "where",
            "singer.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [45], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999996423721313, 2), ('WHERE_COL', ('singer', 'age', 48), 0.9999997615814209, 4), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9996970891952515, 5), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999603033065796, 6)]",
        "logprob": "-0.0006580472332855158",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 639
    },
    {
        "nl": "Show all countries and the number of singers in each country .",
        "true_sql": "select singer.country , count ( singer.* ) group_by singer.country",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.country",
            ",",
            "count",
            "(",
            "singer.*",
            ")",
            "group_by",
            "singer.country",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [9, 5, 58, 4], 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999996423721313, 1), ('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.8699210575475255, 3), ('GROUP_COL', ('singer', 'country', 45), 1.0, 5)]",
        "logprob": "-0.5574830046693502",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 640
    },
    {
        "nl": "How many singers are from each country ?",
        "true_sql": "select singer.country , count ( singer.* ) group_by singer.country",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            ",",
            "singer.country",
            "group_by",
            "singer.country",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 58, 4], 8, [45], 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9987592372648564, 1), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999998807907104, 3), ('GROUP_COL', ('singer', 'country', 45), 1.0, 5)]",
        "logprob": "-0.005119679502843346",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 641
    },
    {
        "nl": "List all song names by singers above the average age .",
        "true_sql": "select singer.song_name where singer.age > ( select avg ( singer.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.song_name",
            "where",
            "singer.age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "singer.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 48, [14], 5, 2, [17, 5, 48, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.5816521048545837, 1), ('WHERE_COL', ('singer', 'age', 48), 0.9997900128364563, 3), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9995942711830139, 4), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'root', 0.5132657289505005, 5), ('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9990741452363853, 7), ('O', '##END_NESTED##', 0.999929666519165, 8)]",
        "logprob": "-1.2167079924802193",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 642
    },
    {
        "nl": "What are all the song names by singers who are older than average ?",
        "true_sql": "select singer.song_name where singer.age > ( select avg ( singer.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.song_name",
            "where",
            "singer.age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "singer.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 48, [14], 5, 2, [17, 5, 48, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.9930023550987244, 1), ('WHERE_COL', ('singer', 'age', 48), 0.9996203184127808, 3), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.7301023006439209, 4), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'root', 0.9990807771682739, 5), ('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9980974331178587, 7), ('O', '##END_NESTED##', 0.9999493360519409, 8)]",
        "logprob": "-0.3306347097359221",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 643
    },
    {
        "nl": "Show location and name for all stadiums with a capacity between 5000 and 10000 .",
        "true_sql": "select stadium.location , stadium.name where stadium.capacity between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 1, [0, [0, 4, False], None], 5000.0, 10000.0]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.location",
            ",",
            "stadium.name",
            "where",
            "stadium.capacity",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 39, [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.999998927116394, 1), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999889135360718, 3), ('WHERE_COL', ('stadium', 'capacity', 39), 0.9999980926513672, 5), ('WHERE_OP', (('stadium', 'capacity', 39),), ('between', 9), 0.9890069961547852, 6), ('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('between', 9), 'terminal', 0.9999244213104248, 7)]",
        "logprob": "-0.01246166980281029",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 644
    },
    {
        "nl": "What are the locations and names of all stations with capacity between 5000 and 10000 ?",
        "true_sql": "select stadium.location , stadium.name where stadium.capacity between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 1, [0, [0, 4, False], None], 5000.0, 10000.0]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.location",
            ",",
            "stadium.name",
            "where",
            "stadium.capacity",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 39, [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9997798800468445, 1), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9792751669883728, 3), ('WHERE_COL', ('stadium', 'capacity', 39), 0.999990701675415, 5), ('WHERE_OP', (('stadium', 'capacity', 39),), ('between', 9), 0.9824804663658142, 6), ('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('between', 9), 'terminal', 0.9998455047607422, 7)]",
        "logprob": "-0.039707695466879196",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 645
    },
    {
        "nl": "What is the average and the maximum capacity of all stadiums ?",
        "true_sql": "select avg ( stadium.capacity ) , max ( stadium.capacity )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 4, False], None]], [1, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "stadium.capacity",
            ")",
            ",",
            "max",
            "(",
            "stadium.capacity",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 39, 4], 8, [19, 5, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.8843490574450422, 1), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.7868052926820988, 3)]",
        "logprob": "-1.451127100355732",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 646
    },
    {
        "nl": "What is the average and maximum capacities for all stations ?",
        "true_sql": "select avg ( stadium.capacity ) , max ( stadium.capacity )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 4, False], None]], [1, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "stadium.capacity",
            ")",
            ",",
            "max",
            "(",
            "stadium.capacity",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 39, 4], 8, [19, 5, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.887120808553829, 1), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.7395103891118636, 3)]",
        "logprob": "-1.686354846851768",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 647
    },
    {
        "nl": "What is the name and capacity for the stadium with highest average attendance ?",
        "true_sql": "select stadium.name , stadium.capacity order_by stadium.average desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.highest",
            "order_by",
            "stadium.capacity",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 11, [39], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999933242797852, 1), ('SELECT_AGG_v2', ('stadium', 'highest', 40), ('none_agg', 0), False, 0.6928160786628723, 3), ('ORDER_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.7280657887458801, 5), ('ORDER_DESC_ASC', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'desc', 0.9998948574066162, 6), ('ORDER_LIMIT', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'limit_value', 0.9996851682662964, 7)]",
        "logprob": "-1.022352336844851",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 648
    },
    {
        "nl": "What is the name and capacity for the stadium with the highest average attendance ?",
        "true_sql": "select stadium.name , stadium.capacity order_by stadium.average desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.highest",
            "order_by",
            "stadium.capacity",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 11, [39], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999818801879883, 1), ('SELECT_AGG_v2', ('stadium', 'highest', 40), ('none_agg', 0), False, 0.4421311318874359, 3), ('ORDER_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.6918377876281738, 5), ('ORDER_DESC_ASC', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'desc', 0.9999161958694458, 6), ('ORDER_LIMIT', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'limit_value', 0.9996263980865479, 7)]",
        "logprob": "-1.3524576135347042",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 649
    },
    {
        "nl": "How many concerts are there in year 2014 or 2015 ?",
        "true_sql": "select count ( concert.* ) where concert.year = value or concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None], 'or', [False, 2, [0, [0, 19, False], None], 2015.0, None]], 'extracted_clause_asterisk': {'select': 'concert.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "concert.*",
            ")",
            "where",
            "concert.year",
            "=",
            "value",
            "or",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 6, 54, [7], 3, 25, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.999960361092983, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9999861717224121, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9841302037239075, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999986886978149, 5), ('WHERE_COL', ('concert', 'year', 54), 1.0, 7), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9905418753623962, 8), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999938011169434, 9)]",
        "logprob": "-0.026532468708748265",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 650
    },
    {
        "nl": "How many concerts occurred in 2014 or 2015 ?",
        "true_sql": "select count ( concert.* ) where concert.year = value or concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None], 'or', [False, 2, [0, [0, 19, False], None], 2015.0, None]], 'extracted_clause_asterisk': {'select': 'concert.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "concert.*",
            ")",
            "where",
            "concert.year",
            "=",
            "value",
            "or",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 6, 54, [7], 3, 25, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9873625321938383, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9994146823883057, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9942713975906372, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999978542327881, 5), ('WHERE_COL', ('concert', 'year', 54), 0.9999964237213135, 7), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9695055484771729, 8), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999957084655762, 9)]",
        "logprob": "-0.1121394125150663",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 651
    },
    {
        "nl": "Show the stadium name and the number of concerts in each stadium .",
        "true_sql": "select stadium.name , count ( * ) group_by concert.stadium_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "count",
            "(",
            "stadium.*",
            ")",
            "group_by",
            "concert.stadium_id",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [9, 5, 57, 4], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999876022338867, 1), ('SELECT_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9837160760722031, 3), ('GROUP_COL', ('concert', 'stadium_id', 53), 0.9750059247016907, 5)]",
        "logprob": "-0.09116550993815842",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 652
    },
    {
        "nl": "For each stadium , how many concerts play there ?",
        "true_sql": "select stadium.name , count ( * ) group_by concert.stadium_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.location",
            ",",
            "count",
            "(",
            "stadium.*",
            ")",
            "group_by",
            "concert.stadium_id",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [9, 5, 57, 4], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.8192211389541626, 1), ('SELECT_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9957379538528722, 3), ('GROUP_COL', ('concert', 'stadium_id', 53), 0.9979339838027954, 5)]",
        "logprob": "-0.21878932269319515",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 653
    },
    {
        "nl": "Show the stadium name and capacity with most number of concerts in year 2014 or after .",
        "true_sql": "select stadium.name , stadium.capacity where concert.year > = value group_by stadium.stadium_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 5, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.name",
            "where",
            "stadium.capacity",
            ">",
            "value",
            "group_by",
            "concert.stadium_id",
            "order_by",
            "count",
            "(",
            "stadium.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [38], 6, 39, [14], 3, 10, 53, 11, [9, 5, 57, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9979214072227478, 1), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.7359588146209717, 3), ('WHERE_COL', ('stadium', 'capacity', 39), 0.9970182180404663, 5), ('WHERE_OP', (('stadium', 'capacity', 39),), ('>', 1), 0.997877836227417, 6), ('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('>', 1), 'terminal', 0.9997279047966003, 7), ('GROUP_COL', ('concert', 'stadium_id', 53), 0.9998238682746887, 9), ('ORDER_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9929890003853252, 11), ('ORDER_DESC_ASC', (('stadium', '*', 57), ('count', 3), False), 'desc', 0.9890589118003845, 12), ('ORDER_LIMIT', (('stadium', '*', 57), ('count', 3), False), 'limit_value', 0.9894686341285706, 13)]",
        "logprob": "-0.38704308609220894",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 654
    },
    {
        "nl": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "true_sql": "select stadium.name , stadium.capacity where concert.year > = value group_by stadium.stadium_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 5, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.name",
            "where",
            "stadium.capacity",
            ">",
            "value",
            "group_by",
            "concert.stadium_id",
            "order_by",
            "count",
            "(",
            "stadium.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [38], 6, 39, [14], 3, 10, 53, 11, [9, 5, 57, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9998897314071655, 1), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.652759850025177, 3), ('WHERE_COL', ('stadium', 'capacity', 39), 0.9949455857276917, 5), ('WHERE_OP', (('stadium', 'capacity', 39),), ('>', 1), 0.9997376799583435, 6), ('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('>', 1), 'terminal', 0.7351049184799194, 7), ('GROUP_COL', ('concert', 'stadium_id', 53), 0.990581750869751, 9), ('ORDER_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9911273345149227, 11), ('ORDER_DESC_ASC', (('stadium', '*', 57), ('count', 3), False), 'desc', 0.996260404586792, 12), ('ORDER_LIMIT', (('stadium', '*', 57), ('count', 3), False), 'limit_value', 0.9993221759796143, 13)]",
        "logprob": "-0.833968134909787",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 655
    },
    {
        "nl": "Which year has most number of concerts ?",
        "true_sql": "select concert.year group_by concert.year order_by count ( concert.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'concert.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "concert.year",
            "group_by",
            "concert.year",
            "order_by",
            "count",
            "(",
            "concert.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [54], 10, 54, 11, [9, 5, 59, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', 'year', 54), ('none_agg', 0), False, 0.996921718120575, 1), ('GROUP_COL', ('concert', 'year', 54), 1.0, 3), ('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9998889837395393, 5), ('ORDER_DESC_ASC', (('concert', '*', 59), ('count', 3), False), 'desc', 0.9981314539909363, 6), ('ORDER_LIMIT', (('concert', '*', 59), ('count', 3), False), 'limit_value', 0.9998977184295654, 7)]",
        "logprob": "-0.006889136029210864",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 656
    },
    {
        "nl": "What is the year that had the most concerts ?",
        "true_sql": "select concert.year group_by concert.year order_by count ( concert.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'concert.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "concert.year",
            "group_by",
            "concert.year",
            "order_by",
            "count",
            "(",
            "concert.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [54], 10, 54, 11, [9, 5, 59, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', 'year', 54), ('none_agg', 0), False, 0.9999911785125732, 1), ('GROUP_COL', ('concert', 'year', 54), 1.0, 3), ('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9999529836483216, 5), ('ORDER_DESC_ASC', (('concert', '*', 59), ('count', 3), False), 'desc', 0.9996386766433716, 6), ('ORDER_LIMIT', (('concert', '*', 59), ('count', 3), False), 'limit_value', 0.9998841285705566, 7)]",
        "logprob": "-0.08075649842613246",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 657
    },
    {
        "nl": "Show the stadium names without any concert .",
        "true_sql": "select stadium.name where stadium.stadium_id not in ( select concert.stadium_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 18, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            "where",
            "stadium.stadium_id",
            "not",
            "in",
            "(",
            "select",
            "concert.stadium_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 36, [22, 20], 5, 2, [53], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('stadium', 'stadium_id', 36), 0.9901211261749268, 3), ('WHERE_OP', (('stadium', 'stadium_id', 36),), ('not in', 7), 0.9996540238331799, 4), ('WHERE_ROOT_TERM', (('stadium', 'stadium_id', 36),), ('not in', 7), 'root', 0.9999891519546509, 5), ('SELECT_AGG_v2', ('concert', 'stadium_id', 53), ('none_agg', 0), False, 1.0, 7), ('O', '##END_NESTED##', 0.999884843826294, 8)]",
        "logprob": "-0.011549605614050183",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 658
    },
    {
        "nl": "What are the names of the stadiums without any concerts ?",
        "true_sql": "select stadium.name where stadium.stadium_id not in ( select concert.stadium_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 18, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            "where",
            "stadium.stadium_id",
            "not",
            "in",
            "(",
            "select",
            "concert.stadium_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 36, [22, 20], 5, 2, [53], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999979734420776, 1), ('WHERE_COL', ('stadium', 'stadium_id', 36), 0.991753339767456, 3), ('WHERE_OP', (('stadium', 'stadium_id', 36),), ('not in', 7), 0.9997415499028683, 4), ('WHERE_ROOT_TERM', (('stadium', 'stadium_id', 36),), ('not in', 7), 'root', 0.9999924898147583, 5), ('SELECT_AGG_v2', ('concert', 'stadium_id', 53), ('none_agg', 0), False, 0.9999843835830688, 7), ('O', '##END_NESTED##', 0.9999125003814697, 8)]",
        "logprob": "-0.010026407609418003",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 659
    },
    {
        "nl": "Show countries where a singer above age 40 and a singer below 30 are from .",
        "true_sql": "select singer.country where singer.age > value intersect select singer.country where singer.age < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 13, False], None], 30.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 40.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.country",
            "where",
            "singer.age",
            ">",
            "value",
            "intersect",
            "select",
            "singer.country",
            "where",
            "singer.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 48, [14], 3, 23, 2, [45], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'age', 48), 0.9999990463256836, 3), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9963853359222412, 4), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999922513961792, 5), ('IUEN_v2', ('intersect', 1), 0.9855760335922241, 6), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999994039535522, 8), ('WHERE_COL', ('singer', 'age', 48), 0.999964714050293, 10), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9069374203681946, 11), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999731779098511, 12)]",
        "logprob": "-0.11634856228557601",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 660
    },
    {
        "nl": "Show names for all stadiums except for stadiums having a concert in year 2014 .",
        "true_sql": "select stadium.name except select stadium.name where concert.year = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999991655349731, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9984450936317444, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9959976673126221, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-0.061951549909625994",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 661
    },
    {
        "nl": "What are the names of all stadiums that did not have a concert in 2014 ?",
        "true_sql": "select stadium.name except select stadium.name where concert.year = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            "where",
            "concert.year",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 54, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999686479568481, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9991124272346497, 3), ('WHERE_OP', (('concert', 'year', 54),), ('!=', 5), 0.8033524751663208, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('!=', 5), 'terminal', 0.9999899864196777, 5)]",
        "logprob": "-0.22015363373974164",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 662
    },
    {
        "nl": "Show the name and theme for all concerts and the number of singers in each concert .",
        "true_sql": "select concert.concert_name , concert.theme , count ( * ) group_by concert.concert_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]], [0, [0, [0, 17, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "concert.theme",
            ",",
            "count",
            "(",
            "concert.*",
            ")",
            "group_by",
            "concert.theme",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 8, [9, 5, 59, 4], 10, 52, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.983026921749115, 1), ('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9975834443664783, 3), ('GROUP_COL', ('concert', 'theme', 52), 0.9999996423721313, 5)]",
        "logprob": "-0.02692437139436725",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 663
    },
    {
        "nl": "What are the names , themes , and number of singers for each and every concert ?",
        "true_sql": "select concert.concert_name , concert.theme , count ( * ) group_by concert.concert_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]], [0, [0, [0, 17, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "concert.theme",
            ",",
            "concert.concert_name",
            ",",
            "count",
            "(",
            "concert.*",
            ")",
            "group_by",
            "concert.theme",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 8, [51], 8, [9, 5, 59, 4], 10, 52, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.9611201882362366, 1), ('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.9994825124740601, 3), ('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9720781394634325, 5), ('GROUP_COL', ('concert', 'theme', 52), 0.9999996423721313, 7)]",
        "logprob": "-0.15385172900859082",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 664
    },
    {
        "nl": "List singer names and number of concerts for each singer .",
        "true_sql": "select singer.name , count ( * ) group_by singer.singer_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "count",
            "(",
            "concert.*",
            ")",
            "group_by",
            "concert.concert_name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [9, 5, 59, 4], 10, 51, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9977436065673828, 1), ('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.970706612708266, 3), ('GROUP_COL', ('concert', 'concert_name', 51), 0.9792040586471558, 5)]",
        "logprob": "-0.14229141308863133",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 665
    },
    {
        "nl": "What are the names of the singers and number of concerts for each person ?",
        "true_sql": "select singer.name , count ( * ) group_by singer.singer_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "count",
            "(",
            "singer_in_concert.*",
            ")",
            "group_by",
            "concert.concert_name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [9, 5, 60, 4], 10, 51, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9999815225601196, 1), ('SELECT_AGG_v2', ('singer_in_concert', '*', 60), ('count', 3), False, 0.9007997660856388, 3), ('GROUP_COL', ('concert', 'concert_name', 51), 0.9292823076248169, 5)]",
        "logprob": "-0.49136677753230834",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 666
    },
    {
        "nl": "List all singer names in concerts in year 2014 .",
        "true_sql": "select singer.name where concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9999991655349731, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9999994039535522, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.999987006187439, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.00011384764033548996",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 667
    },
    {
        "nl": "What are the names of the singers who performed in a concert in 2014 ?",
        "true_sql": "select singer.name where concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9984884262084961, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9999793767929077, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.0015806678804287497",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 668
    },
    {
        "nl": "what is the name and nation of the singer who have a song having 'Hey ' in its name ?",
        "true_sql": "select singer.name , singer.country where singer.song_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 11, False], None], '\"%Hey%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "singer.song_name",
            "where",
            "singer.song_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [46], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9256467819213867, 1), ('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.5399964451789856, 3), ('WHERE_COL', ('singer', 'song_name', 46), 0.8210231065750122, 5), ('WHERE_OP', (('singer', 'song_name', 46),), ('=', 0), 0.9999464750289917, 6), ('WHERE_ROOT_TERM', (('singer', 'song_name', 46),), ('=', 0), 'terminal', 0.9999994039535522, 7)]",
        "logprob": "-0.8907750645058051",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 669
    },
    {
        "nl": "What is the name and country of origin of every singer who has a song with the word 'Hey ' in its title ?",
        "true_sql": "select singer.name , singer.country where singer.song_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 11, False], None], '\"%Hey%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "singer.country",
            "where",
            "singer.country",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 6, 45, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9760820269584656, 1), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9992908239364624, 3), ('WHERE_COL', ('singer', 'country', 45), 0.9620945453643799, 5), ('WHERE_OP', (('singer', 'country', 45),), ('like', 6), 0.9997791647911072, 6), ('WHERE_ROOT_TERM', (('singer', 'country', 45),), ('like', 6), 'terminal', 0.9999821186065674, 7)]",
        "logprob": "-0.06424227074210391",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 670
    },
    {
        "nl": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015 .",
        "true_sql": "select stadium.name , stadium.location where concert.year = value intersect select stadium.name , stadium.location where concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2015.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.location",
            "where",
            "stadium.location",
            "=",
            "value",
            "intersect",
            "select",
            "stadium.name",
            ",",
            "stadium.location",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [37], 6, 37, [7], 3, 23, 2, [38], 8, [37], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9989204406738281, 1), ('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9999672174453735, 3), ('WHERE_COL', ('stadium', 'location', 37), 0.9505582451820374, 5), ('WHERE_OP', (('stadium', 'location', 37),), ('=', 0), 0.9372873306274414, 6), ('WHERE_ROOT_TERM', (('stadium', 'location', 37),), ('=', 0), 'terminal', 0.9999985694885254, 7), ('IUEN_v2', ('intersect', 1), 0.46773988008499146, 8), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9960418939590454, 10), ('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.8407970666885376, 12), ('WHERE_COL', ('concert', 'year', 54), 0.982102632522583, 14), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9453626275062561, 15), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999988079071045, 16)]",
        "logprob": "-1.145135935663062",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 671
    },
    {
        "nl": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015 ?",
        "true_sql": "select stadium.name , stadium.location where concert.year = value intersect select stadium.name , stadium.location where concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2015.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.location",
            "where",
            "concert.year",
            "=",
            "value",
            "intersect",
            "select",
            "stadium.name",
            ",",
            "stadium.location",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [37], 6, 54, [7], 3, 23, 2, [38], 8, [37], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9510690569877625, 1), ('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9994138479232788, 3), ('WHERE_COL', ('concert', 'year', 54), 0.9785143733024597, 5), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.8518051505088806, 6), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999988079071045, 7), ('IUEN_v2', ('intersect', 1), 0.9944477081298828, 8), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9387586116790771, 10), ('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.7801553010940552, 12), ('WHERE_COL', ('concert', 'year', 54), 0.9999330043792725, 14), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9501730799674988, 15), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999991655349731, 16)]",
        "logprob": "-0.6637415623410081",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 672
    },
    {
        "nl": "Find the number of concerts happened in the stadium with the highest capacity .",
        "true_sql": "select count ( * ) order_by stadium.capacity desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": "['select', 'count', '(', 'stadium.*', ')', 'desc', 'limit_value', '_EOS']",
        "dec_seq": "None",
        "tag_seq": "None",
        "logprob": "-1.1854327513024625",
        "questioned_indices": [],
        "q_counter": 0,
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": true,
        "idx": 673
    },
    {
        "nl": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "true_sql": "select count ( * ) order_by stadium.capacity desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "stadium.*",
            ")",
            "where",
            "stadium.capacity",
            "=",
            "(",
            "select",
            "max",
            "(",
            "stadium.capacity",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 57, 4], 6, 39, [7], 5, 2, [19, 5, 39, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9582764787431952, 1), ('WHERE_COL', ('stadium', 'capacity', 39), 0.9999728202819824, 3), ('WHERE_OP', (('stadium', 'capacity', 39),), ('=', 0), 0.9684089422225952, 4), ('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('=', 0), 'root', 0.9999674558639526, 5), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.999790036724513, 7), ('O', '##END_NESTED##', 0.9999133348464966, 8)]",
        "logprob": "-1.117528077292399",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 674
    },
    {
        "nl": "How many states are there ?",
        "true_sql": "select count ( area_code_state.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'area_code_state.*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "area_code_state.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 45, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', '*', 45), ('count', 3), False, 0.899130618732717, 1)]",
        "logprob": "-0.4254619963008703",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 675
    },
    {
        "nl": "List the contestant numbers and names , ordered by contestant name descending .",
        "true_sql": "select contestants.contestant_number , contestants.contestant_name order_by contestants.contestant_name desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "order_by",
            "contestants.contestant_number",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 11, [38], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.9822350144386292, 1), ('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9994907379150391, 3), ('ORDER_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.961676836013794, 5), ('ORDER_DESC_ASC', (('contestants', 'contestant_number', 38), ('none_agg', 0), False), 'asc', 0.9077625870704651, 6)]",
        "logprob": "-0.15520663788289463",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 676
    },
    {
        "nl": "List the vote ids , phone numbers and states of all votes .",
        "true_sql": "select votes.vote_id , votes.phone_number , votes.state",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "votes.vote_id",
            ",",
            "votes.phone_number",
            ",",
            "votes.phone_number",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [41], 8, [41], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.9999957084655762, 3), ('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.5437381863594055, 5)]",
        "logprob": "-0.6102700271563406",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 677
    },
    {
        "nl": "What are the maximum and minimum values of area codes ?",
        "true_sql": "select max ( area_code_state.area_code ) , min ( area_code_state.area_code )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 1, False], None]], [2, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "area_code_state.area_code",
            ")",
            ",",
            "min",
            "(",
            "area_code_state.area_code",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 36, 4], 8, [26, 5, 36, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('max', 1), False, 0.9952351947327915, 1), ('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('min', 2), False, 0.992161115846099, 3)]",
        "logprob": "-0.05087207056754771",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 678
    },
    {
        "nl": "What is last date created of votes from the state 'CA ' ?",
        "true_sql": "select max ( votes.created ) where votes.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"CA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "votes.created",
            "where",
            "votes.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.6589184999465942, 1), ('WHERE_COL', ('votes', 'state', 42), 0.550349771976471, 3), ('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999901056289673, 4), ('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999959468841553, 5)]",
        "logprob": "-1.511966186940386",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 679
    },
    {
        "nl": "What are the names of the contestants whose names are not 'Jessie Alloway '",
        "true_sql": "select contestants.contestant_name where contestants.contestant_name != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"Jessie Alloway\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "contestants.contestant_name",
            "where",
            "contestants.contestant_number",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 38, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9999994039535522, 1), ('WHERE_COL', ('contestants', 'contestant_number', 38), 0.7833337187767029, 3), ('WHERE_OP', (('contestants', 'contestant_number', 38),), ('!=', 5), 0.9987634420394897, 4), ('WHERE_ROOT_TERM', (('contestants', 'contestant_number', 38),), ('!=', 5), 'terminal', 0.9999711513519287, 5)]",
        "logprob": "-0.24642451311919908",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 680
    },
    {
        "nl": "What are the distinct states and create time of all votes ?",
        "true_sql": "select distinct votes.state , votes.created",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 7, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "votes.state",
            ",",
            "votes.created",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [42], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.9999997615814209, 2), ('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.9999451637268066, 4)]",
        "logprob": "-0.0005768560823865154",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 681
    },
    {
        "nl": "What are the contestant numbers and names of the contestants who had at least two votes ?",
        "true_sql": "select contestants.contestant_number , contestants.contestant_name group_by contestants.contestant_number having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "group_by",
            "votes.contestant_number",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 10, 43, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.5745086073875427, 1), ('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9998001456260681, 3), ('GROUP_COL', ('votes', 'contestant_number', 43), 0.9997939467430115, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9989812876661535, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.997668605310817, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.99998939037323, 9)]",
        "logprob": "-0.5705858664628011",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 682
    },
    {
        "nl": "Of all the contestants who got voted , what is the contestant number and name of the contestant who got least votes ?",
        "true_sql": "select contestants.contestant_number , contestants.contestant_name group_by contestants.contestant_number order_by count ( * ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "votes.contestant_number",
            ",",
            "contestants.contestant_name",
            "order_by",
            "contestants.contestant_number",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [39], 11, [38], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 0.9935606718063354, 1), ('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9963710308074951, 3), ('ORDER_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.9954769015312195, 5), ('ORDER_LIMIT', (('contestants', 'contestant_number', 38), ('none_agg', 0), False), 'limit_value', 0.5713967680931091, 6)]",
        "logprob": "-0.5777419246353661",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 683
    },
    {
        "nl": "What are the number of votes from state 'NY ' or 'CA ' ?",
        "true_sql": "select count ( votes.* ) where votes.state = value or votes.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"NY\"', None], 'or', [False, 2, [0, [0, 7, False], None], '\"CA\"', None]], 'extracted_clause_asterisk': {'select': 'votes.*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "votes.*",
            ")",
            "where",
            "votes.state",
            "=",
            "value",
            "or",
            "votes.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 6, 42, [7], 3, 25, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', '*', 47), ('count', 3), False, 0.9988509211899629, 1), ('WHERE_COL', ('votes', 'state', 42), 0.8979017734527588, 3), ('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999942779541016, 4), ('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999978542327881, 5), ('WHERE_COL', ('votes', 'state', 42), 0.9176488518714905, 7), ('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999685287475586, 8), ('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999982118606567, 9)]",
        "logprob": "-0.20310682497547092",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 684
    },
    {
        "nl": "How many contestants did not get voted ?",
        "true_sql": "select count ( contestants.* ) where contestants.contestant_number not in ( select votes.contestant_number )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 3, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'contestants.*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "votes.contestant_number",
            ")",
            "where",
            "contestants.contestant_number",
            "not",
            "in",
            "(",
            "select",
            "votes.vote_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 43, 4], 6, 38, [22, 20], 5, 2, [40], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('count', 3), True, 0.7874975115890817, 1), ('WHERE_COL', ('contestants', 'contestant_number', 38), 0.9993703961372375, 3), ('WHERE_OP', (('contestants', 'contestant_number', 38),), ('not in', 7), 0.9909770516097622, 4), ('WHERE_ROOT_TERM', (('contestants', 'contestant_number', 38),), ('not in', 7), 'root', 0.9999768733978271, 5), ('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('none_agg', 0), False, 0.9384608864784241, 7), ('O', '##END_NESTED##', 0.9993441700935364, 8)]",
        "logprob": "-1.4876352700354847",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 685
    },
    {
        "nl": "What is the area code in which the most voters voted ?",
        "true_sql": "select area_code_state.area_code group_by area_code_state.area_code order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 2, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "area_code_state.area_code",
            "group_by",
            "area_code_state.area_code",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 10, 36, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('area_code_state', 'area_code', 36), 0.9471949934959412, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9841752821702133, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9987208247184753, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999622106552124, 7)]",
        "logprob": "-0.25503857180239037",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 686
    },
    {
        "nl": "What are the create dates , states , and phone numbers of the votes that were for the contestant named 'Tabatha Gehling ' ?",
        "true_sql": "select votes.created , votes.state , votes.phone_number where contestants.contestant_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Tabatha Gehling\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "votes.state",
            ",",
            "votes.phone_number",
            ",",
            "votes.contestant_number",
            "where",
            "contestants.contestant_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [41], 8, [43], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.7915565967559814, 1), ('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.8025525212287903, 3), ('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 0.5032166242599487, 5), ('WHERE_COL', ('contestants', 'contestant_name', 39), 0.865951418876648, 7), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999951124191284, 8), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.9999991655349731, 9)]",
        "logprob": "-1.323139659479543",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 687
    },
    {
        "nl": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling ' and the contestant 'Kelly Clauss ' .",
        "true_sql": "select area_code_state.area_code where contestants.contestant_name = value intersect select area_code_state.area_code where contestants.contestant_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Kelly Clauss\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Tabatha Gehling\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "area_code_state.area_code",
            "where",
            "contestants.contestant_name",
            "=",
            "value",
            "intersect",
            "select",
            "area_code_state.area_code",
            "where",
            "contestants.contestant_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 39, [7], 3, 23, 2, [36], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('contestants', 'contestant_name', 39), 0.9998836517333984, 3), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999856948852539, 4), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.999997615814209, 5), ('IUEN_v2', ('intersect', 1), 0.9765987396240234, 6), ('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('none_agg', 0), False, 1.0, 8), ('WHERE_COL', ('contestants', 'contestant_name', 39), 0.9970617890357971, 10), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999967813491821, 11), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.9999985694885254, 12)]",
        "logprob": "-0.027052563265434055",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 688
    },
    {
        "nl": "Return the names the contestants whose names contain the substring 'Al ' .",
        "true_sql": "select contestants.contestant_name where contestants.contestant_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 4, False], None], '\"%Al%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "contestants.contestant_name",
            "where",
            "contestants.contestant_name",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 39, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9999988079071045, 1), ('WHERE_COL', ('contestants', 'contestant_name', 39), 0.999946117401123, 3), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('like', 6), 0.9996176958084106, 4), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('like', 6), 'terminal', 0.999993085861206, 5)]",
        "logprob": "-0.0010009278111999531",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 689
    },
    {
        "nl": "How many continents are there ?",
        "true_sql": "select count ( continents.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'continents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "continents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9873013980924887, 1)]",
        "logprob": "-0.05118774397739283",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 690
    },
    {
        "nl": "What is the number of continents ?",
        "true_sql": "select count ( continents.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'continents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "continents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9993696262353312, 1)]",
        "logprob": "-0.0028890451560489422",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 691
    },
    {
        "nl": "How many countries does each continent have ? List the continent id , continent name and the number of countries .",
        "true_sql": "select continents.contid , continents.continent , count ( * ) group_by continents.contid",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "continents.*",
            ")",
            ",",
            "min",
            "(",
            "countries.countryname",
            ")",
            "group_by",
            "countries.countryid",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [9, 5, 59, 4], 8, [26, 5, 39, 4], 10, 38, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.4597756266593933, 1), ('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9688231875035874, 3), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('min', 2), False, 0.7054270534230798, 5), ('GROUP_COL', ('countries', 'countryid', 38), 0.5057728290557861, 7)]",
        "logprob": "-3.1684113069627693",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 692
    },
    {
        "nl": "For each continent , list its id , name , and how many countries it has ?",
        "true_sql": "select continents.contid , continents.continent , count ( * ) group_by continents.contid",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "continents.continent",
            ",",
            "countries.countryname",
            ",",
            "count",
            "(",
            "continents.*",
            ")",
            "group_by",
            "continents.continent",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [39], 8, [9, 5, 59, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.9964494705200195, 1), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.8528308272361755, 3), ('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.8999085388290831, 5), ('GROUP_COL', ('continents', 'continent', 37), 0.7129655480384827, 7)]",
        "logprob": "-0.9236327335248974",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 693
    },
    {
        "nl": "How many countries are listed ?",
        "true_sql": "select count ( countries.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'countries.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "countries.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.999851583241916, 1)]",
        "logprob": "-0.0006884869680477499",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 694
    },
    {
        "nl": "How many countries exist ?",
        "true_sql": "select count ( countries.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'countries.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "continents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9973758979910761, 1)]",
        "logprob": "-0.011017568212859697",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 695
    },
    {
        "nl": "How many models does each car maker produce ? List maker full name , id and the number .",
        "true_sql": "select car_makers.fullname , car_makers.id , count ( * ) group_by car_makers.id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_names.model",
            ",",
            "count",
            "(",
            "model_list.*",
            ")",
            ",",
            "cars_data.id",
            "group_by",
            "car_makers.fullname",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [9, 5, 62, 4], 8, [51], 10, 43, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.5307096242904663, 1), ('SELECT_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.8806932651451764, 3), ('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.6415522694587708, 5), ('GROUP_COL', ('car_makers', 'fullname', 43), 0.41823816299438477, 7)]",
        "logprob": "-2.6778688130432444",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 696
    },
    {
        "nl": "What is the full name of each car maker , along with its id and how many models it produces ?",
        "true_sql": "select car_makers.fullname , car_makers.id , count ( * ) group_by car_makers.id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.fullname",
            ",",
            "cars_data.id",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [43], 8, [51], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.5807861685752869, 1), ('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.7152947783470154, 3), ('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.5260573029518127, 5)]",
        "logprob": "-1.6316263881522874",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 697
    },
    {
        "nl": "Which model of the car has the minimum horsepower ?",
        "true_sql": "select car_names.model order_by cars_data.horsepower asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.model",
            "where",
            "cars_data.horsepower",
            "=",
            "(",
            "select",
            "min",
            "(",
            "cars_data.horsepower",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 55, [7], 5, 2, [26, 5, 55, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9978863596916199, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999949932098389, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('=', 0), 0.9997777342796326, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('=', 0), 'root', 0.9999864101409912, 5), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.9051334783910273, 7), ('O', '##END_NESTED##', 0.9999580383300781, 8)]",
        "logprob": "-1.0456577629978305",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 698
    },
    {
        "nl": "What is the model of the car with the smallest amount of horsepower ?",
        "true_sql": "select car_names.model order_by cars_data.horsepower asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.model",
            "order_by",
            "cars_data.horsepower",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 11, [55], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9900757670402527, 1), ('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'asc', 0.8763436675071716, 4), ('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999703168869019, 5)]",
        "logprob": "-0.1523560545491851",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 699
    },
    {
        "nl": "Find the model of the car whose weight is below the average weight .",
        "true_sql": "select car_names.model where cars_data.weight < ( select avg ( cars_data.weight ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 21, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 21, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.model",
            "where",
            "cars_data.weight",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 56, [14], 5, 2, [17, 5, 56, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.995552122592926, 1), ('WHERE_COL', ('cars_data', 'weight', 56), 1.0, 3), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.7953416109085083, 4), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'root', 0.977161705493927, 5), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9995834026360432, 7), ('O', '##END_NESTED##', 0.999962329864502, 8)]",
        "logprob": "-0.25843487182510155",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 700
    },
    {
        "nl": "What is the model for the car with a weight smaller than the average ?",
        "true_sql": "select car_names.model where cars_data.weight < ( select avg ( cars_data.weight ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 21, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 21, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.model",
            "where",
            "cars_data.weight",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 56, [21], 5, 2, [17, 5, 56, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9547206163406372, 1), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9999912977218628, 3), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.9991616010665894, 4), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'root', 0.9997205138206482, 5), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.998494854868808, 7), ('O', '##END_NESTED##', 0.999955415725708, 8)]",
        "logprob": "-0.05401202310485616",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 701
    },
    {
        "nl": "Find the name of the makers that produced some cars in the year of 1970 ?",
        "true_sql": "select distinct car_makers.maker where cars_data.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], '\"1970\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_makers.maker",
            "where",
            "cars_data.year",
            "=",
            "value",
            "group_by",
            "car_makers.maker",
            "order_by",
            "count",
            "(",
            "car_makers.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 58, [7], 3, 10, 42, 11, [9, 5, 61, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9998576641082764, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9997960925102234, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.937127411365509, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999796152114868, 5), ('GROUP_COL', ('car_makers', 'maker', 42), 0.9996961355209351, 7), ('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9985070988928699, 9), ('ORDER_DESC_ASC', (('car_makers', '*', 61), ('count', 3), False), 'desc', 0.8813459277153015, 10), ('ORDER_LIMIT', (('car_makers', '*', 61), ('count', 3), False), 'limit_value', 0.9993520379066467, 11)]",
        "logprob": "-0.20451779076913482",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 702
    },
    {
        "nl": "What is the name of the different car makers who produced a car in 1970 ?",
        "true_sql": "select distinct car_makers.maker where cars_data.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], '\"1970\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_makers.maker",
            "where",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.7980406880378723, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9379412531852722, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9996658563613892, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999954700469971, 5)]",
        "logprob": "-0.29029657646599955",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 703
    },
    {
        "nl": "Find the make and production time of the cars that were produced in the earliest year ?",
        "true_sql": "select car_names.make , cars_data.year where cars_data.year = ( select min ( cars_data.year ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 23, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_names.make",
            ",",
            "cars_data.year",
            "where",
            "cars_data.year",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cars_data.year",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [58], 6, 58, [7], 5, 2, [19, 5, 58, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.9247682690620422, 1), ('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.6996057033538818, 3), ('WHERE_COL', ('cars_data', 'year', 58), 0.9150592684745789, 5), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9995808005332947, 6), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'root', 0.9999871253967285, 7), ('SELECT_AGG_v2', ('cars_data', 'year', 58), ('max', 1), False, 0.9907574984199443, 9), ('O', '##END_NESTED##', 0.9999732971191406, 10)]",
        "logprob": "-0.885720864715534",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 704
    },
    {
        "nl": "What is the maker of the carr produced in the earliest year and what year was it ?",
        "true_sql": "select car_names.make , cars_data.year where cars_data.year = ( select min ( cars_data.year ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 23, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_makers.maker",
            ",",
            "cars_data.year",
            "where",
            "car_names.make",
            "=",
            "value",
            "order_by",
            "cars_data.year",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [58], 6, 50, [7], 3, 11, [58], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9999898672103882, 1), ('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.42914512753486633, 3), ('WHERE_COL', ('car_names', 'make', 50), 0.4402218163013458, 5), ('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9998948574066162, 6), ('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.8990489840507507, 7), ('ORDER_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.8048406839370728, 9), ('ORDER_DESC_ASC', (('cars_data', 'year', 58), ('none_agg', 0), False), 'desc', 0.9732953906059265, 10), ('ORDER_LIMIT', (('cars_data', 'year', 58), ('none_agg', 0), False), 'limit_value', 0.9996252059936523, 11)]",
        "logprob": "-2.1191224282949994",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 705
    },
    {
        "nl": "Which distinct car models are the produced after 1980 ?",
        "true_sql": "select distinct model_list.model where cars_data.year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "model_list.model",
            "where",
            "cars_data.year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [47], 6, 58, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9667053818702698, 2), ('WHERE_COL', ('cars_data', 'year', 58), 0.999998927116394, 4), ('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.994792640209198, 5), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9965225458145142, 6)]",
        "logprob": "-0.042822478637528825",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 706
    },
    {
        "nl": "What are the different models for the cards produced after 1980 ?",
        "true_sql": "select distinct model_list.model where cars_data.year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "model_list.model",
            "where",
            "cars_data.year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [47], 6, 58, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.981262743473053, 2), ('WHERE_COL', ('cars_data', 'year', 58), 0.9610345363616943, 4), ('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.9883373379707336, 5), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9998812675476074, 6)]",
        "logprob": "-0.07067441535087063",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 707
    },
    {
        "nl": "How many car makers are there in each continents ? List the continent name and the count .",
        "true_sql": "select continents.continent , count ( * ) group_by continents.continent",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_makers.maker",
            ",",
            "count",
            "(",
            "car_makers.*",
            ")",
            "group_by",
            "car_makers.maker",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [9, 5, 61, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9983273148536682, 1), ('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9280339111388102, 3), ('GROUP_COL', ('car_makers', 'maker', 42), 0.9999645948410034, 5)]",
        "logprob": "-0.3026341526206254",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 708
    },
    {
        "nl": "What is the name of each continent and how many car makers are there in each one ?",
        "true_sql": "select continents.continent , count ( * ) group_by continents.continent",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "car_makers.*",
            ")",
            "group_by",
            "car_makers.maker",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [9, 5, 61, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.9945034980773926, 1), ('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9893879264681803, 3), ('GROUP_COL', ('car_makers', 'maker', 42), 0.7090659737586975, 5)]",
        "logprob": "-0.3923725023938194",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 709
    },
    {
        "nl": "Which of the countries has the most car makers ? List the country name .",
        "true_sql": "select countries.countryname group_by car_makers.country order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            "group_by",
            "car_makers.country",
            "order_by",
            "count",
            "(",
            "car_makers.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 10, 44, 11, [9, 5, 61, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.999238133430481, 1), ('GROUP_COL', ('car_makers', 'country', 44), 0.9976334571838379, 3), ('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8963833716555394, 5), ('ORDER_DESC_ASC', (('car_makers', '*', 61), ('count', 3), False), 'desc', 0.9946640729904175, 6), ('ORDER_LIMIT', (('car_makers', '*', 61), ('count', 3), False), 'limit_value', 0.9999421834945679, 7)]",
        "logprob": "-0.453692995613114",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 710
    },
    {
        "nl": "What is the name of the country with the most car makers ?",
        "true_sql": "select countries.countryname group_by car_makers.country order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            "group_by",
            "car_makers.country",
            "order_by",
            "count",
            "(",
            "car_makers.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 10, 44, 11, [9, 5, 61, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9962970614433289, 1), ('GROUP_COL', ('car_makers', 'country', 44), 0.9999958276748657, 3), ('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9022941577931243, 5), ('ORDER_DESC_ASC', (('car_makers', '*', 61), ('count', 3), False), 'desc', 0.9990233182907104, 6), ('ORDER_LIMIT', (('car_makers', '*', 61), ('count', 3), False), 'limit_value', 0.999934196472168, 7)]",
        "logprob": "-0.4164306444760953",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 711
    },
    {
        "nl": "How many car models are produced by each maker ? List the count and the maker full name .",
        "true_sql": "select count ( * ) , car_makers.fullname , car_makers.id group_by car_makers.id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_names.model",
            ",",
            "count",
            "(",
            "car_makers.*",
            ")",
            "group_by",
            "car_makers.maker",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [9, 5, 61, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.5566407442092896, 1), ('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8870205416625528, 3), ('GROUP_COL', ('car_makers', 'maker', 42), 0.5820955634117126, 5)]",
        "logprob": "-1.6075319690932397",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 712
    },
    {
        "nl": "What is the number of car models that are produced by each maker and what is the id and full name of each maker ?",
        "true_sql": "select count ( * ) , car_makers.fullname , car_makers.id group_by car_makers.id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "car_names.makeid",
            ")",
            ",",
            "model_list.maker",
            "group_by",
            "model_list.maker",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 48, 4], 8, [46], 10, 46, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('count', 3), True, 0.8550429749752216, 1), ('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.3739805817604065, 3), ('GROUP_COL', ('model_list', 'maker', 46), 0.43449997901916504, 5)]",
        "logprob": "-2.7182247132497697",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 713
    },
    {
        "nl": "What is the accelerate of the car make amc hornet sportabout ( sw ) ?",
        "true_sql": "select cars_data.accelerate where car_names.make = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 22, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"amc hornet sportabout (sw)\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.accelerate",
            "where",
            "car_names.make",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [57], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('car_names', 'make', 50), 0.9999983310699463, 3), ('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9999837875366211, 4), ('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9999974966049194, 5)]",
        "logprob": "-0.6473829995192163",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 714
    },
    {
        "nl": "How much does the car accelerate that makes amc hornet sportabout ( sw ) ?",
        "true_sql": "select cars_data.accelerate where car_names.make = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 22, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"amc hornet sportabout (sw)\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "cars_data.accelerate",
            ")",
            "where",
            "car_names.make",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 57, 4], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('sum', 4), False, 0.8269842743503116, 1), ('WHERE_COL', ('car_names', 'make', 50), 0.9998145699501038, 3), ('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.999990701675415, 4), ('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.7920588465126209",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 715
    },
    {
        "nl": "How many car makers are there in france ?",
        "true_sql": "select count ( * ) where countries.countryname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"france\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            "where",
            "car_makers.maker",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9911563158236404, 1), ('WHERE_COL', ('car_makers', 'maker', 42), 0.8134757876396179, 3), ('WHERE_OP', (('car_makers', 'maker', 42),), ('=', 0), 0.9999861717224121, 4), ('WHERE_ROOT_TERM', (('car_makers', 'maker', 42),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.24205441228270183",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 716
    },
    {
        "nl": "What is the number of makers of care in France ?",
        "true_sql": "select count ( * ) where countries.countryname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"france\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "model_list.maker",
            ")",
            "where",
            "continents.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'maker', 46), ('count', 3), False, 0.9569154344571836, 1), ('WHERE_COL', ('continents', 'continent', 37), 0.8380270600318909, 3), ('WHERE_OP', (('continents', 'continent', 37),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('continents', 'continent', 37),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.382322835719342",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 717
    },
    {
        "nl": "How many car models are produced in the usa ?",
        "true_sql": "select count ( * ) where countries.countryname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"usa\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "model_list.model",
            ")",
            "where",
            "countries.countryname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 47, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('count', 3), True, 0.776615581975102, 1), ('WHERE_COL', ('countries', 'countryname', 39), 0.9438051581382751, 3), ('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999827146530151, 4), ('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-1.3236337789602608",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 718
    },
    {
        "nl": "What is the count of the car models produced in the United States ?",
        "true_sql": "select count ( * ) where countries.countryname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"usa\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            "where",
            "car_makers.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.870515600856875, 1), ('WHERE_COL', ('car_makers', 'country', 44), 0.7545209527015686, 3), ('WHERE_OP', (('car_makers', 'country', 44),), ('=', 0), 0.9998372793197632, 4), ('WHERE_ROOT_TERM', (('car_makers', 'country', 44),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.845779718652398",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 719
    },
    {
        "nl": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders ?",
        "true_sql": "select avg ( cars_data.mpg ) where cars_data.cylinders = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.cylinders",
            ")",
            ",",
            "cars_data.cylinders",
            "group_by",
            "cars_data.cylinders",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 53, 4], 8, [53], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('avg', 5), False, 0.8654913576946371, 1), ('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9772617816925049, 3), ('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9959969520568848, 5)]",
        "logprob": "-0.8503455845909612",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 720
    },
    {
        "nl": "What is the average miles per gallon of all the cards with 4 cylinders ?",
        "true_sql": "select avg ( cars_data.mpg ) where cars_data.cylinders = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.horsepower",
            ")",
            ",",
            "cars_data.cylinders",
            "group_by",
            "cars_data.cylinders",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 55, 4], 8, [53], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9861735180212706, 1), ('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9928029179573059, 3), ('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9984102249145508, 5)]",
        "logprob": "-0.4040637206930962",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 721
    },
    {
        "nl": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "true_sql": "select cars_data.weight where cars_data.cylinders = value and cars_data.year = value order_by cars_data.weight asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 21, False], None]]], 'select': [False, [[0, [0, [0, 21, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None], 'and', [False, 2, [0, [0, 23, False], None], 1974.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.weight",
            "where",
            "cars_data.weight",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('none_agg', 0), False, 0.7913132309913635, 1), ('WHERE_COL', ('cars_data', 'weight', 56), 0.926749050617218, 3), ('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.7119160294532776, 4), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('=', 0), 'terminal', 0.9684324264526367, 5)]",
        "logprob": "-1.627131190033897",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 722
    },
    {
        "nl": "What is the minimu weight of the car with 8 cylinders produced in 1974 ?",
        "true_sql": "select cars_data.weight where cars_data.cylinders = value and cars_data.year = value order_by cars_data.weight asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 21, False], None]]], 'select': [False, [[0, [0, [0, 21, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None], 'and', [False, 2, [0, [0, 23, False], None], 1974.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.weight",
            "where",
            "cars_data.year",
            "=",
            "value",
            "and",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 6, 58, [7], 3, 16, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('none_agg', 0), False, 0.9991242289543152, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9695091247558594, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9991037249565125, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('cars_data', 'year', 58), 0.9808847904205322, 7), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9993502497673035, 8), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9763703346252441, 9)]",
        "logprob": "-0.28223302315769533",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 723
    },
    {
        "nl": "What are all the makers and models ?",
        "true_sql": "select model_list.maker , model_list.model",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.maker",
            ",",
            "model_list.model",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.873528242111206, 1), ('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9999998807907104, 3)]",
        "logprob": "-0.13535060210145766",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 724
    },
    {
        "nl": "What are the makers and models ?",
        "true_sql": "select model_list.maker , model_list.model",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.maker",
            ",",
            "model_list.model",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.7513681650161743, 1), ('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9999996423721313, 3)]",
        "logprob": "-0.2860648690266562",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 725
    },
    {
        "nl": "What are the countries having at least one car maker ? List name and id .",
        "true_sql": "select countries.countryname , countries.countryid group_by countries.countryid having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryid",
            "group_by",
            "car_makers.maker",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [38], 10, 42, 18, [9, 5, 61, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9996521472930908, 1), ('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.9382156729698181, 3), ('GROUP_COL', ('car_makers', 'maker', 42), 0.4769798219203949, 5), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9898928453954579, 7), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 0.9960985369004147, 8), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 'terminal', 0.9999734163284302, 9)]",
        "logprob": "-0.8764564412303444",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 726
    },
    {
        "nl": "What are the names and ids of all countries with at least one car maker ?",
        "true_sql": "select countries.countryname , countries.countryid group_by countries.countryid having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryid",
            "group_by",
            "car_makers.maker",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [38], 10, 42, 18, [9, 5, 61, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9996743202209473, 1), ('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.9341115951538086, 3), ('GROUP_COL', ('car_makers', 'maker', 42), 0.45674648880958557, 5), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9946933182655942, 7), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 0.991638438175819, 8), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 'terminal', 0.999983549118042, 9)]",
        "logprob": "-0.8986274931400421",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 727
    },
    {
        "nl": "What is the number of the cars with horsepower more than 150 ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.horsepower > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 20, False], None], 150.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.horsepower",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 55, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.8724943738100215, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999996423721313, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9999397993087769, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9998270869255066, 5)]",
        "logprob": "-0.5482568708814525",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 728
    },
    {
        "nl": "What is the number of cars with a horsepower greater than 150 ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.horsepower > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 20, False], None], 150.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "cars_data.horsepower",
            ")",
            "where",
            "cars_data.horsepower",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 55, 4], 6, 55, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('count', 3), True, 0.7558669045050097, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999570846557617, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9999674558639526, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9995625615119934, 5)]",
        "logprob": "-1.402049444600473",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 729
    },
    {
        "nl": "What is the average weight of cars each year ?",
        "true_sql": "select avg ( cars_data.weight ) , cars_data.year group_by cars_data.year",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 21, False], None]], [0, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ",",
            "cars_data.year",
            "group_by",
            "cars_data.year",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 56, 4], 8, [58], 10, 58, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9997036185962199, 1), ('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9551424980163574, 3), ('GROUP_COL', ('cars_data', 'year', 58), 0.9999103546142578, 5)]",
        "logprob": "-0.04789156497812992",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 730
    },
    {
        "nl": "What is the average weight and year for each year ?",
        "true_sql": "select avg ( cars_data.weight ) , cars_data.year group_by cars_data.year",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 21, False], None]], [0, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ",",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ",",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ",",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 56, 4], 8, [17, 5, 56, 4], 8, [17, 5, 56, 4], 8, [17, 5, 56, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9988784941717425, 1), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.7673203061182838, 3), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.8627650934376911, 5), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.8190042189149841, 7)]",
        "logprob": "-4.089127988657875",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 731
    },
    {
        "nl": "Which countries in europe have at least 3 car manufacturers ?",
        "true_sql": "select countries.countryname where continents.continent = value group_by countries.countryname having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"europe\"', None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.continent",
            "where",
            "car_makers.maker",
            "=",
            "value",
            "group_by",
            "countries.continent",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 42, [7], 3, 10, 40, 18, [9, 5, 61, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 0.9416595101356506, 1), ('WHERE_COL', ('car_makers', 'maker', 42), 0.40952086448669434, 3), ('WHERE_OP', (('car_makers', 'maker', 42),), ('=', 0), 0.9810237884521484, 4), ('WHERE_ROOT_TERM', (('car_makers', 'maker', 42),), ('=', 0), 'terminal', 0.9998399019241333, 5), ('GROUP_COL', ('countries', 'continent', 40), 0.9523866176605225, 7), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9993694983830291, 9), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 0.9996299973653374, 10), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 'terminal', 0.9999880790710449, 11)]",
        "logprob": "-1.0282370948643438",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 732
    },
    {
        "nl": "What are the names of all European countries with at least 3 manufacturers ?",
        "true_sql": "select countries.countryname where continents.continent = value group_by countries.countryname having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"europe\"', None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            "where",
            "countries.countryname",
            "=",
            "value",
            "group_by",
            "countries.continent",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 39, [7], 3, 10, 40, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9984631538391113, 1), ('WHERE_COL', ('countries', 'countryname', 39), 0.30231553316116333, 3), ('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9997640252113342, 4), ('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999957084655762, 5), ('GROUP_COL', ('countries', 'continent', 40), 0.4745534360408783, 7), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8406262817136964, 9), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9997675414394049, 10), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999874830245972, 11)]",
        "logprob": "-2.639786034537151",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 733
    },
    {
        "nl": "What is the maximum horsepower and the make of the car models with 3 cylinders ?",
        "true_sql": "select cars_data.horsepower , car_names.make where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 3.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            ",",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            "group_by",
            "cars_data.cylinders",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 55, 4], 8, [19, 5, 55, 4], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9977654837261167, 1), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.7891752726739975, 3), ('GROUP_COL', ('cars_data', 'cylinders', 53), 0.7009056210517883, 5)]",
        "logprob": "-1.3444378345262045",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 734
    },
    {
        "nl": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it ?",
        "true_sql": "select cars_data.horsepower , car_names.make where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 3.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            ",",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            "group_by",
            "model_list.model",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 55, 4], 8, [19, 5, 55, 4], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9955266742818462, 1), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9283562450928429, 3), ('GROUP_COL', ('model_list', 'model', 47), 0.9971590042114258, 5)]",
        "logprob": "-0.351619583533216",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 735
    },
    {
        "nl": "Which model saves the most gasoline ? That is to say , have the maximum miles per gallon .",
        "true_sql": "select car_names.model order_by cars_data.mpg desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.model",
            "where",
            "cars_data.horsepower",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 55, [7], 5, 2, [19, 5, 55, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8301438689231873, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9441704750061035, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('=', 0), 0.9920612573623657, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('=', 0), 'root', 0.9998050332069397, 5), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9909011728708909, 7), ('O', '##END_NESTED##', 0.9990090131759644, 8)]",
        "logprob": "-0.30674162021080675",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 736
    },
    {
        "nl": "What is the car wmodel with the highest mpg ?",
        "true_sql": "select car_names.model order_by cars_data.mpg desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.mpg",
            ")",
            "where",
            "cars_data.mpg",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cars_data.mpg",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 52, 4], 6, 52, [7], 5, 2, [19, 5, 52, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('max', 1), False, 0.9961316072105728, 1), ('WHERE_COL', ('cars_data', 'mpg', 52), 0.9977465271949768, 3), ('WHERE_OP', (('cars_data', 'mpg', 52),), ('=', 0), 0.998005211353302, 4), ('WHERE_ROOT_TERM', (('cars_data', 'mpg', 52),), ('=', 0), 'root', 0.9995570778846741, 5), ('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('max', 1), False, 0.9994178229988796, 7), ('O', '##END_NESTED##', 0.9644191861152649, 8)]",
        "logprob": "-0.13193188898806799",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 737
    },
    {
        "nl": "What is the average horsepower of the cars before 1980 ?",
        "true_sql": "select avg ( cars_data.horsepower ) where cars_data.year < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.horsepower",
            ")",
            "where",
            "cars_data.year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 55, 4], 6, 58, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9999258787681659, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.999875545501709, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.8799479603767395, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9987758994102478, 5)]",
        "logprob": "-0.1301526146109287",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 738
    },
    {
        "nl": "What is the average horsepower for all cards produced before 1980 ?",
        "true_sql": "select avg ( cars_data.horsepower ) where cars_data.year < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.horsepower",
            ")",
            "where",
            "cars_data.year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 55, 4], 6, 58, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9998240593591564, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9987674951553345, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.8467856049537659, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9990398287773132, 5)]",
        "logprob": "-0.17008697377167992",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 739
    },
    {
        "nl": "What is the average edispl of the cars of model volvo ?",
        "true_sql": "select avg ( cars_data.edispl ) where car_names.model = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 19, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 14, False], None], '\"volvo\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.edispl",
            ")",
            "where",
            "model_list.model",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 54, 4], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'edispl', 54), ('avg', 5), False, 0.9999289489291852, 1), ('WHERE_COL', ('model_list', 'model', 47), 0.4454323351383209, 3), ('WHERE_OP', (('model_list', 'model', 47),), ('=', 0), 0.9999943971633911, 4), ('WHERE_ROOT_TERM', (('model_list', 'model', 47),), ('=', 0), 'terminal', 0.9999967813491821, 5)]",
        "logprob": "-0.8091134749245403",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 740
    },
    {
        "nl": "What is the average edispl for all volvos ?",
        "true_sql": "select avg ( cars_data.edispl ) where car_names.model = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 19, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 14, False], None], '\"volvo\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.edispl",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'edispl', 54), ('avg', 5), False, 0.9969910977282271, 1)]",
        "logprob": "-0.013524326152365696",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 741
    },
    {
        "nl": "What is the maximum accelerate for different number of cylinders ?",
        "true_sql": "select max ( cars_data.accelerate ) , cars_data.cylinders group_by cars_data.cylinders",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 22, False], None]], [0, [0, [0, 18, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.accelerate",
            ")",
            ",",
            "max",
            "(",
            "cars_data.accelerate",
            ")",
            "group_by",
            "car_makers.id",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 57, 4], 8, [19, 5, 57, 4], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.8853819076581531, 1), ('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.9792800184099906, 3), ('GROUP_COL', ('car_makers', 'id', 41), 0.3445588946342468, 5)]",
        "logprob": "-1.91254735742862",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 742
    },
    {
        "nl": "What is the maximum accelerate for all the different cylinders ?",
        "true_sql": "select max ( cars_data.accelerate ) , cars_data.cylinders group_by cars_data.cylinders",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 22, False], None]], [0, [0, [0, 18, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "cars_data.accelerate",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 57, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('min', 2), False, 0.8524343868352159, 1)]",
        "logprob": "-0.6388867032095783",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 743
    },
    {
        "nl": "Which model has the most version ( make ) of cars ?",
        "true_sql": "select car_names.model group_by car_names.model order_by count ( car_names.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [[0, 14, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'car_names.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.model",
            "group_by",
            "model_list.modelid",
            "order_by",
            "count",
            "(",
            "car_makers.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 10, 45, 11, [9, 5, 61, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.983258843421936, 1), ('GROUP_COL', ('model_list', 'modelid', 45), 0.7285798192024231, 3), ('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.996259699018336, 5), ('ORDER_DESC_ASC', (('car_makers', '*', 61), ('count', 3), False), 'desc', 0.9988986253738403, 6), ('ORDER_LIMIT', (('car_makers', '*', 61), ('count', 3), False), 'limit_value', 0.9999574422836304, 7)]",
        "logprob": "-0.35482722634316155",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 744
    },
    {
        "nl": "What model has the most different versions ?",
        "true_sql": "select car_names.model group_by car_names.model order_by count ( car_names.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [[0, 14, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'car_names.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.model",
            "group_by",
            "model_list.model",
            "order_by",
            "count",
            "(",
            "model_list.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 10, 47, 11, [9, 5, 62, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8195962905883789, 1), ('GROUP_COL', ('model_list', 'model', 47), 0.8902888894081116, 3), ('ORDER_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.9937542046599798, 5), ('ORDER_DESC_ASC', (('model_list', '*', 62), ('count', 3), False), 'desc', 0.9991200566291809, 6), ('ORDER_LIMIT', (('model_list', '*', 62), ('count', 3), False), 'limit_value', 0.9999194145202637, 7)]",
        "logprob": "-0.34127036012785594",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 745
    },
    {
        "nl": "How many cars have more than 4 cylinders ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.cylinders > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            "where",
            "cars_data.cylinders",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 53, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9507293542044719, 1), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.8208118081092834, 3), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9993719458580017, 4), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9998216032981873, 5)]",
        "logprob": "-0.6649644724517711",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 746
    },
    {
        "nl": "What is the number of cars with more than 4 cylinders ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.cylinders > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            "where",
            "cars_data.horsepower",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 55, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9875435170257202, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.8235943913459778, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9998458623886108, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9994602799415588, 5)]",
        "logprob": "-0.2607811139314856",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 747
    },
    {
        "nl": "how many cars were produced in 1980 ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "car_makers.id",
            ")",
            "where",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 41, 4], 6, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), True, 0.9383149883561809, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9999942779541016, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9979825019836426, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.32159838144375",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 748
    },
    {
        "nl": "In 1980 , how many cars were made ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            "where",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.954553613817861, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9502815008163452, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.8913439512252808, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.47114203212652284",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 749
    },
    {
        "nl": "How many car models were produced by the maker with full name American Motor Company ?",
        "true_sql": "select count ( * ) where car_makers.fullname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 8, False], None], '\"American Motor Company\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "car_makers.maker",
            ")",
            "where",
            "car_makers.fullname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 42, 4], 6, 43, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.9604013898851884, 1), ('WHERE_COL', ('car_makers', 'fullname', 43), 0.9806355834007263, 3), ('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.9999860525131226, 4), ('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.2235260374275202",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 750
    },
    {
        "nl": "What is the number of car models created by the car maker American Motor Company ?",
        "true_sql": "select count ( * ) where car_makers.fullname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 8, False], None], '\"American Motor Company\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "car_makers.maker",
            ")",
            "where",
            "car_makers.maker",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 42, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.9853323420648034, 1), ('WHERE_COL', ('car_makers', 'maker', 42), 0.9807158708572388, 3), ('WHERE_OP', (('car_makers', 'maker', 42),), ('=', 0), 0.9999933242797852, 4), ('WHERE_ROOT_TERM', (('car_makers', 'maker', 42),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.0945073373363649",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 751
    },
    {
        "nl": "Which makers designed more than 3 car models ? List full name and the id .",
        "true_sql": "select car_makers.fullname , car_makers.id group_by car_makers.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_makers.maker",
            ",",
            "car_makers.fullname",
            ",",
            "count",
            "(",
            "car_makers.*",
            ")",
            "group_by",
            "car_makers.maker",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [43], 8, [9, 5, 61, 4], 10, 42, 18, [9, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.7772703170776367, 1), ('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.7287197113037109, 3), ('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9816973490018349, 5), ('GROUP_COL', ('car_makers', 'maker', 42), 0.5834930539131165, 7), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9941097126829062, 9), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>', 1), 0.999911904335022, 10), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9564067125320435, 11)]",
        "logprob": "-1.3075310066073904",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 752
    },
    {
        "nl": "What are the names and ids of all makers with more than 3 models ?",
        "true_sql": "select car_makers.fullname , car_makers.id group_by car_makers.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.maker",
            ",",
            "model_list.modelid",
            "group_by",
            "model_list.maker",
            "having",
            "count",
            "(",
            "model_list.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [45], 10, 46, 18, [9, 5, 62, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.7707578539848328, 1), ('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 0.7159260511398315, 3), ('GROUP_COL', ('model_list', 'maker', 46), 0.5558814406394958, 5), ('HAV_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.9999066697358968, 7), ('HAV_OP_v2', (('model_list', '*', 62), ('count', 3), False), ('>', 1), 0.9999380111694336, 8), ('HAV_ROOT_TERM_v2', (('model_list', '*', 62), ('count', 3), False), ('>', 1), 'terminal', 0.9693190455436707, 9)]",
        "logprob": "-1.2248966615026071",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 753
    },
    {
        "nl": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500 ?",
        "true_sql": "select distinct model_list.model where car_makers.fullname = value or cars_data.weight > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 12, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 8, False], None], '\"General Motors\"', None], 'or', [False, 3, [0, [0, 21, False], None], 3500.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_names.model",
            "where",
            "car_makers.fullname",
            "=",
            "value",
            "or",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 6, 43, [7], 3, 25, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.8485238552093506, 1), ('WHERE_COL', ('car_makers', 'fullname', 43), 0.9923014640808105, 3), ('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.9999698400497437, 4), ('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999983310699463, 5), ('WHERE_COL', ('cars_data', 'weight', 56), 0.8520888686180115, 7), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9853885769844055, 8), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9970114231109619, 9)]",
        "logprob": "-0.3509817011829301",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 754
    },
    {
        "nl": "What are the different models created by either the car maker General Motors or weighed more than 3500 ?",
        "true_sql": "select distinct model_list.model where car_makers.fullname = value or cars_data.weight > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 12, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 8, False], None], '\"General Motors\"', None], 'or', [False, 3, [0, [0, 21, False], None], 3500.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "model_list.model",
            "where",
            "car_makers.maker",
            "=",
            "value",
            "or",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [47], 6, 42, [7], 3, 25, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8863643407821655, 2), ('WHERE_COL', ('car_makers', 'maker', 42), 0.9387543201446533, 4), ('WHERE_OP', (('car_makers', 'maker', 42),), ('=', 0), 0.999994158744812, 5), ('WHERE_ROOT_TERM', (('car_makers', 'maker', 42),), ('=', 0), 'terminal', 0.9999964237213135, 6), ('WHERE_COL', ('cars_data', 'weight', 56), 0.985982358455658, 8), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9921820759773254, 9), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9949190020561218, 10)]",
        "logprob": "-0.21313758300942287",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 755
    },
    {
        "nl": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "true_sql": "select distinct cars_data.year where cars_data.weight > value and cars_data.weight < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 21, False], None], 3000.0, None], 'and', [False, 4, [0, [0, 21, False], None], 4000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "cars_data.year",
            "where",
            "cars_data.weight",
            "<",
            "value",
            "and",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [58], 6, 56, [21], 3, 16, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9999290704727173, 2), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9999810457229614, 4), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.620685338973999, 5), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9998431205749512, 6), ('WHERE_COL', ('cars_data', 'weight', 56), 0.7302870154380798, 8), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.5836951732635498, 9), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9998205304145813, 10)]",
        "logprob": "-1.947730631132028",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 756
    },
    {
        "nl": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "true_sql": "select distinct cars_data.year where cars_data.weight > value and cars_data.weight < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 21, False], None], 3000.0, None], 'and', [False, 4, [0, [0, 21, False], None], 4000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "cars_data.year",
            "where",
            "cars_data.weight",
            "<",
            "value",
            "and",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [58], 6, 56, [21], 3, 16, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9999998807907104, 2), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9999321699142456, 4), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.8928807973861694, 5), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9979267120361328, 6), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9993758797645569, 8), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9978118538856506, 9), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9899724721908569, 10)]",
        "logprob": "-0.42482631515679165",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 757
    },
    {
        "nl": "What is the horsepower of the car with the largest accelerate ?",
        "true_sql": "select cars_data.horsepower order_by cars_data.accelerate desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 22, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.horsepower",
            "order_by",
            "cars_data.accelerate",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 11, [57], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9019157290458679, 1), ('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.981428861618042, 3), ('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9971801042556763, 4), ('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9999735355377197, 5)]",
        "logprob": "-0.12527424825716404",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 758
    },
    {
        "nl": "What is the horsepower of the car with the greatest accelerate ?",
        "true_sql": "select cars_data.horsepower order_by cars_data.accelerate desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 22, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 55, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.8903211122760857, 1)]",
        "logprob": "-1.0956976726545506",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 759
    },
    {
        "nl": "For model volvo , how many cylinders does the car with the least accelerate have ?",
        "true_sql": "select cars_data.cylinders where car_names.model = value order_by cars_data.accelerate asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 22, False], None]]], 'select': [False, [[0, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 14, False], None], '\"volvo\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.cylinders",
            "where",
            "cars_data.accelerate",
            "=",
            "(",
            "select",
            "min",
            "(",
            "cars_data.horsepower",
            ")",
            "where",
            "car_names.model",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 6, 57, [7], 5, 2, [26, 5, 55, 4], 6, 49, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.5177754163742065, 1), ('WHERE_COL', ('cars_data', 'accelerate', 57), 0.9964060187339783, 3), ('WHERE_OP', (('cars_data', 'accelerate', 57),), ('=', 0), 0.9991576671600342, 4), ('WHERE_ROOT_TERM', (('cars_data', 'accelerate', 57),), ('=', 0), 'root', 0.5521929860115051, 5), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.9233127778029022, 7), ('WHERE_COL', ('car_names', 'model', 49), 0.386094868183136, 9), ('WHERE_OP', (('car_names', 'model', 49),), ('=', 0), 0.9990134239196777, 10), ('WHERE_ROOT_TERM', (('car_names', 'model', 49),), ('=', 0), 'terminal', 0.9999922513961792, 11), ('O', '##END_NESTED##', 0.9963864088058472, 12)]",
        "logprob": "-2.7340177186759527",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 760
    },
    {
        "nl": "For a volvo model , how many cylinders does the version with least accelerate have ?",
        "true_sql": "select cars_data.cylinders where car_names.model = value order_by cars_data.accelerate asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 22, False], None]]], 'select': [False, [[0, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 14, False], None], '\"volvo\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.cylinders",
            "where",
            "cars_data.accelerate",
            "=",
            "value",
            "order_by",
            "cars_data.accelerate",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 6, 57, [7], 3, 11, [57], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.6654043197631836, 1), ('WHERE_COL', ('cars_data', 'accelerate', 57), 0.9975993037223816, 3), ('WHERE_OP', (('cars_data', 'accelerate', 57),), ('=', 0), 0.9993226528167725, 4), ('WHERE_ROOT_TERM', (('cars_data', 'accelerate', 57),), ('=', 0), 'terminal', 0.9497783780097961, 5), ('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.9470252990722656, 7), ('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9360201358795166, 8), ('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.999774158000946, 9)]",
        "logprob": "-1.446169661605924",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 761
    },
    {
        "nl": "How many cars have a larger accelerate than the car with the largest horsepower ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.accelerate > ( select cars_data.accelerate order_by cars_data.horsepower desc limit_value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 22, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 22, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            "where",
            "cars_data.horsepower",
            ">",
            "(",
            "select",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 55, [14], 5, 2, [19, 5, 55, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.7441945728439094, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9908584952354431, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.994137167930603, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'root', 0.9320194125175476, 5), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9989276364108306, 7), ('O', '##END_NESTED##', 0.9999790191650391, 8)]",
        "logprob": "-1.4505989335428613",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 762
    },
    {
        "nl": "What is the number of cars with a greater accelerate than the one with the most horsepower ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.accelerate > ( select cars_data.accelerate order_by cars_data.horsepower desc limit_value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 22, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 22, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            "where",
            "cars_data.horsepower",
            ">",
            "(",
            "select",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 55, [14], 5, 2, [19, 5, 55, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9406845926013447, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.8622829914093018, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9996370077133179, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'root', 0.6203824281692505, 5), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.8921169026660132, 7), ('O', '##END_NESTED##', 0.9999556541442871, 8)]",
        "logprob": "-1.3373510758010267",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 763
    },
    {
        "nl": "How many countries has more than 2 car makers ?",
        "true_sql": "select count ( * ) ( select countries.countryid , count ( * ) group_by countries.countryid having count ( * ) > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['sql', {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': []}]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*', 'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            ",",
            "car_makers.maker",
            "group_by",
            "car_makers.maker",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 8, [42], 10, 42, 18, [9, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9999613155441666, 1), ('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9997625946998596, 3), ('GROUP_COL', ('car_makers', 'maker', 42), 0.9978315234184265, 5), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9999839364458226, 7), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>', 1), 0.9998728036880493, 8), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9989261031150818, 9)]",
        "logprob": "-0.8045280792049297",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 764
    },
    {
        "nl": "What is the number of countries with more than 2 car makers ?",
        "true_sql": "select count ( * ) ( select countries.countryid , count ( * ) group_by countries.countryid having count ( * ) > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['sql', {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': []}]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*', 'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            ",",
            "car_makers.maker",
            "group_by",
            "car_makers.maker",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 8, [42], 10, 42, 18, [9, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9984765935982572, 1), ('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9361092448234558, 3), ('GROUP_COL', ('car_makers', 'maker', 42), 0.9164949059486389, 5), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.999583401959186, 7), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>', 1), 0.9999275207519531, 8), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9969095587730408, 9)]",
        "logprob": "-0.8204675924189692",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 765
    },
    {
        "nl": "How many cars has over 6 cylinders ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.cylinders > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 18, False], None], 6.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.cylinders",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 53, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.8607146083238909, 1), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.9832131862640381, 3), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9987204074859619, 4), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9968520998954773, 5)]",
        "logprob": "-0.9638754805219529",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 766
    },
    {
        "nl": "What is the number of carsw ith over 6 cylinders ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.cylinders > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 18, False], None], 6.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.cylinders",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 53, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.9778771092378749, 1), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.6173529624938965, 3), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9994157552719116, 4), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9995959401130676, 5)]",
        "logprob": "-1.3412519760811006",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 767
    },
    {
        "nl": "For the cars with 4 cylinders , which model has the largest horsepower ?",
        "true_sql": "select car_names.model where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.cylinders",
            "order_by",
            "cars_data.horsepower",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 11, [55], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9962809681892395, 1), ('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9999899864196777, 3), ('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.9970735311508179, 4), ('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999706745147705, 5)]",
        "logprob": "-0.09694752792517608",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 768
    },
    {
        "nl": "For all of the 4 cylinder cars , which model has the most horsepower ?",
        "true_sql": "select car_names.model where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.cylinders",
            "order_by",
            "cars_data.horsepower",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 11, [55], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9272905588150024, 1), ('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9999998807907104, 3), ('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.9984737038612366, 4), ('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999600648880005, 5)]",
        "logprob": "-0.6825097749881964",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 769
    },
    {
        "nl": "Among the cars with more than lowest horsepower , which ones do not have more than 3 cylinders ? List the car makeid and make name .",
        "true_sql": "select car_names.makeid , car_names.make where cars_data.horsepower > ( select min ( cars_data.horsepower ) ) and cars_data.cylinders < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 20, False], None]]]], 'union': None, 'where': []}, None], 'and', [False, 6, [0, [0, 18, False], None], 3.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "cars_data.cylinders",
            ",",
            "cars_data.cylinders",
            "where",
            "car_names.make",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 8, [53], 6, 50, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.8333175182342529, 1), ('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.49798232316970825, 3), ('WHERE_COL', ('car_names', 'make', 50), 0.5497630834579468, 5), ('WHERE_OP', (('car_names', 'make', 50),), ('>', 1), 0.9967889785766602, 6), ('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('>', 1), 'terminal', 0.9406567215919495, 7)]",
        "logprob": "-1.5514390428136176",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 770
    },
    {
        "nl": "Among the cars that do not have the minimum horsepower , what are the make ids and names of al those with less than 4 cylinders ?",
        "true_sql": "select car_names.makeid , car_names.make where cars_data.horsepower > ( select min ( cars_data.horsepower ) ) and cars_data.cylinders < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 20, False], None]]]], 'union': None, 'where': []}, None], 'and', [False, 6, [0, [0, 18, False], None], 3.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_names.makeid",
            ",",
            "car_names.make",
            "where",
            "cars_data.horsepower",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [48], 8, [50], 6, 55, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('none_agg', 0), False, 0.9979532957077026, 1), ('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.8530421853065491, 3), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9501070380210876, 5), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('<', 2), 0.9906826019287109, 6), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('<', 2), 'terminal', 0.8289397358894348, 7)]",
        "logprob": "-0.43312252127736106",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 771
    },
    {
        "nl": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "true_sql": "select cars_data.mpg where cars_data.cylinders = value or cars_data.year < value order_by cars_data.mpg desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 8.0, None], 'or', [False, 4, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.horsepower",
            ")",
            "where",
            "cars_data.year",
            ">",
            "value",
            "or",
            "cars_data.year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 55, 4], 6, 58, [14], 3, 25, 58, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9576854927858947, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.7879038453102112, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.6406303644180298, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9971755743026733, 5), ('WHERE_COL', ('cars_data', 'year', 58), 0.9999717473983765, 7), ('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.8765108585357666, 8), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9835757613182068, 9)]",
        "logprob": "-1.1592196611001155",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 772
    },
    {
        "nl": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "true_sql": "select cars_data.mpg where cars_data.cylinders = value or cars_data.year < value order_by cars_data.mpg desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 8.0, None], 'or', [False, 4, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.mpg",
            ")",
            "where",
            "cars_data.year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 52, 4], 6, 58, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('max', 1), False, 0.9790257109376157, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9250783920288086, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.842831015586853, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9928838014602661, 5)]",
        "logprob": "-0.37744723023551235",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 773
    },
    {
        "nl": "Which models are lighter than 3500 but not built by the 'Ford Motor Company ' ?",
        "true_sql": "select distinct model_list.model where cars_data.weight < value and car_makers.fullname != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 21, False], None], 3500.0, None], 'and', [False, 7, [0, [0, 8, False], None], '\"Ford Motor Company\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.model",
            "where",
            "cars_data.weight",
            ">",
            "value",
            "and",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 56, [14], 3, 16, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.979530930519104, 1), ('WHERE_COL', ('cars_data', 'weight', 56), 0.48351526260375977, 3), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.6925933361053467, 4), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9999645948410034, 5), ('WHERE_COL', ('cars_data', 'weight', 56), 0.92707759141922, 7), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9316602349281311, 8), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9933766722679138, 9)]",
        "logprob": "-1.937951865271667",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 774
    },
    {
        "nl": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company ?",
        "true_sql": "select distinct model_list.model where cars_data.weight < value and car_makers.fullname != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 21, False], None], 3500.0, None], 'and', [False, 7, [0, [0, 8, False], None], '\"Ford Motor Company\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "car_names.model",
            "where",
            "cars_data.weight",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [49], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.8262144327163696, 2), ('WHERE_COL', ('cars_data', 'weight', 56), 0.5119181871414185, 4), ('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.5085217356681824, 5), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('=', 0), 'terminal', 0.9999961853027344, 6)]",
        "logprob": "-1.8475778919889976",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 775
    },
    {
        "nl": "What are the name of the countries where there is not a single car maker ?",
        "true_sql": "select countries.countryname except select countries.countryname",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            "where",
            "countries.countryid",
            "not",
            "in",
            "(",
            "select",
            "car_makers.maker",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 38, [22, 20], 5, 2, [42], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9999995231628418, 1), ('WHERE_COL', ('countries', 'countryid', 38), 0.756827175617218, 3), ('WHERE_OP', (('countries', 'countryid', 38),), ('not in', 7), 0.9567731883332439, 4), ('WHERE_ROOT_TERM', (('countries', 'countryid', 38),), ('not in', 7), 'root', 0.9999971389770508, 5), ('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9899055361747742, 7), ('O', '##END_NESTED##', 0.9996458292007446, 8)]",
        "logprob": "-0.54943156079861",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 776
    },
    {
        "nl": "What are the names of the countries with no car makers ?",
        "true_sql": "select countries.countryname except select countries.countryname",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            "where",
            "car_makers.maker",
            "not",
            "in",
            "(",
            "select",
            "car_makers.country",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 42, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9263831377029419, 1), ('WHERE_COL', ('car_makers', 'maker', 42), 0.5408225059509277, 3), ('WHERE_OP', (('car_makers', 'maker', 42),), ('not in', 7), 0.996270221975626, 4), ('WHERE_ROOT_TERM', (('car_makers', 'maker', 42),), ('not in', 7), 'root', 0.9999946355819702, 5), ('SELECT_AGG_v2', ('car_makers', 'country', 44), ('none_agg', 0), False, 0.4096454381942749, 7), ('O', '##END_NESTED##', 0.9996640682220459, 8)]",
        "logprob": "-2.0974992518377125",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 777
    },
    {
        "nl": "Which are the car makers which produce at least 2 models and more than 3 car makes ? List the id and the maker .",
        "true_sql": "select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > = value intersect select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "model_list.maker",
            ",",
            "model_list.model",
            "group_by",
            "model_list.maker",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 10, 46, 18, [9, 5, 61, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.9704703688621521, 1), ('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8936548829078674, 3), ('GROUP_COL', ('model_list', 'maker', 46), 0.5055362582206726, 5), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9997788551678229, 7), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 0.9521324476588124, 8), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 'terminal', 0.9999868869781494, 9)]",
        "logprob": "-0.9494424380704932",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 778
    },
    {
        "nl": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars ?",
        "true_sql": "select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > = value intersect select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "car_makers.maker",
            ",",
            "car_makers.maker",
            "group_by",
            "cars_data.id",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [42], 10, 51, 18, [9, 5, 61, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.6170760989189148, 1), ('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.6250371932983398, 3), ('GROUP_COL', ('cars_data', 'id', 51), 0.33363673090934753, 5), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9999502577641288, 7), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 0.90606802245582, 8), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 'terminal', 0.9999845027923584, 9)]",
        "logprob": "-2.2802938499310583",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 779
    },
    {
        "nl": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat ' model ?",
        "true_sql": "select countries.countryid , countries.countryname group_by countries.countryid having count ( * ) > value union select countries.countryid , countries.countryname where model_list.model = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"fiat\"', None]]}, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryname",
            "where",
            "car_makers.maker",
            "=",
            "value",
            "or",
            "car_names.model",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [39], 6, 42, [7], 3, 25, 49, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.882734477519989, 1), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9603563547134399, 3), ('WHERE_COL', ('car_makers', 'maker', 42), 0.8389814496040344, 5), ('WHERE_OP', (('car_makers', 'maker', 42),), ('=', 0), 0.9998610019683838, 6), ('WHERE_ROOT_TERM', (('car_makers', 'maker', 42),), ('=', 0), 'terminal', 0.9999983310699463, 7), ('WHERE_COL', ('car_names', 'model', 49), 0.32116663455963135, 9), ('WHERE_OP', (('car_names', 'model', 49),), ('>', 1), 0.9944661259651184, 10), ('WHERE_ROOT_TERM', (('car_names', 'model', 49),), ('>', 1), 'terminal', 0.995189905166626, 11)]",
        "logprob": "-1.4945200898385513",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 780
    },
    {
        "nl": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats ?",
        "true_sql": "select countries.countryid , countries.countryname group_by countries.countryid having count ( * ) > value union select countries.countryid , countries.countryname where model_list.model = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"fiat\"', None]]}, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryname",
            "where",
            "car_makers.maker",
            ">",
            "value",
            "or",
            "model_list.maker",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [39], 6, 42, [14], 3, 25, 46, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9425228834152222, 1), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9944455027580261, 3), ('WHERE_COL', ('car_makers', 'maker', 42), 0.8731170296669006, 5), ('WHERE_OP', (('car_makers', 'maker', 42),), ('>', 1), 0.9991575479507446, 6), ('WHERE_ROOT_TERM', (('car_makers', 'maker', 42),), ('>', 1), 'terminal', 0.9997637867927551, 7), ('WHERE_COL', ('model_list', 'maker', 46), 0.3445351719856262, 9), ('WHERE_OP', (('model_list', 'maker', 46),), ('>', 1), 0.9934116005897522, 10), ('WHERE_ROOT_TERM', (('model_list', 'maker', 46),), ('>', 1), 'terminal', 0.9987126588821411, 11)]",
        "logprob": "-1.32845048498259",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 781
    },
    {
        "nl": "What are the names of all the countries that became independent after 1950 ?",
        "true_sql": "select country.name where country.indepyear > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 1950.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999268054962158, 1), ('WHERE_COL', ('country', 'region', 46), 0.5204182863235474, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9907991290092468, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.9461784725023978",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 782
    },
    {
        "nl": "Give the names of the nations that were founded after 1950 .",
        "true_sql": "select country.name where country.indepyear > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 1950.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.region",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 46, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9998515844345093, 1), ('WHERE_COL', ('country', 'region', 46), 0.6663881540298462, 3), ('WHERE_OP', (('country', 'region', 46),), ('>', 1), 0.9961244463920593, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('>', 1), 'terminal', 0.9999980926513672, 5)]",
        "logprob": "-0.5225572184044824",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 783
    },
    {
        "nl": "How many countries have a republic as their form of government ?",
        "true_sql": "select count ( country.* ) where country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {'select': 'country.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9984290807849666, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9998375177383423, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.999988317489624, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999996423721313, 5)]",
        "logprob": "-0.007424129851076127",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 784
    },
    {
        "nl": "How many countries have governments that are republics ?",
        "true_sql": "select count ( country.* ) where country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {'select': 'country.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9993360539735093, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.7756471633911133, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9973347187042236, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.8806192530440023",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 785
    },
    {
        "nl": "What is the total surface area of the countries in the Caribbean region ?",
        "true_sql": "select sum ( country.surfacearea ) where country.region = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Caribbean\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.999932119647491, 1), ('WHERE_COL', ('country', 'region', 46), 0.9990047812461853, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999963045120239, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999980926513672, 5)]",
        "logprob": "-0.0016876333816121985",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 786
    },
    {
        "nl": "How much surface area do the countires in the Carribean cover together ?",
        "true_sql": "select sum ( country.surfacearea ) where country.region = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Caribbean\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "sqlite_sequence.seq",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9797448541515331, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9676253199577332, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9999626874923706, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.11857645753974111",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 787
    },
    {
        "nl": "Which continent is Anguilla in ?",
        "true_sql": "select country.continent where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Anguilla\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.continent",
            "where",
            "country.region",
            "=",
            "value",
            "and",
            "country.headofstate",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 46, [7], 3, 16, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('country', 'region', 46), 0.9999630451202393, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999922513961792, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('WHERE_COL', ('country', 'headofstate', 55), 0.35385552048683167, 7), ('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.999951958656311, 8), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.9998108744621277, 9)]",
        "logprob": "-1.0917736329617804",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 788
    },
    {
        "nl": "What is the continent name which Anguilla belongs to ?",
        "true_sql": "select country.continent where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Anguilla\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.continent",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9999977350234985, 1), ('WHERE_COL', ('country', 'region', 46), 0.999976634979248, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999955892562866, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.000997409592469297",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 789
    },
    {
        "nl": "Which region is the city Kabul located in ?",
        "true_sql": "select country.region where city.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kabul\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.region",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9939682483673096, 1), ('WHERE_COL', ('city', 'district', 39), 0.9998811483383179, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999991655349731, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.01109109105623559",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 790
    },
    {
        "nl": "What region is Kabul in ?",
        "true_sql": "select country.region where city.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kabul\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.region",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999569654464722, 1), ('WHERE_COL', ('city', 'district', 39), 0.9864446520805359, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999983310699463, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.09669928135763492",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 791
    },
    {
        "nl": "Which language is the most popular in Aruba ?",
        "true_sql": "select countrylanguage.language where country.name = value order_by countrylanguage.percentage desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 26, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Aruba\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.region",
            "=",
            "value",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 46, [7], 3, 10, 59, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9991045594215393, 1), ('WHERE_COL', ('country', 'region', 46), 0.9766157865524292, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999508857727051, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999946355819702, 5), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9999971389770508, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9825377337697281, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996578693389893, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998456239700317, 11)]",
        "logprob": "-0.14798500660341876",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 792
    },
    {
        "nl": "What language is predominantly spoken in Aruba ?",
        "true_sql": "select countrylanguage.language where country.name = value order_by countrylanguage.percentage desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 26, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Aruba\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.99982088804245, 1), ('WHERE_COL', ('city', 'district', 39), 0.6928897500038147, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.769926992741402",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 793
    },
    {
        "nl": "What are the population and life expectancies in Brazil ?",
        "true_sql": "select country.population , country.lifeexpectancy where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Brazil\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.population",
            ",",
            "country.lifeexpectancy",
            "where",
            "country.lifeexpectancy",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [50], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.999974250793457, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9993023872375488, 3), ('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9886179566383362, 5), ('WHERE_OP', (('country', 'lifeexpectancy', 50),), ('=', 0), 0.9996938705444336, 6), ('WHERE_ROOT_TERM', (('country', 'lifeexpectancy', 50),), ('=', 0), 'terminal', 0.9999978542327881, 7)]",
        "logprob": "-0.01259130196609256",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 794
    },
    {
        "nl": "Give me Brazil \u2019 s population and life expectancies .",
        "true_sql": "select country.population , country.lifeexpectancy where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Brazil\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.population",
            ",",
            "country.lifeexpectancy",
            "where",
            "country.lifeexpectancy",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [50], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999837875366211, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.5507248044013977, 3), ('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.6191074252128601, 5), ('WHERE_OP', (('country', 'lifeexpectancy', 50),), ('=', 0), 0.993933379650116, 6), ('WHERE_ROOT_TERM', (('country', 'lifeexpectancy', 50),), ('=', 0), 'terminal', 0.999996542930603, 7)]",
        "logprob": "-1.0831114345095476",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 795
    },
    {
        "nl": "What are the region and population of Angola ?",
        "true_sql": "select country.population , country.region where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Angola\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.region",
            ",",
            "country.population",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [49], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999516010284424, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.6780359148979187, 3), ('WHERE_COL', ('country', 'continent', 45), 0.9940939545631409, 5), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9999961853027344, 6), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999992847442627, 7)]",
        "logprob": "-0.39661947550646826",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 796
    },
    {
        "nl": "What region does Angola belong to and what is its population ?",
        "true_sql": "select country.population , country.region where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Angola\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.region",
            ",",
            "country.region",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [46], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999960660934448, 1), ('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.3252703547477722, 3), ('WHERE_COL', ('country', 'continent', 45), 0.9918708801269531, 5), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9999896287918091, 6), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999995231628418, 7)]",
        "logprob": "-1.146303914874583",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 797
    },
    {
        "nl": "What is the average expected life expectancy for countries in the region of Central Africa ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.region = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Central Africa\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9998512523217986, 1), ('WHERE_COL', ('country', 'region', 46), 0.9975563287734985, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999581575393677, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999959468841553, 5)]",
        "logprob": "-0.1160866480806997",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 798
    },
    {
        "nl": "How long is the people \u2019 s average life expectancy in Central Africa ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.region = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Central Africa\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9931061788608864, 1), ('WHERE_COL', ('country', 'region', 46), 0.9881275296211243, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999768733978271, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999967813491821, 5)]",
        "logprob": "-0.059410168184075796",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 799
    },
    {
        "nl": "What is the name of country that has the shortest life expectancy in Asia ?",
        "true_sql": "select country.name where country.continent = value order_by country.lifeexpectancy limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.lifeexpectancy",
            "=",
            "(",
            "select",
            "min",
            "(",
            "country.lifeexpectancy",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 50, [7], 5, 2, [26, 5, 50, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9997377991676331, 1), ('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9997168183326721, 3), ('WHERE_OP', (('country', 'lifeexpectancy', 50),), ('=', 0), 0.9955944418907166, 4), ('WHERE_ROOT_TERM', (('country', 'lifeexpectancy', 50),), ('=', 0), 'root', 0.9998797178268433, 5), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('min', 2), False, 0.9714414940094876, 7), ('O', '##END_NESTED##', 0.9120815992355347, 8)]",
        "logprob": "-0.21503460865185076",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 800
    },
    {
        "nl": "Give the name of the country in Asia with the lowest life expectancy .",
        "true_sql": "select country.name where country.continent = value order_by country.lifeexpectancy limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.lifeexpectancy",
            "=",
            "(",
            "select",
            "min",
            "(",
            "country.lifeexpectancy",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 50, [7], 5, 2, [26, 5, 50, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.99983811378479, 1), ('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.999168872833252, 3), ('WHERE_OP', (('country', 'lifeexpectancy', 50),), ('=', 0), 0.9943680167198181, 4), ('WHERE_ROOT_TERM', (('country', 'lifeexpectancy', 50),), ('=', 0), 'root', 0.9999865293502808, 5), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('min', 2), False, 0.9603968323654775, 7), ('O', '##END_NESTED##', 0.9999488592147827, 8)]",
        "logprob": "-0.3160791285146853",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 801
    },
    {
        "nl": "What is the total population and maximum GNP in Asia ?",
        "true_sql": "select sum ( country.population ) , max ( country.gnp ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [1, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.population",
            ")",
            ",",
            "sum",
            "(",
            "country.gnp",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 49, 4], 8, [24, 5, 51, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.9992325325804664, 1), ('SELECT_AGG_v2', ('country', 'gnp', 51), ('sum', 4), False, 0.9466721275939993, 3), ('WHERE_COL', ('country', 'region', 46), 0.9995384216308594, 5), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.999756395816803, 6), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999982118606567, 7)]",
        "logprob": "-0.27972999425991546",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 802
    },
    {
        "nl": "How many people live in Asia , and what is the largest GNP among them ?",
        "true_sql": "select sum ( country.population ) , max ( country.gnp ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [1, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            ",",
            "max",
            "(",
            "country.gnp",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "group_by",
            "country.headofstate",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 8, [19, 5, 51, 4], 6, 46, [7], 3, 10, 55, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9950494816095793, 1), ('SELECT_AGG_v2', ('country', 'gnp', 51), ('max', 1), False, 0.7970426727051141, 3), ('WHERE_COL', ('country', 'region', 46), 0.9983144998550415, 5), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9946120977401733, 6), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999622106552124, 7), ('GROUP_COL', ('country', 'headofstate', 55), 0.7715958952903748, 9), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9973956825981822, 11), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9903349280357361, 12), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.7800014019012451, 13)]",
        "logprob": "-1.901733661123444",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 803
    },
    {
        "nl": "What is the average life expectancy in African countries that are republics ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.continent = value and country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None], 'and', [False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996605513731109, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.6307520866394043, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999663829803467, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999967813491821, 5)]",
        "logprob": "-1.0220093323222856",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 804
    },
    {
        "nl": "Give the average life expectancy for countries in Africa which are republics ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.continent = value and country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None], 'and', [False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            ",",
            "country.headofstate",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 8, [55], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9984194088849225, 1), ('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.4144660234451294, 3), ('WHERE_COL', ('country', 'region', 46), 0.6989552974700928, 5), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9998028874397278, 6), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999912977218628, 7)]",
        "logprob": "-1.9744418539229764",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 805
    },
    {
        "nl": "What is the total surface area of the continents Asia and Europe ?",
        "true_sql": "select sum ( country.surfacearea ) where country.continent = value or country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None], 'or', [False, 2, [0, [0, 10, False], None], '\"Europe\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            ",",
            "country.continent",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 8, [45], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9998848150196954, 1), ('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9919353723526001, 3), ('WHERE_COL', ('country', 'region', 46), 0.9836147427558899, 5), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.999798595905304, 6), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999983310699463, 7)]",
        "logprob": "-0.5916877247973648",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 806
    },
    {
        "nl": "Give the total surface area covered by countries in Asia or Europe .",
        "true_sql": "select sum ( country.surfacearea ) where country.continent = value or country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None], 'or', [False, 2, [0, [0, 10, False], None], '\"Europe\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "or",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 6, 46, [7], 3, 25, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9962940207882766, 1), ('WHERE_COL', ('country', 'region', 46), 0.9755884408950806, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9994375109672546, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.999997615814209, 5), ('WHERE_COL', ('country', 'continent', 45), 0.8273619413375854, 7), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998306035995483, 8), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999845027923584, 9)]",
        "logprob": "-0.23233088934974608",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 807
    },
    {
        "nl": "How many people live in Gelderland district ?",
        "true_sql": "select sum ( city.population ) where city.district = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Gelderland\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "city.population",
            ")",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 40, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'population', 40), ('count', 3), False, 0.8930731464279165, 1), ('WHERE_COL', ('city', 'district', 39), 1.0, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999988079071045, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.4530533579207328",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 808
    },
    {
        "nl": "What is the total population of Gelderland district ?",
        "true_sql": "select sum ( city.population ) where city.district = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Gelderland\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "city.population",
            ")",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 40, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'population', 40), ('sum', 4), False, 0.9681781838203865, 1), ('WHERE_COL', ('city', 'district', 39), 1.0, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999988079071045, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.1300455102550279",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 809
    },
    {
        "nl": "What is the average GNP and total population in all nations whose government is US territory ?",
        "true_sql": "select avg ( country.gnp ) , sum ( country.population ) where country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 16, False], None]], [4, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"US Territory\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.population",
            ")",
            ",",
            "avg",
            "(",
            "country.population",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 49, 4], 8, [17, 5, 49, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.9945118251423254, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.848217414208853, 3), ('WHERE_COL', ('country', 'governmentform', 54), 0.9949957132339478, 5), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.999991774559021, 6), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999977350234985, 7)]",
        "logprob": "-0.6910727683631364",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 810
    },
    {
        "nl": "Give the mean GNP and total population of nations which are considered US territory .",
        "true_sql": "select avg ( country.gnp ) , sum ( country.population ) where country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 16, False], None]], [4, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"US Territory\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "max",
            "(",
            "country.population",
            ")",
            ",",
            "max",
            "(",
            "country.population",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 49, 4], 8, [19, 5, 49, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.8010788212954176, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.8336039470511734, 3), ('WHERE_COL', ('country', 'region', 46), 0.6288985013961792, 5), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9993863105773926, 6), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999971389770508, 7)]",
        "logprob": "-2.079908009192112",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 811
    },
    {
        "nl": "How many unique languages are spoken in the world ?",
        "true_sql": "select count ( distinct countrylanguage.language )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.9999358722615388, 1)]",
        "logprob": "-0.00033507340172999787",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 812
    },
    {
        "nl": "What is the number of distinct languages used around the world ?",
        "true_sql": "select count ( distinct countrylanguage.language )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.9999554624334426, 1)]",
        "logprob": "-0.0008893544946945924",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 813
    },
    {
        "nl": "How many type of governments are in Africa ?",
        "true_sql": "select count ( distinct country.governmentform ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 19, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.population",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.9193831371247388, 1), ('WHERE_COL', ('country', 'continent', 45), 0.5096253752708435, 3), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9990028738975525, 4), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-1.2445346245870674",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 814
    },
    {
        "nl": "How many different forms of governments are there in Africa ?",
        "true_sql": "select count ( distinct country.governmentform ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 19, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.8571175533741492, 1), ('WHERE_COL', ('country', 'region', 46), 0.7739105224609375, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9965860843658447, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999977350234985, 5)]",
        "logprob": "-1.269825278159578",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 815
    },
    {
        "nl": "What is the total number of languages used in Aruba ?",
        "true_sql": "select count ( countrylanguage.language ) where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Aruba\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9924996785224993, 1), ('WHERE_COL', ('city', 'district', 39), 0.6717106103897095, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.42933398280016966",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 816
    },
    {
        "nl": "How many languages are spoken in Aruba ?",
        "true_sql": "select count ( countrylanguage.language ) where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Aruba\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.912970323725829, 1), ('WHERE_COL', ('city', 'district', 39), 0.9632540941238403, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999996423721313, 5)]",
        "logprob": "-0.40183569103439054",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 817
    },
    {
        "nl": "How many official languages does Afghanistan have ?",
        "true_sql": "select count ( * ) where country.name = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Afghanistan\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.population",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.9980335859196646, 1), ('WHERE_COL', ('country', 'region', 46), 0.8640543818473816, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999854564666748, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.2869729463703662",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 818
    },
    {
        "nl": "How many official languages are spoken in Afghanistan ?",
        "true_sql": "select count ( * ) where country.name = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Afghanistan\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.population",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.9257392398454246, 1), ('WHERE_COL', ('country', 'region', 46), 0.9972236156463623, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.3119872915569001",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 819
    },
    {
        "nl": "What is name of the country that speaks the largest number of languages ?",
        "true_sql": "select country.name group_by country.name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 59, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9992024302482605, 1), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.999754011631012, 3), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9882507337941434, 5), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9982847571372986, 6), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.9999387264251709, 7)]",
        "logprob": "-0.05034758959086515",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 820
    },
    {
        "nl": "Give the name of the nation that uses the greatest amount of languages .",
        "true_sql": "select country.name group_by country.name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "group_by",
            "country.headofstate",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 10, 55, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.6386975049972534, 1), ('GROUP_COL', ('country', 'headofstate', 55), 0.8317640423774719, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9988218724734431, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993601441383362, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999486207962036, 7)]",
        "logprob": "-0.6432122376983264",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 821
    },
    {
        "nl": "Which continent has the most diverse languages ?",
        "true_sql": "select country.continent group_by country.continent order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.continent",
            "group_by",
            "country.continent",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 45, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.996515154838562, 1), ('GROUP_COL', ('country', 'continent', 45), 0.9998965263366699, 3), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998320192339346, 5), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9992892742156982, 6), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.9998741149902344, 7)]",
        "logprob": "-0.005477674020413322",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 822
    },
    {
        "nl": "Which continent speaks the most languages ?",
        "true_sql": "select country.continent group_by country.continent order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.continent",
            "group_by",
            "country.continent",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 45, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9998650550842285, 1), ('GROUP_COL', ('country', 'continent', 45), 0.9999961853027344, 3), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9999303630557271, 5), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9987841248512268, 6), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.9998989105224609, 7)]",
        "logprob": "-0.0019921325353402953",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 823
    },
    {
        "nl": "How many countries speak both English and Dutch ?",
        "true_sql": "select count ( * ) ( select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['sql', {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Dutch\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "sqlite_sequence.seq",
            "=",
            "value",
            "intersect",
            "select",
            "countrylanguage.language",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 42, [7], 3, 23, 2, [59], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9993289536457252, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.8461645245552063, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9998413324356079, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9999988079071045, 5), ('IUEN_v2', ('intersect', 1), 0.6322231888771057, 6), ('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.8217712640762329, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9435341358184814, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999970197677612, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999996423721313, 12)]",
        "logprob": "-0.8834762816329956",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 824
    },
    {
        "nl": "What is the number of nations that use English and Dutch ?",
        "true_sql": "select count ( * ) ( select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['sql', {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Dutch\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "and",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 59, [7], 3, 16, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.994054713693021, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.5634797811508179, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999401569366455, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999995231628418, 5), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.8119618892669678, 7), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.999970555305481, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999988079071045, 9)]",
        "logprob": "-1.0023775082224111",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 825
    },
    {
        "nl": "What are the names of nations speak both English and French ?",
        "true_sql": "select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"French\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "sqlite_sequence.seq",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 42, [7], 3, 23, 2, [44], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9996019005775452, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.44193339347839355, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9974580407142639, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9999982118606567, 5), ('IUEN_v2', ('intersect', 1), 0.9991329312324524, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9869007468223572, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9887517094612122, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999959468841553, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999994039535522, 12)]",
        "logprob": "-0.8453338829553557",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 826
    },
    {
        "nl": "Give the names of nations that speak both English and French .",
        "true_sql": "select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"French\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 59, [7], 3, 23, 2, [44], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999107122421265, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.530921220779419, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998101592063904, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999988079071045, 5), ('IUEN_v2', ('intersect', 1), 0.9984079003334045, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9838991165161133, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9982557892799377, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.999996542930603, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999996423721313, 12)]",
        "logprob": "-0.6534107845177465",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 827
    },
    {
        "nl": "What are the names of nations where both English and French are official languages ?",
        "true_sql": "select country.name where countrylanguage.language = value and countrylanguage.isofficial = value intersect select country.name where countrylanguage.language = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"French\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.governmentform",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 54, [7], 3, 23, 2, [44], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9983412027359009, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.710731029510498, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.999087929725647, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999994039535522, 5), ('IUEN_v2', ('intersect', 1), 0.9965785145759583, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9869725108146667, 8), ('WHERE_COL', ('country', 'governmentform', 54), 0.4394918978214264, 10), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999853372573853, 11), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999997615814209, 12)]",
        "logprob": "-1.1835186710370436",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 828
    },
    {
        "nl": "Give the names of countries with English and French as official languages .",
        "true_sql": "select country.name where countrylanguage.language = value and countrylanguage.isofficial = value intersect select country.name where countrylanguage.language = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"French\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "sqlite_sequence.seq",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 42, [7], 3, 23, 2, [44], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9994168281555176, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.6069726347923279, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9982694387435913, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9999991655349731, 5), ('IUEN_v2', ('intersect', 1), 0.7969830632209778, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9664707183837891, 8), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.6600272059440613, 10), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.999984860420227, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999997615814209, 12)]",
        "logprob": "-1.1796176860960508",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 829
    },
    {
        "nl": "What is the number of distinct continents where Chinese is spoken ?",
        "true_sql": "select count ( distinct country.continent ) where countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 10, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Chinese\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "country.continent",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), True, 0.9998901207300986, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9955552220344543, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999985694885254, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.00511033130509539",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 830
    },
    {
        "nl": "How many continents speak Chinese ?",
        "true_sql": "select count ( distinct country.continent ) where countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 10, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Chinese\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.continent",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 45, 4], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), False, 0.9679858525635546, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9881046414375305, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999971389770508, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.1425450533162217",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 831
    },
    {
        "nl": "What are the regions that use English or Dutch ?",
        "true_sql": "select distinct country.region where countrylanguage.language = value or countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'or', [False, 2, [0, [0, 24, False], None], '\"Dutch\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.region",
            "where",
            "sqlite_sequence.seq",
            "=",
            "value",
            "or",
            "sqlite_sequence.seq",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 42, [7], 3, 25, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9614433646202087, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9997302889823914, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9999983310699463, 5), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9748997688293457, 7), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9998674392700195, 8), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9999815225601196, 9)]",
        "logprob": "-0.0658999983484105",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 832
    },
    {
        "nl": "Which regions speak Dutch or English ?",
        "true_sql": "select distinct country.region where countrylanguage.language = value or countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'or', [False, 2, [0, [0, 24, False], None], '\"Dutch\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.region",
            "where",
            "sqlite_sequence.seq",
            "=",
            "value",
            "or",
            "sqlite_sequence.seq",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 42, [7], 3, 25, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9540499448776245, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9999605417251587, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9257444143295288, 7), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9998242259025574, 8), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9999840259552002, 9)]",
        "logprob": "-0.12521750479962981",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 833
    },
    {
        "nl": "What are the countries where either English or Dutch is the official language ?",
        "true_sql": "select * where countrylanguage.language = value and countrylanguage.isofficial = value union select * where countrylanguage.language = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Dutch\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.continent",
            "where",
            "country.governmentform",
            "=",
            "value",
            "or",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 54, [7], 3, 25, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9977286458015442, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.4263077676296234, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9998356103897095, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999983310699463, 5), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9949480295181274, 7), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998383522033691, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999945163726807, 9)]",
        "logprob": "-0.8707766397369128",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 834
    },
    {
        "nl": "Which countries have either English or Dutch as an official language ?",
        "true_sql": "select * where countrylanguage.language = value and countrylanguage.isofficial = value union select * where countrylanguage.language = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Dutch\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.continent",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "or",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 59, [7], 3, 25, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9996694326400757, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9692643880844116, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999300241470337, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999979734420776, 5), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9941658973693848, 7), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998886585235596, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999940395355225, 9)]",
        "logprob": "-0.04702682982158267",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 835
    },
    {
        "nl": "Which language is the most popular on the Asian continent ?",
        "true_sql": "select countrylanguage.language where country.continent = value group_by countrylanguage.language order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.region",
            "=",
            "value",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 46, [7], 3, 10, 59, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9974402189254761, 1), ('WHERE_COL', ('country', 'region', 46), 0.9987867474555969, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9997923970222473, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999856948852539, 5), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9997609257698059, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8644433876234487, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993336796760559, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998757839202881, 11)]",
        "logprob": "-0.6555939511667747",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 836
    },
    {
        "nl": "What is the language that is used by the largest number of Asian nations ?",
        "true_sql": "select countrylanguage.language where country.continent = value group_by countrylanguage.language order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.region",
            "=",
            "value",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 46, [7], 3, 10, 59, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9959515333175659, 1), ('WHERE_COL', ('country', 'region', 46), 0.7546207904815674, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9998037219047546, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999324083328247, 5), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9585718512535095, 7), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9981017744923936, 9), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9965171813964844, 10), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.999562680721283, 11)]",
        "logprob": "-0.3415339556770221",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 837
    },
    {
        "nl": "Which languages are spoken by only one country in republic governments ?",
        "true_sql": "select countrylanguage.language where country.governmentform = value group_by countrylanguage.language having count ( * ) = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [[False, 2, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.governmentform",
            "=",
            "value",
            "except",
            "select",
            "countrylanguage.language",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 54, [7], 3, 28, 2, [59], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999871253967285, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9979574680328369, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997135996818542, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.999998927116394, 5), ('IUEN_v2', ('except', 3), 0.47494494915008545, 6), ('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999685287475586, 8), ('WHERE_COL', ('country', 'governmentform', 54), 0.9736543893814087, 10), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999923706054688, 11), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999992847442627, 12)]",
        "logprob": "-0.7749633129363497",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 838
    },
    {
        "nl": "What languages are only used by a single country with a republic government ?",
        "true_sql": "select countrylanguage.language where country.governmentform = value group_by countrylanguage.language having count ( * ) = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [[False, 2, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.999835729598999, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9992679953575134, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999868869781494, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.011012711756421264",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 839
    },
    {
        "nl": "Find the city with the largest population that uses English .",
        "true_sql": "select city.name , city.population where countrylanguage.language = value order_by city.population desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "city.population",
            "=",
            "(",
            "select",
            "max",
            "(",
            "city.population",
            ")",
            "where",
            "sqlite_sequence.seq",
            "=",
            "value",
            ")",
            "and",
            "city.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [7], 5, 2, [19, 5, 40, 4], 6, 42, [7], 3, 4, 16, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9967852830886841, 1), ('WHERE_COL', ('city', 'population', 40), 0.9993366599082947, 3), ('WHERE_OP', (('city', 'population', 40),), ('=', 0), 0.9951398372650146, 4), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('=', 0), 'root', 0.9998470544815063, 5), ('SELECT_AGG_v2', ('city', 'population', 40), ('max', 1), False, 0.9996612591616152, 7), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.8817586898803711, 9), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.9922309517860413, 10), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('=', 0), 'terminal', 0.9990954399108887, 11), ('O', '##END_NESTED##', 0.8238928914070129, 12), ('WHERE_COL', ('city', 'name', 37), 0.7761354446411133, 14), ('WHERE_OP', (('city', 'name', 37),), ('=', 0), 0.9988031387329102, 15), ('WHERE_ROOT_TERM', (('city', 'name', 37),), ('=', 0), 'terminal', 0.9997398257255554, 16)]",
        "logprob": "-1.1487031992225745",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 840
    },
    {
        "nl": "What is the most populace city that speaks English ?",
        "true_sql": "select city.name , city.population where countrylanguage.language = value order_by city.population desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "city.population",
            "=",
            "(",
            "select",
            "max",
            "(",
            "city.population",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [7], 5, 2, [19, 5, 40, 4], 6, 59, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9969115853309631, 1), ('WHERE_COL', ('city', 'population', 40), 0.9941815733909607, 3), ('WHERE_OP', (('city', 'population', 40),), ('=', 0), 0.9930130839347839, 4), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('=', 0), 'root', 0.9320889711380005, 5), ('SELECT_AGG_v2', ('city', 'population', 40), ('max', 1), False, 0.997601984095869, 7), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.759122908115387, 9), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999796152114868, 10), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999990463256836, 11), ('O', '##END_NESTED##', 0.5870659351348877, 12)]",
        "logprob": "-1.4278314013584514",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 841
    },
    {
        "nl": "Find the name , population and expected life length of asian country with the largest area ?",
        "true_sql": "select country.name , country.population , country.lifeexpectancy where country.continent = value order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.population",
            ",",
            "country.lifeexpectancy",
            "where",
            "country.lifeexpectancy",
            "=",
            "(",
            "select",
            "max",
            "(",
            "country.lifeexpectancy",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [49], 8, [50], 6, 50, [7], 5, 2, [19, 5, 50, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9985846281051636, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9330499768257141, 3), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9855878353118896, 5), ('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9527840614318848, 7), ('WHERE_OP', (('country', 'lifeexpectancy', 50),), ('=', 0), 0.9991018772125244, 8), ('WHERE_ROOT_TERM', (('country', 'lifeexpectancy', 50),), ('=', 0), 'root', 0.9999643564224243, 9), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('max', 1), False, 0.9994824806678799, 11), ('O', '##END_NESTED##', 0.5308552980422974, 12)]",
        "logprob": "-0.830955269225516",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 842
    },
    {
        "nl": "What are the name , population , and life expectancy of the largest Asian country by land ?",
        "true_sql": "select country.name , country.population , country.lifeexpectancy where country.continent = value order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.population",
            ",",
            "country.lifeexpectancy",
            "where",
            "country.population",
            "=",
            "(",
            "select",
            "max",
            "(",
            "country.lifeexpectancy",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [49], 8, [50], 6, 49, [7], 5, 2, [19, 5, 50, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9972430467605591, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9899223446846008, 3), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9964420199394226, 5), ('WHERE_COL', ('country', 'population', 49), 0.5829945206642151, 7), ('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.9841938614845276, 8), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'root', 0.9927588701248169, 9), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('max', 1), False, 0.9962909767641344, 11), ('O', '##END_NESTED##', 0.6198568940162659, 12)]",
        "logprob": "-1.2128538988810682",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 843
    },
    {
        "nl": "What is average life expectancy in the countries where English is not the official language ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.name not in ( select country.name where countrylanguage.language = value and countrylanguage.isofficial = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.governmentform",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 54, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9994703945627311, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.7057237029075623, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.5590635538101196, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999557733535767, 5)]",
        "logprob": "-0.9734704294542061",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 844
    },
    {
        "nl": "Give the mean life expectancy of countries in which English is not the official language .",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.name not in ( select country.name where countrylanguage.language = value and countrylanguage.isofficial = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.governmentform",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 54, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9318226666719871, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.6352286338806152, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.7319464087486267, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999756813049316, 5)]",
        "logprob": "-1.1018280413272945",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 845
    },
    {
        "nl": "What is the total number of people living in the nations that do not use English ?",
        "true_sql": "select sum ( country.population ) where country.name not in ( select country.name where countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.population",
            ")",
            "where",
            "country.governmentform",
            "not",
            "in",
            "(",
            "select",
            "countrylanguage.language",
            "where",
            "countrylanguage.language",
            "!=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 6, 54, [22, 20], 5, 2, [59], 6, 59, [29], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.8372444239253795, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.43457502126693726, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('not in', 7), 0.8801143648681874, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('not in', 7), 'root', 0.999825656414032, 5), ('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.8958091735839844, 7), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9559589624404907, 9), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.7401935458183289, 10), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999957084655762, 11), ('O', '##END_NESTED##', 0.9877722263336182, 12)]",
        "logprob": "-2.2821441710881167",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 846
    },
    {
        "nl": "How many people live in countries that do not speak English ?",
        "true_sql": "select sum ( country.population ) where country.name not in ( select country.name where countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.region",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 46, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9580814716117074, 1), ('WHERE_COL', ('country', 'region', 46), 0.7709360122680664, 3), ('WHERE_OP', (('country', 'region', 46),), ('!=', 5), 0.5364421606063843, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('!=', 5), 'terminal', 0.999984622001648, 5)]",
        "logprob": "-1.0545635988445754",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 847
    },
    {
        "nl": "What is the official language spoken in the country whose head of state is Beatrix ?",
        "true_sql": "select countrylanguage.language where country.headofstate = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Beatrix\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.headofstate",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999880790710449, 1), ('WHERE_COL', ('country', 'headofstate', 55), 0.9999657869338989, 3), ('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999947547912598, 4), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.0012848063033442418",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 848
    },
    {
        "nl": "What is the official language used in the country the name of whose head of state is Beatrix .",
        "true_sql": "select countrylanguage.language where country.headofstate = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Beatrix\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.headofstate",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9766075611114502, 1), ('WHERE_COL', ('country', 'headofstate', 55), 0.9996817111968994, 3), ('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999895095825195, 4), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-0.024903220516885396",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 849
    },
    {
        "nl": "What is the total number of unique official languages spoken in the countries that are founded before 1930 ?",
        "true_sql": "select count ( distinct countrylanguage.language ) where country.indepyear < value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, True], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 13, False], None], 1930.0, None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.region",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 46, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9924786623568248, 1), ('WHERE_COL', ('country', 'region', 46), 0.8410583138465881, 3), ('WHERE_OP', (('country', 'region', 46),), ('<', 2), 0.9358904361724854, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('<', 2), 'terminal', 0.9998193383216858, 5)]",
        "logprob": "-0.2707597584030836",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 850
    },
    {
        "nl": "For the countries founded before 1930 , what is the total number of distinct official languages ?",
        "true_sql": "select count ( distinct countrylanguage.language ) where country.indepyear < value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, True], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 13, False], None], 1930.0, None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "countrylanguage.language",
            "where",
            "country.region",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [59], 6, 46, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9252490997314453, 2), ('WHERE_COL', ('country', 'region', 46), 0.5959234833717346, 4), ('WHERE_OP', (('country', 'region', 46),), ('<', 2), 0.9482247829437256, 5), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('<', 2), 'terminal', 0.999910831451416, 6)]",
        "logprob": "-0.8575449565265768",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 851
    },
    {
        "nl": "What are the countries that have greater surface area than any country in Europe ?",
        "true_sql": "select country.name where country.surfacearea > ( select min ( country.surfacearea ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 12, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.continent",
            "where",
            "country.surfacearea",
            ">",
            "(",
            "select",
            "min",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 47, [14], 5, 2, [26, 5, 47, 4], 6, 46, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9981879591941833, 1), ('WHERE_COL', ('country', 'surfacearea', 47), 0.9999516010284424, 3), ('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.998316764831543, 4), ('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'root', 0.9115791320800781, 5), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.9286172339562199, 7), ('WHERE_COL', ('country', 'region', 46), 0.6191757917404175, 9), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9378355741500854, 10), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999136924743652, 11), ('O', '##END_NESTED##', 0.9986088871955872, 12)]",
        "logprob": "-0.9465880468798494",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 852
    },
    {
        "nl": "Which countries have greater area than that of any country in Europe ?",
        "true_sql": "select country.name where country.surfacearea > ( select min ( country.surfacearea ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 12, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.surfacearea",
            ">",
            "(",
            "select",
            "min",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 47, [14], 5, 2, [26, 5, 47, 4], 6, 45, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.6546618342399597, 1), ('WHERE_COL', ('country', 'surfacearea', 47), 0.9336419701576233, 3), ('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9978062510490417, 4), ('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'root', 0.9788002371788025, 5), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.8919154770997928, 7), ('WHERE_COL', ('country', 'continent', 45), 0.7573263645172119, 9), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9965483546257019, 10), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999696016311646, 11), ('O', '##END_NESTED##', 0.9988623857498169, 12)]",
        "logprob": "-1.2806268525476854",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 853
    },
    {
        "nl": "What are the African countries that have a population less than any country in Asia ?",
        "true_sql": "select country.name where country.continent = value and country.population < ( select max ( country.population ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None], 'and', [False, 4, [0, [0, 14, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.headofstate",
            "where",
            "country.population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "country.population",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 49, [21], 5, 2, [26, 5, 49, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.3683270215988159, 1), ('WHERE_COL', ('country', 'population', 49), 0.9715688228607178, 3), ('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9984951019287109, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'root', 0.9973899722099304, 5), ('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9951561145557891, 7), ('O', '##END_NESTED##', 0.892147421836853, 8)]",
        "logprob": "-1.1663012323153692",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 854
    },
    {
        "nl": "Which African countries have a smaller population than that of any country in Asia ?",
        "true_sql": "select country.name where country.continent = value and country.population < ( select min ( country.population ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None], 'and', [False, 4, [0, [0, 14, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "country.population",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 49, [21], 5, 2, [26, 5, 49, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.49868637323379517, 1), ('WHERE_COL', ('country', 'population', 49), 0.7388203144073486, 3), ('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9185041785240173, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'root', 0.9951080679893494, 5), ('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9906170765412123, 7), ('O', '##END_NESTED##', 0.8319174647331238, 8)]",
        "logprob": "-1.3150726840244382",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 855
    },
    {
        "nl": "Which Asian countries have a population that is larger than any country in Africa ?",
        "true_sql": "select country.name where country.continent = value and country.population > ( select max ( country.population ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None], 'and', [False, 3, [0, [0, 14, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.region",
            ">",
            "value",
            "and",
            "country.headofstate",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 46, [14], 3, 16, 55, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.8065447807312012, 1), ('WHERE_COL', ('country', 'region', 46), 0.8530093431472778, 3), ('WHERE_OP', (('country', 'region', 46),), ('>', 1), 0.900295615196228, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('>', 1), 'terminal', 0.9991268515586853, 5), ('WHERE_COL', ('country', 'headofstate', 55), 0.5075829029083252, 7), ('WHERE_OP', (('country', 'headofstate', 55),), ('>', 1), 0.960898220539093, 8), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('>', 1), 'terminal', 0.9095910787582397, 9)]",
        "logprob": "-2.0010689997343207",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 856
    },
    {
        "nl": "What are the Asian countries which have a population larger than that of any country in Africa ?",
        "true_sql": "select country.name where country.continent = value and country.population > ( select min ( country.population ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None], 'and', [False, 3, [0, [0, 14, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.population",
            ">",
            "value",
            "and",
            "country.headofstate",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 49, [14], 3, 16, 55, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.4483090937137604, 1), ('WHERE_COL', ('country', 'population', 49), 0.8428555130958557, 3), ('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.9995933175086975, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('>', 1), 'terminal', 0.8202970623970032, 5), ('WHERE_COL', ('country', 'headofstate', 55), 0.3744773864746094, 7), ('WHERE_OP', (('country', 'headofstate', 55),), ('>', 1), 0.9906104207038879, 8), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('>', 1), 'terminal', 0.9943214654922485, 9)]",
        "logprob": "-2.8546433806215155",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 857
    },
    {
        "nl": "What are the country codes for countries that do not speak English ?",
        "true_sql": "select countrylanguage.countrycode except select countrylanguage.countrycode where countrylanguage.language = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "country.code2",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 57, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9850524067878723, 1), ('WHERE_COL', ('country', 'code2', 57), 0.6220014095306396, 3), ('WHERE_OP', (('country', 'code2', 57),), ('!=', 5), 0.9535873532295227, 4), ('WHERE_ROOT_TERM', (('country', 'code2', 57),), ('!=', 5), 'terminal', 0.9999731779098511, 5)]",
        "logprob": "-0.5382710055875238",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 858
    },
    {
        "nl": "Return the country codes for countries that do not speak English .",
        "true_sql": "select countrylanguage.countrycode except select countrylanguage.countrycode where countrylanguage.language = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "countrylanguage.language",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 59, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9869312644004822, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.724928081035614, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.9914724826812744, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999687671661377, 5)]",
        "logprob": "-0.3459481066721608",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 859
    },
    {
        "nl": "What are the country codes of countries where people use languages other than English ?",
        "true_sql": "select distinct countrylanguage.countrycode where countrylanguage.language != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "sqlite_sequence.seq",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 42, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.8960778713226318, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9424134492874146, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('<', 2), 0.5535179376602173, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('<', 2), 'terminal', 0.9999861717224121, 5)]",
        "logprob": "-1.0236118641236696",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 860
    },
    {
        "nl": "Give the country codes for countries in which people speak langauges that are not English .",
        "true_sql": "select distinct countrylanguage.countrycode where countrylanguage.language != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "except",
            "select",
            "country.code",
            "where",
            "countrylanguage.language",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 59, [7], 3, 28, 2, [43], 6, 59, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9728438854217529, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9267576336860657, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.5789360404014587, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999973773956299, 5), ('IUEN_v2', ('except', 3), 0.882087230682373, 6), ('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.8825985789299011, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9999997615814209, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.8153361678123474, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999980926513672, 12)]",
        "logprob": "-1.1080169289056812",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 861
    },
    {
        "nl": "What are the codes of the countries that do not speak English and whose government forms are not Republic ?",
        "true_sql": "select country.code where country.governmentform != value except select countrylanguage.countrycode where countrylanguage.language = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "country.governmentform",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 54, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9887192845344543, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9995633959770203, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.9449144005775452, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999830722808838, 5)]",
        "logprob": "-0.20203699915213968",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 862
    },
    {
        "nl": "Return the codes of countries that do not speak English and do not have Republics for governments .",
        "true_sql": "select country.code where country.governmentform != value except select countrylanguage.countrycode where countrylanguage.language = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "country.governmentform",
            "!=",
            "value",
            "intersect",
            "select",
            "country.code",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 54, [29], 3, 23, 2, [43], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9161441326141357, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9606567025184631, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.7207716107368469, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999849796295166, 5), ('IUEN_v2', ('intersect', 1), 0.5218601822853088, 6), ('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9449074864387512, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9114930033683777, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9930869936943054, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999994039535522, 12)]",
        "logprob": "-1.263347309937581",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 863
    },
    {
        "nl": "Which cities are in European countries where English is not the official language ?",
        "true_sql": "select distinct city.name where country.continent = value and country.name not in ( select country.name where countrylanguage.isofficial = value and countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None], 'and', [True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"T\"', None], 'and', [False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "country.governmentform",
            "=",
            "value",
            "except",
            "select",
            "city.name",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 54, [7], 3, 28, 2, [37], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.953737735748291, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.3962901532649994, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.6671239733695984, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999971389770508, 5), ('IUEN_v2', ('except', 3), 0.8752025365829468, 6), ('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.8324991464614868, 8), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9690459370613098, 10), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.8406885266304016, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999972581863403, 12)]",
        "logprob": "-2.3420081749580945",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 864
    },
    {
        "nl": "What are the names of cities in Europe for which English is not the official language ?",
        "true_sql": "select distinct city.name where country.continent = value and country.name not in ( select country.name where countrylanguage.isofficial = value and countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None], 'and', [True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"T\"', None], 'and', [False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "countrylanguage.language",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 59, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999815225601196, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.6716046333312988, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.8685023784637451, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999920129776001, 5)]",
        "logprob": "-0.6073123931628948",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 865
    },
    {
        "nl": "Whic ` h unique cities are in Asian countries where Chinese is the official language ?",
        "true_sql": "select distinct city.name where countrylanguage.isofficial = value and countrylanguage.language = value and country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"T\"', None], 'and', [False, 2, [0, [0, 24, False], None], '\"Chinese\"', None], 'and', [False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "country.region",
            "=",
            "value",
            "and",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 46, [7], 3, 16, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9300668835639954, 1), ('WHERE_COL', ('country', 'region', 46), 0.8975215554237366, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999576807022095, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.999990701675415, 5), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9135087132453918, 7), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998623132705688, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999895095825195, 9)]",
        "logprob": "-0.3248137154780466",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 866
    },
    {
        "nl": "Return the different names of cities that are in Asia and for which Chinese is the official language .",
        "true_sql": "select distinct city.name where countrylanguage.isofficial = value and countrylanguage.language = value and country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"T\"', None], 'and', [False, 2, [0, [0, 24, False], None], '\"Chinese\"', None], 'and', [False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "city.name",
            ",",
            "countrylanguage.language",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 8, [59], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9986875653266907, 2), ('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.3967399597167969, 4), ('WHERE_COL', ('country', 'region', 46), 0.9989633560180664, 6), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9996389150619507, 7), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999992847442627, 8)]",
        "logprob": "-0.959917010299291",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 867
    },
    {
        "nl": "What are the name , independence year , and surface area of the country with the smallest population ?",
        "true_sql": "select country.name , country.surfacearea , country.indepyear order_by country.population limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.population",
            ",",
            "country.population",
            "where",
            "country.surfacearea",
            "=",
            "(",
            "select",
            "min",
            "(",
            "country.population",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [49], 8, [49], 6, 47, [7], 5, 2, [26, 5, 49, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9989147186279297, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.3081423044204712, 3), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9464059472084045, 5), ('WHERE_COL', ('country', 'surfacearea', 47), 0.8770386576652527, 7), ('WHERE_OP', (('country', 'surfacearea', 47),), ('=', 0), 0.9944286346435547, 8), ('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('=', 0), 'root', 0.9983043670654297, 9), ('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9849734454502463, 11), ('O', '##END_NESTED##', 0.9980953335762024, 12)]",
        "logprob": "-1.4789810769031178",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 868
    },
    {
        "nl": "Give the name , year of independence , and surface area of the country that has the lowest population .",
        "true_sql": "select country.name , country.surfacearea , country.indepyear order_by country.population limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.indepyear",
            ",",
            "country.population",
            "order_by",
            "country.surfacearea",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [48], 8, [49], 11, [47], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999890327453613, 1), ('SELECT_AGG_v2', ('country', 'indepyear', 48), ('none_agg', 0), False, 0.3388206958770752, 3), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9604911804199219, 5), ('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.7759143114089966, 7), ('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'asc', 0.6835353970527649, 8), ('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9979165196418762, 9)]",
        "logprob": "-2.4620403701251257",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 869
    },
    {
        "nl": "What are the population , name and leader of the country with the largest area ?",
        "true_sql": "select country.name , country.population , country.headofstate order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.population",
            ",",
            "country.name",
            ",",
            "country.name",
            "order_by",
            "country.surfacearea",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [44], 8, [44], 11, [47], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9970632195472717, 1), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5814642310142517, 3), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5778113007545471, 5), ('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.9946812987327576, 7), ('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.987380862236023, 8), ('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.99993896484375, 9)]",
        "logprob": "-1.178599880446764",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 870
    },
    {
        "nl": "Give the name , population , and head of state for the country that has the largest area .",
        "true_sql": "select country.name , country.population , country.headofstate order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.localname",
            ",",
            "country.population",
            "order_by",
            "country.population",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [53], 8, [49], 11, [49], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9996939897537231, 1), ('SELECT_AGG_v2', ('country', 'localname', 53), ('none_agg', 0), False, 0.692460298538208, 3), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.6824991106987, 5), ('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9802677631378174, 7), ('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'desc', 0.962445080280304, 8), ('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9999202489852905, 9)]",
        "logprob": "-0.8129567059052927",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 871
    },
    {
        "nl": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages .",
        "true_sql": "select count ( countrylanguage.language ) , country.name group_by country.name having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 9, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "count",
            "(",
            "country.*",
            ")",
            "group_by",
            "countrylanguage.language",
            "having",
            "count",
            "(",
            "country.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [9, 5, 64, 4], 10, 59, 18, [9, 5, 64, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9988754391670227, 1), ('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9893621536217028, 3), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9082345962524414, 5), ('HAV_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9989829058069356, 7), ('HAV_OP_v2', (('country', '*', 64), ('count', 3), False), ('>=', 3), 0.9691027799897948, 8), ('HAV_ROOT_TERM_v2', (('country', '*', 64), ('count', 3), False), ('>=', 3), 'terminal', 0.9999918937683105, 9)]",
        "logprob": "-0.21113233719945976",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 872
    },
    {
        "nl": "What are the names of countries that speak more than 2 languages , as well as how many languages they speak ?",
        "true_sql": "select count ( countrylanguage.language ) , country.name group_by country.name having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 9, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.name",
            "group_by",
            "countrylanguage.language",
            "having",
            "count",
            "(",
            "country.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [44], 10, 59, 18, [9, 5, 64, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999986886978149, 1), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.49614837765693665, 3), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9633996486663818, 5), ('HAV_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9994207770079154, 7), ('HAV_OP_v2', (('country', '*', 64), ('count', 3), False), ('>', 1), 0.9999291896820068, 8), ('HAV_ROOT_TERM_v2', (('country', '*', 64), ('count', 3), False), ('>', 1), 'terminal', 0.9987603425979614, 9)]",
        "logprob": "-0.8307279405268795",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 873
    },
    {
        "nl": "Find the number of cities in each district whose population is greater than the average population of cities ?",
        "true_sql": "select count ( city.* ) , city.district where city.population > ( select avg ( city.population ) ) group_by city.district",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 5, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'city.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "city.*",
            ")",
            ",",
            "city.district",
            "where",
            "city.population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "city.population",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 62, 4], 8, [39], 6, 40, [14], 5, 2, [17, 5, 40, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.9915667847666827, 1), ('SELECT_AGG_v2', ('city', 'district', 39), ('none_agg', 0), False, 0.9928493499755859, 3), ('WHERE_COL', ('city', 'population', 40), 0.9930082559585571, 5), ('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.9998260140419006, 6), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('>', 1), 'root', 0.8638198375701904, 7), ('SELECT_AGG_v2', ('city', 'population', 40), ('avg', 5), False, 0.9986348190683397, 9), ('O', '##END_NESTED##', 0.999422550201416, 10)]",
        "logprob": "-0.33421981564100023",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 874
    },
    {
        "nl": "How many cities in each district have a population that is above the average population across all cities ?",
        "true_sql": "select count ( city.* ) , city.district where city.population > ( select avg ( city.population ) ) group_by city.district",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 5, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'city.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "city.*",
            ")",
            ",",
            "city.district",
            "group_by",
            "city.district",
            "having",
            "avg",
            "(",
            "city.population",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 62, 4], 8, [39], 10, 39, 18, [17, 5, 40, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.9994571039639696, 1), ('SELECT_AGG_v2', ('city', 'district', 39), ('none_agg', 0), False, 0.9995670914649963, 3), ('GROUP_COL', ('city', 'district', 39), 0.9999762773513794, 5), ('HAV_AGG_v2', ('city', 'population', 40), ('avg', 5), False, 0.9946274576647958, 7), ('HAV_OP_v2', (('city', 'population', 40), ('avg', 5), False), ('>', 1), 0.9952593445777893, 8), ('HAV_ROOT_TERM_v2', (('city', 'population', 40), ('avg', 5), False), ('>', 1), 'terminal', 0.9959465861320496, 9)]",
        "logprob": "-0.8897043196281322",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 875
    },
    {
        "nl": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
        "true_sql": "select sum ( country.population ) , country.governmentform group_by country.governmentform having avg ( country.lifeexpectancy ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [[False, 3, [0, [5, 15, False], None], 72.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.governmentform",
            ",",
            "country.governmentform",
            ",",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.lifeexpectancy",
            ">",
            "value",
            "group_by",
            "country.governmentform",
            "_EOS"
        ],
        "dec_seq": "[2, [54], 8, [54], 8, [17, 5, 50, 4], 6, 50, [14], 3, 10, 54, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.991390585899353, 1), ('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.458290159702301, 3), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9865359642036989, 5), ('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9879263639450073, 7), ('WHERE_OP', (('country', 'lifeexpectancy', 50),), ('>', 1), 0.9999613761901855, 8), ('WHERE_ROOT_TERM', (('country', 'lifeexpectancy', 50),), ('>', 1), 'terminal', 0.9913973808288574, 9), ('GROUP_COL', ('country', 'governmentform', 54), 0.9978723526000977, 11)]",
        "logprob": "-1.6852431810213284",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 876
    },
    {
        "nl": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
        "true_sql": "select sum ( country.population ) , country.governmentform group_by country.governmentform having avg ( country.lifeexpectancy ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [[False, 3, [0, [5, 15, False], None], 72.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "country.governmentform",
            ",",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.lifeexpectancy",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [54], 8, [17, 5, 50, 4], 6, 50, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.9996042847633362, 2), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9935069612269841, 4), ('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9998836517333984, 6), ('WHERE_OP', (('country', 'lifeexpectancy', 50),), ('>', 1), 0.9999784231185913, 7), ('WHERE_ROOT_TERM', (('country', 'lifeexpectancy', 50),), ('>', 1), 'terminal', 0.9948057532310486, 8)]",
        "logprob": "-0.04633576122859461",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 877
    },
    {
        "nl": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 ?",
        "true_sql": "select sum ( country.population ) , avg ( country.lifeexpectancy ) , country.continent group_by country.continent having avg ( country.lifeexpectancy ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 4, [0, [5, 15, False], None], 72.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 15, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            ",",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            ",",
            "country.continent",
            "where",
            "country.population",
            "<",
            "value",
            "group_by",
            "country.continent",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 8, [17, 5, 50, 4], 8, [45], 6, 49, [21], 3, 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9869129177073858, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.8588411009868874, 3), ('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9103008508682251, 5), ('WHERE_COL', ('country', 'population', 49), 0.4967261552810669, 7), ('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9601590633392334, 8), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'terminal', 0.5636621713638306, 9), ('GROUP_COL', ('country', 'continent', 45), 0.9999607801437378, 11)]",
        "logprob": "-2.6423734331456386",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 878
    },
    {
        "nl": "What are the different continents and the total popuation and average life expectancy corresponding to each , for continents that have an average life expectancy less than 72 ?",
        "true_sql": "select sum ( country.population ) , avg ( country.lifeexpectancy ) , country.continent group_by country.continent having avg ( country.lifeexpectancy ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 4, [0, [5, 15, False], None], 72.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 15, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.continent",
            ",",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.lifeexpectancy",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [17, 5, 50, 4], 6, 50, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9203808903694153, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9987091565802031, 3), ('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9858821630477905, 5), ('WHERE_OP', (('country', 'lifeexpectancy', 50),), ('<', 2), 0.9921533465385437, 6), ('WHERE_ROOT_TERM', (('country', 'lifeexpectancy', 50),), ('<', 2), 'terminal', 0.5288972854614258, 7)]",
        "logprob": "-0.8696811682629814",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 879
    },
    {
        "nl": "What are the names and areas of countries with the top 5 largest area ?",
        "true_sql": "select country.name , country.surfacearea order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 5, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.name",
            "order_by",
            "country.surfacearea",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [44], 11, [47], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999889135360718, 1), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.8291024565696716, 3), ('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.9992889165878296, 5), ('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9781889319419861, 6), ('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9999549388885498, 7)]",
        "logprob": "-0.21500274435919006",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 880
    },
    {
        "nl": "Return the names and surface areas of the 5 largest countries .",
        "true_sql": "select country.name , country.surfacearea order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 5, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.surfacearea",
            "order_by",
            "country.surfacearea",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [47], 11, [47], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999282360076904, 1), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.8750748038291931, 3), ('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 1.0, 5), ('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9906871914863586, 6), ('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9998689889907837, 7)]",
        "logprob": "-0.1763654691546231",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 881
    },
    {
        "nl": "What are names of countries with the top 3 largest population ?",
        "true_sql": "select country.name order_by country.population desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['desc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "order_by",
            "country.population",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [49], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999943971633911, 1), ('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999978542327881, 3), ('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'desc', 0.9903053045272827, 4), ('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9999454021453857, 5)]",
        "logprob": "-0.547435910535982",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 882
    },
    {
        "nl": "Return the names of the 3 most populated countries .",
        "true_sql": "select country.name order_by country.population desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['desc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "group_by",
            "country.region",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 46, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999227523803711, 1), ('GROUP_COL', ('country', 'region', 46), 0.5970553755760193, 3), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9995247635128301, 5), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9992952346801758, 6), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.9999490976333618, 7)]",
        "logprob": "-0.5322170330696194",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 883
    },
    {
        "nl": "What are the names of the nations with the 3 lowest populations ?",
        "true_sql": "select country.name order_by country.population asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "order_by",
            "country.population",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [49], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9997803568840027, 1), ('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999997615814209, 3), ('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.946931779384613, 4)]",
        "logprob": "-0.17958258379594458",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 884
    },
    {
        "nl": "Return the names of the 3 countries with the fewest people .",
        "true_sql": "select country.name order_by country.population asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "group_by",
            "country.region",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 46, 11, [9, 5, 64, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999239444732666, 1), ('GROUP_COL', ('country', 'region', 46), 0.7880976796150208, 3), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.998749981725078, 5), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'asc', 0.6757431030273438, 6), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.9999221563339233, 7)]",
        "logprob": "-0.638151804987124",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 885
    },
    {
        "nl": "how many countries are in Asia ?",
        "true_sql": "select count ( country.* ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {'select': 'country.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9999508676027259, 1), ('WHERE_COL', ('country', 'region', 46), 0.9760530591011047, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9977040886878967, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.028106515508374116",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 886
    },
    {
        "nl": "Count the number of countries in Asia .",
        "true_sql": "select count ( country.* ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {'select': 'country.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998463042885425, 1), ('WHERE_COL', ('country', 'region', 46), 0.995603084564209, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9936122298240662, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999936819076538, 5)]",
        "logprob": "-0.07991519068813151",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 887
    },
    {
        "nl": "What are the names of the countries that are in the continent of Europe and have a population of 80000 ?",
        "true_sql": "select country.name where country.continent = value and country.population = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None], 'and', [False, 2, [0, [0, 14, False], None], '\"80000\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.region",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 46, [7], 3, 23, 2, [44], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9881547689437866, 1), ('WHERE_COL', ('country', 'region', 46), 0.9004800915718079, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9982301592826843, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999964237213135, 5), ('IUEN_v2', ('intersect', 1), 0.985877275466919, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5777705311775208, 8), ('WHERE_COL', ('country', 'continent', 45), 0.9836515784263611, 10), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.999984860420227, 11), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999996423721313, 12)]",
        "logprob": "-0.6982708220282913",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 888
    },
    {
        "nl": "Give the names of countries that are in Europe and have a population equal to 80000 .",
        "true_sql": "select country.name where country.continent = value and country.population = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None], 'and', [False, 2, [0, [0, 14, False], None], '\"80000\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.region",
            "=",
            "value",
            "intersect",
            "select",
            "country.continent",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 46, [7], 3, 23, 2, [45], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9774214029312134, 1), ('WHERE_COL', ('country', 'region', 46), 0.909660816192627, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9940391778945923, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('IUEN_v2', ('intersect', 1), 0.7633898854255676, 6), ('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.4950128197669983, 8), ('WHERE_COL', ('country', 'continent', 45), 0.8945931196212769, 10), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9632822871208191, 11), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999997615814209, 12)]",
        "logprob": "-1.246088703534099",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 889
    },
    {
        "nl": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
        "true_sql": "select sum ( country.population ) , avg ( country.surfacearea ) where country.continent = value and country.surfacearea > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"North America\"', None], 'and', [False, 3, [0, [0, 12, False], None], 3000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.population",
            ")",
            ",",
            "avg",
            "(",
            "country.population",
            ")",
            "where",
            "country.region",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 49, 4], 8, [17, 5, 49, 4], 6, 46, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.998198070855851, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.8068266163037291, 3), ('WHERE_COL', ('country', 'region', 46), 0.9909380674362183, 5), ('WHERE_OP', (('country', 'region', 46),), ('>', 1), 0.9987809062004089, 6), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('>', 1), 'terminal', 0.9997066855430603, 7)]",
        "logprob": "-0.9592616969402544",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 890
    },
    {
        "nl": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000 .",
        "true_sql": "select sum ( country.population ) , avg ( country.surfacearea ) where country.continent = value and country.surfacearea > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"North America\"', None], 'and', [False, 3, [0, [0, 12, False], None], 3000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.population",
            ")",
            ",",
            "avg",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.region",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 49, 4], 8, [17, 5, 47, 4], 6, 46, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.8971968319256004, 1), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('avg', 5), False, 0.8721448272326631, 3), ('WHERE_COL', ('country', 'region', 46), 0.9615036845207214, 5), ('WHERE_OP', (('country', 'region', 46),), ('>', 1), 0.9999535083770752, 6), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('>', 1), 'terminal', 0.9996722936630249, 7)]",
        "logprob": "-1.0324554356338946",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 891
    },
    {
        "nl": "What are the cities whose population is between 160000 and 900000 ?",
        "true_sql": "select city.name where city.population between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 1, [0, [0, 5, False], None], 160000.0, 900000.0]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "city.population",
            ">",
            "value",
            "and",
            "city.population",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [14], 3, 16, 40, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999580383300781, 1), ('WHERE_COL', ('city', 'population', 40), 0.9999933242797852, 3), ('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.5997626781463623, 4), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('>', 1), 'terminal', 0.9998422861099243, 5), ('WHERE_COL', ('city', 'population', 40), 0.9927592277526855, 7), ('WHERE_OP', (('city', 'population', 40),), ('<', 2), 0.6617227792739868, 8), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('<', 2), 'terminal', 0.985813558101654, 9)]",
        "logprob": "-1.0258910231878364",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 892
    },
    {
        "nl": "Return the names of cities that have a population between 160000 and 900000 .",
        "true_sql": "select city.name where city.population between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 1, [0, [0, 5, False], None], 160000.0, 90000.0]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "city.population",
            ">",
            "value",
            "intersect",
            "select",
            "city.name",
            "where",
            "city.population",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [14], 3, 23, 2, [37], 6, 40, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999969005584717, 1), ('WHERE_COL', ('city', 'population', 40), 0.9999872446060181, 3), ('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.9202907085418701, 4), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('>', 1), 'terminal', 0.9999377727508545, 5), ('IUEN_v2', ('intersect', 1), 0.8272079825401306, 6), ('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999173879623413, 8), ('WHERE_COL', ('city', 'population', 40), 0.9162226319313049, 10), ('WHERE_OP', (('city', 'population', 40),), ('<', 2), 0.612046480178833, 11), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('<', 2), 'terminal', 0.9992461204528809, 12)]",
        "logprob": "-0.852240865196693",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 893
    },
    {
        "nl": "Which language is spoken by the largest number of countries ?",
        "true_sql": "select countrylanguage.language group_by countrylanguage.language order_by count ( countrylanguage.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'countrylanguage.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 10, 59, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999481439590454, 1), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9985077977180481, 3), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9997030798584706, 5), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9941617846488953, 6), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.999944806098938, 7)]",
        "logprob": "-0.01325225544126874",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 894
    },
    {
        "nl": "Give the language that is spoken in the most countries .",
        "true_sql": "select countrylanguage.language group_by countrylanguage.language order_by count ( countrylanguage.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'countrylanguage.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 10, 59, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999974966049194, 1), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9999972581863403, 3), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9994943069382061, 5), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9980112314224243, 6), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.9999293088912964, 7)]",
        "logprob": "-0.00427940479478226",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 895
    },
    {
        "nl": "What is the language spoken by the largest percentage of people in each country ?",
        "true_sql": "select countrylanguage.language , countrylanguage.countrycode , max ( countrylanguage.percentage ) group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "countrylanguage.language",
            ",",
            "count",
            "(",
            "country.*",
            ")",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 8, [9, 5, 64, 4], 10, 59, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999594688415527, 1), ('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9859494965517348, 3), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.99994957447052, 5), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9996083395756356, 7), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9920077323913574, 8), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.9987056255340576, 9)]",
        "logprob": "-0.11868998211571397",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 896
    },
    {
        "nl": "What are the country codes of the different countries , and what are the languages spoken by the greatest percentage of people for each ?",
        "true_sql": "select countrylanguage.language , countrylanguage.countrycode , max ( countrylanguage.percentage ) group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            ",",
            "count",
            "(",
            "country.*",
            ")",
            "group_by",
            "country.code",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [9, 5, 64, 4], 10, 43, 11, [9, 5, 64, 4], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.989983081817627, 1), ('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9102326751152726, 3), ('GROUP_COL', ('country', 'code', 43), 0.8926722407341003, 5), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9966556781896834, 7), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.992226243019104, 8)]",
        "logprob": "-1.00552359622908",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 897
    },
    {
        "nl": "What is the total number of countries where Spanish is spoken by the largest percentage of people ?",
        "true_sql": "select count ( countrylanguage.* ) , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Spanish\"', None]], 'extracted_clause_asterisk': {'select': 'countrylanguage.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 59, [7], 3, 10, 59, 11, [9, 5, 64, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9996719997841165, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9003911018371582, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999890327453613, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999716281890869, 5), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9962150454521179, 7), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9995030127545085, 9), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.999495267868042, 10), ('ORDER_LIMIT', (('country', '*', 64), ('count', 3), False), 'limit_value', 0.9942507743835449, 11)]",
        "logprob": "-0.17112802303608954",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 898
    },
    {
        "nl": "Count the number of countries for which Spanish is the predominantly spoken language .",
        "true_sql": "select count ( countrylanguage.* ) , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Spanish\"', None]], 'extracted_clause_asterisk': {'select': 'countrylanguage.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "country.*",
            ")",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 46, [7], 3, 10, 59, 11, [9, 5, 64, 4], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998487815090477, 1), ('WHERE_COL', ('country', 'region', 46), 0.8777979612350464, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9998219609260559, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999984502792358, 5), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9998341798782349, 7), ('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998678338376903, 9), ('ORDER_DESC_ASC', (('country', '*', 64), ('count', 3), False), 'desc', 0.9994080066680908, 10)]",
        "logprob": "-0.5586848360500763",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 899
    },
    {
        "nl": "What are the codes of countries where Spanish is spoken by the largest percentage of people ?",
        "true_sql": "select countrylanguage.countrycode , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Spanish\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "countrylanguage.percentage",
            "=",
            "(",
            "select",
            "max",
            "(",
            "countrylanguage.percentage",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 61, [7], 5, 2, [19, 5, 61, 4], 6, 59, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.8081420063972473, 1), ('WHERE_COL', ('countrylanguage', 'percentage', 61), 0.45644667744636536, 3), ('WHERE_OP', (('countrylanguage', 'percentage', 61),), ('=', 0), 0.9983932375907898, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'percentage', 61),), ('=', 0), 'root', 0.9914728403091431, 5), ('SELECT_AGG_v2', ('countrylanguage', 'percentage', 61), ('max', 1), False, 0.9944707310232919, 7), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9936699271202087, 9), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999812841415405, 10), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999796152114868, 11), ('O', '##END_NESTED##', 0.8668642640113831, 12)]",
        "logprob": "-1.2451001460386488",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 900
    },
    {
        "nl": "Return the codes of countries for which Spanish is the predominantly spoken language .",
        "true_sql": "select countrylanguage.countrycode , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Spanish\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "country.region",
            "=",
            "value",
            "intersect",
            "select",
            "country.code",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 46, [7], 3, 23, 2, [43], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9964585900306702, 1), ('WHERE_COL', ('country', 'region', 46), 0.6350880265235901, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.999729335308075, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999964237213135, 5), ('IUEN_v2', ('intersect', 1), 0.34680819511413574, 6), ('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9955815672874451, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9995436072349548, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999978542327881, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999994039535522, 12)]",
        "logprob": "-1.5222778518148927",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 901
    },
    {
        "nl": "what are all the addresses including line 1 and line 2 ?",
        "true_sql": "select addresses.line_1 , addresses.line_2",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "addresses.line_1",
            ",",
            "addresses.line_2",
            "where",
            "addresses.line_1",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.98403000831604, 1), ('SELECT_AGG_v2', ('addresses', 'line_2', 38), ('none_agg', 0), False, 0.5135011672973633, 3), ('WHERE_COL', ('addresses', 'line_1', 37), 0.5307270884513855, 5), ('WHERE_OP', (('addresses', 'line_1', 37),), ('=', 0), 0.9964731335639954, 6), ('WHERE_ROOT_TERM', (('addresses', 'line_1', 37),), ('=', 0), 'terminal', 0.9999991655349731, 7)]",
        "logprob": "-1.3281733181406765",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 902
    },
    {
        "nl": "What is the first and second line for all addresses ?",
        "true_sql": "select addresses.line_1 , addresses.line_2",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "addresses.line_1",
            ",",
            "addresses.line_1",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9946534633636475, 1), ('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.5534668564796448, 3)]",
        "logprob": "-0.5992388147274856",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 903
    },
    {
        "nl": "How many courses in total are listed ?",
        "true_sql": "select count ( courses.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'courses.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "courses.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 93, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.9065045389025445, 1)]",
        "logprob": "-0.3927597600397309",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 904
    },
    {
        "nl": "How many courses are there ?",
        "true_sql": "select count ( courses.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'courses.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "student_enrolment_courses.course_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 85, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment_courses', 'course_id', 85), ('count', 3), False, 0.8742641476366161, 1)]",
        "logprob": "-0.5375656293029525",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 905
    },
    {
        "nl": "How is the math course described ?",
        "true_sql": "select courses.course_description where courses.course_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"math\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "courses.course_name",
            "where",
            "courses.course_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.8108932375907898, 1), ('WHERE_COL', ('courses', 'course_description', 47), 0.6512500047683716, 3), ('WHERE_OP', (('courses', 'course_description', 47),), ('=', 0), 0.9999524354934692, 4), ('WHERE_ROOT_TERM', (('courses', 'course_description', 47),), ('=', 0), 'terminal', 0.9999817609786987, 5)]",
        "logprob": "-0.6386369618510715",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 906
    },
    {
        "nl": "What are the descriptions for all the math courses ?",
        "true_sql": "select courses.course_description where courses.course_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"math\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "courses.course_description",
            "where",
            "courses.course_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_description', 47), ('none_agg', 0), False, 0.9999475479125977, 1), ('WHERE_COL', ('courses', 'course_name', 46), 0.8852044343948364, 3), ('WHERE_OP', (('courses', 'course_name', 46),), ('=', 0), 0.9999960660934448, 4), ('WHERE_ROOT_TERM', (('courses', 'course_name', 46),), ('=', 0), 'terminal', 0.9999982118606567, 5)]",
        "logprob": "-0.12207327920165795",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 907
    },
    {
        "nl": "What is the zip code of the address in the city Port Chelsea ?",
        "true_sql": "select addresses.zip_postcode where addresses.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Port Chelsea\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "addresses.zip_postcode",
            "where",
            "addresses.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'zip_postcode', 41), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('addresses', 'city', 40), 0.9999990463256836, 3), ('WHERE_OP', (('addresses', 'city', 40),), ('=', 0), 0.9999831914901733, 4), ('WHERE_ROOT_TERM', (('addresses', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.01483071857118914",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 908
    },
    {
        "nl": "What is the zip code for Port Chelsea ?",
        "true_sql": "select addresses.zip_postcode where addresses.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Port Chelsea\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "addresses.zip_postcode",
            "where",
            "addresses.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'zip_postcode', 41), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('addresses', 'city', 40), 0.8945163488388062, 3), ('WHERE_OP', (('addresses', 'city', 40),), ('=', 0), 0.999982476234436, 4), ('WHERE_ROOT_TERM', (('addresses', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.17948425163137513",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 909
    },
    {
        "nl": "Which department offers the most number of degrees ? List department name and id .",
        "true_sql": "select departments.department_name , degree_programs.department_id group_by degree_programs.department_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 19, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "departments.department_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "degree_programs.department_id",
            "order_by",
            "count",
            "(",
            "degree_programs.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [9, 5, 35, 4], 10, 54, 11, [9, 5, 95, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('departments', 'department_name', 50), ('none_agg', 0), False, 0.8914932012557983, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8937681602838826, 3), ('GROUP_COL', ('degree_programs', 'department_id', 54), 0.9998283386230469, 5), ('ORDER_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9803349511047297, 7), ('ORDER_DESC_ASC', (('degree_programs', '*', 95), ('count', 3), False), 'desc', 0.9950214624404907, 8), ('ORDER_LIMIT', (('degree_programs', '*', 95), ('count', 3), False), 'limit_value', 0.9988631010055542, 9)]",
        "logprob": "-0.8580062237033899",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 910
    },
    {
        "nl": "For each department id , what is the name of the department with the most number of degrees ?",
        "true_sql": "select departments.department_name , degree_programs.department_id group_by degree_programs.department_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 19, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "degree_programs.degree_summary_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "degree_programs.department_id",
            "order_by",
            "count",
            "(",
            "degree_programs.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 8, [9, 5, 35, 4], 10, 54, 11, [9, 5, 95, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.5603934526443481, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7817472295807053, 3), ('GROUP_COL', ('degree_programs', 'department_id', 54), 0.9999985694885254, 5), ('ORDER_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9739012678251396, 7), ('ORDER_DESC_ASC', (('degree_programs', '*', 95), ('count', 3), False), 'desc', 0.9991269707679749, 8), ('ORDER_LIMIT', (('degree_programs', '*', 95), ('count', 3), False), 'limit_value', 0.9996125102043152, 9)]",
        "logprob": "-1.7203411642575304",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 911
    },
    {
        "nl": "How many departments offer any degree ?",
        "true_sql": "select count ( distinct degree_programs.department_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 19, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "degree_programs.*",
            ")",
            "where",
            "degree_programs.degree_program_id",
            "not",
            "in",
            "(",
            "select",
            "degree_programs.department_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 95, 4], 6, 53, [22, 20], 5, 2, [54], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9069262557638306, 1), ('WHERE_COL', ('degree_programs', 'degree_program_id', 53), 0.5380321741104126, 3), ('WHERE_OP', (('degree_programs', 'degree_program_id', 53),), ('not in', 7), 0.9987100580354706, 4), ('WHERE_ROOT_TERM', (('degree_programs', 'degree_program_id', 53),), ('not in', 7), 'root', 0.9999724626541138, 5), ('SELECT_AGG_v2', ('degree_programs', 'department_id', 54), ('none_agg', 0), False, 0.9998878240585327, 7), ('O', '##END_NESTED##', 0.9997225403785706, 8)]",
        "logprob": "-1.0518672096732204",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 912
    },
    {
        "nl": "How many different departments offer degrees ?",
        "true_sql": "select count ( distinct degree_programs.department_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 19, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_programs.department_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'department_id', 54), ('count', 3), True, 0.9994449805873155, 1)]",
        "logprob": "-0.0028256981835012417",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 913
    },
    {
        "nl": "How many different degree names are offered ?",
        "true_sql": "select count ( distinct degree_programs.degree_summary_name )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 20, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_programs.degree_summary_name",
            ")",
            ",",
            "degree_programs.degree_summary_name",
            "group_by",
            "degree_programs.degree_summary_name",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 55, 4], 8, [55], 10, 55, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('count', 3), True, 0.9994926993614625, 1), ('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.9880191683769226, 3), ('GROUP_COL', ('degree_programs', 'degree_summary_name', 55), 0.9988927245140076, 5)]",
        "logprob": "-0.6861581949285853",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 914
    },
    {
        "nl": "How many different degrees are offered ?",
        "true_sql": "select count ( distinct degree_programs.degree_summary_name )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 20, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_programs.degree_summary_name",
            ")",
            ",",
            "degree_programs.degree_summary_name",
            "group_by",
            "degree_programs.degree_summary_name",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 55, 4], 8, [55], 10, 55, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('count', 3), True, 0.9560683119809447, 1), ('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.8216665983200073, 3), ('GROUP_COL', ('degree_programs', 'degree_summary_name', 55), 0.9438134431838989, 5)]",
        "logprob": "-0.702579999736899",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 915
    },
    {
        "nl": "How many degrees does the engineering department offer ?",
        "true_sql": "select count ( * ) where departments.department_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 19, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"engineer\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "degree_programs.*",
            ")",
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "value",
            ",",
            "departments.department_name",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 95, 4], 6, 55, [7], 3, 8, 50, [1]]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9271455369012652, 1), ('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.861596405506134, 3), ('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999582767486572, 4), ('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999991655349731, 5), ('WHERE_COL', ('departments', 'department_name', 50), 0.5311142206192017, 7)]",
        "logprob": "-2.248613794156395",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 916
    },
    {
        "nl": "How many degrees does the engineering department have ?",
        "true_sql": "select count ( * ) where departments.department_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 19, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"engineer\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "degree_programs.*",
            ")",
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 95, 4], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.964652290145816, 1), ('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.5123459100723267, 3), ('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999918937683105, 4), ('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.813696074325004",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 917
    },
    {
        "nl": "What are the names and descriptions of all the sections ?",
        "true_sql": "select sections.section_name , sections.section_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sections.section_name",
            ",",
            "sections.section_description",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [61], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9983254075050354, 1), ('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9942969679832458, 3)]",
        "logprob": "-0.007570126721349036",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 918
    },
    {
        "nl": "What are the names and descriptions for all the sections ?",
        "true_sql": "select sections.section_name , sections.section_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sections.section_name",
            ",",
            "sections.section_description",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [61], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9925116300582886, 1), ('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9755358099937439, 3)]",
        "logprob": "-0.03246748284768146",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 919
    },
    {
        "nl": "What are the names and id of courses having at most 2 sections ?",
        "true_sql": "select courses.course_name , courses.course_id group_by courses.course_id having count ( * ) < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 24, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 4]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 6, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "courses.course_name",
            ",",
            "sections.section_name",
            "group_by",
            "sections.section_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [60], 10, 58, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9998800754547119, 1), ('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.844878613948822, 3), ('GROUP_COL', ('sections', 'section_id', 58), 0.9007537364959717, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9924366238955096, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9917967317775171, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999943971633911, 9)]",
        "logprob": "-0.331816849480763",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 920
    },
    {
        "nl": "What are the names and ids of every course with less than 2 sections ?",
        "true_sql": "select courses.course_name , courses.course_id group_by courses.course_id having count ( * ) < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 24, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 4]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 6, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "courses.course_name",
            ",",
            "sections.course_id",
            "where",
            "sections.course_id",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [59], 6, 59, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9929352402687073, 1), ('SELECT_AGG_v2', ('sections', 'course_id', 59), ('none_agg', 0), False, 0.344631552696228, 3), ('WHERE_COL', ('sections', 'course_id', 59), 0.6356346011161804, 5), ('WHERE_OP', (('sections', 'course_id', 59),), ('<', 2), 0.38404664397239685, 6), ('WHERE_ROOT_TERM', (('sections', 'course_id', 59),), ('<', 2), 'terminal', 0.9991961121559143, 7)]",
        "logprob": "-2.65690142886122",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 921
    },
    {
        "nl": "List the section_name in reversed lexicographical order .",
        "true_sql": "select sections.section_name order_by sections.section_name desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 25, False], None]]], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sections.section_name",
            "order_by",
            "sections.section_name",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 11, [60], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.999997615814209, 1), ('ORDER_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9569721221923828, 3), ('ORDER_DESC_ASC', (('sections', 'section_name', 60), ('none_agg', 0), False), 'asc', 0.5003849267959595, 4)]",
        "logprob": "-0.7427638208970361",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 922
    },
    {
        "nl": "What are the names of the sections in reverse alphabetical order ?",
        "true_sql": "select sections.section_name order_by sections.section_name desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 25, False], None]]], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sections.section_name",
            "order_by",
            "sections.section_name",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 11, [60], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9607523083686829, 3)]",
        "logprob": "-0.30689271961196957",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 923
    },
    {
        "nl": "What is the semester which most student registered in ? Show both the name and the id .",
        "true_sql": "select semesters.semester_name , semesters.semester_id group_by semesters.semester_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 28, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [[0, 28, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 29, False], None]], [0, [0, [0, 28, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "semesters.semester_name",
            ",",
            "students.last_name",
            "order_by",
            "student_enrolment.semester_id",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 8, [72], 11, [81], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9977915287017822, 1), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9317330718040466, 3), ('ORDER_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.7777912020683289, 5), ('ORDER_DESC_ASC', (('student_enrolment', 'semester_id', 81), ('none_agg', 0), False), 'asc', 0.6511898636817932, 6), ('ORDER_LIMIT', (('student_enrolment', 'semester_id', 81), ('none_agg', 0), False), 'limit_value', 0.9989603757858276, 7)]",
        "logprob": "-1.1502514970612776",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 924
    },
    {
        "nl": "For each semester , what is the name and id of the one with the most students registered ?",
        "true_sql": "select semesters.semester_name , semesters.semester_id group_by semesters.semester_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 28, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [[0, 28, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 29, False], None]], [0, [0, [0, 28, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.last_name",
            "group_by",
            "student_enrolment.semester_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [72], 10, 81, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.8308659791946411, 1), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.7796658873558044, 3), ('GROUP_COL', ('student_enrolment', 'semester_id', 81), 0.7734244465827942, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9912164320225446, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9977940320968628, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998763799667358, 9)]",
        "logprob": "-1.0550175241771154",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 925
    },
    {
        "nl": "What is the description of the department whose name has the substring the computer ?",
        "true_sql": "select departments.department_description where departments.department_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 15, False], None], '\"%computer%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "departments.department_description",
            "where",
            "departments.department_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('departments', 'department_description', 51), ('none_agg', 0), False, 0.9986212253570557, 1), ('WHERE_COL', ('departments', 'department_name', 50), 0.7498917579650879, 3), ('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.953011691570282, 4), ('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.33766175461959647",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 926
    },
    {
        "nl": "What is the department description for the one whose name has the word computer ?",
        "true_sql": "select departments.department_description where departments.department_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 15, False], None], '\"%computer%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "departments.department_description",
            "where",
            "departments.department_name",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 50, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('departments', 'department_description', 51), ('none_agg', 0), False, 0.9764018654823303, 1), ('WHERE_COL', ('departments', 'department_name', 50), 0.9910274147987366, 3), ('WHERE_OP', (('departments', 'department_name', 50),), ('like', 6), 0.998376727104187, 4), ('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('like', 6), 'terminal', 0.9999963045120239, 5)]",
        "logprob": "-0.03474433008728162",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 927
    },
    {
        "nl": "Who are enrolled in 2 degree programs in one semester ? List the first name , middle name and last name and the id .",
        "true_sql": "select students.first_name , students.middle_name , students.last_name , students.student_id group_by students.student_id having count ( * ) = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 32, False]], 'having': [[False, 2, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.47564512491226196, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.802250862121582, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.8877654671669006, 5)]",
        "logprob": "-1.1232548774010218",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 928
    },
    {
        "nl": "What are the first , middle , and last names , along with the ids , of all students who enrolled in 2 degree programs in one semester ?",
        "true_sql": "select students.first_name , students.middle_name , students.last_name , students.student_id group_by students.student_id having count ( * ) = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 32, False]], 'having': [[False, 2, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.7676355838775635, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9268971085548401, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9127100110054016, 5)]",
        "logprob": "-0.923954567750954",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 929
    },
    {
        "nl": "Who is enrolled in a Bachelor degree program ? List the first name , middle name , last name .",
        "true_sql": "select distinct students.first_name , students.middle_name , students.last_name where degree_programs.degree_summary_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Bachelor\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9950436353683472, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9243193864822388, 3), ('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.798660397529602, 5), ('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999650716781616, 6), ('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999990463256836, 7)]",
        "logprob": "-0.4198877990419956",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 930
    },
    {
        "nl": "What are the first , middle , and last names for everybody enrolled in a Bachelors program ?",
        "true_sql": "select distinct students.first_name , students.middle_name , students.last_name where degree_programs.degree_summary_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Bachelor\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.5409802198410034, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.7071250081062317, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9988811612129211, 5), ('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.825424313545227, 7), ('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999964237213135, 8), ('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999988079071045, 9)]",
        "logprob": "-1.1684573500627637",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 931
    },
    {
        "nl": "Find the kind of program which most number of students are enrolled in ?",
        "true_sql": "select degree_programs.degree_summary_name group_by degree_programs.degree_summary_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 20, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.student_id",
            "group_by",
            "student_enrolment.student_id",
            "order_by",
            "count",
            "(",
            "student_enrolment.student_id",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [67], 10, 82, 11, [9, 5, 82, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.3627891540527344, 1), ('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.5632079839706421, 3), ('ORDER_AGG_v2', ('student_enrolment', 'student_id', 82), ('count', 3), False, 0.7237598341082212, 5), ('ORDER_DESC_ASC', (('student_enrolment', 'student_id', 82), ('count', 3), False), 'desc', 0.9988705515861511, 6), ('ORDER_LIMIT', (('student_enrolment', 'student_id', 82), ('count', 3), False), 'limit_value', 0.9999597072601318, 7)]",
        "logprob": "-2.8825748283278134",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 932
    },
    {
        "nl": "What is the degree summary name that has the most number of students enrolled ?",
        "true_sql": "select degree_programs.degree_summary_name group_by degree_programs.degree_summary_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 20, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "degree_programs.degree_summary_name",
            "group_by",
            "student_enrolment_courses.student_enrolment_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 10, 86, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.9999997615814209, 1), ('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.5571854710578918, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7931365744696688, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9995800852775574, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999551773071289, 7)]",
        "logprob": "-1.5126174691135708",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 933
    },
    {
        "nl": "Find the program which most number of students are enrolled in . List both the id and the summary .",
        "true_sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name group_by degree_programs.degree_program_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 18, False], None]], [0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student_enrolment.student_id",
            ",",
            "count",
            "(",
            "student_enrolment_courses.*",
            ")",
            "group_by",
            "student_enrolment.student_id",
            "order_by",
            "count",
            "(",
            "student_enrolment_courses.student_course_id",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [82], 8, [9, 5, 100, 4], 10, 82, 11, [9, 5, 84, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.5528778433799744, 1), ('SELECT_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.8066266526052635, 3), ('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.9703555107116699, 5), ('ORDER_AGG_v2', ('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False, 0.7582182365567517, 7), ('ORDER_DESC_ASC', (('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False), 'desc', 0.9993937015533447, 8), ('ORDER_LIMIT', (('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False), 'limit_value', 0.9995757937431335, 9)]",
        "logprob": "-2.6035293790530583",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 934
    },
    {
        "nl": "What is the program id and the summary of the degree that has the most students enrolled ?",
        "true_sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name group_by degree_programs.degree_program_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 18, False], None]], [0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student_enrolment.degree_program_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "student_enrolment.degree_program_id",
            "order_by",
            "count",
            "(",
            "student_enrolment_courses.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [80], 8, [9, 5, 35, 4], 10, 80, 11, [9, 5, 100, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment', 'degree_program_id', 80), ('none_agg', 0), False, 0.8972229957580566, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8110982551720645, 3), ('GROUP_COL', ('student_enrolment', 'degree_program_id', 80), 0.9708538055419922, 5), ('ORDER_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.8643078548496907, 7), ('ORDER_DESC_ASC', (('student_enrolment_courses', '*', 100), ('count', 3), False), 'desc', 0.9989601373672485, 8), ('ORDER_LIMIT', (('student_enrolment_courses', '*', 100), ('count', 3), False), 'limit_value', 0.9991298317909241, 9)]",
        "logprob": "-1.6601332941254798",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 935
    },
    {
        "nl": "Which student has enrolled for the most times in any program ? List the id , first name , middle name , last name , the number of enrollments and student id .",
        "true_sql": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id group_by students.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 32, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 32, False], None]], [0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [3, [0, [0, 0, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*', 'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student_enrolment.student_id",
            ",",
            "students.middle_name",
            ",",
            "count",
            "(",
            "student_enrolment_courses.*",
            ")",
            "group_by",
            "student_enrolment.student_id",
            "order_by",
            "count",
            "(",
            "student_enrolment_courses.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [82], 8, [71], 8, [9, 5, 100, 4], 10, 82, 11, [9, 5, 100, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.3954286575317383, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8524408936500549, 3), ('SELECT_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.9588786024018092, 5), ('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.9982049465179443, 7), ('ORDER_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.8461975093745947, 9), ('ORDER_DESC_ASC', (('student_enrolment_courses', '*', 100), ('count', 3), False), 'desc', 0.7943103909492493, 10), ('ORDER_LIMIT', (('student_enrolment_courses', '*', 100), ('count', 3), False), 'limit_value', 0.976081907749176, 11)]",
        "logprob": "-2.383524375500153",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 936
    },
    {
        "nl": "What is the first , middle , and last name , along with the id and number of enrollments , for the student who enrolled the most in any program ?",
        "true_sql": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id group_by students.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 32, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 32, False], None]], [0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [3, [0, [0, 0, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*', 'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "group_by",
            "student_enrolment.student_id",
            "order_by",
            "count",
            "(",
            "student_enrolment_courses.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 10, 82, 11, [9, 5, 100, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9376150965690613, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9413893818855286, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.8109724521636963, 5), ('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.6874604225158691, 7), ('ORDER_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.9295536145648967, 9), ('ORDER_DESC_ASC', (('student_enrolment_courses', '*', 100), ('count', 3), False), 'desc', 0.7151854038238525, 10), ('ORDER_LIMIT', (('student_enrolment_courses', '*', 100), ('count', 3), False), 'limit_value', 0.9993327260017395, 11)]",
        "logprob": "-1.5856359544678003",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 937
    },
    {
        "nl": "Which semesters do not have any student enrolled ? List the semester name .",
        "true_sql": "select semesters.semester_name where semesters.semester_id not in ( select student_enrolment.semester_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 29, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 28, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "semesters.semester_name",
            "where",
            "semesters.semester_id",
            "not",
            "in",
            "(",
            "select",
            "student_enrolment_courses.student_enrolment_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 6, 63, [22, 20], 5, 2, [86], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9999997615814209, 1), ('WHERE_COL', ('semesters', 'semester_id', 63), 0.5393677949905396, 3), ('WHERE_OP', (('semesters', 'semester_id', 63),), ('not in', 7), 0.9997445857071637, 4), ('WHERE_ROOT_TERM', (('semesters', 'semester_id', 63),), ('not in', 7), 'root', 0.9999933242797852, 5), ('SELECT_AGG_v2', ('student_enrolment_courses', 'student_enrolment_id', 86), ('none_agg', 0), False, 0.9906110167503357, 7), ('O', '##END_NESTED##', 0.9999619722366333, 8)]",
        "logprob": "-0.628076265740635",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 938
    },
    {
        "nl": "What is the name of the semester with no students enrolled ?",
        "true_sql": "select semesters.semester_name where semesters.semester_id not in ( select student_enrolment.semester_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 29, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 28, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "semesters.semester_name",
            "except",
            "select",
            "semesters.semester_name",
            "where",
            "students.student_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 28, 2, [64], 6, 67, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 1.0, 1), ('IUEN_v2', ('except', 3), 0.5961119532585144, 2), ('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9987828135490417, 4), ('WHERE_COL', ('students', 'student_id', 67), 0.601869523525238, 6), ('WHERE_OP', (('students', 'student_id', 67),), ('=', 0), 0.988744854927063, 7), ('WHERE_ROOT_TERM', (('students', 'student_id', 67),), ('=', 0), 'terminal', 0.9999904632568359, 8)]",
        "logprob": "-1.1894146276949906",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 939
    },
    {
        "nl": "What are all the course names of the courses which ever have students enrolled in ?",
        "true_sql": "select distinct courses.course_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 8]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "courses.course_name",
            "where",
            "students.first_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 70, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9992586970329285, 1), ('WHERE_COL', ('students', 'first_name', 70), 0.8331891894340515, 3), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.8627257943153381, 4), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999973773956299, 5)]",
        "logprob": "-0.36229735804909263",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 940
    },
    {
        "nl": "What are the names of all courses that have some students enrolled ?",
        "true_sql": "select distinct courses.course_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 8]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "courses.course_name",
            "group_by",
            "student_enrolment.student_id",
            "order_by",
            "count",
            "(",
            "student_enrolment_courses.student_course_id",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 10, 82, 11, [9, 5, 84, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999961853027344, 1), ('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.5822775959968567, 3), ('ORDER_AGG_v2', ('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False, 0.8578772341292481, 5), ('ORDER_DESC_ASC', (('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False), 'desc', 0.8962492346763611, 6), ('ORDER_LIMIT', (('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False), 'limit_value', 0.9998005032539368, 7)]",
        "logprob": "-1.5393094748440956",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 941
    },
    {
        "nl": "What 's the name of the course with most number of enrollments ?",
        "true_sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 8]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "courses.course_name",
            "group_by",
            "student_enrolment_courses.student_enrolment_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 10, 86, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999982118606567, 1), ('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.46765410900115967, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.995966174649354, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997802376747131, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999243021011353, 7)]",
        "logprob": "-0.7914649959899712",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 942
    },
    {
        "nl": "What is the name of the course with the most students enrolled ?",
        "true_sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 8]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "courses.course_name",
            "group_by",
            "student_enrolment.student_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 10, 82, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999964237213135, 1), ('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.6325721740722656, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8101517695502966, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997109770774841, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999462366104126, 7)]",
        "logprob": "-1.3013323733714857",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 943
    },
    {
        "nl": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program .",
        "true_sql": "select students.last_name where addresses.state_province_county = value except select distinct students.last_name",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 37, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 37, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"NorthCarolina\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.last_name",
            "where",
            "students.permanent_address_id",
            "=",
            "value",
            "except",
            "select",
            "students.last_name",
            "where",
            "addresses.state_province_county",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [72], 6, 69, [7], 3, 28, 2, [72], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9999459981918335, 1), ('WHERE_COL', ('students', 'permanent_address_id', 69), 0.7109971046447754, 3), ('WHERE_OP', (('students', 'permanent_address_id', 69),), ('=', 0), 0.87563157081604, 4), ('WHERE_ROOT_TERM', (('students', 'permanent_address_id', 69),), ('=', 0), 'terminal', 0.9999951124191284, 5), ('IUEN_v2', ('except', 3), 0.6125680804252625, 6), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9787307381629944, 8), ('WHERE_COL', ('addresses', 'state_province_county', 42), 0.8395124077796936, 10), ('WHERE_OP', (('addresses', 'state_province_county', 42),), ('=', 0), 0.9999902248382568, 11), ('WHERE_ROOT_TERM', (('addresses', 'state_province_county', 42),), ('=', 0), 'terminal', 0.9999996423721313, 12)]",
        "logprob": "-1.1611379701846356",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 944
    },
    {
        "nl": "What are the last name of the students who live in North Carolina but have not registered in any degree programs ?",
        "true_sql": "select students.last_name where addresses.state_province_county = value except select distinct students.last_name",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 37, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 37, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"NorthCarolina\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.last_name",
            "where",
            "students.permanent_address_id",
            "=",
            "value",
            "except",
            "select",
            "students.last_name",
            "where",
            "addresses.state_province_county",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [72], 6, 69, [7], 3, 28, 2, [72], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9999957084655762, 1), ('WHERE_COL', ('students', 'permanent_address_id', 69), 0.7254921197891235, 3), ('WHERE_OP', (('students', 'permanent_address_id', 69),), ('=', 0), 0.9817401170730591, 4), ('WHERE_ROOT_TERM', (('students', 'permanent_address_id', 69),), ('=', 0), 'terminal', 0.9999971389770508, 5), ('IUEN_v2', ('except', 3), 0.37098872661590576, 6), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9905085563659668, 8), ('WHERE_COL', ('addresses', 'state_province_county', 42), 0.9398236870765686, 10), ('WHERE_OP', (('addresses', 'state_province_county', 42),), ('=', 0), 0.9999958276748657, 11), ('WHERE_ROOT_TERM', (('addresses', 'state_province_county', 42),), ('=', 0), 'terminal', 0.9999995231628418, 12)]",
        "logprob": "-1.4033620626087433",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 945
    },
    {
        "nl": "Show the date and id of the transcript with at least 2 course results .",
        "true_sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]], 'table_units': [['table_unit', 10], ['table_unit', 9]]}, 'groupBy': [[0, 56, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "group_by",
            "transcripts.transcript_date",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [91], 10, 88, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999929666519165, 1), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.5834797620773315, 3), ('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9998371601104736, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999838636237986, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9987808306542207, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999901056289673, 9)]",
        "logprob": "-0.5455640161041402",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 946
    },
    {
        "nl": "What is the date and id of the transcript with at least 2 courses listed ?",
        "true_sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]], 'table_units': [['table_unit', 10], ['table_unit', 9]]}, 'groupBy': [[0, 56, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "group_by",
            "transcripts.transcript_date",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [91], 10, 88, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999709129333496, 1), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.7020934820175171, 3), ('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9995445609092712, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9997649203522071, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9984123778660567, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999891519546509, 9)]",
        "logprob": "-0.361239733020979",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 947
    },
    {
        "nl": "What is the phone number of the man with the first name Timmothy and the last name Ward ?",
        "true_sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 35, False], None], '\"Timmothy\"', None], 'and', [False, 2, [0, [0, 37, False], None], '\"Ward\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "addresses.line_1",
            "where",
            "students.first_name",
            "=",
            "value",
            "and",
            "students.last_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 70, [7], 3, 16, 72, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.5360240936279297, 1), ('WHERE_COL', ('students', 'first_name', 70), 0.9965910911560059, 3), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9998785257339478, 4), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.999998927116394, 5), ('WHERE_COL', ('students', 'last_name', 72), 0.7931225895881653, 7), ('WHERE_OP', (('students', 'last_name', 72),), ('=', 0), 0.999530553817749, 8), ('WHERE_ROOT_TERM', (('students', 'last_name', 72),), ('=', 0), 'terminal', 0.9999955892562866, 9)]",
        "logprob": "-1.0617230869731065",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 948
    },
    {
        "nl": "What is the mobile phone number of the student named Timothy Ward ?",
        "true_sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 35, False], None], '\"Timmothy\"', None], 'and', [False, 2, [0, [0, 37, False], None], '\"Ward\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.cell_mobile_number",
            "where",
            "students.first_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [73], 6, 70, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'cell_mobile_number', 73), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('students', 'first_name', 70), 0.9971137046813965, 3), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9999955892562866, 4), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.08385557528689497",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 949
    },
    {
        "nl": "Who is the first student to register ? List the first name , middle name and last name .",
        "true_sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_first_registered asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 41, False], None]]], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "order_by",
            "students.date_first_registered",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 11, [76], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9998651742935181, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9906132221221924, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9851566553115845, 5), ('ORDER_AGG_v2', ('students', 'date_first_registered', 76), ('none_agg', 0), False, 0.6772387027740479, 7), ('ORDER_LIMIT', (('students', 'date_first_registered', 76), ('none_agg', 0), False), 'limit_value', 0.3757118880748749, 8)]",
        "logprob": "-1.5417579554496719",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 950
    },
    {
        "nl": "What is the first , middle , and last name of the first student to register ?",
        "true_sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_first_registered asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 41, False], None]]], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9726476073265076, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8274007439613342, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9987962245941162, 5)]",
        "logprob": "-0.4890728094082959",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 951
    },
    {
        "nl": "Who is the earliest graduate of the school ? List the first name , middle name and last name .",
        "true_sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_left asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 42, False], None]]], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            "order_by",
            "students.date_left",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 11, [77], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9931623935699463, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9610492587089539, 3), ('ORDER_AGG_v2', ('students', 'date_left', 77), ('none_agg', 0), False, 0.6120097041130066, 5), ('ORDER_LIMIT', (('students', 'date_left', 77), ('none_agg', 0), False), 'limit_value', 0.9342870116233826, 6)]",
        "logprob": "-0.6188462669727697",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 952
    },
    {
        "nl": "What is the first , middle , and last name of the earliest school graduate ?",
        "true_sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_left asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 42, False], None]]], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "where",
            "students.first_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 6, 70, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.6893364191055298, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8512394428253174, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9887456297874451, 5), ('WHERE_COL', ('students', 'first_name', 70), 0.6616439819335938, 7), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9999676942825317, 8), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.8213087916374207, 9)]",
        "logprob": "-1.91778006625048",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 953
    },
    {
        "nl": "Whose permanent address is different from his or her current address ? List his or her first name .",
        "true_sql": "select students.first_name where students.current_address_id != students.permanent_address_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 33, False], None], [0, 34, False], None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "addresses.line_1",
            ",",
            "addresses.line_1",
            "where",
            "students.first_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 8, [37], 6, 70, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.5690496563911438, 2), ('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.7932829856872559, 4), ('WHERE_COL', ('students', 'first_name', 70), 0.9805123805999756, 6), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.999790608882904, 7), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999979734420776, 8)]",
        "logprob": "-1.630488580704148",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 954
    },
    {
        "nl": "What is the first name of the student whose permanent address is different from his or her current one ?",
        "true_sql": "select students.first_name where students.current_address_id != students.permanent_address_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 33, False], None], [0, 34, False], None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            "where",
            "students.first_name",
            "=",
            "value",
            "or",
            "students.last_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 6, 70, [7], 3, 25, 72, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9893813133239746, 1), ('WHERE_COL', ('students', 'first_name', 70), 0.4342757761478424, 3), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9987019300460815, 4), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999886751174927, 5), ('WHERE_COL', ('students', 'last_name', 72), 0.8583382964134216, 7), ('WHERE_OP', (('students', 'last_name', 72),), ('=', 0), 0.9987279772758484, 8), ('WHERE_ROOT_TERM', (('students', 'last_name', 72),), ('=', 0), 'terminal', 0.999937891960144, 9)]",
        "logprob": "-1.421939494069979",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 955
    },
    {
        "nl": "Which address holds the most number of students currently ? List the address id and all lines .",
        "true_sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 group_by addresses.address_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 33, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 6]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.current_address_id",
            ",",
            "count",
            "(",
            "addresses.*",
            ")",
            "group_by",
            "addresses.address_id",
            "order_by",
            "count",
            "(",
            "addresses.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [68], 8, [9, 5, 92, 4], 10, 36, 11, [9, 5, 92, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('none_agg', 0), False, 0.9451921582221985, 1), ('SELECT_AGG_v2', ('addresses', '*', 92), ('count', 3), False, 0.9992517624777353, 3), ('GROUP_COL', ('addresses', 'address_id', 36), 0.6181381940841675, 5), ('ORDER_AGG_v2', ('addresses', '*', 92), ('count', 3), False, 0.9988112075524552, 7), ('ORDER_DESC_ASC', (('addresses', '*', 92), ('count', 3), False), 'desc', 0.9963966012001038, 8), ('ORDER_LIMIT', (('addresses', '*', 92), ('count', 3), False), 'limit_value', 0.9991679191589355, 9)]",
        "logprob": "-0.5583179022112733",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 956
    },
    {
        "nl": "What is the id , line 1 , and line 2 of the address with the most students ?",
        "true_sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 group_by addresses.address_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 33, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 6]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "addresses.line_1",
            ",",
            "addresses.line_1",
            ",",
            "count",
            "(",
            "students.*",
            ")",
            "group_by",
            "addresses.address_id",
            "order_by",
            "count",
            "(",
            "students.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 8, [9, 5, 98, 4], 10, 36, 11, [9, 5, 98, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.8763805031776428, 1), ('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9587371945381165, 3), ('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.7548614025086721, 5), ('GROUP_COL', ('addresses', 'address_id', 36), 0.6526528000831604, 7), ('ORDER_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.9801014494731709, 9), ('ORDER_DESC_ASC', (('students', '*', 98), ('count', 3), False), 'desc', 0.9987132549285889, 10), ('ORDER_LIMIT', (('students', '*', 98), ('count', 3), False), 'limit_value', 0.9989452958106995, 11)]",
        "logprob": "-2.160725728395203",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 957
    },
    {
        "nl": "On average , when were the transcripts printed ?",
        "true_sql": "select avg ( transcripts.transcript_date )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 53, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "transcripts.transcript_date",
            ")",
            ",",
            "transcript_contents.transcript_id",
            "group_by",
            "transcripts.transcript_id",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 88, 4], 8, [91], 10, 87, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.9973815582808822, 1), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.4476667642593384, 3), ('GROUP_COL', ('transcripts', 'transcript_id', 87), 0.5241849422454834, 5)]",
        "logprob": "-1.472026331803505",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 958
    },
    {
        "nl": "What is the average transcript date ?",
        "true_sql": "select avg ( transcripts.transcript_date )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 53, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "transcripts.transcript_date",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 88, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.9966638167035118, 1)]",
        "logprob": "-0.07114195190624639",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 959
    },
    {
        "nl": "When is the first transcript released ? List the date and details .",
        "true_sql": "select transcripts.transcript_date , transcripts.other_details order_by transcripts.transcript_date asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 53, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 54, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcripts.other_details",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [89], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999997615814209, 1), ('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.9991855025291443, 3)]",
        "logprob": "-0.6990181249342161",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 960
    },
    {
        "nl": "What is the earliest date of a transcript release , and what details can you tell me ?",
        "true_sql": "select transcripts.transcript_date , transcripts.other_details order_by transcripts.transcript_date asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 53, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 54, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcripts.other_details",
            ",",
            "transcripts.other_details",
            "order_by",
            "semesters.other_details",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [89], 8, [89], 11, [66], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.9589038491249084, 3), ('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.5652170777320862, 5), ('ORDER_AGG_v2', ('semesters', 'other_details', 66), ('none_agg', 0), False, 0.8099979162216187, 7), ('ORDER_LIMIT', (('semesters', 'other_details', 66), ('none_agg', 0), False), 'limit_value', 0.8065506815910339, 8)]",
        "logprob": "-2.2828880354373737",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 961
    },
    {
        "nl": "How many transcripts are released ?",
        "true_sql": "select count ( transcripts.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'transcripts.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "transcripts.transcript_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 87, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), False, 0.9936445087399859, 1)]",
        "logprob": "-0.03269257947303403",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 962
    },
    {
        "nl": "How many transcripts are listed ?",
        "true_sql": "select count ( transcripts.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'transcripts.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "transcripts.transcript_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 87, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), False, 0.9914080285448305, 1)]",
        "logprob": "-0.03459661202707625",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 963
    },
    {
        "nl": "What is the last transcript release date ?",
        "true_sql": "select transcripts.transcript_date order_by transcripts.transcript_date desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 53, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            "where",
            "transcripts.transcript_id",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 6, 87, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999291896820068, 1), ('WHERE_COL', ('transcripts', 'transcript_id', 87), 0.5902665257453918, 3), ('WHERE_OP', (('transcripts', 'transcript_id', 87),), ('=', 0), 0.9992386102676392, 4), ('WHERE_ROOT_TERM', (('transcripts', 'transcript_id', 87),), ('=', 0), 'terminal', 0.9979135394096375, 5)]",
        "logprob": "-0.6940815819598232",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 964
    },
    {
        "nl": "When was the last transcript released ?",
        "true_sql": "select transcripts.transcript_date order_by transcripts.transcript_date desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 53, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            "where",
            "transcripts.transcript_date",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 6, 88, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9385932683944702, 1), ('WHERE_COL', ('transcripts', 'transcript_date', 88), 0.9738272428512573, 3), ('WHERE_OP', (('transcripts', 'transcript_date', 88),), ('=', 0), 0.9993709921836853, 4), ('WHERE_ROOT_TERM', (('transcripts', 'transcript_date', 88),), ('=', 0), 'terminal', 0.9991304278373718, 5)]",
        "logprob": "-0.21819497134608373",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 965
    },
    {
        "nl": "How many times at most can a course enrollment result show in different transcripts ? Also show the course enrollment id .",
        "true_sql": "select count ( transcript_contents.* ) , transcript_contents.student_course_id group_by transcript_contents.student_course_id order_by count ( transcript_contents.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 10]]}, 'groupBy': [[0, 55, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 55, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'transcript_contents.*', 'order_by': 'transcript_contents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "student_enrolment_courses.course_id",
            ")",
            ",",
            "transcripts.transcript_id",
            "group_by",
            "transcripts.transcript_id",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 85, 4], 8, [87], 10, 87, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment_courses', 'course_id', 85), ('count', 3), False, 0.8304617923557994, 1), ('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('none_agg', 0), False, 0.8648696541786194, 3), ('GROUP_COL', ('transcripts', 'transcript_id', 87), 0.9343543648719788, 5)]",
        "logprob": "-0.9891024094815921",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 966
    },
    {
        "nl": "What is the maximum number of times that a course shows up in different transcripts and what is that course 's enrollment id ?",
        "true_sql": "select count ( transcript_contents.* ) , transcript_contents.student_course_id group_by transcript_contents.student_course_id order_by count ( transcript_contents.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 10]]}, 'groupBy': [[0, 55, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 55, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'transcript_contents.*', 'order_by': 'transcript_contents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "transcripts.transcript_id",
            ")",
            ",",
            "transcripts.transcript_id",
            "group_by",
            "transcripts.transcript_id",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 87, 4], 8, [87], 10, 87, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), True, 0.9384376946705068, 1), ('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('none_agg', 0), False, 0.8970087766647339, 3), ('GROUP_COL', ('transcripts', 'transcript_id', 87), 0.9853357672691345, 5)]",
        "logprob": "-0.4414612974445347",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 967
    },
    {
        "nl": "Show the date of the transcript which shows the least number of results , also list the id .",
        "true_sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id order_by count ( * ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]], 'table_units': [['table_unit', 10], ['table_unit', 9]]}, 'groupBy': [[0, 56, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "transcripts.transcript_date",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [9, 5, 35, 4], 10, 88, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9987115859985352, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8526118549890638, 3), ('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9861708879470825, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9935143854134921, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9334474802017212, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9810557961463928, 9)]",
        "logprob": "-1.0165337587758894",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 968
    },
    {
        "nl": "What is the date and id of the transcript with the least number of results ?",
        "true_sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id order_by count ( * ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]], 'table_units': [['table_unit', 10], ['table_unit', 9]]}, 'groupBy': [[0, 56, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            ",",
            "transcript_contents.transcript_id",
            "group_by",
            "transcripts.transcript_date",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [91], 8, [91], 10, 88, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.6742600798606873, 3), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.4365752339363098, 5), ('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9995146989822388, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9988175478484036, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.8999567031860352, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999562680721283, 11)]",
        "logprob": "-2.0660859671113885",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 969
    },
    {
        "nl": "Find the semester when both Master students and Bachelor students got enrolled in .",
        "true_sql": "select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value intersect select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Bachelor\"', None]]}, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Master\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "semesters.semester_name",
            "where",
            "students.date_first_registered",
            "=",
            "value",
            "intersect",
            "select",
            "student_enrolment.student_id",
            "where",
            "students.date_first_registered",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 6, 76, [7], 3, 23, 2, [82], 6, 76, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.6007562875747681, 1), ('WHERE_COL', ('students', 'date_first_registered', 76), 0.996274471282959, 3), ('WHERE_OP', (('students', 'date_first_registered', 76),), ('=', 0), 0.9994237422943115, 4), ('WHERE_ROOT_TERM', (('students', 'date_first_registered', 76),), ('=', 0), 'terminal', 0.9999978542327881, 5), ('IUEN_v2', ('intersect', 1), 0.592717707157135, 6), ('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.38213372230529785, 8), ('WHERE_COL', ('students', 'date_first_registered', 76), 0.9075170755386353, 10), ('WHERE_OP', (('students', 'date_first_registered', 76),), ('=', 0), 0.9995550513267517, 11), ('WHERE_ROOT_TERM', (('students', 'date_first_registered', 76),), ('=', 0), 'terminal', 0.9999980926513672, 12)]",
        "logprob": "-2.320183680424991",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 970
    },
    {
        "nl": "What is the id of the semester that had both Masters and Bachelors students enrolled ?",
        "true_sql": "select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value intersect select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Bachelor\"', None]]}, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Master\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "student_enrolment.semester_id",
            "where",
            "semesters.semester_name",
            "=",
            "value",
            "intersect",
            "select",
            "student_enrolment.semester_id",
            "where",
            "semesters.semester_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [81], 6, 64, [7], 3, 23, 2, [81], 6, 64, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.8155495524406433, 1), ('WHERE_COL', ('semesters', 'semester_name', 64), 0.3086520731449127, 3), ('WHERE_OP', (('semesters', 'semester_name', 64),), ('=', 0), 0.9999359846115112, 4), ('WHERE_ROOT_TERM', (('semesters', 'semester_name', 64),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.995173990726471, 6), ('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.7765207886695862, 8), ('WHERE_COL', ('semesters', 'semester_name', 64), 0.8203772306442261, 10), ('WHERE_OP', (('semesters', 'semester_name', 64),), ('=', 0), 0.9999887943267822, 11), ('WHERE_ROOT_TERM', (('semesters', 'semester_name', 64),), ('=', 0), 'terminal', 0.9999988079071045, 12)]",
        "logprob": "-1.8457375715935262",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 971
    },
    {
        "nl": "How many different addresses do the students currently live ?",
        "true_sql": "select count ( distinct students.current_address_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 33, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "students.current_address_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 68, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('count', 3), True, 0.9999246532821021, 1)]",
        "logprob": "-0.00039331801155512077",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 972
    },
    {
        "nl": "What are the different addresses that have students living there ?",
        "true_sql": "select count ( distinct students.current_address_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 33, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "students.current_address_id",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [68], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('none_agg', 0), False, 0.8672916889190674, 2)]",
        "logprob": "-0.14989691837161911",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 973
    },
    {
        "nl": "List all the student details in reversed lexicographical order .",
        "true_sql": "select students.other_student_details order_by students.other_student_details desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'select': [False, [[0, [0, [0, 43, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.other_student_details",
            "order_by",
            "students.other_student_details",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [78], 11, [78], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.9979296922683716, 1), ('ORDER_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.8403032422065735, 3), ('ORDER_DESC_ASC', (('students', 'other_student_details', 78), ('none_agg', 0), False), 'desc', 0.6215223670005798, 4)]",
        "logprob": "-0.6525206668824702",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 974
    },
    {
        "nl": "What other details can you tell me about students in reverse alphabetical order ?",
        "true_sql": "select students.other_student_details order_by students.other_student_details desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'select': [False, [[0, [0, [0, 43, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.other_student_details",
            "order_by",
            "students.other_student_details",
            "_EOS"
        ],
        "dec_seq": "[2, [78], 11, [78], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.9942895174026489, 1), ('ORDER_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.84024578332901, 3)]",
        "logprob": "-0.34238212817261315",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 975
    },
    {
        "nl": "Describe the section h .",
        "true_sql": "select sections.section_description where sections.section_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"h\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sections.section_name",
            "where",
            "sections.section_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.760657787322998, 1), ('WHERE_COL', ('sections', 'section_name', 60), 0.9646722078323364, 3), ('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9999948740005493, 4), ('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.30964735007393857",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 976
    },
    {
        "nl": "What is the description for the section named h ?",
        "true_sql": "select sections.section_description where sections.section_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"h\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sections.section_description",
            "where",
            "sections.section_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [61], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9999977350234985, 1), ('WHERE_COL', ('sections', 'section_name', 60), 1.0, 3), ('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9999971389770508, 4), ('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-3.325958823017092e-05",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 977
    },
    {
        "nl": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "true_sql": "select students.first_name where addresses.country = value union select students.first_name where students.cell_mobile_number = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 34, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], '\"09700166582\"', None]]}, 'where': [[False, 2, [0, [0, 8, False], None], '\"Haiti\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            "where",
            "addresses.country",
            "=",
            "value",
            "or",
            "addresses.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 6, 43, [7], 3, 25, 43, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9991796612739563, 1), ('WHERE_COL', ('addresses', 'country', 43), 0.5939221978187561, 3), ('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9998437166213989, 4), ('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('WHERE_COL', ('addresses', 'country', 43), 0.9932460188865662, 7), ('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9998573064804077, 8), ('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999949932098389, 9)]",
        "logprob": "-0.5508416333873211",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 978
    },
    {
        "nl": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "true_sql": "select students.first_name where addresses.country = value union select students.first_name where students.cell_mobile_number = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 34, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], '\"09700166582\"', None]]}, 'where': [[False, 2, [0, [0, 8, False], None], '\"Haiti\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "students.first_name",
            "where",
            "students.cell_mobile_number",
            "=",
            "value",
            "or",
            "addresses.line_1",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 6, 73, [7], 3, 25, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9988512992858887, 1), ('WHERE_COL', ('students', 'cell_mobile_number', 73), 0.945232093334198, 3), ('WHERE_OP', (('students', 'cell_mobile_number', 73),), ('=', 0), 0.9997281432151794, 4), ('WHERE_ROOT_TERM', (('students', 'cell_mobile_number', 73),), ('=', 0), 'terminal', 0.9999974966049194, 5), ('WHERE_COL', ('addresses', 'line_1', 37), 0.4045547842979431, 7), ('WHERE_OP', (('addresses', 'line_1', 37),), ('=', 0), 0.9998955726623535, 8), ('WHERE_ROOT_TERM', (('addresses', 'line_1', 37),), ('=', 0), 'terminal', 0.9999959468841553, 9)]",
        "logprob": "-0.9981432141283505",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 979
    },
    {
        "nl": "How many ships ended up being 'Captured ' ?",
        "true_sql": "select count ( ship.* ) where ship.disposition_of_ship = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"Captured\"', None]], 'extracted_clause_asterisk': {'select': 'ship.*'}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "ship.*",
            ")",
            "where",
            "ship.lost_in_battle",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 55, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ship', '*', 55), ('count', 3), False, 0.9933445498028601, 1), ('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.989992082118988, 3), ('WHERE_OP', (('ship', 'lost_in_battle', 42),), ('=', 0), 0.9993434548377991, 4), ('WHERE_ROOT_TERM', (('ship', 'lost_in_battle', 42),), ('=', 0), 'terminal', 0.9999967813491821, 5)]",
        "logprob": "-0.0377457657047261",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 980
    },
    {
        "nl": "List the name and tonnage ordered by in descending alphaetical order for the names .",
        "true_sql": "select ship.name , ship.tonnage order_by ship.name desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "max",
            "(",
            "ship.tonnage",
            ")",
            "order_by",
            "ship.tonnage",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [19, 5, 45, 4], 11, [45], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9606719017028809, 1), ('SELECT_AGG_v2', ('ship', 'tonnage', 45), ('max', 1), False, 0.8471859763636452, 3), ('ORDER_AGG_v2', ('ship', 'tonnage', 45), ('none_agg', 0), False, 0.9999784231185913, 5), ('ORDER_DESC_ASC', (('ship', 'tonnage', 45), ('none_agg', 0), False), 'desc', 0.9857738018035889, 6)]",
        "logprob": "-0.7440629681363429",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 981
    },
    {
        "nl": "List the name , date and result of each battle .",
        "true_sql": "select battle.name , battle.date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.date",
            ",",
            "battle.result",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 8, [41], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.9479619264602661, 3), ('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.5631611943244934, 5)]",
        "logprob": "-0.6288544998598354",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 982
    },
    {
        "nl": "What is maximum and minimum death toll caused each time ?",
        "true_sql": "select max ( death.killed ) , min ( death.killed )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 17, False], None]], [2, [0, [0, 17, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "death.killed",
            ")",
            ",",
            "min",
            "(",
            "death.killed",
            ")",
            ",",
            "min",
            "(",
            "death.killed",
            ")",
            "group_by",
            "death.id",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 52, 4], 8, [26, 5, 52, 4], 8, [26, 5, 52, 4], 10, 50, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.8502095621745863, 1), ('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.8508915985796731, 3), ('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.913974427332543, 5), ('GROUP_COL', ('death', 'id', 50), 0.6071276664733887, 7)]",
        "logprob": "-2.2718132407745326",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 983
    },
    {
        "nl": "What is the average number of injuries caused each time ?",
        "true_sql": "select avg ( death.injured )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 18, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "avg",
            "(",
            "death.injured",
            ")",
            ",",
            "avg",
            "(",
            "death.injured",
            ")",
            "group_by",
            "death.caused_by_ship_id",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 53, 4], 8, [17, 5, 53, 4], 10, 49, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.9998728094137488, 1), ('SELECT_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.9669843523983027, 3), ('GROUP_COL', ('death', 'caused_by_ship_id', 49), 0.7266048789024353, 5)]",
        "logprob": "-0.5689363517054598",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 984
    },
    {
        "nl": "What are the death and injury situations caused by the ship with tonnage 't ' ?",
        "true_sql": "select death.killed , death.injured where ship.tonnage = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]], [0, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"t\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "death.killed",
            ",",
            "death.injured",
            "where",
            "ship.tonnage",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 8, [53], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('death', 'killed', 52), ('none_agg', 0), False, 0.9990062117576599, 1), ('SELECT_AGG_v2', ('death', 'injured', 53), ('none_agg', 0), False, 0.970316469669342, 3), ('WHERE_COL', ('ship', 'tonnage', 45), 0.9999833106994629, 5), ('WHERE_OP', (('ship', 'tonnage', 45),), ('=', 0), 0.999596893787384, 6), ('WHERE_ROOT_TERM', (('ship', 'tonnage', 45),), ('=', 0), 'terminal', 0.9999902248382568, 7)]",
        "logprob": "-0.031660891208099916",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 985
    },
    {
        "nl": "What are the name and results of the battles when the bulgarian commander is not 'Boril '",
        "true_sql": "select battle.name , battle.result where battle.bulgarian_commander != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"Boril\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.result",
            "where",
            "battle.bulgarian_commander",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [41], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999978542327881, 1), ('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.6138691902160645, 3), ('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.9789325594902039, 5), ('WHERE_OP', (('battle', 'bulgarian_commander', 39),), ('!=', 5), 0.9990531802177429, 6), ('WHERE_ROOT_TERM', (('battle', 'bulgarian_commander', 39),), ('!=', 5), 'terminal', 0.9999402761459351, 7)]",
        "logprob": "-0.5105111958296811",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 986
    },
    {
        "nl": "What are the different ids and names of the battles that lost any 'Brig ' type shipes ?",
        "true_sql": "select distinct battle.id , battle.name where ship.ship_type = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Brig\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "battle.id",
            ",",
            "ship.name",
            "where",
            "ship.ship_type",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [36], 8, [44], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'id', 36), ('none_agg', 0), False, 0.7446713447570801, 2), ('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.8876468539237976, 4), ('WHERE_COL', ('ship', 'ship_type', 46), 0.6059319972991943, 6), ('WHERE_OP', (('ship', 'ship_type', 46),), ('=', 0), 0.5038727521896362, 7), ('WHERE_ROOT_TERM', (('ship', 'ship_type', 46),), ('=', 0), 'terminal', 0.9999918937683105, 8)]",
        "logprob": "-1.600906323408891",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 987
    },
    {
        "nl": "What are the ids and names of the battles that led to more than 10 people killed in total .",
        "true_sql": "select battle.id , battle.name group_by battle.id having sum ( death.killed ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [4, 17, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.name",
            "where",
            "death.killed",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 6, 52, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.7644587755203247, 1), ('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9996565580368042, 3), ('WHERE_COL', ('death', 'killed', 52), 0.9999997615814209, 5), ('WHERE_OP', (('death', 'killed', 52),), ('>', 1), 0.9999642372131348, 6), ('WHERE_ROOT_TERM', (('death', 'killed', 52),), ('>', 1), 'terminal', 0.999826967716217, 7)]",
        "logprob": "-0.28890933610223624",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 988
    },
    {
        "nl": "What is the ship id and name that caused most total injuries ?",
        "true_sql": "select ship.id , ship.name group_by ship.id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "ship.id",
            ",",
            "ship.name",
            "group_by",
            "ship.id",
            "order_by",
            "count",
            "(",
            "ship.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [44], 10, 43, 11, [9, 5, 55, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ship', 'id', 43), ('none_agg', 0), False, 0.6123040318489075, 1), ('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.9939422011375427, 3), ('GROUP_COL', ('ship', 'id', 43), 0.758110523223877, 5), ('ORDER_AGG_v2', ('ship', '*', 55), ('count', 3), False, 0.8576842002476172, 7), ('ORDER_DESC_ASC', (('ship', '*', 55), ('count', 3), False), 'desc', 0.9990482926368713, 8), ('ORDER_LIMIT', (('ship', '*', 55), ('count', 3), False), 'limit_value', 0.9999688863754272, 9)]",
        "logprob": "-1.4733722475056927",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 989
    },
    {
        "nl": "What are the distinct battle names which are between bulgarian commander 'Kaloyan ' and latin commander 'Baldwin I ' ?",
        "true_sql": "select battle.name where battle.bulgarian_commander = value and battle.latin_commander = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Kaloyan\"', None], 'and', [False, 2, [0, [0, 5, False], None], '\"Baldwin I\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "distinct",
            "battle.name",
            "where",
            "battle.bulgarian_commander",
            "=",
            "value",
            "intersect",
            "select",
            "distinct",
            "battle.name",
            "where",
            "battle.latin_commander",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 6, 39, [7], 3, 23, 2, 15, [37], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.999994158744812, 2), ('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.7748903036117554, 4), ('WHERE_OP', (('battle', 'bulgarian_commander', 39),), ('=', 0), 0.999995231628418, 5), ('WHERE_ROOT_TERM', (('battle', 'bulgarian_commander', 39),), ('=', 0), 'terminal', 0.9999879598617554, 6), ('IUEN_v2', ('intersect', 1), 0.95798259973526, 7), ('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999887943267822, 10), ('WHERE_COL', ('battle', 'latin_commander', 40), 0.5430888533592224, 12), ('WHERE_OP', (('battle', 'latin_commander', 40),), ('=', 0), 0.9999959468841553, 13), ('WHERE_ROOT_TERM', (('battle', 'latin_commander', 40),), ('=', 0), 'terminal', 0.9999908208847046, 14)]",
        "logprob": "-0.9099840449382836",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 990
    },
    {
        "nl": "How many different results are there for the battles ?",
        "true_sql": "select count ( distinct battle.result )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 6, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "battle.result",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'result', 41), ('count', 3), True, 0.9999594782262285, 1)]",
        "logprob": "-0.00020761977611587576",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 991
    },
    {
        "nl": "How many battles did not lose any ship with tonnage '225 ' ?",
        "true_sql": "select count ( battle.* ) where battle.id not in ( select ship.lost_in_battle where ship.tonnage = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"225\"', None]]}, None]], 'extracted_clause_asterisk': {'select': 'battle.*'}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "battle.*",
            ")",
            "where",
            "ship.tonnage",
            "not",
            "in",
            "(",
            "select",
            "ship.id",
            "where",
            "ship.lost_in_battle",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 6, 45, [22, 20], 5, 2, [43], 6, 42, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', '*', 54), ('count', 3), False, 0.8343389180439882, 1), ('WHERE_COL', ('ship', 'tonnage', 45), 0.9975243210792542, 3), ('WHERE_OP', (('ship', 'tonnage', 45),), ('not in', 7), 0.9090874289711479, 4), ('WHERE_ROOT_TERM', (('ship', 'tonnage', 45),), ('not in', 7), 'root', 0.9999523162841797, 5), ('SELECT_AGG_v2', ('ship', 'id', 43), ('none_agg', 0), False, 0.45614397525787354, 7), ('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.49981987476348877, 9), ('WHERE_OP', (('ship', 'lost_in_battle', 42),), ('=', 0), 0.9936140179634094, 10), ('WHERE_ROOT_TERM', (('ship', 'lost_in_battle', 42),), ('=', 0), 'terminal', 0.9999840259552002, 11), ('O', '##END_NESTED##', 0.9994020462036133, 12)]",
        "logprob": "-2.442710455606892",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 992
    },
    {
        "nl": "List the name and date the battle that has lost the ship named 'Lettice ' and the ship named 'HMS Atalanta '",
        "true_sql": "select battle.name , battle.date where ship.name = value intersect select battle.name , battle.date where ship.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"HMS Atalanta\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Lettice\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.date",
            "where",
            "ship.lost_in_battle",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999364614486694, 1), ('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.999875545501709, 3), ('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.9979155659675598, 5), ('WHERE_OP', (('ship', 'lost_in_battle', 42),), ('=', 0), 0.9995879530906677, 6), ('WHERE_ROOT_TERM', (('ship', 'lost_in_battle', 42),), ('=', 0), 'terminal', 0.9999992847442627, 7)]",
        "logprob": "-0.06612069426504728",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 993
    },
    {
        "nl": "Show names , results and bulgarian commanders of the battles with no ships lost in the 'English Channel ' .",
        "true_sql": "select battle.name , battle.result , battle.bulgarian_commander except select battle.name , battle.result , battle.bulgarian_commander where ship.location = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"English Channel\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.latin_commander",
            "where",
            "battle.result",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [40], 6, 41, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9839712977409363, 1), ('SELECT_AGG_v2', ('battle', 'latin_commander', 40), ('none_agg', 0), False, 0.6141541600227356, 3), ('WHERE_COL', ('battle', 'result', 41), 0.881726086139679, 5), ('WHERE_OP', (('battle', 'result', 41),), ('!=', 5), 0.9185983538627625, 6), ('WHERE_ROOT_TERM', (('battle', 'result', 41),), ('!=', 5), 'terminal', 0.999983549118042, 7)]",
        "logprob": "-0.744538209828158",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 994
    },
    {
        "nl": "What are the notes of the death events which has substring 'East ' ?",
        "true_sql": "select death.note where death.note like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 16, False], None], '\"%East%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "death.note",
            "where",
            "death.killed",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 52, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('death', 'note', 51), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('death', 'killed', 52), 0.9999959468841553, 3), ('WHERE_OP', (('death', 'killed', 52),), ('=', 0), 0.9870632290840149, 4), ('WHERE_ROOT_TERM', (('death', 'killed', 52),), ('=', 0), 'terminal', 0.999997615814209, 5)]",
        "logprob": "-0.013073632476258359",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 995
    },
    {
        "nl": "How many employees are there ?",
        "true_sql": "select count ( employee.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "employee.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 53, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.997042157941242, 1)]",
        "logprob": "-0.01191220261087584",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 996
    },
    {
        "nl": "Count the number of employees",
        "true_sql": "select count ( employee.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "hiring.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 55, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('hiring', '*', 55), ('count', 3), False, 0.9974623064778656, 1)]",
        "logprob": "-0.01027991149545906",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 997
    },
    {
        "nl": "Sort employee names by their age in ascending order .",
        "true_sql": "select employee.name order_by employee.age",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "employee.age",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('ORDER_AGG_v2', ('employee', 'age', 38), ('none_agg', 0), False, 0.9999990463256836, 3)]",
        "logprob": "-0.682640233105672",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 998
    },
    {
        "nl": "List the names of employees and sort in ascending order of age .",
        "true_sql": "select employee.name order_by employee.age",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "employee.age",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [38], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('employee', 'age', 38), ('none_agg', 0), False, 0.9999961853027344, 3), ('ORDER_DESC_ASC', (('employee', 'age', 38), ('none_agg', 0), False), 'desc', 0.7524246573448181, 4)]",
        "logprob": "-0.3895748173777173",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 999
    },
    {
        "nl": "What is the number of employees from each city ?",
        "true_sql": "select count ( employee.* ) , employee.city group_by employee.city",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "employee.*",
            ")",
            ",",
            "employee.city",
            "group_by",
            "employee.city",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 53, 4], 8, [39], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.8407219408203525, 1), ('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999581575393677, 3), ('GROUP_COL', ('employee', 'city', 39), 0.9999767541885376, 5)]",
        "logprob": "-0.6941847605184475",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1000
    },
    {
        "nl": "Count the number of employees for each city .",
        "true_sql": "select count ( employee.* ) , employee.city group_by employee.city",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "employee.*",
            ")",
            ",",
            "employee.city",
            "group_by",
            "employee.city",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 53, 4], 8, [39], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.8496452284413658, 1), ('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999974966049194, 3), ('GROUP_COL', ('employee', 'city', 39), 0.9999991655349731, 5)]",
        "logprob": "-0.6518658643606153",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1001
    },
    {
        "nl": "Which cities do more than one employee under age 30 come from ?",
        "true_sql": "select employee.city where employee.age < value group_by employee.city having count ( employee.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 3, False], None], 30.0, None]], 'extracted_clause_asterisk': {'having': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.city",
            "where",
            "employee.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999994039535522, 1), ('WHERE_COL', ('employee', 'age', 38), 1.0, 3), ('WHERE_OP', (('employee', 'age', 38),), ('>', 1), 0.9998807907104492, 4), ('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('>', 1), 'terminal', 0.9999533891677856, 5)]",
        "logprob": "-0.9889766198798808",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1002
    },
    {
        "nl": "Find the cities that have more than one employee under age 30 .",
        "true_sql": "select employee.city where employee.age < value group_by employee.city having count ( employee.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 3, False], None], 30.0, None]], 'extracted_clause_asterisk': {'having': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.city",
            "where",
            "employee.age",
            ">",
            "value",
            "and",
            "employee.age",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 38, [14], 3, 16, 38, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999994039535522, 1), ('WHERE_COL', ('employee', 'age', 38), 1.0, 3), ('WHERE_OP', (('employee', 'age', 38),), ('>', 1), 0.9947100877761841, 4), ('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('>', 1), 'terminal', 0.9999721050262451, 5), ('WHERE_COL', ('employee', 'age', 38), 0.9956497550010681, 7), ('WHERE_OP', (('employee', 'age', 38),), ('<', 2), 0.954939067363739, 8), ('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9986452460289001, 9)]",
        "logprob": "-0.9888555886637603",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1003
    },
    {
        "nl": "Find the number of shops in each location .",
        "true_sql": "select count ( shop.* ) , shop.location group_by shop.location",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'shop.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.location",
            ",",
            "count",
            "(",
            "shop.*",
            ")",
            "group_by",
            "shop.location",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [9, 5, 54, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'location', 42), ('none_agg', 0), False, 0.9997015595436096, 1), ('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.9999960958833242, 3), ('GROUP_COL', ('shop', 'location', 42), 0.9999996423721313, 5)]",
        "logprob": "-0.00047027181224800017",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1004
    },
    {
        "nl": "How many shops are there in each location ?",
        "true_sql": "select count ( shop.* ) , shop.location group_by shop.location",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'shop.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "shop.*",
            ")",
            ",",
            "shop.location",
            "group_by",
            "shop.location",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 8, [42], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.9588516248059511, 1), ('SELECT_AGG_v2', ('shop', 'location', 42), ('none_agg', 0), False, 0.9999961853027344, 3), ('GROUP_COL', ('shop', 'location', 42), 0.999998927116394, 5)]",
        "logprob": "-0.1683417072354082",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1005
    },
    {
        "nl": "Find the manager name and district of the shop whose number of products is the largest .",
        "true_sql": "select shop.manager_name , shop.district order_by shop.number_products desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.manager_name",
            ",",
            "shop.district",
            "order_by",
            "shop.number_products",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [43], 11, [44], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'manager_name', 45), ('none_agg', 0), False, 0.9965223073959351, 1), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9978663325309753, 3), ('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 1.0, 5), ('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.8920133113861084, 6), ('ORDER_LIMIT', (('shop', 'number_products', 44), ('none_agg', 0), False), 'limit_value', 0.9999028444290161, 7)]",
        "logprob": "-0.41793898423760123",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1006
    },
    {
        "nl": "What are the manager name and district of the shop that sells the largest number of products ?",
        "true_sql": "select shop.manager_name , shop.district order_by shop.number_products desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.manager_name",
            ",",
            "shop.district",
            "group_by",
            "shop.district",
            "order_by",
            "count",
            "(",
            "shop.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [43], 10, 43, 11, [9, 5, 54, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'manager_name', 45), ('none_agg', 0), False, 0.9750037789344788, 1), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9965150356292725, 3), ('GROUP_COL', ('shop', 'district', 43), 0.9366440773010254, 5), ('ORDER_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.957747879605737, 7), ('ORDER_DESC_ASC', (('shop', '*', 54), ('count', 3), False), 'desc', 0.9996334314346313, 8), ('ORDER_LIMIT', (('shop', '*', 54), ('count', 3), False), 'limit_value', 0.9999110698699951, 9)]",
        "logprob": "-0.40414516911249837",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1007
    },
    {
        "nl": "find the minimum and maximum number of products of all stores .",
        "true_sql": "select min ( shop.number_products ) , max ( shop.number_products )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 9, False], None]], [1, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "shop.number_products",
            ")",
            ",",
            "max",
            "(",
            "shop.number_products",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 44, 4], 8, [19, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'number_products', 44), ('min', 2), False, 0.9992247672447071, 1), ('SELECT_AGG_v2', ('shop', 'number_products', 44), ('max', 1), False, 0.8716180176518463, 3)]",
        "logprob": "-0.5578946271721843",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1008
    },
    {
        "nl": "What are the minimum and maximum number of products across all the shops ?",
        "true_sql": "select min ( shop.number_products ) , max ( shop.number_products )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 9, False], None]], [1, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "min",
            "(",
            "shop.number_products",
            ")",
            ",",
            "max",
            "(",
            "shop.number_products",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 44, 4], 8, [19, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'number_products', 44), ('min', 2), False, 0.992730754525093, 1), ('SELECT_AGG_v2', ('shop', 'number_products', 44), ('max', 1), False, 0.9265595647880883, 3)]",
        "logprob": "-0.3389223784195679",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1009
    },
    {
        "nl": "Return the name , location and district of all shops in descending order of number of products .",
        "true_sql": "select shop.name , shop.location , shop.district order_by shop.number_products desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            ",",
            "shop.district",
            "order_by",
            "shop.number_products",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [43], 11, [44], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9978079199790955, 1), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.5754269957542419, 3), ('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.997931957244873, 5), ('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9977453351020813, 6)]",
        "logprob": "-0.6302575329212368",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1010
    },
    {
        "nl": "Sort all the shops by number products in descending order , and return the name , location and district of each shop .",
        "true_sql": "select shop.name , shop.location , shop.district order_by shop.number_products desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            ",",
            "shop.district",
            ",",
            "order_by",
            "shop.number_products",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [43], 8, 11, [44], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9923627376556396, 1), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9496349692344666, 3), ('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.9934802055358887, 6), ('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9825725555419922, 7)]",
        "logprob": "-0.8247403158000941",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1011
    },
    {
        "nl": "Find the names of stores whose number products is more than the average number of products .",
        "true_sql": "select shop.name where shop.number_products > ( select avg ( shop.number_products ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            "where",
            "shop.number_products",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "shop.number_products",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 44, [14], 5, 2, [17, 5, 44, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9981127977371216, 1), ('WHERE_COL', ('shop', 'number_products', 44), 0.9968589544296265, 3), ('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.9994382262229919, 4), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'root', 0.8905112743377686, 5), ('SELECT_AGG_v2', ('shop', 'number_products', 44), ('avg', 5), False, 0.9995137341211615, 7), ('O', '##END_NESTED##', 0.9993458390235901, 8)]",
        "logprob": "-0.19133278089665406",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1012
    },
    {
        "nl": "Which shops ' number products is above the average ? Give me the shop names .",
        "true_sql": "select shop.name where shop.number_products > ( select avg ( shop.number_products ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            "where",
            "shop.number_products",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "shop.number_products",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 44, [14], 5, 2, [17, 5, 44, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.6875224709510803, 1), ('WHERE_COL', ('shop', 'number_products', 44), 0.7409604787826538, 3), ('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.998108983039856, 4), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'root', 0.5558416843414307, 5), ('SELECT_AGG_v2', ('shop', 'number_products', 44), ('avg', 5), False, 0.9961291801658838, 7), ('O', '##END_NESTED##', 0.9999184608459473, 8)]",
        "logprob": "-1.5742313206824128",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1013
    },
    {
        "nl": "find the name of employee who was awarded the most times in the evaluation .",
        "true_sql": "select employee.name group_by evaluation.employee_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.name",
            "group_by",
            "evaluation.employee_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 50, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999996423721313, 1), ('GROUP_COL', ('evaluation', 'employee_id', 50), 0.9999488592147827, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998490027365403, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993414282798767, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999734163284302, 7)]",
        "logprob": "-0.0014442646745953828",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1014
    },
    {
        "nl": "Which employee received the most awards in evaluations ? Give me the employee name .",
        "true_sql": "select employee.name group_by evaluation.employee_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "evaluation.bonus",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [52], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9847528338432312, 3), ('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.9965513944625854, 4), ('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999654293060303, 5)]",
        "logprob": "-0.6897484698206794",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1015
    },
    {
        "nl": "Find the name of the employee who got the highest one time bonus .",
        "true_sql": "select employee.name order_by evaluation.bonus desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "evaluation.bonus",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [52], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9999871253967285, 3), ('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.8819742798805237, 4), ('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999809265136719, 5)]",
        "logprob": "-0.2644193725902867",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1016
    },
    {
        "nl": "Which employee received the biggest bonus ? Give me the employee name .",
        "true_sql": "select employee.name order_by evaluation.bonus desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "evaluation.bonus",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [52], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999992847442627, 1), ('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9999902248382568, 3), ('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.9890241622924805, 4), ('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999653100967407, 5)]",
        "logprob": "-0.02148281600530136",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1017
    },
    {
        "nl": "Find the names of employees who never won any award in the evaluation .",
        "true_sql": "select employee.name where employee.employee_id not in ( select evaluation.employee_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.name",
            "where",
            "employee.employee_id",
            "not",
            "in",
            "(",
            "select",
            "evaluation.employee_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [50], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('employee', 'employee_id', 36), 0.9991183876991272, 3), ('WHERE_OP', (('employee', 'employee_id', 36),), ('not in', 7), 0.9996626929128497, 4), ('WHERE_ROOT_TERM', (('employee', 'employee_id', 36),), ('not in', 7), 'root', 0.9999780654907227, 5), ('SELECT_AGG_v2', ('evaluation', 'employee_id', 50), ('none_agg', 0), False, 0.9931024312973022, 7), ('O', '##END_NESTED##', 0.9997894167900085, 8)]",
        "logprob": "-0.00961368833636067",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1018
    },
    {
        "nl": "What are the names of the employees who never received any evaluation ?",
        "true_sql": "select employee.name where employee.employee_id not in ( select evaluation.employee_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "employee.name",
            "where",
            "employee.employee_id",
            "not",
            "in",
            "(",
            "select",
            "evaluation.employee_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [50], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('employee', 'employee_id', 36), 0.9999662637710571, 3), ('WHERE_OP', (('employee', 'employee_id', 36),), ('not in', 7), 0.9997932249034005, 4), ('WHERE_ROOT_TERM', (('employee', 'employee_id', 36),), ('not in', 7), 'root', 0.9999781847000122, 5), ('SELECT_AGG_v2', ('evaluation', 'employee_id', 50), ('none_agg', 0), False, 0.9999971389770508, 7), ('O', '##END_NESTED##', 0.9998470544815063, 8)]",
        "logprob": "-0.0011282092684023555",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1019
    },
    {
        "nl": "What is the name of the shop that is hiring the largest number of employees ?",
        "true_sql": "select shop.name group_by hiring.shop_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            "group_by",
            "hiring.shop_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 46, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999687671661377, 1), ('GROUP_COL', ('hiring', 'shop_id', 46), 0.9970021843910217, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9995629400288495, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9994237422943115, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999693632125854, 7)]",
        "logprob": "-0.39332611926194117",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1020
    },
    {
        "nl": "Which shop has the most employees ? Give me the shop name .",
        "true_sql": "select shop.name group_by hiring.shop_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            "group_by",
            "shop.shop_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9971207976341248, 1), ('GROUP_COL', ('shop', 'shop_id', 40), 0.505124568939209, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9952143321345195, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9973617196083069, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999626874923706, 7)]",
        "logprob": "-0.7541951146324818",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1021
    },
    {
        "nl": "Find the name of the shops that do not hire any employee .",
        "true_sql": "select shop.name where shop.shop_id not in ( select hiring.shop_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            "where",
            "shop.shop_id",
            "not",
            "in",
            "(",
            "select",
            "hiring.shop_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 40, [22, 20], 5, 2, [46], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999970197677612, 1), ('WHERE_COL', ('shop', 'shop_id', 40), 0.9997336268424988, 3), ('WHERE_OP', (('shop', 'shop_id', 40),), ('not in', 7), 0.9997818147301464, 4), ('WHERE_ROOT_TERM', (('shop', 'shop_id', 40),), ('not in', 7), 'root', 0.9999903440475464, 5), ('SELECT_AGG_v2', ('hiring', 'shop_id', 46), ('none_agg', 0), False, 0.9992603659629822, 7), ('O', '##END_NESTED##', 0.999945878982544, 8)]",
        "logprob": "-0.0035176729012295948",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1022
    },
    {
        "nl": "Which shops run with no employees ? Find the shop names",
        "true_sql": "select shop.name where shop.shop_id not in ( select hiring.shop_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            "where",
            "shop.shop_id",
            "not",
            "in",
            "(",
            "select",
            "hiring.shop_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 40, [22, 20], 5, 2, [46], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999523162841797, 1), ('WHERE_COL', ('shop', 'shop_id', 40), 0.7318863868713379, 3), ('WHERE_OP', (('shop', 'shop_id', 40),), ('not in', 7), 0.9603915574134666, 4), ('WHERE_ROOT_TERM', (('shop', 'shop_id', 40),), ('not in', 7), 'root', 0.9999978542327881, 5), ('SELECT_AGG_v2', ('hiring', 'shop_id', 46), ('none_agg', 0), False, 0.5831122398376465, 7), ('O', '##END_NESTED##', 0.9996852874755859, 8)]",
        "logprob": "-1.499052160617859",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1023
    },
    {
        "nl": "Find the number of employees hired in each shop ; show the shop name as well .",
        "true_sql": "select count ( * ) , shop.name group_by shop.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "shop.*",
            ")",
            ",",
            "shop.name",
            "group_by",
            "shop.name",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 8, [41], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.7787594948594948, 1), ('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9957810640335083, 3), ('GROUP_COL', ('shop', 'name', 41), 0.9986959099769592, 5)]",
        "logprob": "-1.0066820488087105",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1024
    },
    {
        "nl": "For each shop , return the number of employees working there and the name of the shop .",
        "true_sql": "select count ( * ) , shop.name group_by shop.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.name",
            ",",
            "shop.name",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [41], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.8145442008972168, 1), ('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.6060833930969238, 3)]",
        "logprob": "-0.7554112041190286",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1025
    },
    {
        "nl": "What is total bonus given in all evaluations ?",
        "true_sql": "select sum ( evaluation.bonus )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 17, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "evaluation.bonus",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 52, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('evaluation', 'bonus', 52), ('sum', 4), False, 0.9998915384537268, 1)]",
        "logprob": "-0.0004531818037046896",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1026
    },
    {
        "nl": "Find the total amount of bonus given in all the evaluations .",
        "true_sql": "select sum ( evaluation.bonus )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 17, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "sum",
            "(",
            "evaluation.bonus",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 52, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('evaluation', 'bonus', 52), ('sum', 4), False, 0.9999282177358811, 1)]",
        "logprob": "-0.0003167036996748036",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1027
    },
    {
        "nl": "Give me all the information about hiring .",
        "true_sql": "select hiring.*",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'hiring.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "hiring.start_from",
            "_EOS"
        ],
        "dec_seq": "[2, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('hiring', 'start_from', 48), ('none_agg', 0), False, 0.9726279973983765, 1)]",
        "logprob": "-0.058080914379919635",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1028
    },
    {
        "nl": "What is all the information about hiring ?",
        "true_sql": "select hiring.*",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'hiring.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "hiring.start_from",
            "_EOS"
        ],
        "dec_seq": "[2, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('hiring', 'start_from', 48), ('none_agg', 0), False, 0.9931722283363342, 1)]",
        "logprob": "-0.02441765823539771",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1029
    },
    {
        "nl": "Which district has both stores with less than 3000 products and stores with more than 10000 products ?",
        "true_sql": "select shop.district where shop.number_products < value intersect select shop.district where shop.number_products > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], 10000.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 9, False], None], 3000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.district",
            "where",
            "shop.number_products",
            "<",
            "value",
            "intersect",
            "select",
            "shop.district",
            "where",
            "shop.number_products",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 44, [21], 3, 23, 2, [43], 6, 44, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('shop', 'number_products', 44), 0.9811593294143677, 3), ('WHERE_OP', (('shop', 'number_products', 44),), ('<', 2), 0.957355797290802, 4), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('<', 2), 'terminal', 0.9999489784240723, 5), ('IUEN_v2', ('intersect', 1), 0.9542892575263977, 6), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999988079071045, 8), ('WHERE_COL', ('shop', 'number_products', 44), 0.9993120431900024, 10), ('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.9937660694122314, 11), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'terminal', 0.9999710321426392, 12)]",
        "logprob": "-0.11688748415690625",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1030
    },
    {
        "nl": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products .",
        "true_sql": "select shop.district where shop.number_products < value intersect select shop.district where shop.number_products > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], 10000.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 9, False], None], 3000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "shop.district",
            "where",
            "shop.number_products",
            "<",
            "value",
            "intersect",
            "select",
            "shop.district",
            "where",
            "shop.number_products",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 44, [21], 3, 23, 2, [43], 6, 44, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('shop', 'number_products', 44), 0.9995468258857727, 3), ('WHERE_OP', (('shop', 'number_products', 44),), ('<', 2), 0.9686592817306519, 4), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('<', 2), 'terminal', 0.9999760389328003, 5), ('IUEN_v2', ('intersect', 1), 0.9946909546852112, 6), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999959468841553, 8), ('WHERE_COL', ('shop', 'number_products', 44), 0.9999946355819702, 10), ('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.985594630241394, 11), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'terminal', 0.9999849796295166, 12)]",
        "logprob": "-0.05258870734152645",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1031
    },
    {
        "nl": "How many different store locations are there ?",
        "true_sql": "select count ( distinct shop.location )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 7, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "shop.location",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 42, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'location', 42), ('count', 3), True, 0.9999914407499162, 1)]",
        "logprob": "-5.51942750743765e-05",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1032
    },
    {
        "nl": "Count the number of distinct store locations .",
        "true_sql": "select count ( distinct shop.location )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 7, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7f01ddd38d30>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "shop.location",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 42, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'location', 42), ('count', 3), True, 0.9999788043733236, 1)]",
        "logprob": "-0.0001276755800236912",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1033
    }
]