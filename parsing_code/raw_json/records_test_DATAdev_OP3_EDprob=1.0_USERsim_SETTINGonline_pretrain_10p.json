[
    {
        "nl": "How many documents do we have ?",
        "true_sql": "select count ( documents.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "documents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 55, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9999710608915984, 1)]",
        "logprob": "-0.0002573887737182826",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9999710608915984, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9999710608915984, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 0
    },
    {
        "nl": "Count the number of documents .",
        "true_sql": "select count ( documents.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "documents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 55, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9992961360398481, 1)]",
        "logprob": "-0.002954501041049309",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9992961360398481, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9992961360398481, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1
    },
    {
        "nl": "List document IDs , document names , and document descriptions for all documents .",
        "true_sql": "select documents.document_id , documents.document_name , documents.document_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.document_id",
            ",",
            "documents.document_name",
            ",",
            "documents.document_description",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.9907897710800171, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.999897837638855, 3), ('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.9893935918807983, 5)]",
        "logprob": "-0.0204064968612716",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.9907897710800171, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.999897837638855, 3), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.9893935918807983, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.9907897710800171, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.999897837638855, 3), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.9893935918807983, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 2
    },
    {
        "nl": "What are the ids , names , and descriptions for all documents ?",
        "true_sql": "select documents.document_id , documents.document_name , documents.document_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.document_id",
            ",",
            "documents.document_name",
            ",",
            "documents.document_description",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.8553933501243591, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9980708956718445, 3), ('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.995541512966156, 5)]",
        "logprob": "-0.16357352112765453",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.8553933501243591, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9980708956718445, 3), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.995541512966156, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.8553933501243591, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9980708956718445, 3), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.995541512966156, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 3
    },
    {
        "nl": "What is the document name and template id for document with description with the letter ' w ' in it ?",
        "true_sql": "select documents.document_name , documents.template_id where documents.document_description like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 12, False], None], '\"%w%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.document_name",
            ",",
            "documents.template_id",
            "where",
            "documents.document_description",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [45], 6, 47, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.8683305382728577, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.507726788520813, 3), ('WHERE_COL', ('documents', 'document_description', 47), 0.8143243789672852, 5), ('WHERE_OP', (('documents', 'document_description', 47),), ('like', 6), 0.994407057762146, 6), ('WHERE_ROOT_TERM', (('documents', 'document_description', 47),), ('like', 6), 'terminal', 0.9999946355819702, 7)]",
        "logprob": "-1.0302180436017956",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.8683305382728577, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.507726788520813, 3), 'yes'), (('WHERE_COL', ('documents', 'document_description', 47), 0.8143243789672852, 5), 'yes'), (('WHERE_OP', (('documents', 'document_description', 47),), ('like', 6), 0.994407057762146, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_description', 47),), ('like', 6), 'terminal', 0.9999946355819702, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.8683305382728577, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.507726788520813, 3), 'yes'), (('WHERE_COL', ('documents', 'document_description', 47), 0.8143243789672852, 5), 'yes'), (('WHERE_OP', (('documents', 'document_description', 47),), ('like', 6), 0.994407057762146, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_description', 47),), ('like', 6), 'terminal', 0.9999946355819702, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 4
    },
    {
        "nl": "Return the names and template ids for documents that contain the letter w in their description .",
        "true_sql": "select documents.document_name , documents.template_id where documents.document_description like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 12, False], None], '\"%w%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.template_id",
            ",",
            "documents.template_id",
            "where",
            "documents.document_description",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [45], 6, 47, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5592608451843262, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5867249965667725, 3), ('WHERE_COL', ('documents', 'document_description', 47), 1.0, 5), ('WHERE_OP', (('documents', 'document_description', 47),), ('like', 6), 0.8492414355278015, 6), ('WHERE_ROOT_TERM', (('documents', 'document_description', 47),), ('like', 6), 'terminal', 0.9999936819076538, 7)]",
        "logprob": "-2.5158292728124567",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5592608451843262, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5867249965667725, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.7015008926391602, 5), 'no'), (('WHERE_OP', (('documents', 'document_description', 47),), ('like', 6), 0.8492414355278015, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_description', 47),), ('like', 6), 'terminal', 0.9999936819076538, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5592608451843262, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5867249965667725, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.7015008926391602, 5), 'no'), (('WHERE_COL', ('documents', 'document_description', 47), 0.29009363055229187, 5), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.004772660322487354, 5), 'no'), (('WHERE_COL', ('documents', 'template_id', 45), 0.002265726216137409, 5), 'no'), (('WHERE_OP', (('documents', 'document_description', 47),), ('like', 6), 0.8492414355278015, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_description', 47),), ('like', 6), 'terminal', 0.9999936819076538, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 5
    },
    {
        "nl": "What is the document id , template id and description for document named `` Robbin CV `` ?",
        "true_sql": "select documents.document_id , documents.template_id , documents.document_description where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Robbin CV\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.template_id",
            ",",
            "documents.template_id",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [45], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5343769788742065, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.8178637027740479, 3), ('WHERE_COL', ('documents', 'document_name', 46), 0.9236082434654236, 5), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999810457229614, 6), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999983310699463, 7)]",
        "logprob": "-0.9679656347505512",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5343769788742065, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.8178637027740479, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9236082434654236, 5), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999810457229614, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999983310699463, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5343769788742065, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.8178637027740479, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9236082434654236, 5), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999810457229614, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999983310699463, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 6
    },
    {
        "nl": "Return the document id , template id , and description for the document with the name Robbin CV .",
        "true_sql": "select documents.document_id , documents.template_id , documents.document_description where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Robbin CV\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.document_id",
            ",",
            "documents.template_id",
            ",",
            "documents.document_description",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 8, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.9230905175209045, 1), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.772042453289032, 3), ('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.930315375328064, 5), ('WHERE_COL', ('documents', 'document_name', 46), 0.9981903433799744, 7), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999940395355225, 8), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999985694885254, 9)]",
        "logprob": "-0.41919729994307664",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.9230905175209045, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.772042453289032, 3), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.930315375328064, 5), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9981903433799744, 7), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999940395355225, 8), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999985694885254, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.9230905175209045, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.772042453289032, 3), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.930315375328064, 5), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9981903433799744, 7), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999940395355225, 8), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999985694885254, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 7
    },
    {
        "nl": "How many different templates do all document use ?",
        "true_sql": "select count ( distinct documents.template_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 10, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "documents.template_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9998207030331174, 1)]",
        "logprob": "-0.0009074133141863472",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9998207030331174, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9998207030331174, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 8
    },
    {
        "nl": "Count the number of different templates used for documents .",
        "true_sql": "select count ( distinct documents.template_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 10, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "documents.template_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9998083637371318, 1)]",
        "logprob": "-0.0009721015087807739",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9998083637371318, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9998083637371318, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 9
    },
    {
        "nl": "How many documents are using the template with type code 'PPT ' ?",
        "true_sql": "select count ( * ) where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"PPT\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "templates.template_details",
            ")",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_details', 43), ('count', 3), False, 0.40508792336820415, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.999679446220398, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999972581863403, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-3.615008735569237",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9060493929604665, 1), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.999679446220398, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999972581863403, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9060493929604665, 1), 'no'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.72998693402626, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.5183977053298713, 1), 'no'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('count', 3), True, 0.5075337227215226, 1), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.999679446220398, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999972581863403, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 10
    },
    {
        "nl": "Count the number of documents that use the PPT template type .",
        "true_sql": "select count ( * ) where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"PPT\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "ref_template_types.template_type_description",
            ")",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 37, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('count', 3), True, 0.3895015692328233, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 1.0, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999986886978149, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-7.23763448143634",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.9393241420409565, 1), 'no'), (('WHERE_COL', ('templates', 'version_number', 39), 0.8869535326957703, 3), 'no'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999986886978149, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.9393241420409565, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), False, 0.5534240094121633, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.5154312747585461, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('count', 3), False, 0.4788961479219756, 1), 'no'), (('WHERE_COL', ('templates', 'version_number', 39), 0.8869535326957703, 3), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.08064501732587814, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.02136046811938286, 3), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.007392372004687786, 3), 'no'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999986886978149, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 11
    },
    {
        "nl": "Show all template ids and number of documents using each template .",
        "true_sql": "select documents.template_id , count ( documents.* ) group_by documents.template_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.template_id",
            ",",
            "count",
            "(",
            "documents.*",
            ")",
            "group_by",
            "documents.template_id",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [9, 5, 55, 4], 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9887334108352661, 1), ('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.7883680499110823, 3), ('GROUP_COL', ('documents', 'template_id', 45), 0.9984591007232666, 5)]",
        "logprob": "-0.9641749326194161",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9887334108352661, 1), 'yes'), (('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.8748195143938883, 3), 'no'), (('GROUP_COL', ('documents', 'template_id', 45), 0.9984591007232666, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9887334108352661, 1), 'yes'), (('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.8748195143938883, 3), 'no'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.7883680499110823, 3), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.02352815866470337, 3), 'no'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('sum', 4), False, 0.18126693787529385, 3), 'no'), (('GROUP_COL', ('documents', 'template_id', 45), 0.9984591007232666, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 12
    },
    {
        "nl": "What are all different template ids used for documents , and how many times were each of them used ?",
        "true_sql": "select documents.template_id , count ( documents.* ) group_by documents.template_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "documents.template_id",
            ",",
            "documents.document_id",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [45], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9846611618995667, 2), ('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.0959128439426422, 4)]",
        "logprob": "-2.372911545118257",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9846611618995667, 2), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('count', 3), True, 0.7770016559079715, 4), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9846611618995667, 2), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('count', 3), True, 0.7770016559079715, 4), 'no'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.20992229878902435, 4), 'no'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.6666471995351709, 4), 'no'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.11879038810729979, 4), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 13
    },
    {
        "nl": "What is the id and type code for the template used by the most documents ?",
        "true_sql": "select documents.template_id , templates.template_type_code group_by documents.template_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "templates.template_type_code",
            "group_by",
            "documents.template_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 10, 45, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.6493403911590576, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.28664371371269226, 3), ('GROUP_COL', ('documents', 'template_id', 45), 0.9514360427856445, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.34888224655817185, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9979058504104614, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999431371688843, 9)]",
        "logprob": "-5.947542703239959",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.6493403911590576, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.7048009037971497, 3), 'no'), (('GROUP_COL', ('documents', 'template_id', 45), 0.9514360427856445, 5), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9908010728758826, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9979058504104614, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999431371688843, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.6493403911590576, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.7048009037971497, 3), 'no'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.28664371371269226, 3), 'yes'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.2726017189157586, 3), 'no'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.0019235190702602272, 3), 'no'), (('GROUP_COL', ('documents', 'template_id', 45), 0.9514360427856445, 5), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9908010728758826, 7), 'no'), (('ORDER_AGG_v2', ('ref_template_types', '*', 53), ('count', 3), False, 0.3520027144842764, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.34888224655817185, 7), 'yes'), (('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.2767497299894309, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9979058504104614, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999431371688843, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 14
    },
    {
        "nl": "Return the id and type code of the template that is used for the greatest number of documents .",
        "true_sql": "select documents.template_id , templates.template_type_code group_by documents.template_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.template_id",
            ",",
            "templates.template_type_code",
            "group_by",
            "documents.template_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [40], 10, 45, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.27834901213645935, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.7617769837379456, 3), ('GROUP_COL', ('documents', 'template_id', 45), 0.9770570397377014, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7265830743498758, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9951943755149841, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999475479125977, 9)]",
        "logprob": "-2.8577829183746886",
        "q_counter": 5,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.6800065040588379, 1), 'no'), (('GROUP_COL', ('documents', 'template_id', 45), 0.9770570397377014, 5), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.903322625342057, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9951943755149841, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999475479125977, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.6800065040588379, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.27834901213645935, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.041515804827213294, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.00012830185005441297, 1), 'no'), (('GROUP_COL', ('documents', 'template_id', 45), 0.9770570397377014, 5), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.903322625342057, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7265830743498758, 7), 'yes'), (('ORDER_AGG_v2', ('documents', 'other_details', 48), ('count', 3), False, 0.41272062097240675, 7), 'no'), (('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.3897882733701733, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9951943755149841, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999475479125977, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 15
    },
    {
        "nl": "Show ids for all templates that are used by more than one document .",
        "true_sql": "select documents.template_id group_by documents.template_id having count ( documents.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.template_id",
            "group_by",
            "documents.template_id",
            "having",
            "count",
            "(",
            "documents.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 45, 18, [9, 5, 55, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.3357066214084625, 1), ('GROUP_COL', ('documents', 'template_id', 45), 0.996096670627594, 3), ('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 0.9998587369918823, 6), ('HAV_ROOT_TERM_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 'terminal', 0.9985516667366028, 7)]",
        "logprob": "-3.7693895016193255",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.6642878651618958, 1), 'no'), (('GROUP_COL', ('documents', 'template_id', 45), 0.996096670627594, 3), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9821166409269406, 5), 'no'), (('HAV_OP_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 0.9998587369918823, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 'terminal', 0.9985516667366028, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.6642878651618958, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.3357066214084625, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 3.6256412840884894e-06, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 1.7957387399292202e-06, 1), 'no'), (('GROUP_COL', ('documents', 'template_id', 45), 0.996096670627594, 3), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9821166409269406, 5), 'no'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.512881094034932, 5), 'yes'), (('HAV_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.12880883688324257, 5), 'no'), (('HAV_AGG_v2', ('documents', 'document_description', 47), ('avg', 5), False, 0.09466597741844211, 5), 'no'), (('HAV_OP_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 0.9998587369918823, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 'terminal', 0.9985516667366028, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 16
    },
    {
        "nl": "What are the template ids of any templates used in more than a single document ?",
        "true_sql": "select documents.template_id group_by documents.template_id having count ( documents.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'documents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.template_id",
            "group_by",
            "documents.template_id",
            "having",
            "count",
            "(",
            "documents.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 45, 18, [9, 5, 55, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5249497294425964, 1), ('GROUP_COL', ('documents', 'template_id', 45), 0.9886216521263123, 3), ('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 0.999909520149231, 6), ('HAV_ROOT_TERM_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 'terminal', 0.9938018918037415, 7)]",
        "logprob": "-7.751374026069377",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5249497294425964, 1), 'yes'), (('GROUP_COL', ('documents', 'template_id', 45), 0.9886216521263123, 3), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9997374805526269, 5), 'no'), (('HAV_OP_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 0.999909520149231, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 'terminal', 0.9938018918037415, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.5249497294425964, 1), 'yes'), (('GROUP_COL', ('documents', 'template_id', 45), 0.9886216521263123, 3), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9997374805526269, 5), 'no'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.1703379445354128, 5), 'yes'), (('HAV_AGG_v2', ('documents', 'document_description', 47), ('avg', 5), False, 0.10002539870871512, 5), 'no'), (('HAV_AGG_v2', ('templates', '*', 54), ('sum', 4), False, 0.061861692387209594, 5), 'no'), (('HAV_OP_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 0.999909520149231, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('documents', '*', 55), ('count', 3), False), ('>', 1), 'terminal', 0.9938018918037415, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 17
    },
    {
        "nl": "Show ids for all templates not used by any document .",
        "true_sql": "select templates.template_id except select documents.template_id",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_id",
            "except",
            "select",
            "documents.template_id",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 28, 2, [45], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9761554002761841, 1), ('IUEN_v2', ('except', 3), 0.008033618330955505, 2), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.8880305886268616, 4)]",
        "logprob": "-6.749326297882229",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9761554002761841, 1), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.99974125623703, 3), 'no'), (('IUEN_v2', ('except', 3), 0.008033618330955505, 2), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.8880305886268616, 4), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.9579561352729797, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9761554002761841, 1), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.99974125623703, 3), 'no'), (('WHERE_COL', ('templates', 'template_details', 43), 0.0002308119146618992, 3), 'no'), (('WHERE_COL', ('templates', 'version_number', 39), 1.5377507224911824e-05, 3), 'no'), (('WHERE_COL', ('documents', 'document_description', 47), 6.25939810561249e-06, 3), 'no'), (('IUEN_v2', ('except', 3), 0.008033618330955505, 2), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.8880305886268616, 4), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.9579561352729797, 6), 'no'), (('WHERE_COL', ('documents', 'document_description', 47), 0.03181593492627144, 6), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.009018916636705399, 6), 'no'), (('WHERE_COL', ('documents', 'template_id', 45), 0.0005070816841907799, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 18
    },
    {
        "nl": "What are the ids for templates that are not used in any documents ?",
        "true_sql": "select templates.template_id except select documents.template_id",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_id",
            "except",
            "select",
            "documents.template_id",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 28, 2, [45], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.8686736822128296, 1), ('IUEN_v2', ('except', 3), 0.0003820392594207078, 2), ('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9209233522415161, 4)]",
        "logprob": "-13.509131093431861",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.8686736822128296, 1), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.9997420907020569, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0003820392594207078, 2), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9209233522415161, 4), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.9946818947792053, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.8686736822128296, 1), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.9997420907020569, 3), 'no'), (('WHERE_COL', ('templates', 'template_details', 43), 0.00023746553051751107, 3), 'no'), (('WHERE_COL', ('documents', 'template_id', 45), 1.3910367670177948e-05, 3), 'no'), (('WHERE_COL', ('documents', 'document_description', 47), 3.2753118830441963e-06, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0003820392594207078, 2), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.9209233522415161, 4), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.9946818947792053, 6), 'no'), (('WHERE_COL', ('documents', 'document_description', 47), 0.0036750829312950373, 6), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.0010147930588573217, 6), 'no'), (('WHERE_COL', ('documents', 'template_id', 45), 0.0002937769459094852, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 19
    },
    {
        "nl": "How many templates do we have ?",
        "true_sql": "select count ( templates.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "templates.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9999920725023695, 1)]",
        "logprob": "-0.0001388850105427464",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9999920725023695, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9999920725023695, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 20
    },
    {
        "nl": "Count the number of templates .",
        "true_sql": "select count ( templates.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "templates.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9995911469182479, 1)]",
        "logprob": "-0.0018378864950635385",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9995911469182479, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9995911469182479, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 21
    },
    {
        "nl": "Show template ids , version numbers , and template type codes for all templates .",
        "true_sql": "select templates.template_id , templates.version_number , templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_id",
            ",",
            "templates.version_number",
            ",",
            "templates.version_number",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9998880624771118, 1), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999953508377075, 3), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.7865137457847595, 5)]",
        "logprob": "-0.2408376660746298",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9998880624771118, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999953508377075, 3), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.7865137457847595, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9998880624771118, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999953508377075, 3), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.7865137457847595, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 22
    },
    {
        "nl": "What are the ids , version numbers , and type codes for each template ?",
        "true_sql": "select templates.template_id , templates.version_number , templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_id",
            ",",
            "templates.version_number",
            ",",
            "templates.version_number",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9994038343429565, 1), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999490976333618, 3), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9048432111740112, 5)]",
        "logprob": "-0.10557417300164561",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9994038343429565, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999490976333618, 3), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9048432111740112, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9994038343429565, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999490976333618, 3), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9048432111740112, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 23
    },
    {
        "nl": "Show all distinct template type codes for all templates .",
        "true_sql": "select distinct templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9996254444122314, 2)]",
        "logprob": "-0.0004053819980797552",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9996254444122314, 2), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9996254444122314, 2), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 24
    },
    {
        "nl": "What are the different template type codes ?",
        "true_sql": "select distinct templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9980138540267944, 2)]",
        "logprob": "-0.002091597531789478",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9980138540267944, 2), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9980138540267944, 2), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 25
    },
    {
        "nl": "What are the ids of templates with template type code PP or PPT ?",
        "true_sql": "select templates.template_id where templates.template_type_code = value or templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"PP\"', None], 'or', [False, 2, [0, [0, 5, False], None], '\"PPT\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "or",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 40, [7], 3, 25, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.999992847442627, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9999287128448486, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999568462371826, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999984502792358, 5), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9996089339256287, 7), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999654293060303, 8), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999960660934448, 9)]",
        "logprob": "-0.001999037090264589",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.999992847442627, 1), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9999287128448486, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999568462371826, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9996089339256287, 7), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999654293060303, 8), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999960660934448, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.999992847442627, 1), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9999287128448486, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999568462371826, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9996089339256287, 7), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999654293060303, 8), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999960660934448, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 26
    },
    {
        "nl": "Return the ids of templates that have the code PP or PPT .",
        "true_sql": "select templates.template_id where templates.template_type_code = value or templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"PP\"', None], 'or', [False, 2, [0, [0, 5, False], None], '\"PPT\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "or",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 40, [7], 3, 25, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9999979734420776, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 1.0, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9996944665908813, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.03040989488363266, 7), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999517202377319, 8), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999955892562866, 9)]",
        "logprob": "-4.660312406809268",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9999979734420776, 1), 'yes'), (('WHERE_COL', ('templates', 'template_id', 38), 0.6545315384864807, 3), 'no'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9996944665908813, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.03040989488363266, 7), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999517202377319, 8), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999955892562866, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9999979734420776, 1), 'yes'), (('WHERE_COL', ('templates', 'template_id', 38), 0.6545315384864807, 3), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.312360942363739, 3), 'yes'), (('WHERE_COL', ('templates', 'template_details', 43), 0.022095726802945137, 3), 'no'), (('WHERE_COL', ('templates', '*', 54), 0.0015395660884678364, 3), 'no'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9996944665908813, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.03040989488363266, 7), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999517202377319, 8), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999955892562866, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 27
    },
    {
        "nl": "How many templates have template type code CV ?",
        "true_sql": "select count ( templates.* ) where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"CV\"', None]], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "templates.*",
            ")",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.43845859032026085, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.99947589635849, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999891519546509, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-3.2995077690382026",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.955144879670686, 1), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.99947589635849, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999891519546509, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.955144879670686, 1), 'no'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('count', 3), True, 0.6884189528908249, 1), 'no'), (('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.43845859032026085, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_details', 43), ('count', 3), False, 0.31251249594493874, 1), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.99947589635849, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999891519546509, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 28
    },
    {
        "nl": "Count the number of templates of the type CV .",
        "true_sql": "select count ( templates.* ) where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"CV\"', None]], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "templates.*",
            ")",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.7269541914116536, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.718846321105957, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.999985933303833, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-2.007836942577943",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.9191330040333008, 1), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.718846321105957, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.999985933303833, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.9191330040333008, 1), 'no'), (('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.7269541914116536, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_details', 43), ('count', 3), False, 0.4907295200746349, 1), 'no'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), False, 0.20786278582968032, 1), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.718846321105957, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.999985933303833, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 29
    },
    {
        "nl": "What is the version number and template type code for the template with version number later than 5 ?",
        "true_sql": "select templates.version_number , templates.template_type_code where templates.version_number > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 5.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.version_number",
            ",",
            "templates.template_type_code",
            "where",
            "ref_template_types.template_type_code",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [40], 6, 36, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999912977218628, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9988675117492676, 3), ('WHERE_COL', ('ref_template_types', 'template_type_code', 36), 0.024805810302495956, 5), ('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('<', 2), 0.9100512862205505, 6), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('<', 2), 'terminal', 0.9999585151672363, 7)]",
        "logprob": "-3.8270617793645494",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999912977218628, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9988675117492676, 3), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.7216858267784119, 5), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('<', 2), 0.9100512862205505, 6), 'no'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('<', 2), 'terminal', 0.9999585151672363, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999912977218628, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9988675117492676, 3), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.7216858267784119, 5), 'no'), (('WHERE_COL', ('templates', 'date_effective_to', 42), 0.09372146427631378, 5), 'no'), (('WHERE_COL', ('templates', 'date_effective_from', 41), 0.07817335426807404, 5), 'no'), (('WHERE_COL', ('templates', 'template_details', 43), 0.06142917275428772, 5), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('<', 2), 0.9100512862205505, 6), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('>', 1), 0.0548725388944149, 6), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('like', 6), 0.01130442600697279, 6), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('not like', 10), 0.08148322837243996, 6), 'no'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('<', 2), 'terminal', 0.9999585151672363, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 30
    },
    {
        "nl": "Return the version numbers and template type codes of templates with a version number greater than 5 .",
        "true_sql": "select templates.version_number , templates.template_type_code where templates.version_number > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 5.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.version_number",
            ",",
            "templates.template_type_code",
            "where",
            "templates.version_number",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [40], 6, 39, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9993940591812134, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9736817479133606, 3), ('WHERE_COL', ('templates', 'version_number', 39), 1.0, 5), ('WHERE_OP', (('templates', 'version_number', 39),), ('>', 1), 0.998214602470398, 6), ('WHERE_ROOT_TERM', (('templates', 'version_number', 39),), ('>', 1), 'terminal', 0.9999912977218628, 7)]",
        "logprob": "-5.173751255479895",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9993940591812134, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9736817479133606, 3), 'yes'), (('WHERE_COL', ('templates', 'template_details', 43), 0.9513135552406311, 5), 'no'), (('WHERE_OP', (('templates', 'version_number', 39),), ('>', 1), 0.998214602470398, 6), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'version_number', 39),), ('>', 1), 'terminal', 0.9999912977218628, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9993940591812134, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9736817479133606, 3), 'yes'), (('WHERE_COL', ('templates', 'template_details', 43), 0.9513135552406311, 5), 'no'), (('WHERE_COL', ('documents', 'document_description', 47), 0.017992068082094193, 5), 'no'), (('WHERE_COL', ('templates', 'version_number', 39), 0.011423745192587376, 5), 'yes'), (('WHERE_COL', ('templates', '*', 54), 0.007701334077864885, 5), 'no'), (('WHERE_OP', (('templates', 'version_number', 39),), ('>', 1), 0.998214602470398, 6), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'version_number', 39),), ('>', 1), 'terminal', 0.9999912977218628, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 31
    },
    {
        "nl": "Show all template type codes and number of templates for each .",
        "true_sql": "select templates.template_type_code , count ( templates.* ) group_by templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "templates.*",
            ")",
            "group_by",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 54, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999939203262329, 1), ('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9996586253698774, 3), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9999924898147583, 5)]",
        "logprob": "-0.0014885202977892985",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999939203262329, 1), 'yes'), (('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9996586253698774, 3), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9999924898147583, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999939203262329, 1), 'yes'), (('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9996586253698774, 3), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9999924898147583, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 32
    },
    {
        "nl": "What are the different template type codes , and how many templates correspond to each ?",
        "true_sql": "select templates.template_type_code , count ( templates.* ) group_by templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "templates.*",
            ")",
            "group_by",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 54, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.5522792339324951, 1), ('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.4376611868045545, 3), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9998705387115479, 5)]",
        "logprob": "-3.899326593956013",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.5522792339324951, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_id', 38), ('count', 3), True, 0.8944438027721131, 3), 'no'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9998705387115479, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.5522792339324951, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_id', 38), ('count', 3), True, 0.8944438027721131, 3), 'no'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('count', 3), True, 0.8172456453520037, 3), 'no'), (('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.4376611868045545, 3), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('count', 3), True, 0.40478612578283707, 3), 'no'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9998705387115479, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 33
    },
    {
        "nl": "Which template type code has most number of templates ?",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( templates.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "order_by",
            "count",
            "(",
            "templates.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 54, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.999664306640625, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9995303153991699, 3), ('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9848309886212521, 5), ('ORDER_DESC_ASC', (('templates', '*', 54), ('count', 3), False), 'desc', 0.9971863627433777, 6), ('ORDER_LIMIT', (('templates', '*', 54), ('count', 3), False), 'limit_value', 0.9999439716339111, 7)]",
        "logprob": "-0.06506411123183373",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.999664306640625, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9995303153991699, 3), 'yes'), (('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9848309886212521, 5), 'yes'), (('ORDER_DESC_ASC', (('templates', '*', 54), ('count', 3), False), 'desc', 0.9971863627433777, 6), 'yes'), (('ORDER_LIMIT', (('templates', '*', 54), ('count', 3), False), 'limit_value', 0.9999439716339111, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.999664306640625, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9995303153991699, 3), 'yes'), (('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9848309886212521, 5), 'yes'), (('ORDER_DESC_ASC', (('templates', '*', 54), ('count', 3), False), 'desc', 0.9971863627433777, 6), 'yes'), (('ORDER_LIMIT', (('templates', '*', 54), ('count', 3), False), 'limit_value', 0.9999439716339111, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 34
    },
    {
        "nl": "Return the type code of the template type that the most templates belong to .",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( templates.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "order_by",
            "count",
            "(",
            "templates.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 54, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999179840087891, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9998363256454468, 3), ('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9660456514072139, 5), ('ORDER_DESC_ASC', (('templates', '*', 54), ('count', 3), False), 'desc', 0.9986409544944763, 6), ('ORDER_LIMIT', (('templates', '*', 54), ('count', 3), False), 'limit_value', 0.9999699592590332, 7)]",
        "logprob": "-0.13987481632930662",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999179840087891, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9998363256454468, 3), 'yes'), (('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9660456514072139, 5), 'yes'), (('ORDER_DESC_ASC', (('templates', '*', 54), ('count', 3), False), 'desc', 0.9986409544944763, 6), 'yes'), (('ORDER_LIMIT', (('templates', '*', 54), ('count', 3), False), 'limit_value', 0.9999699592590332, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999179840087891, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9998363256454468, 3), 'yes'), (('ORDER_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9660456514072139, 5), 'yes'), (('ORDER_DESC_ASC', (('templates', '*', 54), ('count', 3), False), 'desc', 0.9986409544944763, 6), 'yes'), (('ORDER_LIMIT', (('templates', '*', 54), ('count', 3), False), 'limit_value', 0.9999699592590332, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 35
    },
    {
        "nl": "Show all template type codes with less than three templates .",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code having count ( templates.* ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 4, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "having",
            "count",
            "(",
            "templates.*",
            ")",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 18, [9, 5, 54, 4], [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9993340373039246, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9976966977119446, 3), ('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9908153651697946, 5), ('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 0.9577690958976746, 6), ('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 'terminal', 0.9969160556793213, 7)]",
        "logprob": "-0.6878460297399465",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9993340373039246, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9976966977119446, 3), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9908153651697946, 5), 'yes'), (('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 0.9577690958976746, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 'terminal', 0.9969160556793213, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9993340373039246, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9976966977119446, 3), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.9908153651697946, 5), 'yes'), (('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 0.9577690958976746, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 'terminal', 0.9969160556793213, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 36
    },
    {
        "nl": "What are the codes of template types that have fewer than 3 templates ?",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code having count ( templates.* ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 4, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'templates.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "having",
            "count",
            "(",
            "templates.*",
            ")",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 18, [9, 5, 54, 4], [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998437166213989, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9979619979858398, 3), ('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.8962137455430648, 5), ('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 0.9238834977149963, 6), ('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 'terminal', 0.9988971948623657, 7)]",
        "logprob": "-0.8459500390335593",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998437166213989, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9979619979858398, 3), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.8962137455430648, 5), 'yes'), (('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 0.9238834977149963, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 'terminal', 0.9988971948623657, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998437166213989, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9979619979858398, 3), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.8962137455430648, 5), 'yes'), (('HAV_OP_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 0.9238834977149963, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('templates', '*', 54), ('count', 3), False), ('<', 2), 'terminal', 0.9988971948623657, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 37
    },
    {
        "nl": "What the smallest version number and its template type code ?",
        "true_sql": "select min ( templates.version_number ) , templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 4.048540358780881e-05, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9912890195846558, 3)]",
        "logprob": "-11.389131572460384",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999452829360962, 1), 'no'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9912890195846558, 3), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.815083920955658, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.9999452829360962, 1), 'no'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 4.048540358780881e-05, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 1.371733560517896e-05, 1), 'no'), (('SELECT_AGG_v2', ('templates', '*', 54), ('none_agg', 0), False, 3.124241345631164e-07, 1), 'no'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9912890195846558, 3), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.815083920955658, 5), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_code', 36), 0.1692318320274353, 5), 'no'), (('WHERE_COL', ('templates', 'version_number', 39), 0.01089551392942667, 5), 'no'), (('WHERE_COL', ('templates', 'template_details', 43), 0.0040047927759587765, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 38
    },
    {
        "nl": "Return the lowest version number , along with its corresponding template type code .",
        "true_sql": "select min ( templates.version_number ) , templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "templates.template_type_code",
            ",",
            "min",
            "(",
            "templates.version_number",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 8, [26, 5, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9002825617790222, 1), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.026669235900044445, 3), ('SELECT_AGG_v2', ('templates', 'version_number', 39), ('min', 2), False, 0.869686700949744, 5)]",
        "logprob": "-8.375830605538319",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9002825617790222, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.7428092956542969, 3), 'no'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('min', 2), False, 0.869686700949744, 5), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9994183778762817, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9002825617790222, 1), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.7428092956542969, 3), 'no'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('max', 1), False, 0.5953392287339294, 3), 'no'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('sum', 4), False, 0.4988219473849079, 3), 'no'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.026669235900044445, 3), 'yes'), (('SELECT_AGG_v2', ('templates', 'version_number', 39), ('min', 2), False, 0.869686700949744, 5), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9994183778762817, 7), 'no'), (('GROUP_COL', ('ref_template_types', 'template_type_code', 36), 0.0005799591890536249, 7), 'no'), (('GROUP_COL', ('templates', 'version_number', 39), 1.4716255236635334e-06, 7), 'no'), (('GROUP_COL', ('ref_template_types', 'template_type_description', 37), 1.9530418171598285e-07, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 39
    },
    {
        "nl": "What is the template type code of the template used by document with the name `` Data base `` ?",
        "true_sql": "select templates.template_type_code where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Data base\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9866699576377869, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.9999998807907104, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999274015426636, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.014184880391063966",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9866699576377869, 1), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999274015426636, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9866699576377869, 1), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999274015426636, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 40
    },
    {
        "nl": "Return the template type code of the template that is used by a document named Data base .",
        "true_sql": "select templates.template_type_code where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Data base\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9958800077438354, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.9999945163726807, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999972581863403, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.03967791588021627",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9958800077438354, 1), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9999945163726807, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999972581863403, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9958800077438354, 1), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9999945163726807, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999972581863403, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 41
    },
    {
        "nl": "Show all document names using templates with template type code BK .",
        "true_sql": "select documents.document_name where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"BK\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.document_name",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.7200383543968201, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 0.9995433688163757, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999953508377075, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.3289665434532956",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.7200383543968201, 1), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9995433688163757, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999953508377075, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.7200383543968201, 1), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9995433688163757, 3), 'yes'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999953508377075, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 42
    },
    {
        "nl": "What are the names of documents that use templates with the code BK ?",
        "true_sql": "select documents.document_name where templates.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"BK\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "documents.document_name",
            "where",
            "templates.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9998400211334229, 1), ('WHERE_COL', ('templates', 'template_type_code', 40), 1.0, 3), ('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999915361404419, 4), ('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-7.074219912475604",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9998400211334229, 1), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9978100657463074, 3), 'no'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999915361404419, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9998400211334229, 1), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9978100657463074, 3), 'no'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.0008468509186059237, 3), 'yes'), (('WHERE_COL', ('documents', 'template_id', 45), 0.0006723360856994987, 3), 'no'), (('WHERE_COL', ('documents', 'document_description', 47), 0.0004997087526135147, 3), 'no'), (('WHERE_OP', (('templates', 'template_type_code', 40),), ('=', 0), 0.9999915361404419, 4), 'yes'), (('WHERE_ROOT_TERM', (('templates', 'template_type_code', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 43
    },
    {
        "nl": "Show all template type codes and the number of documents using each type .",
        "true_sql": "select templates.template_type_code , count ( * ) group_by templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 35, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999558925628662, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.2637449990429256, 3), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9999549388885498, 5)]",
        "logprob": "-5.331367516789516",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999558925628662, 1), 'yes'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9859995191418714, 3), 'no'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9999549388885498, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9999558925628662, 1), 'yes'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9859995191418714, 3), 'no'), (('SELECT_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.45470020122539445, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.2637449990429256, 3), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('count', 3), False, 0.23395008443063592, 3), 'no'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9999549388885498, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 44
    },
    {
        "nl": "What are the different template type codes , and how many documents use each type ?",
        "true_sql": "select templates.template_type_code , count ( * ) group_by templates.template_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "documents.*",
            ")",
            "group_by",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 55, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9963988065719604, 1), ('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.3038765154481712, 3), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9997778534889221, 5)]",
        "logprob": "-4.768536851208031",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9963988065719604, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9678067037002093, 3), 'no'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9997778534889221, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9963988065719604, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('count', 3), True, 0.9678067037002093, 3), 'no'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('count', 3), True, 0.5480172573229606, 3), 'no'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('count', 3), True, 0.5454292991208484, 3), 'no'), (('SELECT_AGG_v2', ('templates', 'template_id', 38), ('count', 3), True, 0.5207271118064554, 3), 'no'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9997778534889221, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 45
    },
    {
        "nl": "Which template type code is used by most number of documents ?",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998414516448975, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.9983347058296204, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6905785304302173, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.997901201248169, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999384880065918, 7)]",
        "logprob": "-1.4850740466231775",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998414516448975, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9983347058296204, 3), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.8768041417938545, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.997901201248169, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999384880065918, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998414516448975, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.9983347058296204, 3), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.8768041417938545, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6905785304302173, 5), 'yes'), (('ORDER_AGG_v2', ('documents', 'template_id', 45), ('count', 3), False, 0.6193643586998921, 5), 'no'), (('ORDER_AGG_v2', ('ref_template_types', '*', 53), ('count', 3), False, 0.34835009439136005, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.997901201248169, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999384880065918, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 46
    },
    {
        "nl": "Return the code of the template type that is most commonly used in documents .",
        "true_sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "group_by",
            "templates.template_type_code",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998481273651123, 1), ('GROUP_COL', ('templates', 'template_type_code', 40), 0.7741995453834534, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9942091333845887, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9962975382804871, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999430179595947, 7)]",
        "logprob": "-0.2831738079253773",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998481273651123, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.7741995453834534, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9942091333845887, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9962975382804871, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999430179595947, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9998481273651123, 1), 'yes'), (('GROUP_COL', ('templates', 'template_type_code', 40), 0.7741995453834534, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9942091333845887, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9962975382804871, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999430179595947, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 47
    },
    {
        "nl": "Show all template type codes that are not used by any document .",
        "true_sql": "select templates.template_type_code except select templates.template_type_code",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "except",
            "select",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 28, 2, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9994552731513977, 1), ('IUEN_v2', ('except', 3), 0.00412277365103364, 2), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9967101812362671, 4)]",
        "logprob": "-9.777997919457068",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9994552731513977, 1), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.9473769664764404, 3), 'no'), (('IUEN_v2', ('except', 3), 0.00412277365103364, 2), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9967101812362671, 4), 'yes'), (('WHERE_COL', ('documents', 'document_description', 47), 0.7273478507995605, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9994552731513977, 1), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.9473769664764404, 3), 'no'), (('WHERE_COL', ('documents', 'template_id', 45), 0.027513258159160614, 3), 'no'), (('WHERE_COL', ('templates', 'template_id', 38), 0.016750119626522064, 3), 'no'), (('WHERE_COL', ('templates', 'version_number', 39), 0.004015147220343351, 3), 'no'), (('IUEN_v2', ('except', 3), 0.00412277365103364, 2), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9967101812362671, 4), 'yes'), (('WHERE_COL', ('documents', 'document_description', 47), 0.7273478507995605, 6), 'no'), (('WHERE_COL', ('documents', 'document_id', 44), 0.2306271493434906, 6), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.0304875411093235, 6), 'no'), (('WHERE_COL', ('documents', 'template_id', 45), 0.007158685475587845, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 48
    },
    {
        "nl": "What are the codes of template types that are not used for any document ?",
        "true_sql": "select templates.template_type_code except select templates.template_type_code",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_type_code",
            "except",
            "select",
            "templates.template_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 28, 2, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9983007311820984, 1), ('IUEN_v2', ('except', 3), 0.0008481023833155632, 2), ('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9956564903259277, 4)]",
        "logprob": "-12.609638936702698",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9983007311820984, 1), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.478077232837677, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0008481023833155632, 2), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9956564903259277, 4), 'yes'), (('WHERE_COL', ('documents', 'document_description', 47), 0.369188517332077, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9983007311820984, 1), 'yes'), (('WHERE_COL', ('documents', 'document_id', 44), 0.478077232837677, 3), 'no'), (('WHERE_COL', (None, '*', 35), 0.34570372104644775, 3), 'no'), (('WHERE_COL', ('templates', 'template_id', 38), 0.10198499262332916, 3), 'no'), (('WHERE_COL', ('documents', 'template_id', 45), 0.03603624552488327, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0008481023833155632, 2), 'yes'), (('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.9956564903259277, 4), 'yes'), (('WHERE_COL', ('documents', 'document_description', 47), 0.369188517332077, 6), 'no'), (('WHERE_COL', ('documents', 'document_id', 44), 0.3598831593990326, 6), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.08447759598493576, 6), 'no'), (('WHERE_COL', ('templates', 'template_id', 38), 0.0712902769446373, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 49
    },
    {
        "nl": "Show all template type codes and descriptions .",
        "true_sql": "select ref_template_types.template_type_code , ref_template_types.template_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ref_template_types.template_type_code",
            ",",
            "ref_template_types.template_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.5721777677536011, 1), ('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9933357238769531, 3)]",
        "logprob": "-0.5653988640589479",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.5721777677536011, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9933357238769531, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.5721777677536011, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9933357238769531, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 50
    },
    {
        "nl": "What are the type codes and descriptions for all template types ?",
        "true_sql": "select ref_template_types.template_type_code , ref_template_types.template_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ref_template_types.template_type_code",
            ",",
            "ref_template_types.template_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.978205144405365, 1), ('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.99998939037323, 3)]",
        "logprob": "-0.022232461300855762",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.978205144405365, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.99998939037323, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.978205144405365, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.99998939037323, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 51
    },
    {
        "nl": "What is the template type descriptions for template type code `` AD `` .",
        "true_sql": "select ref_template_types.template_type_description where ref_template_types.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 1, False], None], '\"AD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ref_template_types.template_type_description",
            "where",
            "ref_template_types.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9999493360519409, 1), ('WHERE_COL', ('ref_template_types', 'template_type_code', 36), 1.0, 3), ('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 0.999996542930603, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-4.39234489637803",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9999493360519409, 1), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9724225401878357, 3), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 0.999996542930603, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9999493360519409, 1), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9724225401878357, 3), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.014601674862205982, 3), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_code', 36), 0.01237286627292633, 3), 'yes'), (('WHERE_COL', ('templates', 'template_id', 38), 0.000453715882031247, 3), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 0.999996542930603, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 52
    },
    {
        "nl": "Return the template type description of the template type with the code AD .",
        "true_sql": "select ref_template_types.template_type_description where ref_template_types.template_type_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 1, False], None], '\"AD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ref_template_types.template_type_description",
            "where",
            "ref_template_types.template_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.999954104423523, 1), ('WHERE_COL', ('ref_template_types', 'template_type_code', 36), 1.0, 3), ('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 0.9999871253967285, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-3.053525919498901",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.999954104423523, 1), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9514225721359253, 3), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 0.9999871253967285, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.999954104423523, 1), 'yes'), (('WHERE_COL', ('templates', 'template_type_code', 40), 0.9514225721359253, 3), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_code', 36), 0.04719633609056473, 3), 'yes'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.0013750768266618252, 3), 'no'), (('WHERE_COL', ('templates', 'template_id', 38), 2.508570105419494e-06, 3), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 0.9999871253967285, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_code', 36),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 53
    },
    {
        "nl": "What is the template type code for template type description `` Book `` .",
        "true_sql": "select ref_template_types.template_type_code where ref_template_types.template_type_description = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Book\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ref_template_types.template_type_code",
            "where",
            "ref_template_types.template_type_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.1828504353761673, 1), ('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999984502792358, 3), ('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999947547912598, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.999997615814209, 5)]",
        "logprob": "-1.707218475336086",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.8171406984329224, 1), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999984502792358, 3), 'yes'), (('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999947547912598, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.999997615814209, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.8171406984329224, 1), 'no'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.1828504353761673, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 8.82877156982431e-06, 1), 'no'), (('SELECT_AGG_v2', ('templates', 'template_details', 43), ('none_agg', 0), False, 9.60243082964717e-12, 1), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999984502792358, 3), 'yes'), (('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999947547912598, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.999997615814209, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 54
    },
    {
        "nl": "Return the type code of the template type with the description `` Book `` .",
        "true_sql": "select ref_template_types.template_type_code where ref_template_types.template_type_description = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Book\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ref_template_types.template_type_code",
            "where",
            "ref_template_types.template_type_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.25518107414245605, 1), ('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999997615814209, 3), ('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.999980092048645, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-1.3658474571027373",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.7448155283927917, 1), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999997615814209, 3), 'yes'), (('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.999980092048645, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_type_code', 40), ('none_agg', 0), False, 0.7448155283927917, 1), 'no'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_code', 36), ('none_agg', 0), False, 0.25518107414245605, 1), 'yes'), (('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 3.3837006867543104e-06, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 6.360946925437766e-12, 1), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999997615814209, 3), 'yes'), (('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.999980092048645, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 55
    },
    {
        "nl": "What are the distinct template type descriptions for the templates ever used by any document ?",
        "true_sql": "select distinct ref_template_types.template_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "ref_template_types.template_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9974871873855591, 2)]",
        "logprob": "-0.29710913521624605",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9974871873855591, 2), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.9974871873855591, 2), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 56
    },
    {
        "nl": "Return the different descriptions for templates that have been used in a document .",
        "true_sql": "select distinct ref_template_types.template_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "ref_template_types.template_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.717553436756134, 2)]",
        "logprob": "-0.3341793535923895",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.717553436756134, 2), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ref_template_types', 'template_type_description', 37), ('none_agg', 0), False, 0.717553436756134, 2), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 57
    },
    {
        "nl": "What are the template ids with template type description `` Presentation `` .",
        "true_sql": "select templates.template_id where ref_template_types.template_type_description = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Presentation\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "ref_template_types.template_type_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9999204874038696, 1), ('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999998807907104, 3), ('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999954700469971, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.0003744131485024255",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9999204874038696, 1), 'yes'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999954700469971, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9999204874038696, 1), 'yes'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999954700469971, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 58
    },
    {
        "nl": "Return the ids corresponding to templates with the description 'Presentation ' .",
        "true_sql": "select templates.template_id where ref_template_types.template_type_description = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Presentation\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "templates.template_id",
            "where",
            "ref_template_types.template_type_description",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9997463822364807, 1), ('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 1.0, 3), ('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999903440475464, 4), ('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-2.5926089099114398",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9997463822364807, 1), 'yes'), (('WHERE_COL', ('documents', 'document_description', 47), 0.9237919449806213, 3), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999903440475464, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_id', 38), ('none_agg', 0), False, 0.9997463822364807, 1), 'yes'), (('WHERE_COL', ('documents', 'document_description', 47), 0.9237919449806213, 3), 'no'), (('WHERE_COL', ('ref_template_types', 'template_type_description', 37), 0.07484973967075348, 3), 'yes'), (('WHERE_COL', ('templates', 'template_details', 43), 0.0008111220085993409, 3), 'no'), (('WHERE_COL', ('templates', 'template_id', 38), 0.0004891848075203598, 3), 'no'), (('WHERE_OP', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 0.9999903440475464, 4), 'yes'), (('WHERE_ROOT_TERM', (('ref_template_types', 'template_type_description', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 59
    },
    {
        "nl": "How many paragraphs in total ?",
        "true_sql": "select count ( paragraphs.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "paragraphs.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 56, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.993515913390831, 1)]",
        "logprob": "-0.02612546968980176",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.993515913390831, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.993515913390831, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 60
    },
    {
        "nl": "Count the number of paragraphs .",
        "true_sql": "select count ( paragraphs.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "paragraphs.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 56, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.4032971096489468, 1)]",
        "logprob": "-3.632498770863919",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), False, 0.9926379838677499, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), False, 0.9926379838677499, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.4032971096489468, 1), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('count', 3), False, 0.20682191617018703, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), True, 0.24199697954007246, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 61
    },
    {
        "nl": "How many paragraphs for the document with name 'Summer Show ' ?",
        "true_sql": "select count ( * ) where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Summer Show\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.*",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', '*', 56), ('none_agg', 0), False, 1.3684814803127662e-05, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.9999997615814209, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999957084655762, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-11.199294321494165",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.660885751247406, 1), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9999997615814209, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999957084655762, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.660885751247406, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), False, 0.7629197766562128, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('sum', 4), False, 0.10882857352705566, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), True, 0.14454898245932835, 1), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9999997615814209, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999957084655762, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 62
    },
    {
        "nl": "Count the number of paragraphs in the document named 'Summer Show ' .",
        "true_sql": "select count ( * ) where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Summer Show\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 5.731006240239364e-05, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.999993085861206, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.999997615814209, 5)]",
        "logprob": "-9.767451983597498",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), False, 0.9783527768566489, 1), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.999993085861206, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.999997615814209, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), False, 0.9783527768566489, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.08173583447933197, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), True, 0.27116971986857996, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('count', 3), False, 0.15168288484619197, 1), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.999993085861206, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.999997615814209, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 63
    },
    {
        "nl": "Show paragraph details for paragraph with text 'Korea ' .",
        "true_sql": "select paragraphs.other_details where paragraphs.paragraph_text = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Korea\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.other_details",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'other_details', 52), ('none_agg', 0), False, 0.12202758342027663, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 1.0, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9999139308929443, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-2.103626425896339",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('templates', 'template_details', 43), ('none_agg', 0), False, 0.48724573850631714, 1), 'no'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9999139308929443, 4), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('templates', 'template_details', 43), ('none_agg', 0), False, 0.48724573850631714, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.38997915387153625, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'other_details', 52), ('none_agg', 0), False, 0.12202758342027663, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'other_details', 48), ('none_agg', 0), False, 0.0006525744101963936, 1), 'no'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9999139308929443, 4), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 64
    },
    {
        "nl": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "true_sql": "select paragraphs.other_details where paragraphs.paragraph_text = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Korea\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.other_details",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'other_details', 52), ('none_agg', 0), False, 0.33625444769859314, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999901056289673, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.09805802255868912, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-3.4121174810973183",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.6513249278068542, 1), 'no'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999901056289673, 3), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('like', 6), 0.9001069664955139, 4), 'no'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.6513249278068542, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'other_details', 52), ('none_agg', 0), False, 0.33625444769859314, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'other_details', 48), ('none_agg', 0), False, 0.009602531790733336, 1), 'no'), (('SELECT_AGG_v2', ('templates', 'template_details', 43), ('none_agg', 0), False, 0.0027439289260655633, 1), 'no'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999901056289673, 3), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('like', 6), 0.9001069664955139, 4), 'no'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.09805802255868912, 4), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('!=', 5), 0.0007178782834671438, 4), 'no'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('not like', 10), 0.018859069552606536, 4), 'no'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 65
    },
    {
        "nl": "Show all paragraph ids and texts for the document with name 'Welcome to NY ' .",
        "true_sql": "select paragraphs.paragraph_id , paragraphs.paragraph_text where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Welcome to NY\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9995576739311218, 1), ('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.9997332692146301, 3), ('WHERE_COL', ('documents', 'document_name', 46), 0.9999997615814209, 5), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999938011169434, 6), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999990463256836, 7)]",
        "logprob": "-0.0012786667492753197",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9995576739311218, 1), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.9997332692146301, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9999997615814209, 5), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999938011169434, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999990463256836, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9995576739311218, 1), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.9997332692146301, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.9999997615814209, 5), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999938011169434, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999990463256836, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 66
    },
    {
        "nl": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY ' ?",
        "true_sql": "select paragraphs.paragraph_id , paragraphs.paragraph_text where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Welcome to NY\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9999151229858398, 1), ('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.9999675750732422, 3), ('WHERE_COL', ('documents', 'document_name', 46), 0.7391030788421631, 5), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999945163726807, 6), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999977350234985, 7)]",
        "logprob": "-0.3030022256606189",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9999151229858398, 1), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.9999675750732422, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.7391030788421631, 5), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999945163726807, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999977350234985, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9999151229858398, 1), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.9999675750732422, 3), 'yes'), (('WHERE_COL', ('documents', 'document_name', 46), 0.7391030788421631, 5), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999945163726807, 6), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999977350234985, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 67
    },
    {
        "nl": "Show all paragraph texts for the document `` Customer reviews `` .",
        "true_sql": "select paragraphs.paragraph_text where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Customer reviews\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('documents', 'document_name', 46), 0.9990547299385071, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-0.0062463802862765296",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('documents', 'document_name', 46), 0.9990547299385071, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('documents', 'document_name', 46), 0.9990547299385071, 3), 'yes'), (('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 68
    },
    {
        "nl": "What are the paragraph texts for the document with the name 'Customer reviews ' ?",
        "true_sql": "select paragraphs.paragraph_text where documents.document_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Customer reviews\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.paragraph_text",
            "where",
            "documents.document_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('documents', 'document_name', 46), 1.0, 3), ('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999794960021973, 4), ('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-7.367248836906361e-05",
        "q_counter": 2,
        "questioned_indices": [
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999794960021973, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('WHERE_OP', (('documents', 'document_name', 46),), ('=', 0), 0.9999794960021973, 4), 'yes'), (('WHERE_ROOT_TERM', (('documents', 'document_name', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 69
    },
    {
        "nl": "Show all document ids and the number of paragraphs in each document . Order by document id .",
        "true_sql": "select paragraphs.document_id , count ( paragraphs.* ) group_by paragraphs.document_id order_by paragraphs.document_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            ",",
            "count",
            "(",
            "paragraphs.*",
            ")",
            "group_by",
            "paragraphs.document_id",
            "order_by",
            "count",
            "(",
            "documents.document_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [9, 5, 56, 4], 10, 50, 11, [9, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.006204696372151373, 1), ('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.2849581667661567, 3), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.34750646352767944, 5), ('ORDER_AGG_v2', ('documents', 'document_id', 44), ('count', 3), False, 0.22718032941623148, 7)]",
        "logprob": "-17.12935218323205",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9926856756210327, 1), 'no'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9962017599982701, 3), 'no'), (('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.646486759185791, 5), 'no'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9932863673896623, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9926856756210327, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.006204696372151373, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.0011083215940743683, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 1.215506472362903e-06, 1), 'no'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9962017599982701, 3), 'no'), (('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.2849581667661567, 3), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('count', 3), True, 0.3507082897658985, 3), 'no'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.17822470223538486, 3), 'no'), (('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.646486759185791, 5), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.34750646352767944, 5), 'yes'), (('GROUP_COL', ('documents', 'document_id', 44), 0.005777350626885891, 5), 'no'), (('GROUP_COL', ('paragraphs', 'paragraph_text', 51), 0.00017208041390404105, 5), 'no'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9932863673896623, 7), 'no'), (('ORDER_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('count', 3), False, 0.331588984596624, 7), 'no'), (('ORDER_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.2572502206420537, 7), 'no'), (('ORDER_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.2512992892105703, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 70
    },
    {
        "nl": "Return the different document ids along with the number of paragraphs corresponding to each , ordered by id .",
        "true_sql": "select paragraphs.document_id , count ( paragraphs.* ) group_by paragraphs.document_id order_by paragraphs.document_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            ",",
            "count",
            "(",
            "paragraphs.*",
            ")",
            "group_by",
            "paragraphs.document_id",
            "order_by",
            "count",
            "(",
            "distinct",
            "paragraphs.paragraph_id",
            ")",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [9, 5, 56, 4], 10, 50, 11, [9, 5, 15, 49, 4], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.006398930680006743, 1), ('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.19770586667479048, 3), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.08693665266036987, 5), ('ORDER_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('count', 3), True, 0.2724258928663579, 7), ('ORDER_DESC_ASC', (('paragraphs', 'paragraph_id', 49), ('count', 3), True), 'desc', 0.03035133145749569, 8)]",
        "logprob": "-23.97738741870963",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9856237173080444, 1), 'no'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9949406317127674, 3), 'no'), (('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.9066233038902283, 5), 'no'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9898957256440755, 7), 'no'), (('ORDER_DESC_ASC', (('paragraphs', 'paragraph_id', 49), ('count', 3), True), 'asc', 0.6876243352890015, 8), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9856237173080444, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.007860437966883184, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.006398930680006743, 1), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.00011328413529554375, 1), 'no'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9949406317127674, 3), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('count', 3), True, 0.43823247648380315, 3), 'no'), (('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.19770586667479048, 3), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('count', 3), True, 0.24075171048627528, 3), 'no'), (('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.9066233038902283, 5), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.08693665266036987, 5), 'yes'), (('GROUP_COL', ('documents', 'document_id', 44), 0.006291799247264862, 5), 'no'), (('GROUP_COL', ('paragraphs', 'paragraph_text', 51), 0.00013657848467119038, 5), 'no'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9898957256440755, 7), 'no'), (('ORDER_AGG_v2', ('paragraphs', 'document_id', 50), ('count', 3), True, 0.48757799573340743, 7), 'no'), (('ORDER_AGG_v2', ('documents', 'document_id', 44), ('count', 3), True, 0.32228177630585064, 7), 'no'), (('ORDER_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('count', 3), False, 0.20282360475900535, 7), 'no'), (('ORDER_DESC_ASC', (('paragraphs', 'paragraph_id', 49), ('count', 3), True), 'asc', 0.6876243352890015, 8), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 71
    },
    {
        "nl": "Show all document ids , names and the number of paragraphs in each document .",
        "true_sql": "select paragraphs.document_id , documents.document_name , count ( * ) group_by paragraphs.document_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            ",",
            "count",
            "(",
            "distinct",
            "paragraphs.document_id",
            ")",
            "group_by",
            "paragraphs.document_id",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [46], 8, [9, 5, 15, 50, 4], 10, 50, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.30178520083427424, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9824557304382324, 3), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('count', 3), True, 0.36698369319083846, 5), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.970845639705658, 7)]",
        "logprob": "-6.25802871995942",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.659340500831604, 1), 'no'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9743773919616463, 5), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.970845639705658, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.659340500831604, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.30178520083427424, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.0388464629650116, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 2.4730312361498367e-05, 1), 'yes'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9743773919616463, 5), 'no'), (('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.4795630375879379, 5), 'no'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('count', 3), True, 0.482513904764598, 5), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('count', 3), True, 0.40202621147376083, 5), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.970845639705658, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 72
    },
    {
        "nl": "What are the ids and names of each document , as well as the number of paragraphs in each ?",
        "true_sql": "select paragraphs.document_id , documents.document_name , count ( * ) group_by paragraphs.document_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            ",",
            "count",
            "(",
            "distinct",
            "paragraphs.document_id",
            ")",
            "group_by",
            "paragraphs.document_id",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [46], 8, [9, 5, 15, 50, 4], 10, 50, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.0006476233247667549, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9942546486854553, 3), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('count', 3), True, 0.2550857723065245, 5), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.08387930691242218, 7)]",
        "logprob": "-16.657467928981113",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9988675117492676, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9942546486854553, 3), 'yes'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9927051830435922, 5), 'no'), (('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.9053550362586975, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.9988675117492676, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.0006476233247667549, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.00040495395660400396, 1), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 6.834353553131221e-05, 1), 'no'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9942546486854553, 3), 'yes'), (('SELECT_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9927051830435922, 5), 'no'), (('SELECT_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.35020945769151607, 5), 'no'), (('SELECT_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.00923880562186241, 5), 'no'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('count', 3), True, 0.25838846881474364, 5), 'no'), (('GROUP_COL', ('paragraphs', 'paragraph_id', 49), 0.9053550362586975, 7), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.08387930691242218, 7), 'yes'), (('GROUP_COL', ('paragraphs', 'paragraph_text', 51), 0.007281888276338577, 7), 'no'), (('GROUP_COL', ('documents', 'document_id', 44), 0.003153618425130844, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 73
    },
    {
        "nl": "List all document ids with at least two paragraphs .",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "having",
            "count",
            "(",
            "paragraphs.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 18, [9, 5, 56, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9714403748512268, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9834746718406677, 3), ('HAV_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 0.9996892221321922, 6), ('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 'terminal', 0.9999710321426392, 7)]",
        "logprob": "-3.972058160431566",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9714403748512268, 1), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9834746718406677, 3), 'yes'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.8486526280444547, 5), 'no'), (('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 0.9996892221321922, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 'terminal', 0.9999710321426392, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9714403748512268, 1), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9834746718406677, 3), 'yes'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.8486526280444547, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8157459335719307, 5), 'no'), (('HAV_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.43629060879677034, 5), 'yes'), (('HAV_AGG_v2', ('templates', '*', 54), ('count', 3), False, 0.1984543388504639, 5), 'no'), (('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 0.9996892221321922, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 'terminal', 0.9999710321426392, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 74
    },
    {
        "nl": "What are the ids of documents that have 2 or more paragraphs ?",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "having",
            "count",
            "(",
            "paragraphs.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 18, [9, 5, 56, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9842516779899597, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9989891648292542, 3), ('HAV_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.029424408704979046, 5), ('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 0.9998962282980808, 6), ('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 'terminal', 0.9999830722808838, 7)]",
        "logprob": "-14.128532030072261",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9842516779899597, 1), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9989891648292542, 3), 'yes'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9999873040652022, 5), 'no'), (('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 0.9998962282980808, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 'terminal', 0.9999830722808838, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9842516779899597, 1), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9989891648292542, 3), 'yes'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9999873040652022, 5), 'no'), (('HAV_AGG_v2', ('documents', '*', 55), ('avg', 5), False, 0.07032981924354963, 5), 'no'), (('HAV_AGG_v2', ('documents', '*', 55), ('sum', 4), False, 0.04909995863774372, 5), 'no'), (('HAV_AGG_v2', ('documents', '*', 55), ('max', 1), False, 0.036325364872789735, 5), 'no'), (('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 0.9998962282980808, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('>=', 3), 'terminal', 0.9999830722808838, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 75
    },
    {
        "nl": "What is the document id and name with greatest number of paragraphs ?",
        "true_sql": "select paragraphs.document_id , documents.document_name group_by paragraphs.document_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            "order_by",
            "documents.document_id",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [46], 11, [44], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9816230535507202, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9307807087898254, 3), ('ORDER_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.004490762017667294, 5), ('ORDER_DESC_ASC', (('documents', 'document_id', 44), ('none_agg', 0), False), 'asc', 0.009612851776182652, 6), ('ORDER_LIMIT', (('documents', 'document_id', 44), ('none_agg', 0), False), 'limit_value', 0.9998806715011597, 7)]",
        "logprob": "-10.753350753521053",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9816230535507202, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9307807087898254, 3), 'yes'), (('ORDER_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.6641842722892761, 5), 'no'), (('ORDER_DESC_ASC', (('documents', 'document_id', 44), ('none_agg', 0), False), 'desc', 0.972575306892395, 6), 'no'), (('ORDER_LIMIT', (('documents', 'document_id', 44), ('none_agg', 0), False), 'limit_value', 0.9998806715011597, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9816230535507202, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.9307807087898254, 3), 'yes'), (('ORDER_AGG_v2', ('templates', 'version_number', 39), ('none_agg', 0), False, 0.6641842722892761, 5), 'no'), (('ORDER_AGG_v2', ('documents', 'document_description', 47), ('none_agg', 0), False, 0.2350522875785828, 5), 'no'), (('ORDER_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.06916630268096924, 5), 'no'), (('ORDER_AGG_v2', ('paragraphs', 'paragraph_text', 51), ('none_agg', 0), False, 0.023543626070022586, 5), 'no'), (('ORDER_DESC_ASC', (('documents', 'document_id', 44), ('none_agg', 0), False), 'desc', 0.972575306892395, 6), 'no'), (('ORDER_LIMIT', (('documents', 'document_id', 44), ('none_agg', 0), False), 'limit_value', 0.9998806715011597, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 76
    },
    {
        "nl": "Return the id and name of the document with the most paragraphs .",
        "true_sql": "select paragraphs.document_id , documents.document_name group_by paragraphs.document_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            "group_by",
            "paragraphs.document_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [46], 10, 50, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8249631524085999, 1), ('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.5966126322746277, 3), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9906484484672546, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7571081847217862, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9998371601104736, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999754428863525, 9)]",
        "logprob": "-2.022197479525036",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8249631524085999, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.5966126322746277, 3), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9906484484672546, 5), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9051049046481494, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9998371601104736, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999754428863525, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8249631524085999, 1), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_name', 46), ('none_agg', 0), False, 0.5966126322746277, 3), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9906484484672546, 5), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9051049046481494, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7571081847217862, 7), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('sum', 4), False, 0.08750845825637174, 7), 'no'), (('ORDER_AGG_v2', ('documents', 'document_description', 47), ('avg', 5), False, 0.07783810770931898, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9998371601104736, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999754428863525, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 77
    },
    {
        "nl": "What is the document id with least number of paragraphs ?",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id order_by count ( paragraphs.* ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "order_by",
            "count",
            "(",
            "paragraphs.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 11, [9, 5, 56, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9710743427276611, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9879690408706665, 3), ('ORDER_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.26069976110506426, 5), ('ORDER_DESC_ASC', (('paragraphs', '*', 56), ('count', 3), False), 'asc', 0.8935470581054688, 6), ('ORDER_LIMIT', (('paragraphs', '*', 56), ('count', 3), False), 'limit_value', 0.9998689889907837, 7)]",
        "logprob": "-5.552675842898772",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9710743427276611, 1), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9879690408706665, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9407240659096988, 5), 'no'), (('ORDER_DESC_ASC', (('paragraphs', '*', 56), ('count', 3), False), 'asc', 0.8935470581054688, 6), 'yes'), (('ORDER_LIMIT', (('paragraphs', '*', 56), ('count', 3), False), 'limit_value', 0.9998689889907837, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9710743427276611, 1), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9879690408706665, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9407240659096988, 5), 'no'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.6758430146008205, 5), 'no'), (('ORDER_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.26069976110506426, 5), 'yes'), (('ORDER_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.2029128880773885, 5), 'no'), (('ORDER_DESC_ASC', (('paragraphs', '*', 56), ('count', 3), False), 'asc', 0.8935470581054688, 6), 'yes'), (('ORDER_LIMIT', (('paragraphs', '*', 56), ('count', 3), False), 'limit_value', 0.9998689889907837, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 78
    },
    {
        "nl": "Return the id of the document with the fewest paragraphs .",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id order_by count ( paragraphs.* ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "order_by",
            "sum",
            "(",
            "documents.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 11, [24, 5, 55, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8240609169006348, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9901847839355469, 3), ('ORDER_AGG_v2', ('documents', '*', 55), ('sum', 4), False, 0.09762181090930339, 5), ('ORDER_DESC_ASC', (('documents', '*', 55), ('sum', 4), False), 'asc', 0.3260040879249573, 6), ('ORDER_LIMIT', (('documents', '*', 55), ('sum', 4), False), 'limit_value', 0.9999812841415405, 7)]",
        "logprob": "-10.647354505705454",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8240609169006348, 1), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9901847839355469, 3), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9252963191890754, 5), 'no'), (('ORDER_DESC_ASC', (('documents', '*', 55), ('sum', 4), False), 'desc', 0.6512031555175781, 6), 'no'), (('ORDER_LIMIT', (('documents', '*', 55), ('sum', 4), False), 'limit_value', 0.9999812841415405, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8240609169006348, 1), 'yes'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9901847839355469, 3), 'yes'), (('ORDER_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9252963191890754, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7183516256293959, 5), 'no'), (('ORDER_AGG_v2', ('documents', 'document_description', 47), ('avg', 5), False, 0.10375810865835976, 5), 'no'), (('ORDER_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.10333075810623099, 5), 'no'), (('ORDER_DESC_ASC', (('documents', '*', 55), ('sum', 4), False), 'desc', 0.6512031555175781, 6), 'no'), (('ORDER_LIMIT', (('documents', '*', 55), ('sum', 4), False), 'limit_value', 0.9999812841415405, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 79
    },
    {
        "nl": "What is the document id with 1 to 2 paragraphs ?",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [[False, 1, [0, [3, 0, False], None], 1.0, 2.0]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "having",
            "count",
            "(",
            "paragraphs.*",
            ")",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 18, [9, 5, 56, 4], [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9251231551170349, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9852061867713928, 3), ('HAV_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 0.9615458846092224, 6), ('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 'terminal', 0.9997712969779968, 7)]",
        "logprob": "-5.497887852978066",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9251231551170349, 1), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.5698949694633484, 3), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9852061867713928, 3), 'yes'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9632944825375692, 5), 'no'), (('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 0.9615458846092224, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 'terminal', 0.9997712969779968, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.9251231551170349, 1), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.5698949694633484, 3), 'no'), (('WHERE_COL', ('paragraphs', 'paragraph_id', 49), 0.30553948879241943, 3), 'no'), (('WHERE_COL', ('documents', 'document_id', 44), 0.06419473886489868, 3), 'no'), (('WHERE_COL', ('paragraphs', 'document_id', 50), 0.03857343643903732, 3), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9852061867713928, 3), 'yes'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.9632944825375692, 5), 'no'), (('HAV_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.5106135796634776, 5), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.49959893869274374, 5), 'no'), (('HAV_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.2701955923385808, 5), 'no'), (('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 0.9615458846092224, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 'terminal', 0.9997712969779968, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 80
    },
    {
        "nl": "Give the ids of documents that have between one and two paragraphs .",
        "true_sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [[False, 1, [0, [3, 0, False], None], 1.0, 2.0]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'paragraphs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "group_by",
            "paragraphs.document_id",
            "having",
            "count",
            "(",
            "paragraphs.*",
            ")",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 10, 50, 18, [9, 5, 56, 4], [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8323743343353271, 1), ('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9911372661590576, 3), ('HAV_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 0.6677513718605042, 6), ('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 'terminal', 0.9995948672294617, 7)]",
        "logprob": "-12.69369133086379",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8323743343353271, 1), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.8034228682518005, 3), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9911372661590576, 3), 'yes'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.999385765014361, 5), 'no'), (('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 0.6677513718605042, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 'terminal', 0.9995948672294617, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8323743343353271, 1), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.8034228682518005, 3), 'no'), (('WHERE_COL', ('paragraphs', 'paragraph_id', 49), 0.11922139674425125, 3), 'no'), (('WHERE_COL', ('documents', 'document_name', 46), 0.03333520144224167, 3), 'no'), (('WHERE_COL', ('documents', 'document_id', 44), 0.03271283581852913, 3), 'no'), (('GROUP_COL', ('paragraphs', 'document_id', 50), 0.9911372661590576, 3), 'yes'), (('HAV_AGG_v2', ('documents', '*', 55), ('count', 3), False, 0.999385765014361, 5), 'no'), (('HAV_AGG_v2', ('paragraphs', '*', 56), ('count', 3), False, 0.19030539639714575, 5), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.16018532775240388, 5), 'no'), (('HAV_AGG_v2', ('documents', 'document_description', 47), ('count', 3), False, 0.11508202755049272, 5), 'no'), (('HAV_OP_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 0.6677513718605042, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('paragraphs', '*', 56), ('count', 3), False), ('between', 9), 'terminal', 0.9995948672294617, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 81
    },
    {
        "nl": "Show the document id with paragraph text 'Brazil ' and 'Ireland ' .",
        "true_sql": "select paragraphs.document_id where paragraphs.paragraph_text = value intersect select paragraphs.document_id where paragraphs.paragraph_text = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Ireland\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Brazil\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "intersect",
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 6, 51, [7], 3, 23, 2, [50], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8486977815628052, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999911785125732, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9998281002044678, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.8757703900337219, 6), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.6937639117240906, 8), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999322891235352, 10), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.999992847442627, 11), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999986886978149, 12)]",
        "logprob": "-0.6629668854559536",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8486977815628052, 1), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999911785125732, 3), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9998281002044678, 4), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.8757703900337219, 6), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.6937639117240906, 8), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999322891235352, 10), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.999992847442627, 11), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999986886978149, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.8486977815628052, 1), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999911785125732, 3), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9998281002044678, 4), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.8757703900337219, 6), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.6937639117240906, 8), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999322891235352, 10), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.999992847442627, 11), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999986886978149, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 82
    },
    {
        "nl": "What are the ids of documents that contain the paragraph text 'Brazil ' and 'Ireland ' ?",
        "true_sql": "select paragraphs.document_id where paragraphs.paragraph_text = value intersect select paragraphs.document_id where paragraphs.paragraph_text = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Ireland\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 16, False], None], '\"Brazil\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_template_types.template_type_code': 1, 'ref_template_types.template_type_description': 2, 'templates.template_id': 3, 'templates.version_number': 4, 'templates.template_type_code': 5, 'templates.date_effective_from': 6, 'templates.date_effective_to': 7, 'templates.template_details': 8, 'documents.document_id': 9, 'documents.template_id': 10, 'documents.document_name': 11, 'documents.document_description': 12, 'documents.other_details': 13, 'paragraphs.paragraph_id': 14, 'paragraphs.document_id': 15, 'paragraphs.paragraph_text': 16, 'paragraphs.other_details': 17, 'ref_template_types.*': 18, 'templates.*': 19, 'documents.*': 20, 'paragraphs.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "intersect",
            "select",
            "paragraphs.document_id",
            "where",
            "paragraphs.paragraph_text",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 6, 51, [7], 3, 23, 2, [50], 6, 51, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.47097113728523254, 1), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999969005584717, 3), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9997267127037048, 4), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999988079071045, 5), ('IUEN_v2', ('intersect', 1), 0.9775705337524414, 6), ('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.28744515776634216, 8), ('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999760389328003, 10), ('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9999916553497314, 11), ('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999977350234985, 12)]",
        "logprob": "-2.023574787858015",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.47097113728523254, 1), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999969005584717, 3), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9997267127037048, 4), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9775705337524414, 6), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.6024582982063293, 8), 'no'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999760389328003, 10), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9999916553497314, 11), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999977350234985, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.47097113728523254, 1), 'yes'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999969005584717, 3), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9997267127037048, 4), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9775705337524414, 6), 'yes'), (('SELECT_AGG_v2', ('documents', 'document_id', 44), ('none_agg', 0), False, 0.6024582982063293, 8), 'no'), (('SELECT_AGG_v2', ('paragraphs', 'document_id', 50), ('none_agg', 0), False, 0.28744515776634216, 8), 'yes'), (('SELECT_AGG_v2', ('paragraphs', 'paragraph_id', 49), ('none_agg', 0), False, 0.10743703693151477, 8), 'no'), (('SELECT_AGG_v2', ('documents', 'template_id', 45), ('none_agg', 0), False, 0.002502919407561422, 8), 'no'), (('WHERE_COL', ('paragraphs', 'paragraph_text', 51), 0.9999760389328003, 10), 'yes'), (('WHERE_OP', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 0.9999916553497314, 11), 'yes'), (('WHERE_ROOT_TERM', (('paragraphs', 'paragraph_text', 51),), ('=', 0), 'terminal', 0.9999977350234985, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 83
    },
    {
        "nl": "Which states have both owners and professionals living there ?",
        "true_sql": "select owners.state intersect select professionals.state",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.state",
            "intersect",
            "select",
            "professionals.state",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 23, 2, [73], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 0.04037968069314957, 1), ('IUEN_v2', ('intersect', 1), 0.0007653203792870045, 2), ('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.8272767663002014, 4)]",
        "logprob": "-10.73061854266296",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.9596202969551086, 1), 'no'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.939028263092041, 3), 'no'), (('GROUP_COL', ('professionals', 'state', 73), 0.6943754553794861, 3), 'no'), (('IUEN_v2', ('union', 2), 0.06532487273216248, 2), 'no'), (('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.8272767663002014, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.9596202969551086, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 0.04037968069314957, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', '*', 91), ('none_agg', 0), False, 4.819583621085138e-11, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 4.591988941871076e-11, 1), 'no'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.939028263092041, 3), 'no'), (('WHERE_COL', ('professionals', 'city', 72), 0.036912839859724045, 3), 'no'), (('WHERE_COL', ('owners', 'city', 49), 0.013140845112502575, 3), 'no'), (('WHERE_COL', ('professionals', 'first_name', 70), 0.004614155273884535, 3), 'no'), (('GROUP_COL', ('professionals', 'state', 73), 0.6943754553794861, 3), 'no'), (('GROUP_COL', ('owners', 'state', 50), 0.29992812871932983, 3), 'no'), (('GROUP_COL', ('professionals', 'professional_id', 68), 0.005661552306264639, 3), 'no'), (('GROUP_COL', ('owners', 'owner_id', 45), 2.0116700397920795e-05, 3), 'no'), (('IUEN_v2', ('union', 2), 0.06532487273216248, 2), 'no'), (('IUEN_v2', ('except', 3), 0.01824990101158619, 2), 'no'), (('IUEN_v2', ('intersect', 1), 0.0007653203792870045, 2), 'yes'), (('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.8272767663002014, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 84
    },
    {
        "nl": "Find the states where both owners and professionals live .",
        "true_sql": "select owners.state intersect select professionals.state",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.state",
            ",",
            "owners.state",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [50], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 0.028027102351188667, 1), ('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 0.5014622807502747, 3)]",
        "logprob": "-4.818523361719297",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.9719728827476501, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 0.5014622807502747, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'state', 73), ('none_agg', 0), False, 0.9719728827476501, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 0.028027102351188667, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', '*', 91), ('none_agg', 0), False, 2.4228485884236794e-09, 1), 'no'), (('SELECT_AGG_v2', ('owners', '*', 89), ('none_agg', 0), False, 1.0131461225526567e-09, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 0.5014622807502747, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 85
    },
    {
        "nl": "What is the average age of the dogs who have gone through any treatments ?",
        "true_sql": "select avg ( dogs.age ) where dogs.dog_id in ( select treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            "where",
            "dogs.dog_id",
            "not",
            "in",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 61, 4], 6, 55, [22, 20], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9997570616586434, 1), ('WHERE_COL', ('dogs', 'dog_id', 55), 0.005852668080478907, 3), ('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.9985938554389155, 4), ('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'terminal', 1.3511453289538622e-06, 5)]",
        "logprob": "-18.82427562791118",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9997570616586434, 1), 'yes'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.685334324836731, 3), 'no'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.9985938554389155, 4), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'root', 0.9999836683273315, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9997570616586434, 1), 'yes'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.685334324836731, 3), 'no'), (('WHERE_COL', ('dogs', 'age', 61), 0.26384323835372925, 3), 'no'), (('WHERE_COL', ('dogs', 'name', 60), 0.03159632161259651, 3), 'no'), (('WHERE_COL', ('dogs', 'dog_id', 55), 0.005852668080478907, 3), 'yes'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.9985938554389155, 4), 'no'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('>', 1), 0.0012504654005169868, 4), 'no'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('=', 0), 0.0010830776300281286, 4), 'no'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('not like', 10), 0.009966519809993335, 4), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'root', 0.9999836683273315, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 86
    },
    {
        "nl": "Find the average age of the dogs who went through treatments .",
        "true_sql": "select avg ( dogs.age ) where dogs.dog_id in ( select treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 61, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9998347565732147, 1)]",
        "logprob": "-0.0012260611434567615",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9998347565732147, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9998347565732147, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 87
    },
    {
        "nl": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments ? List his or her id , last name and cell phone .",
        "true_sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number where professionals.state = value union select professionals.professional_id , professionals.last_name , professionals.cell_number group_by professionals.professional_id having count ( professionals.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'union': None, 'where': []}, 'where': [[False, 2, [0, [0, 38, False], None], '\"Indiana\"', None]], 'extracted_clause_asterisk': {'having': 'professionals.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.last_name",
            ",",
            "professionals.cell_number",
            "where",
            "professionals.state",
            "=",
            "value",
            "union",
            "select",
            "professionals.professional_id",
            ",",
            "professionals.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [75], 8, [78], 6, 73, [7], 3, 31, 2, [68], 8, [75], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.5121935606002808, 1), ('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.018176283687353127, 3), ('WHERE_COL', ('professionals', 'state', 73), 0.4074654281139374, 5), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999583959579468, 6), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999988079071045, 7), ('IUEN_v2', ('union', 2), 0.2456459403038025, 8), ('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.16564764082431793, 10), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.01962223835289478, 12)]",
        "logprob": "-26.98213679867277",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            5,
            6,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.5121935606002808, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.6353558301925659, 3), 'no'), (('WHERE_COL', ('professionals', 'home_phone', 77), 0.472484290599823, 5), 'no'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999583959579468, 6), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999988079071045, 7), 'yes'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.5317521095275879, 9), 'no'), (('IUEN_v2', ('union', 2), 0.2456459403038025, 8), 'yes'), (('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.6613336801528931, 10), 'no'), (('WHERE_COL', ('professionals', 'state', 73), 0.4732787311077118, 14), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.5121935606002808, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.6353558301925659, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.32283067703247065, 3), 'yes'), (('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.018176283687353127, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.01738244481384754, 3), 'no'), (('WHERE_COL', ('professionals', 'home_phone', 77), 0.472484290599823, 5), 'no'), (('WHERE_COL', ('professionals', 'state', 73), 0.4074654281139374, 5), 'yes'), (('WHERE_COL', ('professionals', 'cell_number', 78), 0.0833423063158989, 5), 'no'), (('WHERE_COL', ('professionals', 'last_name', 75), 0.012226976454257965, 5), 'no'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999583959579468, 6), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999988079071045, 7), 'yes'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.5317521095275879, 9), 'no'), (('GROUP_COL', ('treatments', 'professional_id', 81), 0.4633665084838867, 9), 'no'), (('GROUP_COL', ('owners', 'cell_number', 54), 0.001963033340871334, 9), 'no'), (('GROUP_COL', ('professionals', 'professional_id', 68), 0.0013781350571662188, 9), 'no'), (('IUEN_v2', ('union', 2), 0.2456459403038025, 8), 'yes'), (('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.6613336801528931, 10), 'no'), (('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.16564764082431793, 10), 'yes'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.10331373661756516, 10), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.05341282114386559, 10), 'yes'), (('WHERE_COL', ('professionals', 'state', 73), 0.4732787311077118, 14), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.19334591925144196, 14), 'no'), (('WHERE_COL', ('owners', 'last_name', 47), 0.12536966800689697, 14), 'no'), (('WHERE_COL', ('professionals', 'home_phone', 77), 0.09769956767559052, 14), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 88
    },
    {
        "nl": "Find the id , last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments .",
        "true_sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number where professionals.state = value union select professionals.professional_id , professionals.last_name , professionals.cell_number group_by professionals.professional_id having count ( professionals.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'union': None, 'where': []}, 'where': [[False, 2, [0, [0, 38, False], None], '\"Indiana\"', None]], 'extracted_clause_asterisk': {'having': 'professionals.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.last_name",
            ",",
            "professionals.professional_id",
            ",",
            "professionals.cell_number",
            "where",
            "professionals.state",
            "=",
            "value",
            "or",
            "professionals.home_phone",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [75], 8, [68], 8, [78], 6, 73, [7], 3, 25, 77, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.2967829406261444, 1), ('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 1.7722415577736697e-05, 3), ('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.034506745636463165, 5), ('WHERE_COL', ('professionals', 'state', 73), 0.7643862366676331, 7), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999963045120239, 8), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.999998927116394, 9), ('WHERE_COL', ('professionals', 'home_phone', 77), 0.025034571066498756, 11), ('WHERE_OP', (('professionals', 'home_phone', 77),), ('>', 1), 0.978038489818573, 12), ('WHERE_ROOT_TERM', (('professionals', 'home_phone', 77),), ('>', 1), 'terminal', 0.9959836006164551, 13)]",
        "logprob": "-20.195700295023453",
        "q_counter": 8,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.4380173087120056, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.3049436807632447, 5), 'no'), (('WHERE_COL', ('professionals', 'state', 73), 0.7643862366676331, 7), 'yes'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999963045120239, 8), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.999998927116394, 9), 'yes'), (('WHERE_COL', ('owners', 'cell_number', 54), 0.6682029366493225, 11), 'no'), (('WHERE_OP', (('professionals', 'home_phone', 77),), ('>', 1), 0.978038489818573, 12), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'home_phone', 77),), ('>', 1), 'terminal', 0.9959836006164551, 13), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.4380173087120056, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.2967829406261444, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.16374880075454712, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.0535716563463211, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.3049436807632447, 5), 'no'), (('SELECT_AGG_v2', ('owners', 'cell_number', 54), ('none_agg', 0), False, 0.2992241084575653, 5), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.1559595763683319, 5), 'no'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.1536761075258255, 5), 'no'), (('WHERE_COL', ('professionals', 'state', 73), 0.7643862366676331, 7), 'yes'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999963045120239, 8), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.999998927116394, 9), 'yes'), (('WHERE_COL', ('owners', 'cell_number', 54), 0.6682029366493225, 11), 'no'), (('WHERE_COL', ('owners', 'home_phone', 53), 0.20404358208179474, 11), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.06605613976716995, 11), 'no'), (('WHERE_COL', ('owners', 'last_name', 47), 0.031247081235051155, 11), 'no'), (('WHERE_OP', (('professionals', 'home_phone', 77),), ('>', 1), 0.978038489818573, 12), 'no'), (('WHERE_OP', (('professionals', 'home_phone', 77),), ('=', 0), 0.021254539489746094, 12), 'no'), (('WHERE_OP', (('professionals', 'home_phone', 77),), ('>=', 3), 0.062424617480769405, 12), 'no'), (('WHERE_OP', (('professionals', 'home_phone', 77),), ('<', 2), 0.0004966471460647881, 12), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'home_phone', 77),), ('>', 1), 'terminal', 0.9959836006164551, 13), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 89
    },
    {
        "nl": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "true_sql": "select dogs.name where dogs.dog_id not in ( select treatments.dog_id group_by treatments.dog_id having sum ( treatments.cost_of_treatment ) > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [[0, 45, False]], 'having': [[False, 3, [0, [4, 49, False], None], 1000.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            "where",
            "owners.owner_id",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999986886978149, 1), ('WHERE_COL', ('owners', 'owner_id', 45), 0.07543478161096573, 3), ('WHERE_OP', (('owners', 'owner_id', 45),), ('>', 1), 0.890645444393158, 4), ('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('>', 1), 'terminal', 0.9998857975006104, 5)]",
        "logprob": "-3.3453741517533713",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('WHERE_COL', ('treatments', 'cost_of_treatment', 84), 0.3891652524471283, 3), 'no'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('>', 1), 0.890645444393158, 4), 'no'), (('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('>', 1), 'terminal', 0.9998857975006104, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('WHERE_COL', ('treatments', 'cost_of_treatment', 84), 0.3891652524471283, 3), 'no'), (('WHERE_COL', ('dogs', 'owner_id', 56), 0.19015753269195557, 3), 'no'), (('WHERE_COL', ('dogs', 'age', 61), 0.15836459398269653, 3), 'no'), (('WHERE_COL', ('owners', 'last_name', 47), 0.09023884683847427, 3), 'no'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('>', 1), 0.890645444393158, 4), 'no'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.2087108125936834, 4), 'no'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('=', 0), 0.03425733745098114, 4), 'no'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('<', 2), 0.019513873383402824, 4), 'no'), (('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('>', 1), 'terminal', 0.9998857975006104, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 90
    },
    {
        "nl": "What are the names of the dogs for which the owner spent more than 1000 for treatment ?",
        "true_sql": "select dogs.name where dogs.dog_id not in ( select treatments.dog_id group_by treatments.dog_id having sum ( treatments.cost_of_treatment ) > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [[0, 45, False]], 'having': [[False, 3, [0, [4, 49, False], None], 1000.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            "where",
            "dogs.owner_id",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 6, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.999998927116394, 1), ('WHERE_COL', ('dogs', 'owner_id', 56), 0.04077085852622986, 3), ('WHERE_OP', (('dogs', 'owner_id', 56),), ('>', 1), 0.9848957061767578, 4), ('WHERE_ROOT_TERM', (('dogs', 'owner_id', 56),), ('>', 1), 'terminal', 0.9999905824661255, 5)]",
        "logprob": "-3.2449203531529776",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.999998927116394, 1), 'yes'), (('WHERE_COL', ('dogs', 'age', 61), 0.4255017936229706, 3), 'no'), (('WHERE_OP', (('dogs', 'owner_id', 56),), ('>', 1), 0.9848957061767578, 4), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'owner_id', 56),), ('>', 1), 'terminal', 0.9999905824661255, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.999998927116394, 1), 'yes'), (('WHERE_COL', ('dogs', 'age', 61), 0.4255017936229706, 3), 'no'), (('WHERE_COL', ('owners', 'last_name', 47), 0.23642776906490326, 3), 'no'), (('WHERE_COL', ('owners', 'first_name', 46), 0.1305786520242691, 3), 'no'), (('WHERE_COL', ('treatments', 'cost_of_treatment', 84), 0.12027954310178757, 3), 'no'), (('WHERE_OP', (('dogs', 'owner_id', 56),), ('>', 1), 0.9848957061767578, 4), 'no'), (('WHERE_OP', (('dogs', 'owner_id', 56),), ('=', 0), 0.013163131661713123, 4), 'no'), (('WHERE_OP', (('dogs', 'owner_id', 56),), ('not in', 7), 0.029112884581880924, 4), 'no'), (('WHERE_OP', (('dogs', 'owner_id', 56),), ('<', 2), 0.00033695652382448316, 4), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'owner_id', 56),), ('>', 1), 'terminal', 0.9999905824661255, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 91
    },
    {
        "nl": "Which first names are used for professionals or owners but are not used as dog names ?",
        "true_sql": "select professionals.first_name union select owners.first_name except select dogs.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': {'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': []}, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.first_name",
            "union",
            "select",
            "owners.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 31, 2, [46], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.993316650390625, 1), ('IUEN_v2', ('union', 2), 0.0004833512066397816, 2), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.056979302316904075, 4)]",
        "logprob": "-11.64784390178546",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.993316650390625, 1), 'yes'), (('IUEN_v2', ('except', 3), 0.5608314871788025, 2), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.45943698287010193, 4), 'no'), (('WHERE_COL', ('owners', 'last_name', 47), 0.6016539335250854, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.993316650390625, 1), 'yes'), (('IUEN_v2', ('except', 3), 0.5608314871788025, 2), 'no'), (('IUEN_v2', ('union', 2), 0.0004833512066397816, 2), 'yes'), (('IUEN_v2', ('intersect', 1), 3.4453307307558134e-05, 2), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.45943698287010193, 4), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.32300713658332825, 4), 'no'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.10670962929725648, 4), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.056979302316904075, 4), 'yes'), (('WHERE_COL', ('owners', 'last_name', 47), 0.6016539335250854, 6), 'no'), (('WHERE_COL', ('owners', 'first_name', 46), 0.38357192277908325, 6), 'no'), (('WHERE_COL', ('dogs', 'owner_id', 56), 0.004993845243006945, 6), 'no'), (('WHERE_COL', ('dogs', 'name', 60), 0.0033767754212021828, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 92
    },
    {
        "nl": "Find the first names that are used for professionals or owners but are not used as dog names .",
        "true_sql": "select professionals.first_name union select owners.first_name except select dogs.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': {'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': []}, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.first_name",
            "union",
            "select",
            "owners.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 31, 2, [46], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9892645478248596, 1), ('IUEN_v2', ('union', 2), 0.0008765720413066447, 2), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.047885600477457047, 4)]",
        "logprob": "-13.420765188142447",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9892645478248596, 1), 'yes'), (('IUEN_v2', ('except', 3), 0.8134216070175171, 2), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.5694883465766907, 4), 'no'), (('WHERE_COL', ('owners', 'last_name', 47), 0.6054407358169556, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9892645478248596, 1), 'yes'), (('IUEN_v2', ('except', 3), 0.8134216070175171, 2), 'no'), (('IUEN_v2', ('union', 2), 0.0008765720413066447, 2), 'yes'), (('IUEN_v2', ('intersect', 1), 1.2635765415325295e-05, 2), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.5694883465766907, 4), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.26460695266723633, 4), 'no'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.05730827897787095, 4), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.047885600477457047, 4), 'yes'), (('WHERE_COL', ('owners', 'last_name', 47), 0.6054407358169556, 6), 'no'), (('WHERE_COL', ('owners', 'first_name', 46), 0.3846558630466461, 6), 'no'), (('WHERE_COL', ('dogs', 'owner_id', 56), 0.0033275794703513384, 6), 'no'), (('WHERE_COL', ('owners', 'owner_id', 45), 0.003131859004497528, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 93
    },
    {
        "nl": "Which professional did not operate any treatment on dogs ? List the professional 's id , role and email .",
        "true_sql": "select professionals.professional_id , professionals.role_code , professionals.email_address except select professionals.professional_id , professionals.role_code , professionals.email_address",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.role_code",
            "where",
            "treatments.treatment_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.dog_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [68], 8, [69], 6, 79, [22, 20], 5, 2, [55], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.8974164128303528, 1), ('SELECT_AGG_v2', ('professionals', 'role_code', 69), ('none_agg', 0), False, 0.35152637958526617, 3), ('WHERE_COL', ('treatments', 'treatment_id', 79), 0.6046813130378723, 5), ('WHERE_OP', (('treatments', 'treatment_id', 79),), ('not in', 7), 0.9912393052907104, 6), ('WHERE_ROOT_TERM', (('treatments', 'treatment_id', 79),), ('not in', 7), 'root', 0.9999895095825195, 7), ('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.9094820618629456, 9), ('O', '##END_NESTED##', 0.9975245594978333, 10)]",
        "logprob": "-1.7760902849077773",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.8974164128303528, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('none_agg', 0), False, 0.38233739137649536, 3), 'no'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.6046813130378723, 5), 'no'), (('WHERE_OP', (('treatments', 'treatment_id', 79),), ('not in', 7), 0.9912393052907104, 6), 'no'), (('WHERE_ROOT_TERM', (('treatments', 'treatment_id', 79),), ('not in', 7), 'root', 0.9999895095825195, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.8974164128303528, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('none_agg', 0), False, 0.38233739137649536, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'role_code', 69), ('none_agg', 0), False, 0.35152637958526617, 3), 'yes'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.130818247795105, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.07580731064081192, 3), 'yes'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.6046813130378723, 5), 'no'), (('WHERE_COL', ('treatments', 'dog_id', 80), 0.15711449086666107, 5), 'no'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.14686471223831177, 5), 'no'), (('WHERE_COL', ('professionals', 'role_code', 69), 0.05321335047483444, 5), 'no'), (('WHERE_OP', (('treatments', 'treatment_id', 79),), ('not in', 7), 0.9912393052907104, 6), 'no'), (('WHERE_OP', (('treatments', 'treatment_id', 79),), ('not like', 10), 0.11553592144358589, 6), 'no'), (('WHERE_OP', (('treatments', 'treatment_id', 79),), ('!=', 5), 0.0006589554250240326, 6), 'no'), (('WHERE_OP', (('treatments', 'treatment_id', 79),), ('<', 2), 6.112781557021663e-05, 6), 'no'), (('WHERE_ROOT_TERM', (('treatments', 'treatment_id', 79),), ('not in', 7), 'root', 0.9999895095825195, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 94
    },
    {
        "nl": "Give me the id , role and email of the professionals who did not perform any treatment on dogs .",
        "true_sql": "select professionals.professional_id , professionals.role_code , professionals.email_address except select professionals.professional_id , professionals.role_code , professionals.email_address",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.role_code",
            "_EOS"
        ],
        "dec_seq": "[2, [68], 8, [69], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.8334251046180725, 1), ('SELECT_AGG_v2', ('professionals', 'role_code', 69), ('none_agg', 0), False, 0.8734915256500244, 3)]",
        "logprob": "-7.120630936214839",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.8334251046180725, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'role_code', 69), ('none_agg', 0), False, 0.8734915256500244, 3), 'yes'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.4340316653251648, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.8334251046180725, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'role_code', 69), ('none_agg', 0), False, 0.8734915256500244, 3), 'yes'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.4340316653251648, 5), 'no'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.2051474153995514, 5), 'no'), (('WHERE_COL', ('dogs', 'dog_id', 55), 0.19814778864383698, 5), 'no'), (('WHERE_COL', ('professionals', 'role_code', 69), 0.10169489681720734, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 95
    },
    {
        "nl": "Which owner owns the most dogs ? List the owner id , first name and last name .",
        "true_sql": "select dogs.owner_id , owners.first_name , owners.last_name group_by dogs.owner_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [[0, 21, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 21, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "group_by",
            "dogs.owner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 8, [46], 8, [47], 10, 56, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7792752385139465, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.8988446593284607, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.22120450437068936, 5), ('GROUP_COL', ('dogs', 'owner_id', 56), 0.9999001026153564, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3032181336697059, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9836251139640808, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999635219573975, 11)]",
        "logprob": "-6.68637849354696",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7792752385139465, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.8988446593284607, 3), 'yes'), (('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.8906096053826196, 5), 'no'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.9999001026153564, 7), 'yes'), (('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9590648529928174, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9836251139640808, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999635219573975, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7792752385139465, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.8988446593284607, 3), 'yes'), (('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.8906096053826196, 5), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.22120450437068936, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.5603438650462106, 5), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.28452143082808073, 5), 'no'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.9999001026153564, 7), 'yes'), (('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9590648529928174, 9), 'no'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.6155336731003823, 9), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3032181336697059, 9), 'yes'), (('ORDER_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.0005406740820035338, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9836251139640808, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999635219573975, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 96
    },
    {
        "nl": "Return the owner id , first name and last name of the owner who has the most dogs .",
        "true_sql": "select dogs.owner_id , owners.first_name , owners.last_name group_by dogs.owner_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [[0, 21, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 21, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "group_by",
            "dogs.owner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 8, [46], 8, [47], 10, 56, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7779778838157654, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9658377766609192, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9324455857276917, 5), ('GROUP_COL', ('dogs', 'owner_id', 56), 0.9999947547912598, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6789944777437749, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9969401359558105, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999451637268066, 11)]",
        "logprob": "-1.9852676309666732",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7779778838157654, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9658377766609192, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9324455857276917, 5), 'yes'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.9999947547912598, 7), 'yes'), (('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9270113213487242, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9969401359558105, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999451637268066, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7779778838157654, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9658377766609192, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9324455857276917, 5), 'yes'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.9999947547912598, 7), 'yes'), (('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9270113213487242, 9), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6789944777437749, 9), 'yes'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.4668886782461764, 9), 'no'), (('ORDER_AGG_v2', ('breeds', '*', 85), ('count', 3), False, 0.16251077097970873, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9969401359558105, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999451637268066, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 97
    },
    {
        "nl": "Which professionals have done at least two treatments ? List the professional 's id , role , and first name .",
        "true_sql": "select professionals.professional_id , professionals.role_code , professionals.first_name group_by professionals.professional_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.first_name",
            ",",
            "professionals.*",
            "group_by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [68], 8, [70], 8, [91], 10, 68, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.33411911129951477, 1), ('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9348679780960083, 3), ('SELECT_AGG_v2', ('professionals', '*', 91), ('none_agg', 0), False, 0.07445596903562544, 5), ('GROUP_COL', ('professionals', 'professional_id', 68), 0.002413869369775057, 7), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8258119873989893, 9), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9974772466523016, 10), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999732971191406, 11)]",
        "logprob": "-10.58553588877523",
        "q_counter": 6,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.42190882563591003, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6816085967878757, 5), 'no'), (('GROUP_COL', ('treatments', 'professional_id', 81), 0.9085252285003662, 7), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8258119873989893, 9), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9974772466523016, 10), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999732971191406, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.42190882563591003, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.33411911129951477, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.11279753595590589, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.09543413668870925, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6816085967878757, 5), 'no'), (('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.6467102065563498, 5), 'no'), (('SELECT_AGG_v2', ('treatments', '*', 92), ('none_agg', 0), False, 0.10692322999238968, 5), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.10180962830781937, 5), 'no'), (('GROUP_COL', ('treatments', 'professional_id', 81), 0.9085252285003662, 7), 'no'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.08863960951566696, 7), 'no'), (('GROUP_COL', ('professionals', 'professional_id', 68), 0.002413869369775057, 7), 'yes'), (('GROUP_COL', ('treatments', 'cost_of_treatment', 84), 0.0003477044519968331, 7), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8258119873989893, 9), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9974772466523016, 10), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999732971191406, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 98
    },
    {
        "nl": "What are the id , role , and first name of the professionals who have performed two or more treatments ?",
        "true_sql": "select professionals.professional_id , professionals.role_code , professionals.first_name group_by professionals.professional_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.first_name",
            ",",
            "professionals.professional_id",
            ",",
            "professionals.first_name",
            "group_by",
            "professionals.professional_id",
            "having",
            "max",
            "(",
            "treatment_types.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [68], 8, [70], 10, 68, 18, [19, 5, 88, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.31778815388679504, 1), ('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 2.9488447239600635e-07, 3), ('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.04777341336011886, 5), ('GROUP_COL', ('professionals', 'professional_id', 68), 0.002251966157928109, 7), ('HAV_AGG_v2', ('treatment_types', '*', 88), ('max', 1), False, 0.0597081805072642, 9), ('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 0.9993572984707249, 10), ('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 'terminal', 0.9999821186065674, 11)]",
        "logprob": "-36.67587863307788",
        "q_counter": 6,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.44995349645614624, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.513516366481781, 5), 'no'), (('GROUP_COL', ('treatments', 'professional_id', 81), 0.7965091466903687, 7), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.970673216737105, 9), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 0.9993572984707249, 10), 'no'), (('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 'terminal', 0.9999821186065674, 11), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.44995349645614624, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.31778815388679504, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.22717057168483734, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.0033891370985656977, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.513516366481781, 5), 'no'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.2299734503030777, 5), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.148635596036911, 5), 'no'), (('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.04777341336011886, 5), 'yes'), (('GROUP_COL', ('treatments', 'professional_id', 81), 0.7965091466903687, 7), 'no'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.20094510912895203, 7), 'no'), (('GROUP_COL', ('professionals', 'professional_id', 68), 0.002251966157928109, 7), 'yes'), (('GROUP_COL', ('treatments', 'cost_of_treatment', 84), 0.0002874941856134683, 7), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.970673216737105, 9), 'no'), (('HAV_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.5784806282497824, 9), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('avg', 5), False, 0.10272644260049668, 9), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('sum', 4), False, 0.08167461337722924, 9), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 0.9993572984707249, 10), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>', 1), 0.9997420907020569, 10), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('=', 0), 0.00010545601980993524, 10), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('<', 2), 2.0928928279317915e-05, 10), 'no'), (('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 'terminal', 0.9999821186065674, 11), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 99
    },
    {
        "nl": "What is the name of the breed with the most dogs ?",
        "true_sql": "select breeds.breed_name group_by breeds.breed_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 5]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "breeds.breed_name",
            "group_by",
            "breeds.breed_name",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 37, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.8997541069984436, 1), ('GROUP_COL', ('breeds', 'breed_name', 37), 0.0002208592341048643, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.18327272543813433, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9989013671875, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999638795852661, 7)]",
        "logprob": "-15.31480683618702",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.8997541069984436, 1), 'yes'), (('GROUP_COL', ('dogs', 'breed_code', 58), 0.9882204532623291, 3), 'no'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9468920711028036, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9989013671875, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999638795852661, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.8997541069984436, 1), 'yes'), (('GROUP_COL', ('dogs', 'breed_code', 58), 0.9882204532623291, 3), 'no'), (('GROUP_COL', ('dogs', 'name', 60), 0.006171063985675573, 3), 'no'), (('GROUP_COL', ('dogs', 'dog_id', 55), 0.00538126565515995, 3), 'no'), (('GROUP_COL', ('breeds', 'breed_name', 37), 0.0002208592341048643, 3), 'yes'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9468920711028036, 5), 'no'), (('ORDER_AGG_v2', ('breeds', '*', 85), ('count', 3), False, 0.6620100118251347, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'dog_id', 55), ('count', 3), False, 0.22706307582659532, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.18327272543813433, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9989013671875, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999638795852661, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 100
    },
    {
        "nl": "Which breed do the most dogs have ? Give me the breed name .",
        "true_sql": "select breeds.breed_name group_by breeds.breed_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 5]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "breeds.breed_name",
            "group_by",
            "breeds.breed_name",
            "order_by",
            "avg",
            "(",
            "dogs.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 37, 11, [17, 5, 90, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.7418332695960999, 1), ('GROUP_COL', ('breeds', 'breed_name', 37), 0.008112489245831966, 3), ('ORDER_AGG_v2', ('dogs', '*', 90), ('avg', 5), False, 0.08113430743712816, 5), ('ORDER_DESC_ASC', (('dogs', '*', 90), ('avg', 5), False), 'asc', 0.0028119534254074097, 6), ('ORDER_LIMIT', (('dogs', '*', 90), ('avg', 5), False), 'limit_value', 0.9999693632125854, 7)]",
        "logprob": "-21.04874107405615",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.7418332695960999, 1), 'yes'), (('GROUP_COL', ('dogs', 'breed_code', 58), 0.952081024646759, 3), 'no'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9944156238782079, 5), 'no'), (('ORDER_DESC_ASC', (('dogs', '*', 90), ('avg', 5), False), 'desc', 0.9947493672370911, 6), 'no'), (('ORDER_LIMIT', (('dogs', '*', 90), ('avg', 5), False), 'limit_value', 0.9999693632125854, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.7418332695960999, 1), 'yes'), (('GROUP_COL', ('dogs', 'breed_code', 58), 0.952081024646759, 3), 'no'), (('GROUP_COL', ('dogs', 'dog_id', 55), 0.031021038070321083, 3), 'no'), (('GROUP_COL', ('dogs', 'name', 60), 0.008511566556990147, 3), 'no'), (('GROUP_COL', ('breeds', 'breed_name', 37), 0.008112489245831966, 3), 'yes'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9944156238782079, 5), 'no'), (('ORDER_AGG_v2', ('breeds', '*', 85), ('count', 3), False, 0.38406057018710416, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'dog_id', 55), ('count', 3), False, 0.10486815883243888, 5), 'no'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('sum', 4), False, 0.08389348268027148, 5), 'no'), (('ORDER_DESC_ASC', (('dogs', '*', 90), ('avg', 5), False), 'desc', 0.9947493672370911, 6), 'no'), (('ORDER_LIMIT', (('dogs', '*', 90), ('avg', 5), False), 'limit_value', 0.9999693632125854, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 101
    },
    {
        "nl": "Which owner has paid for the most treatments on his or her dogs ? List the owner id and last name .",
        "true_sql": "select owners.owner_id , owners.last_name group_by owners.owner_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.owner_id",
            ",",
            "owners.last_name",
            "group_by",
            "owners.owner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [47], 10, 45, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'owner_id', 45), ('none_agg', 0), False, 0.4318857192993164, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9947031140327454, 3), ('GROUP_COL', ('owners', 'owner_id', 45), 0.006984627805650234, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7332675286084188, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9919816851615906, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999622106552124, 9)]",
        "logprob": "-7.066958095071548",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.4754786193370819, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9947031140327454, 3), 'yes'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.987598717212677, 5), 'no'), (('ORDER_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9124227318546313, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9919816851615906, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999622106552124, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.4754786193370819, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'owner_id', 45), ('none_agg', 0), False, 0.4318857192993164, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.0689857602119446, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.01820473745465279, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9947031140327454, 3), 'yes'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.987598717212677, 5), 'no'), (('GROUP_COL', ('owners', 'owner_id', 45), 0.006984627805650234, 5), 'yes'), (('GROUP_COL', ('charges', 'charge_id', 38), 0.002962699858471751, 5), 'no'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.002407711697742343, 5), 'no'), (('ORDER_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9124227318546313, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7332675286084188, 7), 'yes'), (('ORDER_AGG_v2', ('charges', '*', 86), ('count', 3), False, 0.31661770996173516, 7), 'no'), (('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.2520381477143203, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9919816851615906, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999622106552124, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 102
    },
    {
        "nl": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs .",
        "true_sql": "select owners.owner_id , owners.last_name group_by owners.owner_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.owner_id",
            ",",
            "owners.last_name",
            "group_by",
            "owners.owner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [47], 10, 45, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'owner_id', 45), ('none_agg', 0), False, 0.1831723302602768, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9984028935432434, 3), ('GROUP_COL', ('owners', 'owner_id', 45), 0.0020617551635950804, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.20889527076510445, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9613975286483765, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999494552612305, 9)]",
        "logprob": "-14.93211014290427",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7551756501197815, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9984028935432434, 3), 'yes'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.9978324770927429, 5), 'no'), (('ORDER_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9949984090238293, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9613975286483765, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999494552612305, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7551756501197815, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'owner_id', 45), ('none_agg', 0), False, 0.1831723302602768, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.05177621915936469, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.009133836254477497, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9984028935432434, 3), 'yes'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.9978324770927429, 5), 'no'), (('GROUP_COL', ('owners', 'owner_id', 45), 0.0020617551635950804, 5), 'yes'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 8.544619777239859e-05, 5), 'no'), (('GROUP_COL', ('dogs', 'dog_id', 55), 1.402494035573909e-05, 5), 'no'), (('ORDER_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9949984090238293, 7), 'no'), (('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.2698156937782265, 7), 'no'), (('ORDER_AGG_v2', ('treatments', '*', 92), ('sum', 4), False, 0.26457661394462295, 7), 'no'), (('ORDER_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('avg', 5), False, 0.21922378349643004, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9613975286483765, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999494552612305, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 103
    },
    {
        "nl": "What is the description of the treatment type that costs the least money in total ?",
        "true_sql": "select treatment_types.treatment_type_description group_by treatment_types.treatment_type_code order_by sum ( treatments.cost_of_treatment ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [4, 49, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "treatment_types.treatment_type_description",
            "group_by",
            "treatment_types.treatment_type_code",
            "order_by",
            "avg",
            "(",
            "treatments.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 43, 11, [17, 5, 92, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.9999380111694336, 1), ('GROUP_COL', ('treatment_types', 'treatment_type_code', 43), 0.0012299545342102647, 3), ('ORDER_AGG_v2', ('treatments', '*', 92), ('avg', 5), False, 0.2632510733727732, 5), ('ORDER_DESC_ASC', (('treatments', '*', 92), ('avg', 5), False), 'desc', 0.19483236968517303, 6), ('ORDER_LIMIT', (('treatments', '*', 92), ('avg', 5), False), 'limit_value', 0.9999028444290161, 7)]",
        "logprob": "-13.716540719825728",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.9999380111694336, 1), 'yes'), (('GROUP_COL', ('treatment_types', 'treatment_type_description', 44), 0.9685614705085754, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9567734982618888, 5), 'no'), (('ORDER_DESC_ASC', (('treatments', '*', 92), ('avg', 5), False), 'asc', 0.7534195780754089, 6), 'no'), (('ORDER_LIMIT', (('treatments', '*', 92), ('avg', 5), False), 'limit_value', 0.9999028444290161, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.9999380111694336, 1), 'yes'), (('GROUP_COL', ('treatment_types', 'treatment_type_description', 44), 0.9685614705085754, 3), 'no'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.01700950227677822, 3), 'no'), (('GROUP_COL', ('treatments', 'cost_of_treatment', 84), 0.009929902851581573, 3), 'no'), (('GROUP_COL', ('treatments', 'treatment_type_code', 82), 0.0022824297193437815, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9567734982618888, 5), 'no'), (('ORDER_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.5836880060995555, 5), 'no'), (('ORDER_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.37542942576372473, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.2813036727460745, 5), 'no'), (('ORDER_DESC_ASC', (('treatments', '*', 92), ('avg', 5), False), 'asc', 0.7534195780754089, 6), 'no'), (('ORDER_LIMIT', (('treatments', '*', 92), ('avg', 5), False), 'limit_value', 0.9999028444290161, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 104
    },
    {
        "nl": "Give me the description of the treatment type whose total cost is the lowest .",
        "true_sql": "select treatment_types.treatment_type_description group_by treatment_types.treatment_type_code order_by sum ( treatments.cost_of_treatment ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [4, 49, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "treatment_types.treatment_type_description",
            ",",
            "sum",
            "(",
            "treatment_types.*",
            ")",
            "group_by",
            "treatment_types.treatment_type_code",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [24, 5, 88, 4], 10, 43, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.9999986886978149, 1), ('SELECT_AGG_v2', ('treatment_types', '*', 88), ('sum', 4), False, 0.06015072659660306, 3), ('GROUP_COL', ('treatment_types', 'treatment_type_code', 43), 0.00259446632117033, 5)]",
        "logprob": "-18.1319928337677",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_code', 43), ('none_agg', 0), False, 0.9705485105514526, 3), 'no'), (('GROUP_COL', ('treatment_types', 'treatment_type_description', 44), 0.9965839385986328, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_code', 43), ('none_agg', 0), False, 0.9705485105514526, 3), 'no'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.02298406884074211, 3), 'no'), (('SELECT_AGG_v2', ('treatments', 'treatment_type_code', 82), ('none_agg', 0), False, 0.00634729349985719, 3), 'no'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 4.521632945397872e-05, 3), 'no'), (('GROUP_COL', ('treatment_types', 'treatment_type_description', 44), 0.9965839385986328, 5), 'no'), (('GROUP_COL', ('treatment_types', 'treatment_type_code', 43), 0.00259446632117033, 5), 'yes'), (('GROUP_COL', ('treatments', 'treatment_type_code', 82), 0.0005954964435659349, 5), 'no'), (('GROUP_COL', ('treatments', 'cost_of_treatment', 84), 0.0002239142486359924, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 105
    },
    {
        "nl": "Which owner has paid the largest amount of money in total for their dogs ? Show the owner id and zip code .",
        "true_sql": "select owners.owner_id , owners.zip_code group_by owners.owner_id order_by sum ( treatments.cost_of_treatment ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [4, 49, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 16, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.owner_id",
            ",",
            "owners.zip_code",
            ",",
            "count",
            "(",
            "charges.charge_amount",
            ")",
            "group_by",
            "owners.owner_id",
            "order_by",
            "count",
            "(",
            "owners.owner_id",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [51], 8, [9, 5, 40, 4], 10, 45, 11, [9, 5, 45, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'owner_id', 45), ('none_agg', 0), False, 0.056377653032541275, 1), ('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 0.0034352550283074388, 3), ('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('count', 3), False, 0.30132636346773534, 5), ('GROUP_COL', ('owners', 'owner_id', 45), 0.006547568831592798, 7), ('ORDER_AGG_v2', ('owners', 'owner_id', 45), ('count', 3), False, 0.13487043340639895, 9), ('ORDER_DESC_ASC', (('owners', 'owner_id', 45), ('count', 3), False), 'asc', 0.007777261082082987, 10), ('ORDER_LIMIT', (('owners', 'owner_id', 45), ('count', 3), False), 'limit_value', 0.9996510744094849, 11)]",
        "logprob": "-31.46976610615363",
        "q_counter": 6,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.8818780183792114, 1), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9835780858648798, 5), 'no'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.989030659198761, 7), 'no'), (('ORDER_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9983744603945877, 9), 'no'), (('ORDER_DESC_ASC', (('owners', 'owner_id', 45), ('count', 3), False), 'desc', 0.9890356659889221, 10), 'no'), (('ORDER_LIMIT', (('owners', 'owner_id', 45), ('count', 3), False), 'limit_value', 0.9996510744094849, 11), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.8818780183792114, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'owner_id', 45), ('none_agg', 0), False, 0.056377653032541275, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 0.04708462953567505, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'breed_code', 58), ('none_agg', 0), False, 0.00911607127636671, 1), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9835780858648798, 5), 'no'), (('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.36627044589865954, 5), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('max', 1), False, 0.33271995696457546, 5), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('avg', 5), False, 0.3160240608721981, 5), 'no'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.989030659198761, 7), 'no'), (('GROUP_COL', ('owners', 'owner_id', 45), 0.006547568831592798, 7), 'yes'), (('GROUP_COL', ('owners', 'zip_code', 51), 0.002488406840711832, 7), 'no'), (('GROUP_COL', ('dogs', 'breed_code', 58), 0.0011279609752818942, 7), 'no'), (('ORDER_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9983744603945877, 9), 'no'), (('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.25008057314507864, 9), 'no'), (('ORDER_AGG_v2', ('charges', 'charge_amount', 40), ('avg', 5), False, 0.1656455285547897, 9), 'no'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.1537371761941444, 9), 'no'), (('ORDER_DESC_ASC', (('owners', 'owner_id', 45), ('count', 3), False), 'desc', 0.9890356659889221, 10), 'no'), (('ORDER_LIMIT', (('owners', 'owner_id', 45), ('count', 3), False), 'limit_value', 0.9996510744094849, 11), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 106
    },
    {
        "nl": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs .",
        "true_sql": "select owners.owner_id , owners.zip_code group_by owners.owner_id order_by sum ( treatments.cost_of_treatment ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [4, 49, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 16, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.zip_code",
            ",",
            "owners.owner_id",
            ",",
            "owners.zip_code",
            "group_by",
            "owners.owner_id",
            "order_by",
            "sum",
            "(",
            "owners.owner_id",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 8, [45], 8, [51], 10, 45, 11, [24, 5, 45, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 0.18955202400684357, 1), ('SELECT_AGG_v2', ('owners', 'owner_id', 45), ('none_agg', 0), False, 1.7225620752014955e-07, 3), ('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 0.10499097406864165, 5), ('GROUP_COL', ('owners', 'owner_id', 45), 0.008819138631224632, 7), ('ORDER_AGG_v2', ('owners', 'owner_id', 45), ('sum', 4), False, 0.176552216399311, 9), ('ORDER_DESC_ASC', (('owners', 'owner_id', 45), ('sum', 4), False), 'asc', 0.056401997804641724, 10), ('ORDER_LIMIT', (('owners', 'owner_id', 45), ('sum', 4), False), 'limit_value', 0.9999148845672607, 11)]",
        "logprob": "-34.99170576566925",
        "q_counter": 6,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7427542209625244, 1), 'no'), (('SELECT_AGG_v2', ('owners', '*', 89), ('sum', 4), False, 0.8871026261870364, 5), 'no'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.9896702170372009, 7), 'no'), (('ORDER_AGG_v2', ('owners', '*', 89), ('sum', 4), False, 0.8961218744992964, 9), 'no'), (('ORDER_DESC_ASC', (('owners', 'owner_id', 45), ('sum', 4), False), 'desc', 0.9404852986335754, 10), 'no'), (('ORDER_LIMIT', (('owners', 'owner_id', 45), ('sum', 4), False), 'limit_value', 0.9999148845672607, 11), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.7427542209625244, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 0.18955202400684357, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'owner_id', 45), ('none_agg', 0), False, 0.038447082042694085, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'breed_code', 58), ('none_agg', 0), False, 0.01919520832598209, 1), 'no'), (('SELECT_AGG_v2', ('owners', '*', 89), ('sum', 4), False, 0.8871026261870364, 5), 'no'), (('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 0.10499097406864165, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', '*', 90), ('sum', 4), False, 0.4255884944078242, 5), 'no'), (('SELECT_AGG_v2', ('dogs', '*', 90), ('none_agg', 0), False, 0.012176401913166046, 5), 'no'), (('GROUP_COL', ('dogs', 'owner_id', 56), 0.9896702170372009, 7), 'no'), (('GROUP_COL', ('owners', 'owner_id', 45), 0.008819138631224632, 7), 'yes'), (('GROUP_COL', ('dogs', 'breed_code', 58), 0.0008523011929355562, 7), 'no'), (('GROUP_COL', ('dogs', 'dog_id', 55), 0.0004563475667964667, 7), 'no'), (('ORDER_AGG_v2', ('owners', '*', 89), ('sum', 4), False, 0.8961218744992964, 9), 'no'), (('ORDER_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.7621753146314488, 9), 'no'), (('ORDER_AGG_v2', ('owners', '*', 89), ('avg', 5), False, 0.31612569921388833, 9), 'no'), (('ORDER_AGG_v2', ('dogs', '*', 90), ('sum', 4), False, 0.2332801917903831, 9), 'no'), (('ORDER_DESC_ASC', (('owners', 'owner_id', 45), ('sum', 4), False), 'desc', 0.9404852986335754, 10), 'no'), (('ORDER_LIMIT', (('owners', 'owner_id', 45), ('sum', 4), False), 'limit_value', 0.9999148845672607, 11), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 107
    },
    {
        "nl": "Which professionals have done at least two types of treatments ? List the professional id and cell phone .",
        "true_sql": "select professionals.professional_id , professionals.cell_number group_by professionals.professional_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 43, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.cell_number",
            "group_by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [68], 8, [78], 10, 68, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.1749410331249237, 1), ('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.5803809762001038, 3), ('GROUP_COL', ('professionals', 'professional_id', 68), 0.10373972356319427, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994312989106158, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999741315841675, 9)]",
        "logprob": "-7.859512055298945",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.44625067710876465, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.5803809762001038, 3), 'yes'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.3397364318370819, 5), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.979606647986695, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994312989106158, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999741315841675, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.44625067710876465, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.3099778890609741, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.1749410331249237, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'treatment_type_code', 82), ('none_agg', 0), False, 0.045303154736757285, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.5803809762001038, 3), 'yes'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.3397364318370819, 5), 'no'), (('GROUP_COL', ('treatments', 'professional_id', 81), 0.3095206320285797, 5), 'no'), (('GROUP_COL', ('treatments', 'treatment_type_code', 82), 0.17613397538661957, 5), 'no'), (('GROUP_COL', ('professionals', 'professional_id', 68), 0.10373972356319427, 5), 'yes'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.979606647986695, 7), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.43838207835305704, 7), 'yes'), (('HAV_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.43007687633836295, 7), 'no'), (('HAV_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('count', 3), True, 0.25759395447536926, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994312989106158, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999741315841675, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 108
    },
    {
        "nl": "Find the id and cell phone of the professionals who operate two or more types of treatments .",
        "true_sql": "select professionals.professional_id , professionals.cell_number group_by professionals.professional_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 43, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.cell_number",
            "group_by",
            "professionals.professional_id",
            "having",
            "max",
            "(",
            "treatment_types.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [68], 8, [78], 10, 68, 18, [19, 5, 88, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.2996993660926819, 1), ('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.1856287121772766, 3), ('GROUP_COL', ('professionals', 'professional_id', 68), 0.16395676136016846, 5), ('HAV_AGG_v2', ('treatment_types', '*', 88), ('max', 1), False, 0.03619168434589645, 7), ('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 0.9995781774030148, 8), ('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 'terminal', 0.9999897480010986, 9)]",
        "logprob": "-17.981082609676022",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.40879127383232117, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.7099580764770508, 3), 'no'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.6852307319641113, 5), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.9999788698573984, 7), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 0.9995781774030148, 8), 'no'), (('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 'terminal', 0.9999897480010986, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.40879127383232117, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.2996993660926819, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.289806216955185, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'treatment_type_code', 82), ('none_agg', 0), False, 0.0008951419731602075, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.7099580764770508, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 0.1856287121772766, 3), 'yes'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_code', 43), ('none_agg', 0), False, 0.011407828889787192, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.004033946897834538, 3), 'no'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.6852307319641113, 5), 'no'), (('GROUP_COL', ('professionals', 'professional_id', 68), 0.16395676136016846, 5), 'yes'), (('GROUP_COL', ('treatments', 'professional_id', 81), 0.13318738341331482, 5), 'no'), (('GROUP_COL', ('treatment_types', 'treatment_type_description', 44), 0.01004051323980093, 5), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.9999788698573984, 7), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('avg', 5), False, 0.07143499541797176, 7), 'no'), (('HAV_AGG_v2', ('treatment_types', '*', 88), ('sum', 4), False, 0.06428128049939441, 7), 'no'), (('HAV_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.05565598534975028, 7), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 0.9995781774030148, 8), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>', 1), 0.9996106028556824, 8), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('=', 0), 7.242014544317499e-05, 8), 'no'), (('HAV_OP_v2', (('treatment_types', '*', 88), ('max', 1), False), ('<', 2), 1.4428330359805841e-05, 8), 'no'), (('HAV_ROOT_TERM_v2', (('treatment_types', '*', 88), ('max', 1), False), ('>=', 3), 'terminal', 0.9999897480010986, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 109
    },
    {
        "nl": "What are the first name and last name of the professionals who have done treatment with cost below average ?",
        "true_sql": "select distinct professionals.first_name , professionals.last_name where treatments.cost_of_treatment < ( select avg ( treatments.cost_of_treatment ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 40, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 49, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 49, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.first_name",
            ",",
            "professionals.last_name",
            "where",
            "treatments.cost_of_treatment",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "treatments.cost_of_treatment",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [75], 6, 84, [21], 5, 2, [17, 5, 84, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.999631404876709, 1), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.9966199398040771, 3), ('WHERE_COL', ('treatments', 'cost_of_treatment', 84), 0.9942330718040466, 5), ('WHERE_OP', (('treatments', 'cost_of_treatment', 84),), ('<', 2), 0.0004516504122875631, 6), ('WHERE_ROOT_TERM', (('treatments', 'cost_of_treatment', 84),), ('<', 2), 'root', 0.8856615424156189, 7), ('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('avg', 5), False, 0.9985606745980232, 9), ('O', '##END_NESTED##', 0.9999324083328247, 10)]",
        "logprob": "-7.845926753774325",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.999631404876709, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.9966199398040771, 3), 'yes'), (('WHERE_COL', ('treatments', 'cost_of_treatment', 84), 0.9942330718040466, 5), 'yes'), (('WHERE_OP', (('treatments', 'cost_of_treatment', 84),), ('>', 1), 0.9965819716453552, 6), 'no'), (('WHERE_ROOT_TERM', (('treatments', 'cost_of_treatment', 84),), ('<', 2), 'root', 0.8856615424156189, 7), 'yes'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('avg', 5), False, 0.9985606745980232, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.999631404876709, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.9966199398040771, 3), 'yes'), (('WHERE_COL', ('treatments', 'cost_of_treatment', 84), 0.9942330718040466, 5), 'yes'), (('WHERE_OP', (('treatments', 'cost_of_treatment', 84),), ('>', 1), 0.9965819716453552, 6), 'no'), (('WHERE_OP', (('treatments', 'cost_of_treatment', 84),), ('=', 0), 0.002578088780865073, 6), 'no'), (('WHERE_OP', (('treatments', 'cost_of_treatment', 84),), ('<', 2), 0.0004516504122875631, 6), 'yes'), (('WHERE_OP', (('treatments', 'cost_of_treatment', 84),), ('>=', 3), 0.015029057576284621, 6), 'no'), (('WHERE_ROOT_TERM', (('treatments', 'cost_of_treatment', 84),), ('<', 2), 'root', 0.8856615424156189, 7), 'yes'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('avg', 5), False, 0.9985606745980232, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 110
    },
    {
        "nl": "Which professionals have operated a treatment that costs less than the average ? Give me theor first names and last names .",
        "true_sql": "select distinct professionals.first_name , professionals.last_name where treatments.cost_of_treatment < ( select avg ( treatments.cost_of_treatment ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 40, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 49, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 49, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.last_name",
            ",",
            "professionals.first_name",
            "where",
            "professionals.professional_id",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "professionals.last_name",
            ")",
            "where",
            "professionals.first_name",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [75], 8, [70], 6, 68, [21], 5, 2, [17, 5, 75, 4], 6, 70, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.197978213429451, 1), ('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.00676577119156718, 3), ('WHERE_COL', ('professionals', 'professional_id', 68), 0.010665880516171455, 5), ('WHERE_OP', (('professionals', 'professional_id', 68),), ('<', 2), 0.9933617115020752, 6), ('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('<', 2), 'root', 0.9980680346488953, 7), ('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('avg', 5), False, 0.8308760458040713, 9), ('WHERE_COL', ('professionals', 'first_name', 70), 0.7349709272384644, 11), ('WHERE_OP', (('professionals', 'first_name', 70),), ('=', 0), 0.9998144507408142, 12), ('WHERE_ROOT_TERM', (('professionals', 'first_name', 70),), ('=', 0), 'terminal', 0.9999861717224121, 13), ('O', '##END_NESTED##', 0.9964224100112915, 14)]",
        "logprob": "-12.271683509803642",
        "q_counter": 4,
        "questioned_indices": [
            0,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.6189348101615906, 1), 'no'), (('WHERE_COL', ('professionals', 'first_name', 70), 0.8168056011199951, 5), 'no'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('<', 2), 0.9933617115020752, 6), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('<', 2), 'root', 0.9980680346488953, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.6189348101615906, 1), 'no'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.197978213429451, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.17567318677902224, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.00592978438362479, 1), 'no'), (('WHERE_COL', ('professionals', 'first_name', 70), 0.8168056011199951, 5), 'no'), (('WHERE_COL', ('professionals', 'last_name', 75), 0.05193425342440605, 5), 'no'), (('WHERE_COL', ('treatments', 'treatment_type_code', 82), 0.03656750172376633, 5), 'no'), (('WHERE_COL', ('treatment_types', 'treatment_type_description', 44), 0.024935942143201828, 5), 'no'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('<', 2), 0.9933617115020752, 6), 'no'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('>', 1), 0.003450587159022689, 6), 'no'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.038240250011884795, 6), 'no'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('like', 6), 0.0004499326169025153, 6), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('<', 2), 'root', 0.9980680346488953, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 111
    },
    {
        "nl": "List the date of each treatment , together with the first name of the professional who operated it .",
        "true_sql": "select treatments.date_of_treatment , professionals.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 46, False], None], [0, 33, False], None]], 'table_units': [['table_unit', 7], ['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 48, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "treatments.date_of_treatment",
            ",",
            "professionals.first_name",
            ",",
            "min",
            "(",
            "owners.last_name",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [83], 8, [70], 8, [26, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9999833106994629, 1), ('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.14199459552764893, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('min', 2), False, 0.0687645939435432, 5)]",
        "logprob": "-15.466255185472843",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9999833106994629, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.6345521211624146, 3), 'no'), (('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.10408789053937877, 5), 'no'), (('GROUP_COL', ('treatments', 'date_of_treatment', 83), 0.9990482926368713, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9999833106994629, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.6345521211624146, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.17689622938632968, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.14199459552764893, 3), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.03674083948135376, 3), 'no'), (('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.10408789053937877, 5), 'no'), (('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('none_agg', 0), False, 0.00011048828309867522, 5), 'no'), (('SELECT_AGG_v2', ('owners', 'street', 48), ('none_agg', 0), False, 0.00010837119043571874, 5), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('count', 3), True, 0.13416958006930754, 5), 'no'), (('GROUP_COL', ('treatments', 'date_of_treatment', 83), 0.9990482926368713, 7), 'no'), (('GROUP_COL', ('treatments', 'cost_of_treatment', 84), 0.0008436036296188831, 7), 'no'), (('GROUP_COL', ('treatments', 'professional_id', 81), 7.551963062724099e-05, 7), 'no'), (('GROUP_COL', ('professionals', 'professional_id', 68), 1.4863495380268432e-05, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 112
    },
    {
        "nl": "What are the date and the operating professional 's first name of each treatment ?",
        "true_sql": "select treatments.date_of_treatment , professionals.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 46, False], None], [0, 33, False], None]], 'table_units': [['table_unit', 7], ['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 48, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "treatments.date_of_treatment",
            ",",
            "professionals.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [83], 8, [70], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9997782111167908, 1), ('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.2715097963809967, 3)]",
        "logprob": "-1.3322061220375319",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9997782111167908, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.7281059622764587, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9997782111167908, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.7281059622764587, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.2715097963809967, 3), 'yes'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.0003197582555003462, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 5.9223162679700174e-05, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 113
    },
    {
        "nl": "List the cost of each treatment and the corresponding treatment type description .",
        "true_sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 47, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 7], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 49, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "treatments.cost_of_treatment",
            ",",
            "treatment_types.treatment_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [84], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.8880083560943604, 1), ('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.7154093980789185, 3)]",
        "logprob": "-0.8006753110038131",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.8880083560943604, 1), 'yes'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.7154093980789185, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.8880083560943604, 1), 'yes'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.7154093980789185, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 114
    },
    {
        "nl": "What are the cost and treatment type description of each treatment ?",
        "true_sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 47, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 7], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 49, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "treatment_types.treatment_type_description",
            ",",
            "treatment_types.treatment_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.028390711173415187, 1), ('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.83070969581604, 3)]",
        "logprob": "-3.793065422703236",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'treatment_type_code', 82), ('none_agg', 0), False, 0.527247965335846, 1), 'no'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.83070969581604, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'treatment_type_code', 82), ('none_agg', 0), False, 0.527247965335846, 1), 'no'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_code', 43), ('none_agg', 0), False, 0.42133522033691406, 1), 'no'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.028390711173415187, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('max', 1), False, 0.24756087486492798, 1), 'no'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.83070969581604, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 115
    },
    {
        "nl": "List each owner 's first name , last name , and the size of his for her dog .",
        "true_sql": "select owners.first_name , owners.last_name , dogs.size_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.first_name",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9232170581817627, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.937218189239502, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9210454225540161, 5)]",
        "logprob": "-5.801027108279619",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9232170581817627, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.937218189239502, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9210454225540161, 5), 'yes'), (('WHERE_COL', ('owners', 'first_name', 46), 0.9927532076835632, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9232170581817627, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.937218189239502, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9210454225540161, 5), 'yes'), (('WHERE_COL', ('owners', 'first_name', 46), 0.9927532076835632, 7), 'no'), (('WHERE_COL', ('dogs', 'name', 60), 0.002966806758195162, 7), 'no'), (('WHERE_COL', ('owners', 'last_name', 47), 0.0023294328711926937, 7), 'no'), (('WHERE_COL', ('dogs', 'size_code', 59), 0.0010436255251988769, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 116
    },
    {
        "nl": "What are each owner 's first name , last name , and the size of their dog ?",
        "true_sql": "select owners.first_name , owners.last_name , dogs.size_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.first_name",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9801310896873474, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.8748239278793335, 3), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9149360656738281, 5)]",
        "logprob": "-0.2631159310145684",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9801310896873474, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.8748239278793335, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9149360656738281, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9801310896873474, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.8748239278793335, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9149360656738281, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 117
    },
    {
        "nl": "List pairs of the owner 's first name and the dogs 's name .",
        "true_sql": "select owners.first_name , dogs.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "owners.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [46], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9996474981307983, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.02164516411721706, 3)]",
        "logprob": "-3.8386352238658934",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9996474981307983, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9783531427383423, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9996474981307983, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9783531427383423, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.02164516411721706, 3), 'yes'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 1.2868721341874332e-06, 3), 'yes'), (('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 4.4433599555304713e-07, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 118
    },
    {
        "nl": "What are each owner 's first name and their dogs 's name ?",
        "true_sql": "select owners.first_name , dogs.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "owners.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [46], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.987621009349823, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.016532765701413158, 3)]",
        "logprob": "-4.118593562534051",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.987621009349823, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9834643602371216, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.987621009349823, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9834643602371216, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.016532765701413158, 3), 'yes'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 2.6819102458830466e-06, 3), 'yes'), (('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 1.428445699502845e-07, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 119
    },
    {
        "nl": "List the names of the dogs of the rarest breed and the treatment dates of them .",
        "true_sql": "select dogs.name , treatments.date_of_treatment where dogs.breed_code = ( select dogs.breed_code group_by dogs.breed_code order_by count ( dogs.* ) asc limit_value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 48, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'order_by': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "treatments.date_of_treatment",
            "where",
            "dogs.date_departed",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dogs.date_departed",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [83], 6, 67, [7], 5, 2, [19, 5, 67, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9903136491775513, 1), ('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9563726782798767, 3), ('WHERE_COL', ('dogs', 'date_departed', 67), 0.046434491872787476, 5), ('WHERE_OP', (('dogs', 'date_departed', 67),), ('=', 0), 0.9968209266662598, 6), ('WHERE_ROOT_TERM', (('dogs', 'date_departed', 67),), ('=', 0), 'root', 0.991540253162384, 7), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('max', 1), False, 0.7530215315220011, 9), ('O', '##END_NESTED##', 0.999954342842102, 10)]",
        "logprob": "-7.650138923699421",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9903136491775513, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9563726782798767, 3), 'yes'), (('ORDER_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.2718067169189453, 5), 'no'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.8731544613838196, 5), 'no'), (('WHERE_COL', ('treatment_types', 'treatment_type_description', 44), 0.36458930373191833, 5), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('=', 0), 0.9968209266662598, 6), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'date_departed', 67),), ('=', 0), 'root', 0.991540253162384, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9903136491775513, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9563726782798767, 3), 'yes'), (('ORDER_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.2718067169189453, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.270795077085495, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.17548909783363342, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.1354840099811554, 5), 'no'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.8731544613838196, 5), 'no'), (('GROUP_COL', ('treatments', 'date_of_treatment', 83), 0.09857814013957977, 5), 'no'), (('GROUP_COL', ('treatments', 'dog_id', 80), 0.01706375554203987, 5), 'no'), (('GROUP_COL', ('treatments', 'cost_of_treatment', 84), 0.005671638064086437, 5), 'no'), (('WHERE_COL', ('treatment_types', 'treatment_type_description', 44), 0.36458930373191833, 5), 'no'), (('WHERE_COL', ('treatments', 'date_of_treatment', 83), 0.22770723700523376, 5), 'no'), (('WHERE_COL', ('treatment_types', 'treatment_type_code', 43), 0.18535645306110382, 5), 'no'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.07021636515855789, 5), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('=', 0), 0.9968209266662598, 6), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('>', 1), 0.0019462169148027897, 6), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('not in', 7), 0.024905271232949357, 6), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('>=', 3), 0.014476331940757283, 6), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'date_departed', 67),), ('=', 0), 'root', 0.991540253162384, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 120
    },
    {
        "nl": "Which dogs are of the rarest breed ? Show their names and treatment dates .",
        "true_sql": "select dogs.name , treatments.date_of_treatment where dogs.breed_code = ( select dogs.breed_code group_by dogs.breed_code order_by count ( dogs.* ) asc limit_value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 48, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'order_by': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "treatments.date_of_treatment",
            "where",
            "dogs.date_departed",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dogs.date_departed",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [83], 6, 67, [7], 5, 2, [19, 5, 67, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9966251850128174, 1), ('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9813050627708435, 3), ('WHERE_COL', ('dogs', 'date_departed', 67), 0.04298566281795502, 5), ('WHERE_OP', (('dogs', 'date_departed', 67),), ('=', 0), 0.9979075193405151, 6), ('WHERE_ROOT_TERM', (('dogs', 'date_departed', 67),), ('=', 0), 'root', 0.9060422778129578, 7), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('max', 1), False, 0.7267702266858428, 9), ('O', '##END_NESTED##', 0.9999475479125977, 10)]",
        "logprob": "-7.702939952575853",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9966251850128174, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9813050627708435, 3), 'yes'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.8046892881393433, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.56790691614151, 5), 'no'), (('WHERE_COL', ('treatments', 'date_of_treatment', 83), 0.3704912066459656, 5), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('=', 0), 0.9979075193405151, 6), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'date_departed', 67),), ('=', 0), 'root', 0.9060422778129578, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9966251850128174, 1), 'yes'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.9813050627708435, 3), 'yes'), (('GROUP_COL', ('treatments', 'treatment_id', 79), 0.8046892881393433, 5), 'no'), (('GROUP_COL', ('treatments', 'date_of_treatment', 83), 0.12505340576171875, 5), 'no'), (('GROUP_COL', ('treatments', 'dog_id', 80), 0.02794838137924671, 5), 'no'), (('GROUP_COL', ('treatments', 'cost_of_treatment', 84), 0.011596711352467537, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.56790691614151, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.14951862394809723, 5), 'no'), (('ORDER_AGG_v2', ('treatments', 'date_of_treatment', 83), ('none_agg', 0), False, 0.11913912743330002, 5), 'no'), (('ORDER_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.09367824345827101, 5), 'no'), (('WHERE_COL', ('treatments', 'date_of_treatment', 83), 0.3704912066459656, 5), 'no'), (('WHERE_COL', ('treatment_types', 'treatment_type_description', 44), 0.26529476046562195, 5), 'no'), (('WHERE_COL', ('treatment_types', 'treatment_type_code', 43), 0.1345682442188263, 5), 'no'), (('WHERE_COL', ('dogs', 'date_arrived', 65), 0.09882747381925583, 5), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('=', 0), 0.9979075193405151, 6), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('>', 1), 0.0014543469296768308, 6), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('not in', 7), 0.017494810757089727, 6), 'no'), (('WHERE_OP', (('dogs', 'date_departed', 67),), ('>=', 3), 0.0158817274654368, 6), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'date_departed', 67),), ('=', 0), 'root', 0.9060422778129578, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 121
    },
    {
        "nl": "Which dogs are owned by someone who lives in Virginia ? List the owner 's first name and the dog 's name .",
        "true_sql": "select owners.first_name , dogs.name where owners.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"Virginia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "owners.first_name",
            "where",
            "owners.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [46], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.003552085720002652, 3), ('WHERE_COL', ('owners', 'state', 50), 0.8973737955093384, 5), ('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999898672103882, 6), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999994039535522, 7)]",
        "logprob": "-5.748725866966634",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9963924288749695, 3), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.8973737955093384, 5), 'yes'), (('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999898672103882, 6), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999994039535522, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9963924288749695, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.003552085720002652, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 3.0159013476804803e-05, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 1.659460031078197e-05, 3), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.8973737955093384, 5), 'yes'), (('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999898672103882, 6), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999994039535522, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 122
    },
    {
        "nl": "Find the first names of owners living in Virginia and the names of dogs they own .",
        "true_sql": "select owners.first_name , dogs.name where owners.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"Virginia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.first_name",
            ",",
            "owners.first_name",
            "where",
            "owners.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [46], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9941582679748535, 1), ('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 6.364812634274135e-06, 3), ('WHERE_COL', ('owners', 'state', 50), 0.9988762736320496, 5), ('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999948740005493, 6), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999994039535522, 7)]",
        "logprob": "-11.97191057400501",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9941582679748535, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9999139308929443, 3), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.9988762736320496, 5), 'yes'), (('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999948740005493, 6), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999994039535522, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.9941582679748535, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9999139308929443, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'state', 50), ('none_agg', 0), False, 7.705835741944618e-05, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 6.364812634274135e-06, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'zip_code', 51), ('none_agg', 0), False, 1.6353925502698996e-06, 3), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.9988762736320496, 5), 'yes'), (('WHERE_OP', (('owners', 'state', 50),), ('=', 0), 0.9999948740005493, 6), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('=', 0), 'terminal', 0.9999994039535522, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 123
    },
    {
        "nl": "What are the arriving date and the departing date of the dogs who have gone through a treatment ?",
        "true_sql": "select distinct dogs.date_arrived , dogs.date_departed",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            "_EOS"
        ],
        "dec_seq": "[2, [65], 8, [67], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.991443932056427, 1), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.5096879601478577, 3)]",
        "logprob": "-5.2038024355110855",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.991443932056427, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.5096879601478577, 3), 'yes'), (('WHERE_COL', ('treatments', 'date_of_treatment', 83), 0.8979356288909912, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.991443932056427, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.5096879601478577, 3), 'yes'), (('WHERE_COL', ('treatments', 'date_of_treatment', 83), 0.8979356288909912, 5), 'no'), (('WHERE_COL', ('dogs', 'date_arrived', 65), 0.056463103741407394, 5), 'no'), (('WHERE_COL', ('dogs', 'date_departed', 67), 0.04298285394906998, 5), 'no'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.0011560643324628472, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 124
    },
    {
        "nl": "Find the arriving date and the departing date of the dogs that received a treatment .",
        "true_sql": "select distinct dogs.date_arrived , dogs.date_departed",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            "_EOS"
        ],
        "dec_seq": "[2, [65], 8, [67], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.9992842078208923, 1), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9212195873260498, 3)]",
        "logprob": "-0.1020940078403548",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.9992842078208923, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9212195873260498, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.9992842078208923, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9212195873260498, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 125
    },
    {
        "nl": "List the last name of the owner owning the youngest dog .",
        "true_sql": "select owners.last_name where dogs.age = ( select max ( dogs.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 26, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 26, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.last_name",
            "where",
            "dogs.age",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dogs.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 61, [7], 5, 2, [19, 5, 61, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.6627717614173889, 1), ('WHERE_COL', ('dogs', 'age', 61), 0.9995669722557068, 3), ('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 0.9988716244697571, 4), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('=', 0), 'root', 0.999996542930603, 5), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.9968955077060245, 7), ('O', '##END_NESTED##', 0.9999761581420898, 8)]",
        "logprob": "-3.833235992279312",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.6627717614173889, 1), 'yes'), (('ORDER_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.9999995231628418, 3), 'no'), (('WHERE_COL', ('dogs', 'age', 61), 0.9995669722557068, 3), 'yes'), (('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 0.9988716244697571, 4), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('=', 0), 'root', 0.999996542930603, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.9968955077060245, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.6627717614173889, 1), 'yes'), (('ORDER_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.9999995231628418, 3), 'no'), (('ORDER_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 3.441972467044253e-07, 3), 'no'), (('ORDER_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 1.3454234704113325e-07, 3), 'no'), (('ORDER_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 4.8974437838467185e-09, 3), 'no'), (('WHERE_COL', ('dogs', 'age', 61), 0.9995669722557068, 3), 'yes'), (('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 0.9988716244697571, 4), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('=', 0), 'root', 0.999996542930603, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.9968955077060245, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 126
    },
    {
        "nl": "Who owns the youngest dog ? Give me his or her last name .",
        "true_sql": "select owners.last_name where dogs.age = ( select max ( dogs.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 26, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 26, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.last_name",
            "where",
            "dogs.age",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dogs.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 61, [7], 5, 2, [19, 5, 61, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.00016027466335799548, 1), ('WHERE_COL', ('dogs', 'age', 61), 1.0, 3), ('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 0.9906569719314575, 4), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('=', 0), 'root', 0.9385653734207153, 5), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.995438046578424, 7), ('O', '##END_NESTED##', 0.9432649612426758, 8)]",
        "logprob": "-10.525779149634001",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9774166345596313, 1), 'no'), (('WHERE_COL', ('owners', 'first_name', 46), 0.8037670254707336, 3), 'no'), (('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 0.9906569719314575, 4), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('=', 0), 'root', 0.9385653734207153, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.995438046578424, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9774166345596313, 1), 'no'), (('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.019006352871656418, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'breed_code', 58), ('none_agg', 0), False, 0.0026773449499160043, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.0007279551937244831, 1), 'no'), (('WHERE_COL', ('owners', 'first_name', 46), 0.8037670254707336, 3), 'no'), (('WHERE_COL', ('dogs', 'age', 61), 0.19529303908348083, 3), 'yes'), (('WHERE_COL', ('owners', 'last_name', 47), 0.000813800492323935, 3), 'no'), (('WHERE_COL', ('dogs', 'name', 60), 0.00011337546311551705, 3), 'no'), (('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 0.9906569719314575, 4), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('=', 0), 'root', 0.9385653734207153, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.995438046578424, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 127
    },
    {
        "nl": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin .",
        "true_sql": "select professionals.email_address where professionals.state = value or professionals.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 41, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], '\"Hawaii\"', None], 'or', [False, 2, [0, [0, 38, False], None], '\"Wisconsin\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.email_address",
            "where",
            "professionals.state",
            "=",
            "value",
            "or",
            "professionals.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 6, 73, [7], 3, 25, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9977783560752869, 1), ('WHERE_COL', ('professionals', 'state', 73), 0.9744320511817932, 3), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9997019171714783, 4), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999971389770508, 5), ('WHERE_COL', ('professionals', 'state', 73), 0.09740171581506729, 7), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999672174453735, 8), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999978542327881, 9)]",
        "logprob": "-2.7339389257681415",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9977783560752869, 1), 'yes'), (('WHERE_COL', ('professionals', 'state', 73), 0.9744320511817932, 3), 'yes'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9997019171714783, 4), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999971389770508, 5), 'yes'), (('WHERE_COL', ('owners', 'state', 50), 0.9025853276252747, 7), 'no'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999672174453735, 8), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999978542327881, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9977783560752869, 1), 'yes'), (('WHERE_COL', ('professionals', 'state', 73), 0.9744320511817932, 3), 'yes'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9997019171714783, 4), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999971389770508, 5), 'yes'), (('WHERE_COL', ('owners', 'state', 50), 0.9025853276252747, 7), 'no'), (('WHERE_COL', ('professionals', 'state', 73), 0.09740171581506729, 7), 'yes'), (('WHERE_COL', ('owners', 'home_phone', 53), 6.909331204951741e-06, 7), 'no'), (('WHERE_COL', ('owners', 'email_address', 52), 4.018111212644726e-06, 7), 'no'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9999672174453735, 8), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999978542327881, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 128
    },
    {
        "nl": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin ?",
        "true_sql": "select professionals.email_address where professionals.state = value or professionals.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 41, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], '\"Hawaii\"', None], 'or', [False, 2, [0, [0, 38, False], None], '\"Wisconsin\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.email_address",
            "where",
            "professionals.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 6, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.994461178779602, 1), ('WHERE_COL', ('professionals', 'state', 73), 0.8602636456489563, 3), ('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9996800422668457, 4), ('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999948740005493, 5)]",
        "logprob": "-12.891697483906773",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.994461178779602, 1), 'yes'), (('WHERE_COL', ('professionals', 'state', 73), 0.8602636456489563, 3), 'yes'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9996800422668457, 4), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999948740005493, 5), 'yes'), (('IUEN_v2', ('union', 2), 0.6646196842193604, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.994461178779602, 1), 'yes'), (('WHERE_COL', ('professionals', 'state', 73), 0.8602636456489563, 3), 'yes'), (('WHERE_OP', (('professionals', 'state', 73),), ('=', 0), 0.9996800422668457, 4), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'state', 73),), ('=', 0), 'terminal', 0.9999948740005493, 5), 'yes'), (('IUEN_v2', ('union', 2), 0.6646196842193604, 6), 'no'), (('IUEN_v2', ('intersect', 1), 0.04198993369936943, 6), 'no'), (('IUEN_v2', ('except', 3), 0.01949126087129116, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 129
    },
    {
        "nl": "What are the arriving date and the departing date of all the dogs ?",
        "true_sql": "select dogs.date_arrived , dogs.date_departed",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            ",",
            "dogs.date_departed",
            "_EOS"
        ],
        "dec_seq": "[2, [65], 8, [67], 8, [67], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.999995231628418, 1), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9999034404754639, 3), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9996179342269897, 5)]",
        "logprob": "-0.4439491175331457",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.999995231628418, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9999034404754639, 3), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9996179342269897, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.999995231628418, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9999034404754639, 3), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9996179342269897, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 130
    },
    {
        "nl": "List the arrival date and the departure date for all the dogs .",
        "true_sql": "select dogs.date_arrived , dogs.date_departed",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            ",",
            "dogs.date_departed",
            "_EOS"
        ],
        "dec_seq": "[2, [65], 8, [67], 8, [67], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.99970942735672, 1), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9818530678749084, 3), ('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9998800754547119, 5)]",
        "logprob": "-0.23294138246628382",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.99970942735672, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9818530678749084, 3), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9998800754547119, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'date_arrived', 65), ('none_agg', 0), False, 0.99970942735672, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9818530678749084, 3), 'yes'), (('SELECT_AGG_v2', ('dogs', 'date_departed', 67), ('none_agg', 0), False, 0.9998800754547119, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 131
    },
    {
        "nl": "How many dogs went through any treatments ?",
        "true_sql": "select count ( distinct treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 45, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "treatment_types.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 88, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.10269784904651512, 1)]",
        "logprob": "-13.946377304402581",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9951325640638652, 1), 'no'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.8485579490661621, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9951325640638652, 1), 'no'), (('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.36711021393362375, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.00034652475733309995, 1), 'no'), (('SELECT_AGG_v2', ('treatments', '*', 92), ('sum', 4), False, 0.10345791763576563, 1), 'no'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.8485579490661621, 3), 'no'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.09697570651769638, 3), 'no'), (('WHERE_COL', ('treatments', 'treatment_type_code', 82), 0.042786482721567154, 3), 'no'), (('WHERE_COL', ('breeds', 'breed_code', 36), 0.004491009749472141, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 132
    },
    {
        "nl": "Count the number of dogs that went through a treatment .",
        "true_sql": "select count ( distinct treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 45, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "treatments.dog_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 80, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('count', 3), True, 0.4891000794043488, 1)]",
        "logprob": "-3.579646189548756",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('count', 3), True, 0.8846541149520101, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('count', 3), True, 0.8846541149520101, 1), 'no'), (('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.7293487879340794, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('count', 3), True, 0.5576658237593617, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('count', 3), True, 0.4891000794043488, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 133
    },
    {
        "nl": "How many professionals have performed any treatment to dogs ?",
        "true_sql": "select count ( distinct treatments.professional_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 46, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "treatments.professional_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 81, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('count', 3), True, 0.40861521771431053, 1)]",
        "logprob": "-4.85412377304423",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9403706173726265, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.9403706173726265, 1), 'no'), (('SELECT_AGG_v2', ('professionals', '*', 91), ('count', 3), False, 0.6192767798936537, 1), 'no'), (('SELECT_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.4042681928319956, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('count', 3), True, 0.40861521771431053, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 134
    },
    {
        "nl": "Find the number of professionals who have ever treated dogs .",
        "true_sql": "select count ( distinct treatments.professional_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 46, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "treatments.professional_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 81, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('count', 3), True, 0.7719684893149836, 1)]",
        "logprob": "-1.3555390660443947",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('count', 3), True, 0.8540174088352749, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'professional_id', 68), ('count', 3), True, 0.8540174088352749, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('count', 3), True, 0.7719684893149836, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', '*', 91), ('count', 3), False, 0.5647884696136317, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('count', 3), True, 0.615855872990075, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 135
    },
    {
        "nl": "Which professionals live in a city containing the substring 'West ' ? List his or her role , street , city and state .",
        "true_sql": "select professionals.role_code , professionals.street , professionals.city , professionals.state where professionals.city like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 38, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 37, False], None], '\"%West%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.street",
            ",",
            "professionals.city",
            "where",
            "professionals.city",
            "like",
            "value",
            "or",
            "professionals.city",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [71], 8, [72], 6, 72, [30], 3, 25, 72, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.6276792287826538, 1), ('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.6011486649513245, 3), ('WHERE_COL', ('professionals', 'city', 72), 0.16784383356571198, 5), ('WHERE_OP', (('professionals', 'city', 72),), ('like', 6), 0.00017580260464455932, 6), ('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999978542327881, 7), ('WHERE_COL', ('professionals', 'city', 72), 0.03549652919173241, 9), ('WHERE_OP', (('professionals', 'city', 72),), ('like', 6), 2.296702587045729e-05, 10), ('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999744892120361, 11)]",
        "logprob": "-25.61004307637737",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.6276792287826538, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.6011486649513245, 3), 'yes'), (('WHERE_COL', ('professionals', 'state', 73), 0.4477483332157135, 5), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('=', 0), 0.9994497895240784, 6), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999978542327881, 7), 'yes'), (('WHERE_COL', ('owners', 'city', 49), 0.45691272616386414, 9), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('=', 0), 0.9996079802513123, 10), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999744892120361, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.6276792287826538, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.6011486649513245, 3), 'yes'), (('WHERE_COL', ('professionals', 'state', 73), 0.4477483332157135, 5), 'no'), (('WHERE_COL', ('professionals', 'street', 71), 0.27367541193962097, 5), 'no'), (('WHERE_COL', ('professionals', 'city', 72), 0.16784383356571198, 5), 'yes'), (('WHERE_COL', ('owners', 'street', 48), 0.07593794167041779, 5), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('=', 0), 0.9994497895240784, 6), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('!=', 5), 0.0002296747697982937, 6), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('like', 6), 0.00017580260464455932, 6), 'yes'), (('WHERE_OP', (('professionals', 'city', 72),), ('>', 1), 3.946660217479803e-05, 6), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999978542327881, 7), 'yes'), (('WHERE_COL', ('owners', 'city', 49), 0.45691272616386414, 9), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.14325250685214996, 9), 'no'), (('WHERE_COL', ('professionals', 'city', 72), 0.03549652919173241, 9), 'yes'), (('WHERE_COL', ('professionals', 'role_code', 69), 5.9799072914756835e-05, 9), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('=', 0), 0.9996079802513123, 10), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('>', 1), 0.00015154885477386415, 10), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('!=', 5), 0.00012484176841098815, 10), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('like', 6), 2.296702587045729e-05, 10), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999744892120361, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 136
    },
    {
        "nl": "Find the role , street , city and state of the professionals living in a city that contains the substring 'West ' .",
        "true_sql": "select professionals.role_code , professionals.street , professionals.city , professionals.state where professionals.city like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 38, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 37, False], None], '\"%West%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.street",
            ",",
            "professionals.city",
            ",",
            "professionals.city",
            "where",
            "professionals.city",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [71], 8, [72], 8, [72], 6, 72, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.9736959934234619, 1), ('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.8976790904998779, 3), ('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.13678675889968872, 5), ('WHERE_COL', ('professionals', 'city', 72), 0.08145425468683243, 7), ('WHERE_OP', (('professionals', 'city', 72),), ('like', 6), 0.00022008131782058626, 8), ('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999978542327881, 9)]",
        "logprob": "-13.112185359436625",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.9736959934234619, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.8976790904998779, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'city', 49), ('none_agg', 0), False, 0.8527439832687378, 5), 'no'), (('WHERE_COL', ('professionals', 'state', 73), 0.8620839715003967, 7), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('=', 0), 0.9996548891067505, 8), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999978542327881, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.9736959934234619, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.8976790904998779, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'city', 49), ('none_agg', 0), False, 0.8527439832687378, 5), 'no'), (('SELECT_AGG_v2', ('professionals', 'city', 72), ('none_agg', 0), False, 0.13678675889968872, 5), 'yes'), (('SELECT_AGG_v2', ('owners', 'street', 48), ('none_agg', 0), False, 0.005611294880509378, 5), 'no'), (('SELECT_AGG_v2', ('professionals', 'street', 71), ('none_agg', 0), False, 0.00427769124507904, 5), 'yes'), (('WHERE_COL', ('professionals', 'state', 73), 0.8620839715003967, 7), 'no'), (('WHERE_COL', ('professionals', 'city', 72), 0.08145425468683243, 7), 'yes'), (('WHERE_COL', ('professionals', 'street', 71), 0.03429393097758293, 7), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.014822934754192829, 7), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('=', 0), 0.9996548891067505, 8), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('like', 6), 0.00022008131782058626, 8), 'yes'), (('WHERE_OP', (('professionals', 'city', 72),), ('!=', 5), 0.00010091395233757794, 8), 'no'), (('WHERE_OP', (('professionals', 'city', 72),), ('>', 1), 9.487137504038401e-06, 8), 'no'), (('WHERE_ROOT_TERM', (('professionals', 'city', 72),), ('like', 6), 'terminal', 0.9999978542327881, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 137
    },
    {
        "nl": "Which owners live in the state whose name contains the substring 'North ' ? List his first name , last name and email .",
        "true_sql": "select owners.first_name , owners.last_name , owners.email_address where owners.state like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 15, False], None], '\"%North%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.last_name",
            ",",
            "owners.last_name",
            "where",
            "owners.state",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [47], 6, 50, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.7422958612442017, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.957516074180603, 3), ('WHERE_COL', ('owners', 'state', 50), 0.5449419617652893, 5), ('WHERE_OP', (('owners', 'state', 50),), ('like', 6), 0.9991223216056824, 6), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('like', 6), 'terminal', 0.9999982118606567, 7)]",
        "logprob": "-0.9761055797336519",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.7422958612442017, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.957516074180603, 3), 'yes'), (('WHERE_COL', ('owners', 'state', 50), 0.5449419617652893, 5), 'yes'), (('WHERE_OP', (('owners', 'state', 50),), ('like', 6), 0.9991223216056824, 6), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('like', 6), 'terminal', 0.9999982118606567, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.7422958612442017, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.957516074180603, 3), 'yes'), (('WHERE_COL', ('owners', 'state', 50), 0.5449419617652893, 5), 'yes'), (('WHERE_OP', (('owners', 'state', 50),), ('like', 6), 0.9991223216056824, 6), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('like', 6), 'terminal', 0.9999982118606567, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 138
    },
    {
        "nl": "Return the first name , last name and email of the owners living in a state whose name contains the substring 'North ' .",
        "true_sql": "select owners.first_name , owners.last_name , owners.email_address where owners.state like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 15, False], None], '\"%North%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "owners.first_name",
            ",",
            "owners.last_name",
            ",",
            "owners.email_address",
            "where",
            "owners.state",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 8, [52], 6, 50, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.2707100808620453, 1), ('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.9729761481285095, 3), ('SELECT_AGG_v2', ('owners', 'email_address', 52), ('none_agg', 0), False, 0.0018153677228838199, 5), ('WHERE_COL', ('owners', 'state', 50), 0.9935805797576904, 7), ('WHERE_OP', (('owners', 'state', 50),), ('like', 6), 0.9972702860832214, 8), ('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('like', 6), 'terminal', 0.9999951124191284, 9)]",
        "logprob": "-7.711676090164724",
        "q_counter": 4,
        "questioned_indices": [
            0,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.5847756266593933, 1), 'no'), (('WHERE_COL', ('owners', 'state', 50), 0.9935805797576904, 7), 'yes'), (('WHERE_OP', (('owners', 'state', 50),), ('like', 6), 0.9972702860832214, 8), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('like', 6), 'terminal', 0.9999951124191284, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.5847756266593933, 1), 'no'), (('SELECT_AGG_v2', ('owners', 'first_name', 46), ('none_agg', 0), False, 0.2707100808620453, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.14323274791240692, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'email_address', 52), ('none_agg', 0), False, 0.00047162341070361446, 1), 'yes'), (('WHERE_COL', ('owners', 'state', 50), 0.9935805797576904, 7), 'yes'), (('WHERE_OP', (('owners', 'state', 50),), ('like', 6), 0.9972702860832214, 8), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'state', 50),), ('like', 6), 'terminal', 0.9999951124191284, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 139
    },
    {
        "nl": "How many dogs have an age below the average ?",
        "true_sql": "select count ( dogs.* ) where dogs.age < ( select avg ( dogs.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 26, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "dogs.*",
            ")",
            "where",
            "dogs.age",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 90, 4], 6, 61, [21], 5, 2, [17, 5, 61, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9347292855700794, 1), ('WHERE_COL', ('dogs', 'age', 61), 0.9999359846115112, 3), ('WHERE_OP', (('dogs', 'age', 61),), ('<', 2), 0.0003995136357843876, 4), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('<', 2), 'root', 0.7716776728630066, 5), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9919938517924263, 7), ('O', '##END_NESTED##', 0.9999163150787354, 8)]",
        "logprob": "-8.393422470134478",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9347292855700794, 1), 'yes'), (('WHERE_COL', ('dogs', 'age', 61), 0.9999359846115112, 3), 'yes'), (('WHERE_OP', (('dogs', 'age', 61),), ('>', 1), 0.9993158578872681, 4), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('<', 2), 'root', 0.7716776728630066, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9919938517924263, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9347292855700794, 1), 'yes'), (('WHERE_COL', ('dogs', 'age', 61), 0.9999359846115112, 3), 'yes'), (('WHERE_OP', (('dogs', 'age', 61),), ('>', 1), 0.9993158578872681, 4), 'no'), (('WHERE_OP', (('dogs', 'age', 61),), ('>=', 3), 0.022697175500611576, 4), 'no'), (('WHERE_OP', (('dogs', 'age', 61),), ('<', 2), 0.0003995136357843876, 4), 'yes'), (('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 3.846713661914691e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('<', 2), 'root', 0.7716776728630066, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9919938517924263, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 140
    },
    {
        "nl": "Count the number of dogs of an age below the average .",
        "true_sql": "select count ( dogs.* ) where dogs.age < ( select avg ( dogs.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 26, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "dogs.*",
            ")",
            "where",
            "dogs.age",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 90, 4], 6, 61, [21], 5, 2, [17, 5, 61, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9496992918183067, 1), ('WHERE_COL', ('dogs', 'age', 61), 0.9999995231628418, 3), ('WHERE_OP', (('dogs', 'age', 61),), ('<', 2), 0.00022627509315498173, 4), ('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('<', 2), 'root', 0.9117516875267029, 5), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.995515811858048, 7), ('O', '##END_NESTED##', 0.9999009370803833, 8)]",
        "logprob": "-8.729959559297958",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9496992918183067, 1), 'yes'), (('WHERE_COL', ('dogs', 'age', 61), 0.9999995231628418, 3), 'yes'), (('WHERE_OP', (('dogs', 'age', 61),), ('>', 1), 0.9994447827339172, 4), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('<', 2), 'root', 0.9117516875267029, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.995515811858048, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.9496992918183067, 1), 'yes'), (('WHERE_COL', ('dogs', 'age', 61), 0.9999995231628418, 3), 'yes'), (('WHERE_OP', (('dogs', 'age', 61),), ('>', 1), 0.9994447827339172, 4), 'no'), (('WHERE_OP', (('dogs', 'age', 61),), ('>=', 3), 0.030800688662727078, 4), 'no'), (('WHERE_OP', (('dogs', 'age', 61),), ('<', 2), 0.00022627509315498173, 4), 'yes'), (('WHERE_OP', (('dogs', 'age', 61),), ('=', 0), 7.011219713604078e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('dogs', 'age', 61),), ('<', 2), 'root', 0.9117516875267029, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.995515811858048, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 141
    },
    {
        "nl": "How much does the most recent treatment cost ?",
        "true_sql": "select treatments.cost_of_treatment order_by treatments.date_of_treatment desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 48, False], None]]], 'select': [False, [[0, [0, [0, 49, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "treatments.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 92, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.22617103318012433, 1)]",
        "logprob": "-6.435233064574568",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('sum', 4), False, 0.8255313687132717, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('sum', 4), False, 0.8255313687132717, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('max', 1), False, 0.8070613334885095, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('sum', 4), False, 0.49371857561542337, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('max', 1), False, 0.4582385744985301, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 142
    },
    {
        "nl": "Show me the cost of the most recently performed treatment .",
        "true_sql": "select treatments.cost_of_treatment order_by treatments.date_of_treatment desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 48, False], None]]], 'select': [False, [[0, [0, [0, 49, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "treatments.date_of_treatment",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 83, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('sum', 4), False, 0.20501579401503708, 1)]",
        "logprob": "-6.34114335874641",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('max', 1), False, 0.9613031778132626, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('max', 1), False, 0.9613031778132626, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'date_of_treatment', 83), ('max', 1), False, 0.5834127718311323, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('sum', 4), False, 0.3347466911700879, 1), 'no'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('max', 1), False, 0.26100672156223925, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 143
    },
    {
        "nl": "How many dogs have not gone through any treatment ?",
        "true_sql": "select count ( dogs.* ) where dogs.dog_id not in ( select treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "dogs.*",
            ")",
            "where",
            "dogs.dog_id",
            "not",
            "in",
            "(",
            "select",
            "treatments.dog_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 90, 4], 6, 55, [22, 20], 5, 2, [80], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.8484742755932589, 1), ('WHERE_COL', ('dogs', 'dog_id', 55), 0.03657543659210205, 3), ('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.999815194421445, 4), ('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'root', 0.9999613761901855, 5), ('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('none_agg', 0), False, 0.09607356041669844, 7), ('O', '##END_NESTED##', 0.9999068975448608, 8)]",
        "logprob": "-6.3098833402115675",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.8484742755932589, 1), 'yes'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.47222548723220825, 3), 'no'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.999815194421445, 4), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'root', 0.9999613761901855, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.6113196015357971, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.8484742755932589, 1), 'yes'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.47222548723220825, 3), 'no'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.4064232110977173, 3), 'no'), (('WHERE_COL', ('treatments', 'treatment_type_code', 82), 0.06776220351457596, 3), 'no'), (('WHERE_COL', ('dogs', 'dog_id', 55), 0.03657543659210205, 3), 'yes'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.999815194421445, 4), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'root', 0.9999613761901855, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.6113196015357971, 7), 'no'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.2919842004776001, 7), 'no'), (('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('none_agg', 0), False, 0.09607356041669844, 7), 'yes'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.0005637846770696343, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 144
    },
    {
        "nl": "Tell me the number of dogs that have received any treatment .",
        "true_sql": "select count ( dogs.* ) where dogs.dog_id not in ( select treatments.dog_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 45, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'dogs.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "dogs.*",
            ")",
            "where",
            "dogs.dog_id",
            "not",
            "in",
            "(",
            "select",
            "treatments.dog_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 90, 4], 6, 55, [22, 20], 5, 2, [80], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.8967643767798923, 1), ('WHERE_COL', ('dogs', 'dog_id', 55), 0.008114692755043507, 3), ('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.9592564246574738, 4), ('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'root', 0.9999816417694092, 5), ('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('none_agg', 0), False, 0.2803972065448761, 7), ('O', '##END_NESTED##', 0.99951171875, 8)]",
        "logprob": "-6.733816465034094",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.8967643767798923, 1), 'yes'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.977425217628479, 3), 'no'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.9592564246574738, 4), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'root', 0.9999816417694092, 5), 'yes'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.6846118569374084, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.8967643767798923, 1), 'yes'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.977425217628479, 3), 'no'), (('WHERE_COL', ('dogs', 'dog_id', 55), 0.008114692755043507, 3), 'yes'), (('WHERE_COL', ('treatments', 'treatment_id', 79), 0.0064252461306750774, 3), 'no'), (('WHERE_COL', ('treatments', 'treatment_type_code', 82), 0.005168752279132605, 3), 'no'), (('WHERE_OP', (('dogs', 'dog_id', 55),), ('not in', 7), 0.9592564246574738, 4), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'dog_id', 55),), ('not in', 7), 'root', 0.9999816417694092, 5), 'yes'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.6846118569374084, 7), 'no'), (('SELECT_AGG_v2', ('treatments', 'dog_id', 80), ('none_agg', 0), False, 0.2803972065448761, 7), 'yes'), (('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.0346454232931137, 7), 'no'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.00031434529228135927, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 145
    },
    {
        "nl": "How many owners temporarily do not have any dogs ?",
        "true_sql": "select count ( owners.* ) where owners.owner_id not in ( select dogs.owner_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 10, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 21, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'owners.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "owners.*",
            ")",
            "where",
            "owners.owner_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.owner_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 89, 4], 6, 45, [22, 20], 5, 2, [56], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9414242554212077, 1), ('WHERE_COL', ('owners', 'owner_id', 45), 0.9333003163337708, 3), ('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.9998801032702851, 4), ('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('not in', 7), 'root', 0.999953031539917, 5), ('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.9654662609100342, 7), ('O', '##END_NESTED##', 0.9974798560142517, 8)]",
        "logprob": "-0.3500099926938751",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9414242554212077, 1), 'yes'), (('WHERE_COL', ('owners', 'owner_id', 45), 0.9333003163337708, 3), 'yes'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.9998801032702851, 4), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('not in', 7), 'root', 0.999953031539917, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.9654662609100342, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9414242554212077, 1), 'yes'), (('WHERE_COL', ('owners', 'owner_id', 45), 0.9333003163337708, 3), 'yes'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.9998801032702851, 4), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('not in', 7), 'root', 0.999953031539917, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.9654662609100342, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 146
    },
    {
        "nl": "Find the number of owners who do not own any dogs at this moment .",
        "true_sql": "select count ( owners.* ) where owners.owner_id not in ( select dogs.owner_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 10, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 21, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'owners.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "owners.*",
            ")",
            "where",
            "owners.owner_id",
            "not",
            "in",
            "(",
            "select",
            "dogs.owner_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 89, 4], 6, 45, [22, 20], 5, 2, [56], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9923662188628811, 1), ('WHERE_COL', ('owners', 'owner_id', 45), 0.9897332787513733, 3), ('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.999849464527983, 4), ('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('not in', 7), 'root', 0.999975323677063, 5), ('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.9977779984474182, 7), ('O', '##END_NESTED##', 0.9995396137237549, 8)]",
        "logprob": "-0.04493479690078974",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9923662188628811, 1), 'yes'), (('WHERE_COL', ('owners', 'owner_id', 45), 0.9897332787513733, 3), 'yes'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.999849464527983, 4), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('not in', 7), 'root', 0.999975323677063, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.9977779984474182, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('owners', '*', 89), ('count', 3), False, 0.9923662188628811, 1), 'yes'), (('WHERE_COL', ('owners', 'owner_id', 45), 0.9897332787513733, 3), 'yes'), (('WHERE_OP', (('owners', 'owner_id', 45),), ('not in', 7), 0.999849464527983, 4), 'yes'), (('WHERE_ROOT_TERM', (('owners', 'owner_id', 45),), ('not in', 7), 'root', 0.999975323677063, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'owner_id', 56), ('none_agg', 0), False, 0.9977779984474182, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 147
    },
    {
        "nl": "How many professionals did not operate any treatment on dogs ?",
        "true_sql": "select count ( professionals.* ) where professionals.professional_id not in ( select treatments.professional_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 33, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'professionals.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "professionals.*",
            ")",
            "where",
            "professionals.professional_id",
            "not",
            "in",
            "(",
            "select",
            "treatments.professional_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 91, 4], 6, 68, [22, 20], 5, 2, [81], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', '*', 91), ('count', 3), False, 0.5351196653762644, 1), ('WHERE_COL', ('professionals', 'professional_id', 68), 0.7507632374763489, 3), ('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9998211516322533, 4), ('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999598264694214, 5), ('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.08719794452190399, 7), ('O', '##END_NESTED##', 0.9998807907104492, 8)]",
        "logprob": "-5.2299419343841365",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.8730711968453037, 1), 'no'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.7507632374763489, 3), 'yes'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9998211516322533, 4), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999598264694214, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.7878988981246948, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('treatments', '*', 92), ('count', 3), False, 0.8730711968453037, 1), 'no'), (('SELECT_AGG_v2', ('treatment_types', '*', 88), ('count', 3), False, 0.7297008090698622, 1), 'no'), (('SELECT_AGG_v2', ('professionals', '*', 91), ('count', 3), False, 0.5351196653762644, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', '*', 90), ('count', 3), False, 0.41934353581208483, 1), 'no'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.7507632374763489, 3), 'yes'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9998211516322533, 4), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999598264694214, 5), 'yes'), (('SELECT_AGG_v2', ('dogs', 'dog_id', 55), ('none_agg', 0), False, 0.7878988981246948, 7), 'no'), (('SELECT_AGG_v2', ('treatments', 'treatment_id', 79), ('none_agg', 0), False, 0.12068311125040056, 7), 'no'), (('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.08719794452190399, 7), 'yes'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.002783352043479681, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 148
    },
    {
        "nl": "Find the number of professionals who have not treated any dogs .",
        "true_sql": "select count ( professionals.* ) where professionals.professional_id not in ( select treatments.professional_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 33, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'professionals.*'}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "professionals.*",
            ")",
            "where",
            "professionals.professional_id",
            "not",
            "in",
            "(",
            "select",
            "treatments.professional_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 91, 4], 6, 68, [22, 20], 5, 2, [81], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', '*', 91), ('count', 3), False, 0.9527060092137972, 1), ('WHERE_COL', ('professionals', 'professional_id', 68), 0.8302456140518188, 3), ('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9998300917375613, 4), ('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999537467956543, 5), ('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.6941078901290894, 7), ('O', '##END_NESTED##', 0.9998612403869629, 8)]",
        "logprob": "-0.749715508043727",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', '*', 91), ('count', 3), False, 0.9527060092137972, 1), 'yes'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.8302456140518188, 3), 'yes'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9998300917375613, 4), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999537467956543, 5), 'yes'), (('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.6941078901290894, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', '*', 91), ('count', 3), False, 0.9527060092137972, 1), 'yes'), (('WHERE_COL', ('professionals', 'professional_id', 68), 0.8302456140518188, 3), 'yes'), (('WHERE_OP', (('professionals', 'professional_id', 68),), ('not in', 7), 0.9998300917375613, 4), 'yes'), (('WHERE_ROOT_TERM', (('professionals', 'professional_id', 68),), ('not in', 7), 'root', 0.9999537467956543, 5), 'yes'), (('SELECT_AGG_v2', ('treatments', 'professional_id', 81), ('none_agg', 0), False, 0.6941078901290894, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 149
    },
    {
        "nl": "List the dog name , age and weight of the dogs who have been abandoned ? 1 stands for yes , and 0 stands for no .",
        "true_sql": "select dogs.name , dogs.age , dogs.weight where dogs.abandoned_yn = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]], [0, [0, [0, 29, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "dogs.age",
            ",",
            "dogs.age",
            "where",
            "dogs.abandoned_yn",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [61], 8, [61], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.999995231628418, 1), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.02376122586429119, 3), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.7197942137718201, 5), ('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.9999649524688721, 7), ('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('=', 0), 0.9998570680618286, 8), ('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('=', 0), 'terminal', 0.9999986886978149, 9)]",
        "logprob": "-4.0700394651194305",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.999995231628418, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'abandoned_yn', 57), ('none_agg', 0), False, 0.9153512120246887, 3), 'no'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.7197942137718201, 5), 'yes'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.9999649524688721, 7), 'yes'), (('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('=', 0), 0.9998570680618286, 8), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('=', 0), 'terminal', 0.9999986886978149, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.999995231628418, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'abandoned_yn', 57), ('none_agg', 0), False, 0.9153512120246887, 3), 'no'), (('SELECT_AGG_v2', ('dogs', 'size_code', 59), ('none_agg', 0), False, 0.03674150630831719, 3), 'no'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.02376122586429119, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.018063938245177266, 3), 'no'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.7197942137718201, 5), 'yes'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.9999649524688721, 7), 'yes'), (('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('=', 0), 0.9998570680618286, 8), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('=', 0), 'terminal', 0.9999986886978149, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 150
    },
    {
        "nl": "What are the dog name , age and weight of the dogs that were abandoned ? Note that 1 stands for yes , and 0 stands for no in the tables .",
        "true_sql": "select dogs.name , dogs.age , dogs.weight where dogs.abandoned_yn = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]], [0, [0, [0, 29, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.name",
            ",",
            "dogs.age",
            ",",
            "dogs.weight",
            "where",
            "dogs.abandoned_yn",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [61], 8, [64], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999972581863403, 1), ('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.166082501411438, 3), ('SELECT_AGG_v2', ('dogs', 'weight', 64), ('none_agg', 0), False, 0.5170791149139404, 5), ('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.9998536109924316, 7), ('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('=', 0), 0.9700785875320435, 8), ('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('=', 0), 'terminal', 0.9999986886978149, 9)]",
        "logprob": "-2.486641855390892",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999972581863403, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'abandoned_yn', 57), ('none_agg', 0), False, 0.47624683380126953, 3), 'no'), (('SELECT_AGG_v2', ('dogs', 'weight', 64), ('none_agg', 0), False, 0.5170791149139404, 5), 'yes'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.9998536109924316, 7), 'yes'), (('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('=', 0), 0.9700785875320435, 8), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('=', 0), 'terminal', 0.9999986886978149, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.9999972581863403, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'abandoned_yn', 57), ('none_agg', 0), False, 0.47624683380126953, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.2540700137615204, 3), 'no'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.166082501411438, 3), 'yes'), (('SELECT_AGG_v2', ('dogs', 'size_code', 59), ('none_agg', 0), False, 0.07938385754823686, 3), 'no'), (('SELECT_AGG_v2', ('dogs', 'weight', 64), ('none_agg', 0), False, 0.5170791149139404, 5), 'yes'), (('WHERE_COL', ('dogs', 'abandoned_yn', 57), 0.9998536109924316, 7), 'yes'), (('WHERE_OP', (('dogs', 'abandoned_yn', 57),), ('=', 0), 0.9700785875320435, 8), 'yes'), (('WHERE_ROOT_TERM', (('dogs', 'abandoned_yn', 57),), ('=', 0), 'terminal', 0.9999986886978149, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 151
    },
    {
        "nl": "What is the average age of all the dogs ?",
        "true_sql": "select avg ( dogs.age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 61, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.7879392300348036, 1)]",
        "logprob": "-0.9533556037721967",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'weight', 64), ('avg', 5), False, 0.8852614023287041, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'weight', 64), ('avg', 5), False, 0.8852614023287041, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.7879392300348036, 1), 'yes'), (('SELECT_AGG_v2', ('dogs', 'weight', 64), ('sum', 4), False, 0.11708872117719447, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('sum', 4), False, 0.09774456947066627, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 152
    },
    {
        "nl": "Compute the average age of all the dogs .",
        "true_sql": "select avg ( dogs.age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "dogs.age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 61, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9826784560693257, 1)]",
        "logprob": "-0.06990876555229604",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9826784560693257, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'age', 61), ('avg', 5), False, 0.9826784560693257, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 153
    },
    {
        "nl": "What is the age of the oldest dog ?",
        "true_sql": "select max ( dogs.age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "dogs.age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 61, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.4482603356303069, 1)]",
        "logprob": "-3.214158210934799",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'weight', 64), ('max', 1), False, 0.8123903540187934, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'weight', 64), ('max', 1), False, 0.8123903540187934, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.3398078083992004, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.06957003474235536, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'age', 61), ('max', 1), False, 0.4482603356303069, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 154
    },
    {
        "nl": "Tell me the age of the oldest dog .",
        "true_sql": "select max ( dogs.age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "dogs.weight",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'weight', 64), ('none_agg', 0), False, 0.0001555267081130295, 1)]",
        "logprob": "-12.413450393751738",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.9849527478218079, 1), 'no'), (('WHERE_COL', ('dogs', 'age', 61), 0.9712576866149902, 3), 'no'), (('ORDER_AGG_v2', ('dogs', 'weight', 64), ('none_agg', 0), False, 0.9830904006958008, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.9849527478218079, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'name', 60), ('none_agg', 0), False, 0.012616107240319247, 1), 'no'), (('SELECT_AGG_v2', ('dogs', 'breed_code', 58), ('none_agg', 0), False, 0.0016964924288913605, 1), 'no'), (('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.0005092225037515162, 1), 'no'), (('WHERE_COL', ('dogs', 'age', 61), 0.9712576866149902, 3), 'no'), (('WHERE_COL', ('dogs', 'weight', 64), 0.02871238812804222, 3), 'no'), (('WHERE_COL', ('breeds', 'breed_name', 37), 1.7547337847645395e-05, 3), 'no'), (('WHERE_COL', ('dogs', 'size_code', 59), 3.421204155529267e-06, 3), 'no'), (('ORDER_AGG_v2', ('dogs', 'weight', 64), ('none_agg', 0), False, 0.9830904006958008, 3), 'no'), (('ORDER_AGG_v2', ('dogs', 'age', 61), ('none_agg', 0), False, 0.016909616068005562, 3), 'no'), (('ORDER_AGG_v2', ('dogs', 'date_of_birth', 62), ('none_agg', 0), False, 3.596351305645836e-08, 3), 'no'), (('ORDER_AGG_v2', ('dogs', 'weight', 64), ('count', 3), False, 0.01285234417010767, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 155
    },
    {
        "nl": "How much does each charge type costs ? List both charge type and amount .",
        "true_sql": "select charges.charge_type , charges.charge_amount",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "charges.charge_type",
            ",",
            "charges.charge_amount",
            ",",
            "charges.charge_amount",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [40], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 0.9999969005584717, 1), ('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.15291111171245575, 3), ('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.025226477533578876, 5)]",
        "logprob": "-5.570510630709647",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 0.9999969005584717, 1), 'yes'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9441597802908518, 3), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('min', 2), False, 0.5991678918633706, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 0.9999969005584717, 1), 'yes'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9441597802908518, 3), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.15291111171245575, 3), 'yes'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('max', 1), False, 0.4289723153029649, 3), 'no'), (('SELECT_AGG_v2', ('charges', '*', 86), ('count', 3), False, 0.3007954559162345, 3), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('min', 2), False, 0.5991678918633706, 5), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('avg', 5), False, 0.4771730628308964, 5), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.025226477533578876, 5), 'yes'), (('SELECT_AGG_v2', ('charges', '*', 86), ('none_agg', 0), False, 0.9988198820848484, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 156
    },
    {
        "nl": "List each charge type and its amount .",
        "true_sql": "select charges.charge_type , charges.charge_amount",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "charges.charge_type",
            ",",
            "charges.charge_amount",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.9081184267997742, 3)]",
        "logprob": "-0.13425487240029063",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.9081184267997742, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 0.9081184267997742, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 157
    },
    {
        "nl": "How much does the most expensive charge type costs ?",
        "true_sql": "select max ( charges.charge_amount )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "charges.charge_amount",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 40, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('max', 1), False, 0.6457267799014347, 1)]",
        "logprob": "-1.7655459083904153",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9525538092754484, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.9525538092754484, 1), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('max', 1), False, 0.6457267799014347, 1), 'yes'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('avg', 5), False, 0.19688395382843593, 1), 'no'), (('SELECT_AGG_v2', ('charges', '*', 86), ('count', 3), False, 0.13668508156783518, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 158
    },
    {
        "nl": "What is the charge amount of the most expensive charge type ?",
        "true_sql": "select max ( charges.charge_amount )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "charges.charge_amount",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 40, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('max', 1), False, 0.4612881400629156, 1)]",
        "logprob": "-3.355103541424581",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 0.9525677561759949, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 0.9525677561759949, 1), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('max', 1), False, 0.4612881400629156, 1), 'yes'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('sum', 4), False, 0.21379836888171125, 1), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_amount', 40), ('none_agg', 0), False, 1.1246345820836728e-05, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 159
    },
    {
        "nl": "List the email , cell phone and home phone of all the professionals .",
        "true_sql": "select professionals.email_address , professionals.cell_number , professionals.home_phone",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 41, False], None]], [0, [0, [0, 43, False], None]], [0, [0, [0, 42, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.email_address",
            ",",
            "professionals.home_phone",
            ",",
            "professionals.cell_number",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 8, [77], 8, [78], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9987024068832397, 1), ('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.7612209916114807, 3), ('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 9.558772580930955e-05, 5)]",
        "logprob": "-9.530673818131017",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9987024068832397, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.7612209916114807, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.7319138050079346, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9987024068832397, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.7612209916114807, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.7319138050079346, 5), 'no'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.251777321100235, 5), 'yes'), (('SELECT_AGG_v2', ('owners', 'cell_number', 54), ('none_agg', 0), False, 0.016209546476602554, 5), 'no'), (('SELECT_AGG_v2', ('professionals', 'cell_number', 78), ('none_agg', 0), False, 9.558772580930955e-05, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 160
    },
    {
        "nl": "What are the email , cell phone and home phone of each professional ?",
        "true_sql": "select professionals.email_address , professionals.cell_number , professionals.home_phone",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 41, False], None]], [0, [0, [0, 43, False], None]], [0, [0, [0, 42, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.email_address",
            ",",
            "professionals.home_phone",
            ",",
            "professionals.home_phone",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 8, [77], 8, [77], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9378560781478882, 1), ('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.040371790528297424, 3), ('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.009006300009787086, 5)]",
        "logprob": "-7.985863852148",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9378560781478882, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.958695650100708, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.009006300009787086, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'email_address', 76), ('none_agg', 0), False, 0.9378560781478882, 1), 'yes'), (('SELECT_AGG_v2', ('owners', 'home_phone', 53), ('none_agg', 0), False, 0.958695650100708, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.040371790528297424, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'email_address', 52), ('none_agg', 0), False, 0.0007613897323608397, 3), 'no'), (('SELECT_AGG_v2', ('owners', 'cell_number', 54), ('none_agg', 0), False, 9.712616883916782e-05, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'home_phone', 77), ('none_agg', 0), False, 0.009006300009787086, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 161
    },
    {
        "nl": "What are all the possible breed type and size type combinations ?",
        "true_sql": "select distinct dogs.breed_code , dogs.size_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]], [0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "dogs.breed_code",
            ",",
            "dogs.size_code",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [58], 8, [59], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'breed_code', 58), ('none_agg', 0), False, 0.07948098331689835, 2), ('SELECT_AGG_v2', ('dogs', 'size_code', 59), ('none_agg', 0), False, 0.029245451092720032, 4)]",
        "logprob": "-6.065302604873283",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.8495315909385681, 2), 'no'), (('SELECT_AGG_v2', ('dogs', 'size_code', 59), ('none_agg', 0), False, 0.029245451092720032, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.8495315909385681, 2), 'no'), (('SELECT_AGG_v2', ('dogs', 'breed_code', 58), ('none_agg', 0), False, 0.07948098331689835, 2), 'yes'), (('SELECT_AGG_v2', ('sizes', 'size_description', 42), ('none_agg', 0), False, 0.03199321031570434, 2), 'no'), (('SELECT_AGG_v2', ('charges', 'charge_type', 39), ('none_agg', 0), False, 0.016570987179875367, 2), 'no'), (('SELECT_AGG_v2', ('dogs', 'size_code', 59), ('none_agg', 0), False, 0.029245451092720032, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 162
    },
    {
        "nl": "Find the distinct breed type and size type combinations for dogs .",
        "true_sql": "select distinct dogs.breed_code , dogs.size_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]], [0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "dogs.breed_code",
            ",",
            "dogs.size_code",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [58], 8, [59], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('dogs', 'breed_code', 58), ('none_agg', 0), False, 0.4036560654640198, 2), ('SELECT_AGG_v2', ('dogs', 'size_code', 59), ('none_agg', 0), False, 0.16915622353553772, 4)]",
        "logprob": "-2.684672454890339",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.5066507458686829, 2), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('breeds', 'breed_name', 37), ('none_agg', 0), False, 0.5066507458686829, 2), 'no'), (('SELECT_AGG_v2', ('dogs', 'breed_code', 58), ('none_agg', 0), False, 0.4036560654640198, 2), 'yes'), (('SELECT_AGG_v2', ('sizes', 'size_description', 42), ('none_agg', 0), False, 0.04157724604010582, 2), 'no'), (('SELECT_AGG_v2', ('dogs', 'size_code', 59), ('none_agg', 0), False, 0.03715801611542702, 2), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 163
    },
    {
        "nl": "List the first name of all the professionals along with the description of the treatment they have done .",
        "true_sql": "select distinct professionals.first_name , treatment_types.treatment_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.first_name",
            ",",
            "treatment_types.treatment_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9999991655349731, 1), ('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.04558786377310753, 3)]",
        "logprob": "-3.0901708097021934",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.8231756091117859, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.8231756091117859, 3), 'no'), (('SELECT_AGG_v2', ('treatments', 'cost_of_treatment', 84), ('none_agg', 0), False, 0.10793235152959825, 3), 'no'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.04558786377310753, 3), 'yes'), (('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.021386193111538887, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 164
    },
    {
        "nl": "What are each professional 's first name and description of the treatment they have performed ?",
        "true_sql": "select distinct professionals.first_name , treatment_types.treatment_type_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'breeds.breed_code': 1, 'breeds.breed_name': 2, 'charges.charge_id': 3, 'charges.charge_type': 4, 'charges.charge_amount': 5, 'sizes.size_code': 6, 'sizes.size_description': 7, 'treatment_types.treatment_type_code': 8, 'treatment_types.treatment_type_description': 9, 'owners.owner_id': 10, 'owners.first_name': 11, 'owners.last_name': 12, 'owners.street': 13, 'owners.city': 14, 'owners.state': 15, 'owners.zip_code': 16, 'owners.email_address': 17, 'owners.home_phone': 18, 'owners.cell_number': 19, 'dogs.dog_id': 20, 'dogs.owner_id': 21, 'dogs.abandoned_yn': 22, 'dogs.breed_code': 23, 'dogs.size_code': 24, 'dogs.name': 25, 'dogs.age': 26, 'dogs.date_of_birth': 27, 'dogs.gender': 28, 'dogs.weight': 29, 'dogs.date_arrived': 30, 'dogs.date_adopted': 31, 'dogs.date_departed': 32, 'professionals.professional_id': 33, 'professionals.role_code': 34, 'professionals.first_name': 35, 'professionals.street': 36, 'professionals.city': 37, 'professionals.state': 38, 'professionals.zip_code': 39, 'professionals.last_name': 40, 'professionals.email_address': 41, 'professionals.home_phone': 42, 'professionals.cell_number': 43, 'treatments.treatment_id': 44, 'treatments.dog_id': 45, 'treatments.professional_id': 46, 'treatments.treatment_type_code': 47, 'treatments.date_of_treatment': 48, 'treatments.cost_of_treatment': 49, 'breeds.*': 50, 'charges.*': 51, 'sizes.*': 52, 'treatment_types.*': 53, 'owners.*': 54, 'dogs.*': 55, 'professionals.*': 56, 'treatments.*': 57}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "professionals.first_name",
            ",",
            "treatment_types.treatment_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9990735054016113, 1), ('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.019187904894351963, 3)]",
        "logprob": "-3.9548709118304477",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9990735054016113, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.9035770893096924, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.9990735054016113, 1), 'yes'), (('SELECT_AGG_v2', ('professionals', 'last_name', 75), ('none_agg', 0), False, 0.9035770893096924, 3), 'no'), (('SELECT_AGG_v2', ('professionals', 'first_name', 70), ('none_agg', 0), False, 0.07400684058666229, 3), 'yes'), (('SELECT_AGG_v2', ('treatment_types', 'treatment_type_description', 44), ('none_agg', 0), False, 0.019187904894351963, 3), 'yes'), (('SELECT_AGG_v2', ('owners', 'last_name', 47), ('none_agg', 0), False, 0.0023208300117403273, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 165
    },
    {
        "nl": "How many available features are there in total ?",
        "true_sql": "select count ( other_available_features.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'other_available_features.*'}, 'column_names_surface_form_to_id': {'*': 0, 'ref_feature_types.feature_type_code': 1, 'ref_feature_types.feature_type_name': 2, 'ref_property_types.property_type_code': 3, 'ref_property_types.property_type_description': 4, 'other_available_features.feature_id': 5, 'other_available_features.feature_type_code': 6, 'other_available_features.feature_name': 7, 'other_available_features.feature_description': 8, 'properties.property_id': 9, 'properties.property_type_code': 10, 'properties.date_on_market': 11, 'properties.date_sold': 12, 'properties.property_name': 13, 'properties.property_address': 14, 'properties.room_count': 15, 'properties.vendor_requested_price': 16, 'properties.buyer_offered_price': 17, 'properties.agreed_selling_price': 18, 'properties.apt_feature_1': 19, 'properties.apt_feature_2': 20, 'properties.apt_feature_3': 21, 'properties.fld_feature_1': 22, 'properties.fld_feature_2': 23, 'properties.fld_feature_3': 24, 'properties.hse_feature_1': 25, 'properties.hse_feature_2': 26, 'properties.hse_feature_3': 27, 'properties.oth_feature_1': 28, 'properties.oth_feature_2': 29, 'properties.oth_feature_3': 30, 'properties.shp_feature_1': 31, 'properties.shp_feature_2': 32, 'properties.shp_feature_3': 33, 'properties.other_property_details': 34, 'other_property_features.property_id': 35, 'other_property_features.feature_id': 36, 'other_property_features.property_feature_description': 37, 'ref_feature_types.*': 38, 'ref_property_types.*': 39, 'other_available_features.*': 40, 'properties.*': 41, 'other_property_features.*': 42}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "other_available_features.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 75, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('other_available_features', '*', 75), ('count', 3), False, 0.9943029626629701, 1)]",
        "logprob": "-0.022979440796934987",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('other_available_features', '*', 75), ('count', 3), False, 0.9943029626629701, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('other_available_features', '*', 75), ('count', 3), False, 0.9943029626629701, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 166
    },
    {
        "nl": "What is the feature type name of feature AirCon ?",
        "true_sql": "select ref_feature_types.feature_type_name where other_available_features.feature_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"AirCon\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_feature_types.feature_type_code': 1, 'ref_feature_types.feature_type_name': 2, 'ref_property_types.property_type_code': 3, 'ref_property_types.property_type_description': 4, 'other_available_features.feature_id': 5, 'other_available_features.feature_type_code': 6, 'other_available_features.feature_name': 7, 'other_available_features.feature_description': 8, 'properties.property_id': 9, 'properties.property_type_code': 10, 'properties.date_on_market': 11, 'properties.date_sold': 12, 'properties.property_name': 13, 'properties.property_address': 14, 'properties.room_count': 15, 'properties.vendor_requested_price': 16, 'properties.buyer_offered_price': 17, 'properties.agreed_selling_price': 18, 'properties.apt_feature_1': 19, 'properties.apt_feature_2': 20, 'properties.apt_feature_3': 21, 'properties.fld_feature_1': 22, 'properties.fld_feature_2': 23, 'properties.fld_feature_3': 24, 'properties.hse_feature_1': 25, 'properties.hse_feature_2': 26, 'properties.hse_feature_3': 27, 'properties.oth_feature_1': 28, 'properties.oth_feature_2': 29, 'properties.oth_feature_3': 30, 'properties.shp_feature_1': 31, 'properties.shp_feature_2': 32, 'properties.shp_feature_3': 33, 'properties.other_property_details': 34, 'other_property_features.property_id': 35, 'other_property_features.feature_id': 36, 'other_property_features.property_feature_description': 37, 'ref_feature_types.*': 38, 'ref_property_types.*': 39, 'other_available_features.*': 40, 'properties.*': 41, 'other_property_features.*': 42}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ref_feature_types.feature_type_name",
            "where",
            "other_available_features.feature_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_feature_types', 'feature_type_name', 37), ('none_agg', 0), False, 0.9995446801185608, 1), ('WHERE_COL', ('other_available_features', 'feature_name', 42), 1.0, 3), ('WHERE_OP', (('other_available_features', 'feature_name', 42),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('other_available_features', 'feature_name', 42),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-2.520152331913943",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ref_feature_types', 'feature_type_name', 37), ('none_agg', 0), False, 0.9995446801185608, 1), 'yes'), (('WHERE_COL', ('other_available_features', 'feature_type_code', 41), 0.9017760753631592, 3), 'no'), (('WHERE_OP', (('other_available_features', 'feature_name', 42),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('other_available_features', 'feature_name', 42),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ref_feature_types', 'feature_type_name', 37), ('none_agg', 0), False, 0.9995446801185608, 1), 'yes'), (('WHERE_COL', ('other_available_features', 'feature_type_code', 41), 0.9017760753631592, 3), 'no'), (('WHERE_COL', ('other_available_features', 'feature_name', 42), 0.08048755675554276, 3), 'yes'), (('WHERE_COL', ('other_available_features', 'feature_description', 43), 0.017684293910861015, 3), 'no'), (('WHERE_COL', ('ref_feature_types', 'feature_type_name', 37), 3.596481110434979e-05, 3), 'no'), (('WHERE_OP', (('other_available_features', 'feature_name', 42),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('other_available_features', 'feature_name', 42),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 167
    },
    {
        "nl": "Show the property type descriptions of properties belonging to that code .",
        "true_sql": "select ref_property_types.property_type_description group_by properties.property_type_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_feature_types.feature_type_code': 1, 'ref_feature_types.feature_type_name': 2, 'ref_property_types.property_type_code': 3, 'ref_property_types.property_type_description': 4, 'other_available_features.feature_id': 5, 'other_available_features.feature_type_code': 6, 'other_available_features.feature_name': 7, 'other_available_features.feature_description': 8, 'properties.property_id': 9, 'properties.property_type_code': 10, 'properties.date_on_market': 11, 'properties.date_sold': 12, 'properties.property_name': 13, 'properties.property_address': 14, 'properties.room_count': 15, 'properties.vendor_requested_price': 16, 'properties.buyer_offered_price': 17, 'properties.agreed_selling_price': 18, 'properties.apt_feature_1': 19, 'properties.apt_feature_2': 20, 'properties.apt_feature_3': 21, 'properties.fld_feature_1': 22, 'properties.fld_feature_2': 23, 'properties.fld_feature_3': 24, 'properties.hse_feature_1': 25, 'properties.hse_feature_2': 26, 'properties.hse_feature_3': 27, 'properties.oth_feature_1': 28, 'properties.oth_feature_2': 29, 'properties.oth_feature_3': 30, 'properties.shp_feature_1': 31, 'properties.shp_feature_2': 32, 'properties.shp_feature_3': 33, 'properties.other_property_details': 34, 'other_property_features.property_id': 35, 'other_property_features.feature_id': 36, 'other_property_features.property_feature_description': 37, 'ref_feature_types.*': 38, 'ref_property_types.*': 39, 'other_available_features.*': 40, 'properties.*': 41, 'other_property_features.*': 42}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ref_property_types.property_type_description",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ref_property_types', 'property_type_description', 39), ('none_agg', 0), False, 0.994889497756958, 1)]",
        "logprob": "-0.47503759339948476",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ref_property_types', 'property_type_description', 39), ('none_agg', 0), False, 0.994889497756958, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ref_property_types', 'property_type_description', 39), ('none_agg', 0), False, 0.994889497756958, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 168
    },
    {
        "nl": "What are the names of properties that are either houses or apartments with more than 1 room ?",
        "true_sql": "select properties.property_name where properties.property_type_code = value union select properties.property_name where properties.property_type_code = value and properties.room_count > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Apartment\"', None], 'and', [False, 3, [0, [0, 15, False], None], 1.0, None]]}, 'where': [[False, 2, [0, [0, 10, False], None], '\"House\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'ref_feature_types.feature_type_code': 1, 'ref_feature_types.feature_type_name': 2, 'ref_property_types.property_type_code': 3, 'ref_property_types.property_type_description': 4, 'other_available_features.feature_id': 5, 'other_available_features.feature_type_code': 6, 'other_available_features.feature_name': 7, 'other_available_features.feature_description': 8, 'properties.property_id': 9, 'properties.property_type_code': 10, 'properties.date_on_market': 11, 'properties.date_sold': 12, 'properties.property_name': 13, 'properties.property_address': 14, 'properties.room_count': 15, 'properties.vendor_requested_price': 16, 'properties.buyer_offered_price': 17, 'properties.agreed_selling_price': 18, 'properties.apt_feature_1': 19, 'properties.apt_feature_2': 20, 'properties.apt_feature_3': 21, 'properties.fld_feature_1': 22, 'properties.fld_feature_2': 23, 'properties.fld_feature_3': 24, 'properties.hse_feature_1': 25, 'properties.hse_feature_2': 26, 'properties.hse_feature_3': 27, 'properties.oth_feature_1': 28, 'properties.oth_feature_2': 29, 'properties.oth_feature_3': 30, 'properties.shp_feature_1': 31, 'properties.shp_feature_2': 32, 'properties.shp_feature_3': 33, 'properties.other_property_details': 34, 'other_property_features.property_id': 35, 'other_property_features.feature_id': 36, 'other_property_features.property_feature_description': 37, 'ref_feature_types.*': 38, 'ref_property_types.*': 39, 'other_available_features.*': 40, 'properties.*': 41, 'other_property_features.*': 42}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "properties.property_name",
            "where",
            "properties.property_type_code",
            "=",
            "value",
            "or",
            "properties.property_type_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [48], 6, 45, [7], 3, 25, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('properties', 'property_name', 48), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('properties', 'property_type_code', 45), 8.745784896291298e-08, 3), ('WHERE_OP', (('properties', 'property_type_code', 45),), ('=', 0), 0.02229422889649868, 4), ('WHERE_ROOT_TERM', (('properties', 'property_type_code', 45),), ('=', 0), 'terminal', 0.9999967813491821, 5), ('WHERE_COL', ('properties', 'property_type_code', 45), 8.675569063143485e-08, 7), ('WHERE_OP', (('properties', 'property_type_code', 45),), ('=', 0), 0.15503844618797302, 8), ('WHERE_ROOT_TERM', (('properties', 'property_type_code', 45),), ('=', 0), 'terminal', 0.9999871253967285, 9)]",
        "logprob": "-38.18198436695816",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('properties', 'property_name', 48), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('properties', 'room_count', 50), 0.9999414682388306, 3), 'no'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('>', 1), 0.9764161705970764, 4), 'no'), (('WHERE_ROOT_TERM', (('properties', 'property_type_code', 45),), ('=', 0), 'terminal', 0.9999967813491821, 5), 'yes'), (('WHERE_COL', ('properties', 'property_type_code', 45), 8.675569063143485e-08, 7), 'yes'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('>', 1), 0.8414175510406494, 8), 'no'), (('WHERE_ROOT_TERM', (('properties', 'property_type_code', 45),), ('=', 0), 'terminal', 0.9999871253967285, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('properties', 'property_name', 48), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('properties', 'room_count', 50), 0.9999414682388306, 3), 'no'), (('WHERE_COL', ('properties', 'property_name', 48), 5.6141074310289696e-05, 3), 'no'), (('WHERE_COL', ('properties', 'other_property_details', 69), 1.9283290839666734e-06, 3), 'no'), (('WHERE_COL', ('properties', 'buyer_offered_price', 52), 2.6167546707256406e-07, 3), 'no'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('>', 1), 0.9764161705970764, 4), 'no'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('=', 0), 0.02229422889649868, 4), 'yes'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('<', 2), 0.0008188817300833762, 4), 'no'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('not in', 7), 0.009791387978883416, 4), 'no'), (('WHERE_ROOT_TERM', (('properties', 'property_type_code', 45),), ('=', 0), 'terminal', 0.9999967813491821, 5), 'yes'), (('WHERE_COL', ('properties', 'property_type_code', 45), 8.675569063143485e-08, 7), 'yes'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('>', 1), 0.8414175510406494, 8), 'no'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('=', 0), 0.15503844618797302, 8), 'yes'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('<', 2), 0.0033394191414117813, 8), 'no'), (('WHERE_OP', (('properties', 'property_type_code', 45),), ('>=', 3), 0.05453183095409776, 8), 'no'), (('WHERE_ROOT_TERM', (('properties', 'property_type_code', 45),), ('=', 0), 'terminal', 0.9999871253967285, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 169
    },
    {
        "nl": "How many singers are there ?",
        "true_sql": "select count ( singer.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.8429537952556048, 1)]",
        "logprob": "-0.6834272480843417",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.8429537952556048, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.8429537952556048, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 170
    },
    {
        "nl": "What is the count of singers ?",
        "true_sql": "select count ( singer.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9997760919692487, 1)]",
        "logprob": "-0.0015288745226323145",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9997760919692487, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9997760919692487, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 171
    },
    {
        "nl": "List the name of singers in ascending order of net worth .",
        "true_sql": "select singer.name order_by singer.net_worth_millions asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "order_by",
            "singer.net_worth_millions",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 1.0, 3)]",
        "logprob": "-0.16506308890442095",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 172
    },
    {
        "nl": "What are the names of singers ordered by ascending net worth ?",
        "true_sql": "select singer.name order_by singer.net_worth_millions asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "order_by",
            "singer.net_worth_millions",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 1.0, 3)]",
        "logprob": "-0.02153307413871657",
        "q_counter": 0,
        "questioned_indices": [],
        "questioned_tags": "[]",
        "feedback_records": "[]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 173
    },
    {
        "nl": "What are the birth year and citizenship of singers ?",
        "true_sql": "select singer.birth_year , singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.birth_year",
            ",",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'birth_year', 38), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9987640380859375, 3)]",
        "logprob": "-0.02491076589553481",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9987640380859375, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9987640380859375, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 174
    },
    {
        "nl": "What are the birth years and citizenships of the singers ?",
        "true_sql": "select singer.birth_year , singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.birth_year",
            ",",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'birth_year', 38), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9977570176124573, 3)]",
        "logprob": "-0.0038250748069865934",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9977570176124573, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9977570176124573, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 175
    },
    {
        "nl": "List the name of singers whose citizenship is not `` France `` .",
        "true_sql": "select singer.name where singer.citizenship != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 5, False], None], '\"France\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.citizenship",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.99981290102005, 1), ('WHERE_COL', ('singer', 'citizenship', 40), 0.9997461438179016, 3), ('WHERE_OP', (('singer', 'citizenship', 40),), ('!=', 5), 0.9991550445556641, 4), ('WHERE_ROOT_TERM', (('singer', 'citizenship', 40),), ('!=', 5), 'terminal', 0.9999700784683228, 5)]",
        "logprob": "-0.0016069578548064578",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.99981290102005, 1), 'yes'), (('WHERE_COL', ('singer', 'citizenship', 40), 0.9997461438179016, 3), 'yes'), (('WHERE_OP', (('singer', 'citizenship', 40),), ('!=', 5), 0.9991550445556641, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'citizenship', 40),), ('!=', 5), 'terminal', 0.9999700784683228, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.99981290102005, 1), 'yes'), (('WHERE_COL', ('singer', 'citizenship', 40), 0.9997461438179016, 3), 'yes'), (('WHERE_OP', (('singer', 'citizenship', 40),), ('!=', 5), 0.9991550445556641, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'citizenship', 40),), ('!=', 5), 'terminal', 0.9999700784683228, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 176
    },
    {
        "nl": "What are the names of the singers who are not French citizens ?",
        "true_sql": "select singer.name where singer.citizenship != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 5, False], None], '\"France\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.citizenship",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('singer', 'citizenship', 40), 0.999890923500061, 3), ('WHERE_OP', (('singer', 'citizenship', 40),), ('!=', 5), 0.9983479976654053, 4), ('WHERE_ROOT_TERM', (('singer', 'citizenship', 40),), ('!=', 5), 'terminal', 0.9999597072601318, 5)]",
        "logprob": "-0.0020901307554768186",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('singer', 'citizenship', 40), 0.999890923500061, 3), 'yes'), (('WHERE_OP', (('singer', 'citizenship', 40),), ('!=', 5), 0.9983479976654053, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'citizenship', 40),), ('!=', 5), 'terminal', 0.9999597072601318, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('singer', 'citizenship', 40), 0.999890923500061, 3), 'yes'), (('WHERE_OP', (('singer', 'citizenship', 40),), ('!=', 5), 0.9983479976654053, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'citizenship', 40),), ('!=', 5), 'terminal', 0.9999597072601318, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 177
    },
    {
        "nl": "Show the name of singers whose birth year is either 1948 or 1949 ?",
        "true_sql": "select singer.name where singer.birth_year = value or singer.birth_year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 1948.0, None], 'or', [False, 2, [0, [0, 3, False], None], 1949.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.birth_year",
            "=",
            "value",
            "or",
            "singer.birth_year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 25, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999980926513672, 1), ('WHERE_COL', ('singer', 'birth_year', 38), 0.997251570224762, 3), ('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9257925152778625, 4), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999977350234985, 5), ('WHERE_COL', ('singer', 'birth_year', 38), 1.0, 7), ('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.995824933052063, 8), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999891519546509, 9)]",
        "logprob": "-0.11980899983201725",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999980926513672, 1), 'yes'), (('WHERE_COL', ('singer', 'birth_year', 38), 0.997251570224762, 3), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9257925152778625, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.995824933052063, 8), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999891519546509, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999980926513672, 1), 'yes'), (('WHERE_COL', ('singer', 'birth_year', 38), 0.997251570224762, 3), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9257925152778625, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.995824933052063, 8), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999891519546509, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 178
    },
    {
        "nl": "What are the names of the singers whose birth years are either 1948 or 1949 ?",
        "true_sql": "select singer.name where singer.birth_year = value or singer.birth_year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 1948.0, None], 'or', [False, 2, [0, [0, 3, False], None], 1949.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.birth_year",
            "=",
            "value",
            "or",
            "singer.birth_year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 25, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9999420642852783, 3), ('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9089463949203491, 4), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999977350234985, 5), ('WHERE_COL', ('singer', 'birth_year', 38), 1.0, 7), ('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9744713306427002, 8), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999890327453613, 9)]",
        "logprob": "-0.16995960308261257",
        "q_counter": 5,
        "questioned_indices": [
            1,
            2,
            3,
            5,
            6
        ],
        "questioned_tags": "[(('WHERE_COL', ('singer', 'birth_year', 38), 0.9999420642852783, 3), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9089463949203491, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9744713306427002, 8), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999890327453613, 9), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('singer', 'birth_year', 38), 0.9999420642852783, 3), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9089463949203491, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('=', 0), 0.9744713306427002, 8), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('=', 0), 'terminal', 0.9999890327453613, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 179
    },
    {
        "nl": "What is the name of the singer with the largest net worth ?",
        "true_sql": "select singer.name order_by singer.net_worth_millions desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "order_by",
            "singer.net_worth_millions",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [39], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'desc', 0.9996882677078247, 4), ('ORDER_LIMIT', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'limit_value', 0.9998770952224731, 5)]",
        "logprob": "-0.0006529277905372371",
        "q_counter": 2,
        "questioned_indices": [
            2,
            3
        ],
        "questioned_tags": "[(('ORDER_DESC_ASC', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'desc', 0.9996882677078247, 4), 'yes'), (('ORDER_LIMIT', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'limit_value', 0.9998770952224731, 5), 'yes')]",
        "feedback_records": "[(('ORDER_DESC_ASC', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'desc', 0.9996882677078247, 4), 'yes'), (('ORDER_LIMIT', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'limit_value', 0.9998770952224731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 180
    },
    {
        "nl": "What is the name of the singer who is worth the most ?",
        "true_sql": "select singer.name order_by singer.net_worth_millions desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "order_by",
            "singer.net_worth_millions",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [39], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 0.9999991655349731, 3), ('ORDER_DESC_ASC', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'desc', 0.9958771467208862, 4), ('ORDER_LIMIT', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'limit_value', 0.9999178647994995, 5)]",
        "logprob": "-3.5830058801721147",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('GROUP_COL', ('song', 'singer_id', 43), 0.9999783039093018, 3), 'no'), (('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 0.9999991655349731, 3), 'yes'), (('ORDER_DESC_ASC', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'desc', 0.9958771467208862, 4), 'yes'), (('ORDER_LIMIT', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'limit_value', 0.9999178647994995, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('GROUP_COL', ('song', 'singer_id', 43), 0.9999783039093018, 3), 'no'), (('GROUP_COL', ('singer', 'name', 37), 2.1608973838738166e-05, 3), 'no'), (('GROUP_COL', ('song', 'title', 42), 9.883623874884506e-08, 3), 'no'), (('GROUP_COL', ('singer', 'singer_id', 36), 3.672714399272081e-08, 3), 'no'), (('ORDER_AGG_v2', ('singer', 'net_worth_millions', 39), ('none_agg', 0), False, 0.9999991655349731, 3), 'yes'), (('ORDER_DESC_ASC', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'desc', 0.9958771467208862, 4), 'yes'), (('ORDER_LIMIT', (('singer', 'net_worth_millions', 39), ('none_agg', 0), False), 'limit_value', 0.9999178647994995, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 181
    },
    {
        "nl": "Show different citizenship of singers and the number of singers of each citizenship .",
        "true_sql": "select singer.citizenship , count ( singer.* ) group_by singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.citizenship",
            ",",
            "count",
            "(",
            "singer.*",
            ")",
            "group_by",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 46, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9549692730074333, 3), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9999884366989136, 5)]",
        "logprob": "-0.1844680191871944",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9549692730074333, 3), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9999884366989136, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9549692730074333, 3), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9999884366989136, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 182
    },
    {
        "nl": "For each citizenship , how many singers are from that country ?",
        "true_sql": "select singer.citizenship , count ( singer.* ) group_by singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.citizenship",
            ",",
            "count",
            "(",
            "singer.*",
            ")",
            "group_by",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 46, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.6618422269821167, 1), ('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9964858558811811, 3), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9996562004089355, 5)]",
        "logprob": "-0.7344883115878663",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.6618422269821167, 1), 'yes'), (('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9964858558811811, 3), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9996562004089355, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.6618422269821167, 1), 'yes'), (('SELECT_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9964858558811811, 3), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9996562004089355, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 183
    },
    {
        "nl": "Please show the most common citizenship of singers .",
        "true_sql": "select singer.citizenship group_by singer.citizenship order_by count ( singer.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.citizenship",
            "group_by",
            "singer.citizenship",
            "order_by",
            "count",
            "(",
            "singer.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 46, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9985284805297852, 1), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9998770952224731, 3), ('ORDER_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9984454905945312, 5), ('ORDER_DESC_ASC', (('singer', '*', 46), ('count', 3), False), 'desc', 0.999568521976471, 6), ('ORDER_LIMIT', (('singer', '*', 46), ('count', 3), False), 'limit_value', 0.9999562501907349, 7)]",
        "logprob": "-0.008411019156087106",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9985284805297852, 1), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9998770952224731, 3), 'yes'), (('ORDER_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9984454905945312, 5), 'yes'), (('ORDER_DESC_ASC', (('singer', '*', 46), ('count', 3), False), 'desc', 0.999568521976471, 6), 'yes'), (('ORDER_LIMIT', (('singer', '*', 46), ('count', 3), False), 'limit_value', 0.9999562501907349, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9985284805297852, 1), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9998770952224731, 3), 'yes'), (('ORDER_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9984454905945312, 5), 'yes'), (('ORDER_DESC_ASC', (('singer', '*', 46), ('count', 3), False), 'desc', 0.999568521976471, 6), 'yes'), (('ORDER_LIMIT', (('singer', '*', 46), ('count', 3), False), 'limit_value', 0.9999562501907349, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 184
    },
    {
        "nl": "What is the msot common singer citizenship ?",
        "true_sql": "select singer.citizenship group_by singer.citizenship order_by count ( singer.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.citizenship",
            "order_by",
            "singer.birth_year",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9663646817207336, 1), ('ORDER_AGG_v2', ('singer', 'birth_year', 38), ('none_agg', 0), False, 1.0030733392341064e-05, 3)]",
        "logprob": "-33.32202075371422",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9663646817207336, 1), 'yes'), (('WHERE_COL', ('singer', 'name', 37), 0.6841292381286621, 3), 'no'), (('ORDER_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9973526000976562, 3), 'no'), (('WHERE_COL', ('singer', 'citizenship', 40), 0.5007315278053284, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9663646817207336, 1), 'yes'), (('WHERE_COL', ('singer', 'name', 37), 0.6841292381286621, 3), 'no'), (('WHERE_COL', ('singer', 'citizenship', 40), 0.3152778744697571, 3), 'no'), (('WHERE_COL', ('singer', 'singer_id', 36), 0.0005499348044395447, 3), 'no'), (('WHERE_COL', ('song', 'singer_id', 43), 2.3837033950258046e-05, 3), 'no'), (('ORDER_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9973526000976562, 3), 'no'), (('ORDER_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.002402278827503324, 3), 'no'), (('ORDER_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.00014693527191411707, 3), 'no'), (('ORDER_AGG_v2', ('singer', 'singer_id', 36), ('none_agg', 0), False, 8.777932089287782e-05, 3), 'no'), (('WHERE_COL', ('singer', 'citizenship', 40), 0.5007315278053284, 5), 'no'), (('WHERE_COL', ('singer', 'name', 37), 0.4979618787765503, 5), 'no'), (('WHERE_COL', ('singer', 'singer_id', 36), 0.0006258734501898289, 5), 'no'), (('WHERE_COL', ('song', 'title', 42), 0.0001977341016754508, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 185
    },
    {
        "nl": "Show different citizenships and the maximum net worth of singers of each citizenship .",
        "true_sql": "select singer.citizenship , max ( singer.net_worth_millions ) group_by singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [1, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.citizenship",
            ",",
            "max",
            "(",
            "singer.net_worth_millions",
            ")",
            "group_by",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [19, 5, 39, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.9827363731662511, 3), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9999994039535522, 5)]",
        "logprob": "-0.0701734982514821",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.9827363731662511, 3), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.9827363731662511, 3), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 186
    },
    {
        "nl": "For each citizenship , what is the maximum net worth ?",
        "true_sql": "select singer.citizenship , max ( singer.net_worth_millions ) group_by singer.citizenship",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [1, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "singer.net_worth_millions",
            ")",
            ",",
            "max",
            "(",
            "singer.net_worth_millions",
            ")",
            ",",
            "singer.citizenship",
            "group_by",
            "singer.citizenship",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 39, 4], 8, [19, 5, 39, 4], 8, [40], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.998290718484544, 1), ('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.9226262210548777, 3), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.13927803933620453, 5), ('GROUP_COL', ('singer', 'citizenship', 40), 0.9093107581138611, 7)]",
        "logprob": "-3.0067632203876338",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.998290718484544, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.9226262210548777, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('sum', 4), False, 0.7496160935024955, 5), 'no'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9093107581138611, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.998290718484544, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.9226262210548777, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('sum', 4), False, 0.7496160935024955, 5), 'no'), (('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.13927803933620453, 5), 'yes'), (('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('sum', 4), False, 0.5929555318005623, 5), 'no'), (('SELECT_AGG_v2', ('singer', 'net_worth_millions', 39), ('max', 1), False, 0.5886332133762167, 5), 'yes'), (('GROUP_COL', ('singer', 'citizenship', 40), 0.9093107581138611, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 187
    },
    {
        "nl": "Show titles of songs and names of singers .",
        "true_sql": "select song.title , singer.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "song.title",
            ",",
            "singer.name",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('song', 'title', 42), ('none_agg', 0), False, 0.9999996423721313, 1), ('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9997301697731018, 3)]",
        "logprob": "-0.0007033337711782915",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('song', 'title', 42), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9997301697731018, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('song', 'title', 42), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9997301697731018, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 188
    },
    {
        "nl": "What are the song titles and singer names ?",
        "true_sql": "select song.title , singer.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "song.title",
            ",",
            "singer.name",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('song', 'title', 42), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999489784240723, 3)]",
        "logprob": "-0.0007973705376953411",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999489784240723, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999489784240723, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 189
    },
    {
        "nl": "Show distinct names of singers that have songs with sales more than 300000 .",
        "true_sql": "select distinct singer.name where song.sales > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], 300000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "singer.name",
            "where",
            "song.sales",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 6, 44, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 2), ('WHERE_COL', ('song', 'sales', 44), 0.9999849796295166, 4), ('WHERE_OP', (('song', 'sales', 44),), ('>', 1), 0.9999490976333618, 5), ('WHERE_ROOT_TERM', (('song', 'sales', 44),), ('>', 1), 'terminal', 0.9995394945144653, 6)]",
        "logprob": "-0.014763300502504798",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 2), 'yes'), (('WHERE_COL', ('song', 'sales', 44), 0.9999849796295166, 4), 'yes'), (('WHERE_OP', (('song', 'sales', 44),), ('>', 1), 0.9999490976333618, 5), 'yes'), (('WHERE_ROOT_TERM', (('song', 'sales', 44),), ('>', 1), 'terminal', 0.9995394945144653, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 2), 'yes'), (('WHERE_COL', ('song', 'sales', 44), 0.9999849796295166, 4), 'yes'), (('WHERE_OP', (('song', 'sales', 44),), ('>', 1), 0.9999490976333618, 5), 'yes'), (('WHERE_ROOT_TERM', (('song', 'sales', 44),), ('>', 1), 'terminal', 0.9995394945144653, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 190
    },
    {
        "nl": "what are the different names of the singers that have sales more than 300000 ?",
        "true_sql": "select distinct singer.name where song.sales > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], 300000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "singer.name",
            "where",
            "song.sales",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 6, 44, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 2), ('WHERE_COL', ('song', 'sales', 44), 0.9986145496368408, 4), ('WHERE_OP', (('song', 'sales', 44),), ('>', 1), 0.9999390840530396, 5), ('WHERE_ROOT_TERM', (('song', 'sales', 44),), ('>', 1), 'terminal', 0.9994760155677795, 6)]",
        "logprob": "-0.09426943468848842",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 2), 'yes'), (('WHERE_COL', ('song', 'sales', 44), 0.9986145496368408, 4), 'yes'), (('WHERE_OP', (('song', 'sales', 44),), ('>', 1), 0.9999390840530396, 5), 'yes'), (('WHERE_ROOT_TERM', (('song', 'sales', 44),), ('>', 1), 'terminal', 0.9994760155677795, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 2), 'yes'), (('WHERE_COL', ('song', 'sales', 44), 0.9986145496368408, 4), 'yes'), (('WHERE_OP', (('song', 'sales', 44),), ('>', 1), 0.9999390840530396, 5), 'yes'), (('WHERE_ROOT_TERM', (('song', 'sales', 44),), ('>', 1), 'terminal', 0.9994760155677795, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 191
    },
    {
        "nl": "Show the names of singers that have more than one song .",
        "true_sql": "select singer.name group_by singer.name having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "group_by",
            "singer.name",
            "having",
            "avg",
            "(",
            "song.singer_id",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 37, 18, [17, 5, 43, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('singer', 'name', 37), 2.1248222310532583e-06, 3), ('HAV_AGG_v2', ('song', 'singer_id', 43), ('avg', 5), False, 0.08189303050020898, 5), ('HAV_OP_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('>', 1), 0.999596893787384, 6), ('HAV_ROOT_TERM_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('>', 1), 'terminal', 0.9999035596847534, 7)]",
        "logprob": "-23.07328905385186",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('song', 'singer_id', 43), 0.999997615814209, 3), 'no'), (('HAV_AGG_v2', ('song', 'singer_id', 43), ('count', 3), False, 0.8833404443736725, 5), 'no'), (('HAV_OP_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('>', 1), 0.999596893787384, 6), 'no'), (('HAV_ROOT_TERM_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('>', 1), 'terminal', 0.9999035596847534, 7), 'exit')]",
        "feedback_records": "[(('GROUP_COL', ('song', 'singer_id', 43), 0.999997615814209, 3), 'no'), (('GROUP_COL', ('singer', 'name', 37), 2.1248222310532583e-06, 3), 'yes'), (('GROUP_COL', ('song', 'song_id', 41), 1.8487422437374335e-07, 3), 'no'), (('GROUP_COL', ('song', 'title', 42), 9.01393519825433e-08, 3), 'no'), (('HAV_AGG_v2', ('song', 'singer_id', 43), ('count', 3), False, 0.8833404443736725, 5), 'no'), (('HAV_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.7897377860375748, 5), 'no'), (('HAV_AGG_v2', ('song', '*', 47), ('count', 3), False, 0.1880772089075806, 5), 'no'), (('HAV_AGG_v2', ('song', 'song_id', 41), ('count', 3), False, 0.16821762355271286, 5), 'no'), (('HAV_OP_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('>', 1), 0.999596893787384, 6), 'no'), (('HAV_OP_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('>=', 3), 0.00965763017571978, 6), 'no'), (('HAV_OP_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('<', 2), 3.321090480312705e-05, 6), 'no'), (('HAV_OP_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('between', 9), 2.886676520574838e-05, 6), 'no'), (('HAV_ROOT_TERM_v2', (('song', 'singer_id', 43), ('avg', 5), False), ('>', 1), 'terminal', 0.9999035596847534, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 192
    },
    {
        "nl": "What are the names of the singers that have more than one songs ?",
        "true_sql": "select singer.name group_by singer.name having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "group_by",
            "singer.name",
            "having",
            "count",
            "(",
            "song.song_id",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 37, 18, [9, 5, 41, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999986886978149, 1), ('GROUP_COL', ('singer', 'name', 37), 4.999493739887839e-06, 3), ('HAV_AGG_v2', ('song', 'song_id', 41), ('count', 3), False, 0.08402034762205943, 5), ('HAV_OP_v2', (('song', 'song_id', 41), ('count', 3), False), ('>', 1), 0.9998223185539246, 6), ('HAV_ROOT_TERM_v2', (('song', 'song_id', 41), ('count', 3), False), ('>', 1), 'terminal', 0.9998728036880493, 7)]",
        "logprob": "-22.114807601008156",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('GROUP_COL', ('song', 'singer_id', 43), 0.9999895095825195, 3), 'no'), (('HAV_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9928333221861617, 5), 'no'), (('HAV_OP_v2', (('song', 'song_id', 41), ('count', 3), False), ('>', 1), 0.9998223185539246, 6), 'no'), (('HAV_ROOT_TERM_v2', (('song', 'song_id', 41), ('count', 3), False), ('>', 1), 'terminal', 0.9998728036880493, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('GROUP_COL', ('song', 'singer_id', 43), 0.9999895095825195, 3), 'no'), (('GROUP_COL', ('song', 'title', 42), 5.171804787096335e-06, 3), 'no'), (('GROUP_COL', ('singer', 'name', 37), 4.999493739887839e-06, 3), 'yes'), (('GROUP_COL', ('singer', 'singer_id', 36), 4.1153882079925097e-07, 3), 'no'), (('HAV_AGG_v2', ('singer', '*', 46), ('count', 3), False, 0.9928333221861617, 5), 'no'), (('HAV_AGG_v2', ('song', 'singer_id', 43), ('count', 3), False, 0.40909870586639413, 5), 'no'), (('HAV_AGG_v2', ('song', '*', 47), ('count', 3), False, 0.11655396008874182, 5), 'no'), (('HAV_AGG_v2', ('singer', '*', 46), ('avg', 5), False, 0.08561018687408502, 5), 'no'), (('HAV_OP_v2', (('song', 'song_id', 41), ('count', 3), False), ('>', 1), 0.9998223185539246, 6), 'no'), (('HAV_OP_v2', (('song', 'song_id', 41), ('count', 3), False), ('>=', 3), 0.01118629766019075, 6), 'no'), (('HAV_OP_v2', (('song', 'song_id', 41), ('count', 3), False), ('between', 9), 3.413331796764396e-05, 6), 'no'), (('HAV_OP_v2', (('song', 'song_id', 41), ('count', 3), False), ('<', 2), 2.2600885131396353e-05, 6), 'no'), (('HAV_ROOT_TERM_v2', (('song', 'song_id', 41), ('count', 3), False), ('>', 1), 'terminal', 0.9998728036880493, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 193
    },
    {
        "nl": "Show the names of singers and the total sales of their songs .",
        "true_sql": "select singer.name , sum ( song.sales ) group_by singer.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [4, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "sum",
            "(",
            "song.sales",
            ")",
            "group_by",
            "singer.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [24, 5, 44, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('song', 'sales', 44), ('sum', 4), False, 0.9952674921213738, 3), ('GROUP_COL', ('singer', 'name', 37), 0.9412855505943298, 5)]",
        "logprob": "-0.3324858791396006",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('song', 'sales', 44), ('sum', 4), False, 0.9952674921213738, 3), 'yes'), (('GROUP_COL', ('singer', 'name', 37), 0.9412855505943298, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('song', 'sales', 44), ('sum', 4), False, 0.9952674921213738, 3), 'yes'), (('GROUP_COL', ('singer', 'name', 37), 0.9412855505943298, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 194
    },
    {
        "nl": "For each singer name , what is the total sales for their songs ?",
        "true_sql": "select singer.name , sum ( song.sales ) group_by singer.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [4, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "song.sales",
            ")",
            ",",
            "singer.name",
            "group_by",
            "singer.name",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 44, 4], 8, [37], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('song', 'sales', 44), ('sum', 4), False, 0.9969937439444573, 1), ('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.6736629605293274, 3), ('GROUP_COL', ('singer', 'name', 37), 0.2306850254535675, 5)]",
        "logprob": "-1.8754618102517413",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('song', 'sales', 44), ('sum', 4), False, 0.9969937439444573, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.6736629605293274, 3), 'yes'), (('GROUP_COL', ('song', 'title', 42), 0.7685278058052063, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('song', 'sales', 44), ('sum', 4), False, 0.9969937439444573, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.6736629605293274, 3), 'yes'), (('GROUP_COL', ('song', 'title', 42), 0.7685278058052063, 5), 'no'), (('GROUP_COL', ('singer', 'name', 37), 0.2306850254535675, 5), 'yes'), (('GROUP_COL', ('song', 'singer_id', 43), 0.0004406966036185622, 5), 'no'), (('GROUP_COL', ('singer', 'singer_id', 36), 7.605482824146748e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 195
    },
    {
        "nl": "List the name of singers that do not have any song .",
        "true_sql": "select singer.name where singer.singer_id not in ( select song.singer_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.singer_id",
            "not",
            "in",
            "(",
            "select",
            "song.singer_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [43], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'singer_id', 36), 1.0, 3), ('WHERE_OP', (('singer', 'singer_id', 36),), ('not in', 7), 0.9998408253184915, 4), ('WHERE_ROOT_TERM', (('singer', 'singer_id', 36),), ('not in', 7), 'root', 0.9999809265136719, 5), ('SELECT_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.9999877214431763, 7), ('O', '##END_NESTED##', 0.999816358089447, 8)]",
        "logprob": "-0.0016041766118005643",
        "q_counter": 3,
        "questioned_indices": [
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_OP', (('singer', 'singer_id', 36),), ('not in', 7), 0.9998408253184915, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'singer_id', 36),), ('not in', 7), 'root', 0.9999809265136719, 5), 'yes'), (('SELECT_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.9999877214431763, 7), 'yes')]",
        "feedback_records": "[(('WHERE_OP', (('singer', 'singer_id', 36),), ('not in', 7), 0.9998408253184915, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'singer_id', 36),), ('not in', 7), 'root', 0.9999809265136719, 5), 'yes'), (('SELECT_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.9999877214431763, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 196
    },
    {
        "nl": "What is the sname of every sing that does not have any song ?",
        "true_sql": "select singer.name where singer.singer_id not in ( select song.singer_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "singer.singer_id",
            "not",
            "in",
            "(",
            "select",
            "song.singer_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [43], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9701204299926758, 1), ('WHERE_COL', ('singer', 'singer_id', 36), 0.9981603026390076, 3), ('WHERE_OP', (('singer', 'singer_id', 36),), ('not in', 7), 0.9998291402808852, 4), ('WHERE_ROOT_TERM', (('singer', 'singer_id', 36),), ('not in', 7), 'root', 0.9999877214431763, 5), ('SELECT_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.9998602867126465, 7), ('O', '##END_NESTED##', 0.9998838901519775, 8)]",
        "logprob": "-0.033826119324812366",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9701204299926758, 1), 'yes'), (('WHERE_COL', ('singer', 'singer_id', 36), 0.9981603026390076, 3), 'yes'), (('WHERE_OP', (('singer', 'singer_id', 36),), ('not in', 7), 0.9998291402808852, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'singer_id', 36),), ('not in', 7), 'root', 0.9999877214431763, 5), 'yes'), (('SELECT_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.9998602867126465, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 37), ('none_agg', 0), False, 0.9701204299926758, 1), 'yes'), (('WHERE_COL', ('singer', 'singer_id', 36), 0.9981603026390076, 3), 'yes'), (('WHERE_OP', (('singer', 'singer_id', 36),), ('not in', 7), 0.9998291402808852, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'singer_id', 36),), ('not in', 7), 'root', 0.9999877214431763, 5), 'yes'), (('SELECT_AGG_v2', ('song', 'singer_id', 43), ('none_agg', 0), False, 0.9998602867126465, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 197
    },
    {
        "nl": "Show the citizenship shared by singers with birth year before 1945 and after 1955 .",
        "true_sql": "select singer.citizenship where singer.birth_year < value intersect select singer.citizenship where singer.birth_year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], 1955.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 3, False], None], 1945.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.citizenship",
            "where",
            "singer.birth_year",
            "<",
            "value",
            "intersect",
            "select",
            "singer.citizenship",
            "where",
            "singer.birth_year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 38, [21], 3, 23, 2, [40], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9965839385986328, 3), ('WHERE_OP', (('singer', 'birth_year', 38),), ('<', 2), 0.9713668823242188, 4), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('<', 2), 'terminal', 0.9999786615371704, 5), ('IUEN_v2', ('intersect', 1), 0.9878278970718384, 6), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999971389770508, 8), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9999980926513672, 10), ('WHERE_OP', (('singer', 'birth_year', 38),), ('>', 1), 0.892286479473114, 11), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('>', 1), 'terminal', 0.9999827146530151, 12)]",
        "logprob": "-0.1589222703555055",
        "q_counter": 8,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('WHERE_COL', ('singer', 'birth_year', 38), 0.9965839385986328, 3), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('<', 2), 0.9713668823242188, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('<', 2), 'terminal', 0.9999786615371704, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9878278970718384, 6), 'yes'), (('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999971389770508, 8), 'yes'), (('WHERE_COL', ('singer', 'birth_year', 38), 0.9999980926513672, 10), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('>', 1), 0.892286479473114, 11), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('>', 1), 'terminal', 0.9999827146530151, 12), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('singer', 'birth_year', 38), 0.9965839385986328, 3), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('<', 2), 0.9713668823242188, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('<', 2), 'terminal', 0.9999786615371704, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9878278970718384, 6), 'yes'), (('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999971389770508, 8), 'yes'), (('WHERE_COL', ('singer', 'birth_year', 38), 0.9999980926513672, 10), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('>', 1), 0.892286479473114, 11), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('>', 1), 'terminal', 0.9999827146530151, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 198
    },
    {
        "nl": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 ?",
        "true_sql": "select singer.citizenship where singer.birth_year < value intersect select singer.citizenship where singer.birth_year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], 1955.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 3, False], None], 1945.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'singer.singer_id': 1, 'singer.name': 2, 'singer.birth_year': 3, 'singer.net_worth_millions': 4, 'singer.citizenship': 5, 'song.song_id': 6, 'song.title': 7, 'song.singer_id': 8, 'song.sales': 9, 'song.highest_position': 10, 'singer.*': 11, 'song.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.citizenship",
            "where",
            "singer.birth_year",
            "<",
            "value",
            "intersect",
            "select",
            "singer.citizenship",
            "where",
            "singer.birth_year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 38, [21], 3, 23, 2, [40], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9987125396728516, 3), ('WHERE_OP', (('singer', 'birth_year', 38),), ('<', 2), 0.97214275598526, 4), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('<', 2), 'terminal', 0.9999704360961914, 5), ('IUEN_v2', ('intersect', 1), 0.9965527057647705, 6), ('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999836683273315, 8), ('WHERE_COL', ('singer', 'birth_year', 38), 0.9999991655349731, 10), ('WHERE_OP', (('singer', 'birth_year', 38),), ('>', 1), 0.8741199970245361, 11), ('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('>', 1), 'terminal', 0.9999654293060303, 12)]",
        "logprob": "-0.1678325538025737",
        "q_counter": 8,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('WHERE_COL', ('singer', 'birth_year', 38), 0.9987125396728516, 3), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('<', 2), 0.97214275598526, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('<', 2), 'terminal', 0.9999704360961914, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9965527057647705, 6), 'yes'), (('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999836683273315, 8), 'yes'), (('WHERE_COL', ('singer', 'birth_year', 38), 0.9999991655349731, 10), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('>', 1), 0.8741199970245361, 11), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('>', 1), 'terminal', 0.9999654293060303, 12), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('singer', 'birth_year', 38), 0.9987125396728516, 3), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('<', 2), 0.97214275598526, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('<', 2), 'terminal', 0.9999704360961914, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9965527057647705, 6), 'yes'), (('SELECT_AGG_v2', ('singer', 'citizenship', 40), ('none_agg', 0), False, 0.9999836683273315, 8), 'yes'), (('WHERE_COL', ('singer', 'birth_year', 38), 0.9999991655349731, 10), 'yes'), (('WHERE_OP', (('singer', 'birth_year', 38),), ('>', 1), 0.8741199970245361, 11), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'birth_year', 38),), ('>', 1), 'terminal', 0.9999654293060303, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 199
    },
    {
        "nl": "How many high schoolers are there ?",
        "true_sql": "select count ( highschooler.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999823864319924, 1)]",
        "logprob": "-0.0009723221000961053",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999823864319924, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999823864319924, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 200
    },
    {
        "nl": "Count the number of high schoolers .",
        "true_sql": "select count ( highschooler.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999615827010695, 1)]",
        "logprob": "-0.0023580141876500932",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999615827010695, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999615827010695, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 201
    },
    {
        "nl": "Show the names and grades of each high schooler .",
        "true_sql": "select highschooler.name , highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999898672103882, 3)]",
        "logprob": "-0.0004159408100792885",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999898672103882, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999898672103882, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 202
    },
    {
        "nl": "What are the names and grades for each high schooler ?",
        "true_sql": "select highschooler.name , highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999992847442627, 3)]",
        "logprob": "-0.00277019038005199",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999992847442627, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999992847442627, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 203
    },
    {
        "nl": "Show all the grades of the high schoolers .",
        "true_sql": "select highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9998555183410645, 2)]",
        "logprob": "-0.8985843427025462",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9998555183410645, 2), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9998555183410645, 2), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 204
    },
    {
        "nl": "What is the grade of each high schooler ?",
        "true_sql": "select highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.*",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('none_agg', 0), False, 0.01247717067599297, 1)]",
        "logprob": "-4.385700102674423",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('max', 1), False, 0.8247886678259103, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('max', 1), False, 0.8247886678259103, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('sum', 4), False, 0.6414931094286546, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.6221727729932682, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('min', 2), False, 0.4030645748401148, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 205
    },
    {
        "nl": "What grade is Kyle in ?",
        "true_sql": "select highschooler.grade where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.grade",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.7177067399024963, 1), ('WHERE_COL', ('highschooler', 'name', 37), 1.0, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-9.223775309688227",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.7177067399024963, 1), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.999847412109375, 3), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.7177067399024963, 1), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.999847412109375, 3), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.00015218017506413162, 3), 'yes'), (('WHERE_COL', ('friend', 'friend_id', 40), 3.0734071287952247e-07, 3), 'no'), (('WHERE_COL', ('highschooler', 'id', 36), 2.5690900073982448e-08, 3), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 206
    },
    {
        "nl": "Return the grade for the high schooler named Kyle .",
        "true_sql": "select highschooler.grade where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.grade",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.14428231120109558, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.999354898929596, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-1.9643880340777171",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.8547152280807495, 1), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.999354898929596, 3), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.8547152280807495, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.14428231120109558, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', '*', 43), ('none_agg', 0), False, 0.0005248743109405041, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('sum', 4), False, 0.09079964222635224, 1), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.999354898929596, 3), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 207
    },
    {
        "nl": "Show the names of all high schoolers in grade 10 .",
        "true_sql": "select highschooler.name where highschooler.grade = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 10.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9996190071105957, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999960660934448, 5)]",
        "logprob": "-0.001001444825058971",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9996190071105957, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999960660934448, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9996190071105957, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999960660934448, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 208
    },
    {
        "nl": "What are the names of all high schoolers in grade 10 ?",
        "true_sql": "select highschooler.name where highschooler.grade = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 10.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9995748400688171, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999969005584717, 5)]",
        "logprob": "-0.0016234607738706078",
        "q_counter": 2,
        "questioned_indices": [
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9995748400688171, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999969005584717, 5), 'yes')]",
        "feedback_records": "[(('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9995748400688171, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999969005584717, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 209
    },
    {
        "nl": "Show the ID of the high schooler named Kyle .",
        "true_sql": "select highschooler.id where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.id",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.9999762773513794, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.9999998807907104, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.0010413631231166022",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.9999762773513794, 1), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.9999762773513794, 1), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 210
    },
    {
        "nl": "What is Kyle 's id ?",
        "true_sql": "select highschooler.id where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "highschooler.id",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [36], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.01250943168997765, 2), ('WHERE_COL', ('highschooler', 'name', 37), 1.0, 4), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999992847442627, 5), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 6)]",
        "logprob": "-11.098437459251809",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.9809734225273132, 2), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9753040671348572, 4), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999992847442627, 5), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.9809734225273132, 2), 'no'), (('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.01250943168997765, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.006438824813812973, 2), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 5.03270930494182e-05, 2), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9753040671348572, 4), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.008108360692858696, 4), 'no'), (('WHERE_COL', ('highschooler', 'id', 36), 0.005479724612087011, 4), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.001341780531220138, 4), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999992847442627, 5), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 211
    },
    {
        "nl": "How many high schoolers are there in grade 9 or 10 ?",
        "true_sql": "select count ( highschooler.* ) where highschooler.grade = value or highschooler.grade = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 9.0, None], 'or', [False, 2, [0, [0, 3, False], None], 10.0, None]], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "or",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 6, 38, [7], 3, 25, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.999958155305078, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9933288097381592, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999980926513672, 5), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 7), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9747285842895508, 8), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999963045120239, 9)]",
        "logprob": "-0.11316435995771199",
        "q_counter": 5,
        "questioned_indices": [
            0,
            2,
            3,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.999958155305078, 1), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9933288097381592, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999980926513672, 5), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9747285842895508, 8), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999963045120239, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.999958155305078, 1), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9933288097381592, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999980926513672, 5), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9747285842895508, 8), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999963045120239, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 212
    },
    {
        "nl": "Count the number of high schoolers in grades 9 or 10 .",
        "true_sql": "select count ( highschooler.* ) where highschooler.grade = value or highschooler.grade = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], 9.0, None], 'or', [False, 2, [0, [0, 3, False], None], 10.0, None]], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "where",
            "highschooler.grade",
            "=",
            "value",
            "and",
            "highschooler.grade",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 6, 38, [7], 3, 16, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999885558332606, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 1.0, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9779090881347656, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.999998927116394, 5), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9999984502792358, 7), ('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.8631160855293274, 8), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999903440475464, 9)]",
        "logprob": "-0.6079395229853378",
        "q_counter": 6,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999885558332606, 1), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9779090881347656, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9999984502792358, 7), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.8631160855293274, 8), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999903440475464, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999885558332606, 1), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.9779090881347656, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9999984502792358, 7), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('=', 0), 0.8631160855293274, 8), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('=', 0), 'terminal', 0.9999903440475464, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 213
    },
    {
        "nl": "Show the number of high schoolers for each grade .",
        "true_sql": "select highschooler.grade , count ( highschooler.* ) group_by highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            ",",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 8, [38], 10, 38, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.6225260699554365, 1), ('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.6153008937835693, 3), ('GROUP_COL', ('highschooler', 'grade', 38), 0.1784297078847885, 5)]",
        "logprob": "-4.105302506302035",
        "q_counter": 2,
        "questioned_indices": [
            0,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.8254932761192322, 1), 'no'), (('GROUP_COL', ('highschooler', 'name', 37), 0.8215628862380981, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.8254932761192322, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.6225260699554365, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.02329873293638229, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', '*', 43), ('none_agg', 0), False, 0.0002130403736373411, 1), 'no'), (('GROUP_COL', ('highschooler', 'name', 37), 0.8215628862380981, 5), 'no'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.1784297078847885, 5), 'yes'), (('GROUP_COL', ('highschooler', 'id', 36), 6.694994226563722e-06, 5), 'no'), (('GROUP_COL', ('highschooler', '*', 43), 8.499866055444727e-08, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 214
    },
    {
        "nl": "How many high schoolers are in each grade ?",
        "true_sql": "select highschooler.grade , count ( highschooler.* ) group_by highschooler.grade",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            ",",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 8, [38], 10, 38, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9911860713982309, 1), ('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.7914836406707764, 3), ('GROUP_COL', ('highschooler', 'grade', 38), 0.5487278699874878, 5)]",
        "logprob": "-0.8696133794512287",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9911860713982309, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.7914836406707764, 3), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.5487278699874878, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9911860713982309, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.7914836406707764, 3), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.5487278699874878, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 215
    },
    {
        "nl": "Which grade has the most high schoolers ?",
        "true_sql": "select highschooler.grade group_by highschooler.grade order_by count ( highschooler.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "order_by",
            "count",
            "(",
            "highschooler.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 38, 11, [9, 5, 43, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9974454641342163, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.9994819760322571, 3), ('ORDER_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999639670958519, 5), ('ORDER_DESC_ASC', (('highschooler', '*', 43), ('count', 3), False), 'desc', 0.9977756142616272, 6), ('ORDER_LIMIT', (('highschooler', '*', 43), ('count', 3), False), 'limit_value', 0.999951958656311, 7)]",
        "logprob": "-0.06391628252479178",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9974454641342163, 1), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.9994819760322571, 3), 'yes'), (('ORDER_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999639670958519, 5), 'yes'), (('ORDER_DESC_ASC', (('highschooler', '*', 43), ('count', 3), False), 'desc', 0.9977756142616272, 6), 'yes'), (('ORDER_LIMIT', (('highschooler', '*', 43), ('count', 3), False), 'limit_value', 0.999951958656311, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9974454641342163, 1), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.9994819760322571, 3), 'yes'), (('ORDER_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999639670958519, 5), 'yes'), (('ORDER_DESC_ASC', (('highschooler', '*', 43), ('count', 3), False), 'desc', 0.9977756142616272, 6), 'yes'), (('ORDER_LIMIT', (('highschooler', '*', 43), ('count', 3), False), 'limit_value', 0.999951958656311, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 216
    },
    {
        "nl": "Return the grade that has the greatest number of high schoolers .",
        "true_sql": "select highschooler.grade group_by highschooler.grade order_by count ( highschooler.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "order_by",
            "count",
            "(",
            "highschooler.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 38, 11, [9, 5, 43, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9734469652175903, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.9844687581062317, 3), ('ORDER_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999319406127002, 5), ('ORDER_DESC_ASC', (('highschooler', '*', 43), ('count', 3), False), 'desc', 0.9981111288070679, 6), ('ORDER_LIMIT', (('highschooler', '*', 43), ('count', 3), False), 'limit_value', 0.9999616146087646, 7)]",
        "logprob": "-0.06303850464395627",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9734469652175903, 1), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.9844687581062317, 3), 'yes'), (('ORDER_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999319406127002, 5), 'yes'), (('ORDER_DESC_ASC', (('highschooler', '*', 43), ('count', 3), False), 'desc', 0.9981111288070679, 6), 'yes'), (('ORDER_LIMIT', (('highschooler', '*', 43), ('count', 3), False), 'limit_value', 0.9999616146087646, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9734469652175903, 1), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.9844687581062317, 3), 'yes'), (('ORDER_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999319406127002, 5), 'yes'), (('ORDER_DESC_ASC', (('highschooler', '*', 43), ('count', 3), False), 'desc', 0.9981111288070679, 6), 'yes'), (('ORDER_LIMIT', (('highschooler', '*', 43), ('count', 3), False), 'limit_value', 0.9999616146087646, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 217
    },
    {
        "nl": "Show me all grades that have at least 4 students .",
        "true_sql": "select highschooler.grade group_by highschooler.grade having count ( highschooler.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 4.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "having",
            "count",
            "(",
            "highschooler.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 38, 18, [9, 5, 43, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.8974362015724182, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.9981623291969299, 3), ('HAV_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9997845571388786, 5), ('HAV_OP_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 0.9995035135331575, 6), ('HAV_ROOT_TERM_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 'terminal', 0.9999922513961792, 7)]",
        "logprob": "-0.11250327035038941",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.8974362015724182, 1), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.9981623291969299, 3), 'yes'), (('HAV_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9997845571388786, 5), 'yes'), (('HAV_OP_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 0.9995035135331575, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 'terminal', 0.9999922513961792, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.8974362015724182, 1), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.9981623291969299, 3), 'yes'), (('HAV_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9997845571388786, 5), 'yes'), (('HAV_OP_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 0.9995035135331575, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 'terminal', 0.9999922513961792, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 218
    },
    {
        "nl": "Which grades have 4 or more high schoolers ?",
        "true_sql": "select highschooler.grade group_by highschooler.grade having count ( highschooler.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 4.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'highschooler.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.grade",
            "group_by",
            "highschooler.grade",
            "having",
            "count",
            "(",
            "highschooler.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 10, 38, 18, [9, 5, 43, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999915361404419, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.9999995231628418, 3), ('HAV_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999839957965903, 5), ('HAV_OP_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 0.9997866440665688, 6), ('HAV_ROOT_TERM_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 'terminal', 0.9999911785125732, 7)]",
        "logprob": "-0.0077810803268110644",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999915361404419, 1), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.9999995231628418, 3), 'yes'), (('HAV_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999839957965903, 5), 'yes'), (('HAV_OP_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 0.9997866440665688, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 'terminal', 0.9999911785125732, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('none_agg', 0), False, 0.9999915361404419, 1), 'yes'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.9999995231628418, 3), 'yes'), (('HAV_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.9999839957965903, 5), 'yes'), (('HAV_OP_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 0.9997866440665688, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('highschooler', '*', 43), ('count', 3), False), ('>=', 3), 'terminal', 0.9999911785125732, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 219
    },
    {
        "nl": "Show the student IDs and numbers of friends corresponding to each .",
        "true_sql": "select friend.student_id , count ( friend.* ) group_by friend.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'friend.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "friend.student_id",
            ",",
            "count",
            "(",
            "friend.*",
            ")",
            "group_by",
            "friend.student_id",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 44, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.6106732487678528, 1), ('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.924899697356385, 3), ('GROUP_COL', ('friend', 'student_id', 39), 0.0648379698395729, 5)]",
        "logprob": "-3.5415267425738484",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.6106732487678528, 1), 'yes'), (('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.924899697356385, 3), 'yes'), (('GROUP_COL', ('friend', 'friend_id', 40), 0.9277045726776123, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.6106732487678528, 1), 'yes'), (('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.924899697356385, 3), 'yes'), (('GROUP_COL', ('friend', 'friend_id', 40), 0.9277045726776123, 5), 'no'), (('GROUP_COL', ('friend', 'student_id', 39), 0.0648379698395729, 5), 'yes'), (('GROUP_COL', ('likes', 'student_id', 41), 0.007457464933395386, 5), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 1.8675983426419407e-08, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 220
    },
    {
        "nl": "How many friends does each student have ?",
        "true_sql": "select friend.student_id , count ( friend.* ) group_by friend.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'friend.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "friend.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.9988694784930323, 1)]",
        "logprob": "-0.019651640714974217",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.9988694784930323, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.9988694784930323, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 221
    },
    {
        "nl": "Show the names of high school students and their corresponding number of friends .",
        "true_sql": "select highschooler.name , count ( * ) group_by friend.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999995231628418, 1), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9144805669784546, 3)]",
        "logprob": "-0.6963882733887713",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9144805669784546, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9144805669784546, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 222
    },
    {
        "nl": "What are the names of the high schoolers and how many friends does each have ?",
        "true_sql": "select highschooler.name , count ( * ) group_by friend.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.963940441608429, 3)]",
        "logprob": "-0.20091853121808875",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.963940441608429, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.963940441608429, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 223
    },
    {
        "nl": "What is the name of the high schooler who has the greatest number of friends ?",
        "true_sql": "select highschooler.name group_by friend.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "highschooler.*",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('highschooler', '*', 43), 6.478422619693447e-06, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999238522476794, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9962514042854309, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999476671218872, 7)]",
        "logprob": "-11.951330265932823",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('friend', 'friend_id', 40), 0.6547370553016663, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999238522476794, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9962514042854309, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999476671218872, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('friend', 'friend_id', 40), 0.6547370553016663, 3), 'no'), (('GROUP_COL', ('highschooler', 'name', 37), 0.34003156423568726, 3), 'no'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.005205447785556316, 3), 'no'), (('GROUP_COL', ('highschooler', 'id', 36), 1.905945646285545e-05, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999238522476794, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9962514042854309, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999476671218872, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 224
    },
    {
        "nl": "Return the name of the high school student with the most friends .",
        "true_sql": "select highschooler.name group_by friend.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "friend.student_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 39, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('friend', 'student_id', 39), 0.0034529061522334814, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999928352659555, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9856562614440918, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999371767044067, 7)]",
        "logprob": "-5.683407714631985",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('friend', 'friend_id', 40), 0.7416402101516724, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999928352659555, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9856562614440918, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999371767044067, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('friend', 'friend_id', 40), 0.7416402101516724, 3), 'no'), (('GROUP_COL', ('highschooler', '*', 43), 0.15094834566116333, 3), 'no'), (('GROUP_COL', ('highschooler', 'name', 37), 0.10344227403402328, 3), 'no'), (('GROUP_COL', ('friend', 'student_id', 39), 0.0034529061522334814, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999928352659555, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9856562614440918, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999371767044067, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 225
    },
    {
        "nl": "Show the names of high schoolers who have at least 3 friends .",
        "true_sql": "select highschooler.name group_by friend.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "highschooler.grade",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 38, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999885559082031, 1), ('GROUP_COL', ('highschooler', 'grade', 38), 0.00022785695909988135, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8991993053648727, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9989218028166116, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999943971633911, 7)]",
        "logprob": "-8.814543689133894",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999885559082031, 1), 'yes'), (('GROUP_COL', ('friend', 'friend_id', 40), 0.7725725769996643, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8991993053648727, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9989218028166116, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999943971633911, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999885559082031, 1), 'yes'), (('GROUP_COL', ('friend', 'friend_id', 40), 0.7725725769996643, 3), 'no'), (('GROUP_COL', ('highschooler', 'name', 37), 0.21059373021125793, 3), 'no'), (('GROUP_COL', ('highschooler', '*', 43), 0.013317525386810303, 3), 'no'), (('GROUP_COL', ('highschooler', 'id', 36), 0.0031522668432444334, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8991993053648727, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9989218028166116, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999943971633911, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 226
    },
    {
        "nl": "What are the names of high schoolers who have 3 or more friends ?",
        "true_sql": "select highschooler.name group_by friend.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "likes.*",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 45, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('likes', '*', 45), 8.270467333204579e-07, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9971985181486195, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.999583679977392, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999963045120239, 7)]",
        "logprob": "-14.018339461105874",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('friend', 'friend_id', 40), 0.5701001286506653, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9971985181486195, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.999583679977392, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999963045120239, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('friend', 'friend_id', 40), 0.5701001286506653, 3), 'no'), (('GROUP_COL', ('highschooler', 'name', 37), 0.4294690787792206, 3), 'no'), (('GROUP_COL', ('highschooler', '*', 43), 0.00038157188100740314, 3), 'no'), (('GROUP_COL', (None, '*', 35), 4.5982284063939005e-05, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9971985181486195, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.999583679977392, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999963045120239, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 227
    },
    {
        "nl": "Show the names of all of the high schooler Kyle 's friends .",
        "true_sql": "select highschooler.name where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999866485595703, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.9999768733978271, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.0007228477428010865",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999866485595703, 1), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.9999768733978271, 3), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999866485595703, 1), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.9999768733978271, 3), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 228
    },
    {
        "nl": "Return the names of friends of the high school student Kyle .",
        "true_sql": "select highschooler.name where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9723888635635376, 1), ('WHERE_COL', ('highschooler', 'name', 37), 0.9999390840530396, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.999997615814209, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.028244595872965676",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9723888635635376, 1), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.9999390840530396, 3), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.999997615814209, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9723888635635376, 1), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.9999390840530396, 3), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.999997615814209, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 229
    },
    {
        "nl": "How many friends does the high school student Kyle have ?",
        "true_sql": "select count ( * ) where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "highschooler.name",
            "=",
            "value",
            "and",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 37, [7], 3, 16, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.693156607549969, 1), ('WHERE_COL', ('highschooler', 'name', 37), 1.0, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999969005584717, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('WHERE_COL', ('highschooler', 'name', 37), 0.9996486902236938, 7), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999891519546509, 8), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999985694885254, 9)]",
        "logprob": "-1.6138141816257587",
        "q_counter": 6,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('count', 3), True, 0.9138795164462931, 1), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999969005584717, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.9996486902236938, 7), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999891519546509, 8), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999985694885254, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('count', 3), True, 0.9138795164462931, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.693156607549969, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('count', 3), True, 0.5733419045418374, 1), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('count', 3), True, 0.480772838505674, 1), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999969005584717, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.9996486902236938, 7), 'yes'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999891519546509, 8), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999985694885254, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 230
    },
    {
        "nl": "Count the number of friends Kyle has .",
        "true_sql": "select count ( * ) where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.260916293211274, 1), ('WHERE_COL', ('highschooler', 'name', 37), 1.0, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999953508377075, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-13.348528305078528",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.994999061251039, 1), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9216749668121338, 3), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999953508377075, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', '*', 44), ('count', 3), False, 0.994999061251039, 1), 'no'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('count', 3), True, 0.42889038115827544, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.260916293211274, 1), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('count', 3), False, 0.15772638388091761, 1), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9216749668121338, 3), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.0006514238193631172, 3), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.0003448910138104111, 3), 'yes'), (('WHERE_COL', ('likes', 'student_id', 41), 0.00024813771597109735, 3), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999953508377075, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 231
    },
    {
        "nl": "Show ids of all students who do not have any friends .",
        "true_sql": "select highschooler.id except select friend.student_id",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.id",
            "except",
            "select",
            "friend.student_id",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 28, 2, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 2.2343678907077483e-08, 1), ('IUEN_v2', ('except', 3), 0.00016578299982938915, 2), ('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.22665847837924957, 4)]",
        "logprob": "-34.5959784129144",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.998471200466156, 1), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.501822829246521, 3), 'no'), (('GROUP_COL', ('friend', 'student_id', 39), 0.7275473475456238, 3), 'no'), (('IUEN_v2', ('except', 3), 0.00016578299982938915, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.7671399712562561, 4), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9629490971565247, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.998471200466156, 1), 'no'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.001501172198913992, 1), 'no'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 2.759648668870794e-05, 1), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 3.694721684155411e-08, 1), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.501822829246521, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.4981769621372223, 3), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 1.3783670738121145e-07, 3), 'no'), (('WHERE_COL', (None, '*', 35), 1.5517784390794986e-08, 3), 'no'), (('GROUP_COL', ('friend', 'student_id', 39), 0.7275473475456238, 3), 'no'), (('GROUP_COL', ('friend', 'friend_id', 40), 0.26998722553253174, 3), 'no'), (('GROUP_COL', ('likes', 'student_id', 41), 0.002449572319164872, 3), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 1.5624080333509482e-05, 3), 'no'), (('IUEN_v2', ('except', 3), 0.00016578299982938915, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.7671399712562561, 4), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.22665847837924957, 4), 'yes'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.006174161564558743, 4), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 2.7123607651446956e-05, 4), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9629490971565247, 6), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.037047166377305984, 6), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 3.203545475116698e-06, 6), 'no'), (('WHERE_COL', (None, '*', 35), 2.8663026796493796e-07, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 232
    },
    {
        "nl": "What are the ids of high school students who do not have friends ?",
        "true_sql": "select highschooler.id except select friend.student_id",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.id",
            "except",
            "select",
            "friend.student_id",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 28, 2, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.04671834781765937, 1), ('IUEN_v2', ('except', 3), 0.010641598142683506, 2), ('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.28831321001052856, 4)]",
        "logprob": "-12.182356232476572",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.9462541341781616, 1), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.8420615792274475, 3), 'no'), (('IUEN_v2', ('except', 3), 0.010641598142683506, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.6054729223251343, 4), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.7382953763008118, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.9462541341781616, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.04671834781765937, 1), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.004991699475795029, 1), 'no'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.00023340656480286257, 1), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.8420615792274475, 3), 'no'), (('WHERE_COL', ('highschooler', 'id', 36), 0.09330122917890549, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.06422114372253418, 3), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.00040714172064326704, 3), 'no'), (('IUEN_v2', ('except', 3), 0.010641598142683506, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.6054729223251343, 4), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.28831321001052856, 4), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.057558801025152206, 4), 'no'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.04857051745057107, 4), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.7382953763008118, 6), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.20714329183101654, 6), 'no'), (('WHERE_COL', ('highschooler', 'id', 36), 0.04776492714881897, 6), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.006746191065758467, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 233
    },
    {
        "nl": "Show names of all high school students who do not have any friends .",
        "true_sql": "select highschooler.name except select highschooler.name",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.id",
            "not",
            "in",
            "(",
            "select",
            "likes.student_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [41], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('highschooler', 'id', 36), 0.9978094696998596, 3), ('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9998095034397683, 4), ('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.999985933303833, 5), ('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.8879966735839844, 7), ('O', '##END_NESTED##', 0.9996780157089233, 8)]",
        "logprob": "-0.12304206274510976",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('highschooler', 'id', 36), 0.9978094696998596, 3), 'no'), (('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9998095034397683, 4), 'no'), (('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.999985933303833, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('highschooler', 'id', 36), 0.9978094696998596, 3), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.0017108006868511438, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.00044449823326431215, 3), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 3.2438580092275515e-05, 3), 'no'), (('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9998095034397683, 4), 'no'), (('WHERE_OP', (('highschooler', 'id', 36),), ('not like', 10), 0.010614913837349315, 4), 'no'), (('WHERE_OP', (('highschooler', 'id', 36),), ('<', 2), 6.40428697806783e-05, 4), 'no'), (('WHERE_OP', (('highschooler', 'id', 36),), ('in', 8), 3.500925959087908e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.999985933303833, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 234
    },
    {
        "nl": "What are the names of students who have no friends ?",
        "true_sql": "select highschooler.name except select highschooler.name",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "except",
            "select",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 28, 2, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9858595728874207, 1), ('IUEN_v2', ('except', 3), 0.03730904310941696, 2), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.01210708543658256, 4)]",
        "logprob": "-10.619648622544707",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9858595728874207, 1), 'yes'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.5417105555534363, 3), 'no'), (('IUEN_v2', ('except', 3), 0.03730904310941696, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.8293413519859314, 4), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9112460017204285, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9858595728874207, 1), 'yes'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.5417105555534363, 3), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.45779550075531006, 3), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 0.00010716144606703892, 3), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 2.3563918148283847e-05, 3), 'no'), (('IUEN_v2', ('except', 3), 0.03730904310941696, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.8293413519859314, 4), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.14989610016345975, 4), 'no'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.01210708543658256, 4), 'yes'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.007642290089279415, 4), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9112460017204285, 6), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.08827412873506546, 6), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 0.00031683422275818884, 6), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 1.7541529814479873e-05, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 235
    },
    {
        "nl": "Show the ids of high schoolers who have friends and are also liked by someone else .",
        "true_sql": "select friend.student_id intersect select likes.liked_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "friend.student_id",
            "intersect",
            "select",
            "likes.liked_id",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 23, 2, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.0044635022059082985, 1), ('IUEN_v2', ('intersect', 1), 5.439165988718742e-07, 2), ('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.09508258104324342, 4)]",
        "logprob": "-31.916251521548475",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.7477141618728638, 1), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.4728958010673523, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0025288756005465984, 2), 'no'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.8717936873435974, 4), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.5618555545806885, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.7477141618728638, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.24703410267829892, 1), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.0044635022059082985, 1), 'yes'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.0005552727961912749, 1), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.4728958010673523, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.38951170444488525, 3), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.1268574297428131, 3), 'no'), (('WHERE_COL', ('highschooler', 'id', 36), 0.009242360480129719, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0025288756005465984, 2), 'no'), (('IUEN_v2', ('union', 2), 0.00027899103588424623, 2), 'no'), (('IUEN_v2', ('intersect', 1), 5.439165988718742e-07, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.8717936873435974, 4), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.09508258104324342, 4), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 0.03248436376452446, 4), 'no'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.00033767987042665465, 4), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.5618555545806885, 6), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.31560370326042175, 6), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.11728958040475845, 6), 'no'), (('WHERE_COL', ('highschooler', 'id', 36), 0.004744948819279671, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 236
    },
    {
        "nl": "What are the ids of students who both have friends and are liked ?",
        "true_sql": "select friend.student_id intersect select likes.liked_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "friend.student_id",
            "intersect",
            "select",
            "likes.liked_id",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 23, 2, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.9505079388618469, 1), ('IUEN_v2', ('intersect', 1), 1.6955433466137038e-06, 2), ('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.025066686794161793, 4)]",
        "logprob": "-21.845924220783772",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.9505079388618469, 1), 'yes'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9401060938835144, 3), 'no'), (('IUEN_v2', ('except', 3), 0.000800436595454812, 2), 'no'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.683657169342041, 4), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.8698034286499023, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.9505079388618469, 1), 'yes'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.9401060938835144, 3), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.05889003723859787, 3), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.0006056992569938302, 3), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 0.0003981420595664531, 3), 'no'), (('IUEN_v2', ('except', 3), 0.000800436595454812, 2), 'no'), (('IUEN_v2', ('union', 2), 0.00039833856862969697, 2), 'no'), (('IUEN_v2', ('intersect', 1), 1.6955433466137038e-06, 2), 'yes'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.683657169342041, 4), 'no'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.23432460427284238, 4), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.05695097520947457, 4), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.025066686794161793, 4), 'yes'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.8698034286499023, 6), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.12958766520023346, 6), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 0.0005096370587125421, 6), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 9.922653407556936e-05, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 237
    },
    {
        "nl": "Show name of all students who have some friends and also are liked by someone else .",
        "true_sql": "select highschooler.name intersect select highschooler.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "intersect",
            "select",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 23, 2, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.4445505738258362, 1), ('IUEN_v2', ('intersect', 1), 2.949783493022551e-06, 2), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.03797983750700951, 4)]",
        "logprob": "-25.601285778323756",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.4445505738258362, 1), 'yes'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.7688462734222412, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0029240036383271217, 2), 'no'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.5585483908653259, 4), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.928509533405304, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.4445505738258362, 1), 'yes'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.7688462734222412, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.21307069063186646, 3), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.016281770542263985, 3), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 0.0009342937846668065, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0029240036383271217, 2), 'no'), (('IUEN_v2', ('union', 2), 0.0013978759525343776, 2), 'no'), (('IUEN_v2', ('intersect', 1), 2.949783493022551e-06, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.5585483908653259, 4), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.2713262736797333, 4), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.06896618753671645, 4), 'no'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.05464464426040648, 4), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.928509533405304, 6), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.06827142834663391, 6), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.0027587004005908966, 6), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 0.0002988377236761153, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 238
    },
    {
        "nl": "What are the names of high schoolers who both have friends and are liked ?",
        "true_sql": "select highschooler.name intersect select highschooler.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "intersect",
            "select",
            "highschooler.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 23, 2, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999984502792358, 1), ('IUEN_v2', ('intersect', 1), 1.9897410652447434e-07, 2), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999798536300659, 4)]",
        "logprob": "-23.22414834999754",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999984502792358, 1), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.795772910118103, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0002745527308434248, 2), 'no'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999798536300659, 4), 'yes'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.4982302486896515, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999984502792358, 1), 'yes'), (('WHERE_COL', ('highschooler', 'name', 37), 0.795772910118103, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.15503868460655212, 3), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.049071308225393295, 3), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 7.281906437128782e-05, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0002745527308434248, 2), 'no'), (('IUEN_v2', ('union', 2), 3.4795852116076276e-05, 2), 'no'), (('IUEN_v2', ('intersect', 1), 1.9897410652447434e-07, 2), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999798536300659, 4), 'yes'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.4982302486896515, 6), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.2770000398159027, 6), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.22459588944911957, 6), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.00010501974611543119, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 239
    },
    {
        "nl": "Count the number of likes for each student id .",
        "true_sql": "select likes.student_id , count ( likes.* ) group_by likes.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'likes.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "likes.*",
            ")",
            ",",
            "likes.student_id",
            "group_by",
            "likes.student_id",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 45, 4], 8, [41], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.6623601814956475, 1), ('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.11047768592834474, 3), ('GROUP_COL', ('likes', 'student_id', 41), 0.053031861782073975, 5)]",
        "logprob": "-6.788338249559949",
        "q_counter": 2,
        "questioned_indices": [
            0,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.6698976159095764, 1), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.9469006657600403, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.6698976159095764, 1), 'no'), (('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.6623601814956475, 1), 'yes'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.137393981218338, 1), 'yes'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 9.780659456737334e-05, 1), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.9469006657600403, 5), 'no'), (('GROUP_COL', ('likes', 'student_id', 41), 0.053031861782073975, 5), 'yes'), (('GROUP_COL', ('friend', 'student_id', 39), 6.729525193804875e-05, 5), 'no'), (('GROUP_COL', ('highschooler', 'id', 36), 1.694690325848569e-07, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 240
    },
    {
        "nl": "How many likes correspond to each student id ?",
        "true_sql": "select likes.student_id , count ( likes.* ) group_by likes.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'likes.*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "likes.*",
            ")",
            ",",
            "likes.student_id",
            "group_by",
            "likes.student_id",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 45, 4], 8, [41], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.9999498547276476, 1), ('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.20884943008422852, 3), ('GROUP_COL', ('likes', 'student_id', 41), 0.19566568732261658, 5)]",
        "logprob": "-3.199510508379462",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.9999498547276476, 1), 'yes'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.7909137606620789, 3), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.8039900660514832, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.9999498547276476, 1), 'yes'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.7909137606620789, 3), 'no'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.20884943008422852, 3), 'yes'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.00022930413251742718, 3), 'no'), (('SELECT_AGG_v2', ('highschooler', 'id', 36), ('none_agg', 0), False, 6.212006155692504e-06, 3), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.8039900660514832, 5), 'no'), (('GROUP_COL', ('likes', 'student_id', 41), 0.19566568732261658, 5), 'yes'), (('GROUP_COL', ('friend', 'student_id', 39), 0.0003400977002456784, 5), 'no'), (('GROUP_COL', ('highschooler', 'id', 36), 4.021993845526595e-06, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 241
    },
    {
        "nl": "Show the names of high schoolers who have likes , and numbers of likes for each .",
        "true_sql": "select highschooler.name , count ( * ) group_by likes.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "likes.student_id",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 8, [9, 5, 35, 4], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.999998927116394, 1), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9753065705299377, 3), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8569493931788006, 5), ('GROUP_COL', ('likes', 'student_id', 41), 3.4273648452654015e-07, 7)]",
        "logprob": "-15.555965716578346",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.999998927116394, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9753065705299377, 3), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8569493931788006, 5), 'yes'), (('GROUP_COL', ('highschooler', 'name', 37), 0.9131835103034973, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.999998927116394, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9753065705299377, 3), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8569493931788006, 5), 'yes'), (('GROUP_COL', ('highschooler', 'name', 37), 0.9131835103034973, 7), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.08681105822324753, 7), 'no'), (('GROUP_COL', ('highschooler', 'id', 36), 3.2436475976282964e-06, 7), 'no'), (('GROUP_COL', ('highschooler', 'grade', 38), 1.7665369114183704e-06, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 242
    },
    {
        "nl": "What are the names of high schoolers who have likes , and how many likes does each have ?",
        "true_sql": "select highschooler.name , count ( * ) group_by likes.student_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            ",",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "likes.student_id",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 8, [9, 5, 35, 4], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999983310699463, 1), ('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9995563626289368, 3), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6862035446569182, 5), ('GROUP_COL', ('likes', 'student_id', 41), 8.157724664670241e-07, 7)]",
        "logprob": "-16.124611805074",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999983310699463, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9995563626289368, 3), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6862035446569182, 5), 'yes'), (('GROUP_COL', ('highschooler', 'name', 37), 0.9944387674331665, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999983310699463, 1), 'yes'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9995563626289368, 3), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6862035446569182, 5), 'yes'), (('GROUP_COL', ('highschooler', 'name', 37), 0.9944387674331665, 7), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.005558254197239876, 7), 'no'), (('GROUP_COL', ('highschooler', 'id', 36), 1.810018716241757e-06, 7), 'no'), (('GROUP_COL', ('likes', 'student_id', 41), 8.157724664670241e-07, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 243
    },
    {
        "nl": "What is the name of the high schooler who has the greatest number of likes ?",
        "true_sql": "select highschooler.name group_by likes.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "highschooler.*",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('highschooler', '*', 43), 2.9791376618959475e-06, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998980846331482, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9983723759651184, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999687671661377, 7)]",
        "logprob": "-12.759078278635648",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('highschooler', 'name', 37), 0.9605259299278259, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998980846331482, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9983723759651184, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999687671661377, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('highschooler', 'name', 37), 0.9605259299278259, 3), 'no'), (('GROUP_COL', ('highschooler', 'grade', 38), 0.03663434833288193, 3), 'no'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.002830892102792859, 3), 'no'), (('GROUP_COL', ('highschooler', 'id', 36), 4.528977569862036e-06, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998980846331482, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9983723759651184, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999687671661377, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 244
    },
    {
        "nl": "Give the name of the student with the most likes .",
        "true_sql": "select highschooler.name group_by likes.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "likes.student_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 41, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9962357878684998, 1), ('GROUP_COL', ('likes', 'student_id', 41), 0.907905638217926, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999936590272149, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997121691703796, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999539852142334, 7)]",
        "logprob": "-0.10536815464075192",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9962357878684998, 1), 'yes'), (('GROUP_COL', ('likes', 'student_id', 41), 0.907905638217926, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999936590272149, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997121691703796, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999539852142334, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9962357878684998, 1), 'yes'), (('GROUP_COL', ('likes', 'student_id', 41), 0.907905638217926, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999936590272149, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997121691703796, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999539852142334, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 245
    },
    {
        "nl": "Show the names of students who have at least 2 likes .",
        "true_sql": "select highschooler.name group_by likes.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "highschooler.name",
            "group_by",
            "likes.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 10, 41, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.007317587267607448, 2), ('GROUP_COL', ('likes', 'student_id', 41), 0.6059022545814514, 4), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.988764499053641, 6), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.999746262294855, 7), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999902248382568, 8)]",
        "logprob": "-6.200033884758553",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.7270453572273254, 2), 'no'), (('GROUP_COL', ('likes', 'student_id', 41), 0.6059022545814514, 4), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.988764499053641, 6), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.999746262294855, 7), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999902248382568, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.7270453572273254, 2), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.26437821984291077, 2), 'no'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.007317587267607448, 2), 'yes'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.001122997724451125, 2), 'no'), (('GROUP_COL', ('likes', 'student_id', 41), 0.6059022545814514, 4), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.988764499053641, 6), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.999746262294855, 7), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999902248382568, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 246
    },
    {
        "nl": "What are the names of students who have 2 or more likes ?",
        "true_sql": "select highschooler.name group_by likes.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "group_by",
            "likes.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 41, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.961492657661438, 1), ('GROUP_COL', ('likes', 'student_id', 41), 0.35370543599128723, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.996674292549182, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9998801347138476, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999915361404419, 7)]",
        "logprob": "-1.092759583504903",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.961492657661438, 1), 'yes'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.6462599635124207, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.996674292549182, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9998801347138476, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999915361404419, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.961492657661438, 1), 'yes'), (('GROUP_COL', ('likes', 'liked_id', 42), 0.6462599635124207, 3), 'no'), (('GROUP_COL', ('likes', 'student_id', 41), 0.35370543599128723, 3), 'yes'), (('GROUP_COL', (None, '*', 35), 3.3171534596476704e-05, 3), 'no'), (('GROUP_COL', ('likes', '*', 45), 1.1915286677322001e-06, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.996674292549182, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9998801347138476, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999915361404419, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 247
    },
    {
        "nl": "Show the names of students who have a grade higher than 5 and have at least 2 friends .",
        "true_sql": "select highschooler.name where highschooler.grade > value group_by friend.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], 5.0, None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.989006757736206, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9999992847442627, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9990395903587341, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.99996018409729, 5)]",
        "logprob": "-6.982997291725659",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.989006757736206, 1), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9999992847442627, 3), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9990395903587341, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.99996018409729, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9032373428344727, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.989006757736206, 1), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9999992847442627, 3), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9990395903587341, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.99996018409729, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9032373428344727, 6), 'no'), (('IUEN_v2', ('union', 2), 0.04721026495099068, 6), 'no'), (('IUEN_v2', ('except', 3), 0.014102098532021046, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 248
    },
    {
        "nl": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends ?",
        "true_sql": "select highschooler.name where highschooler.grade > value group_by friend.student_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], 5.0, None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "highschooler.name",
            "where",
            "highschooler.grade",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999994039535522, 1), ('WHERE_COL', ('highschooler', 'grade', 38), 0.9999967813491821, 3), ('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9920148849487305, 4), ('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.9999667406082153, 5)]",
        "logprob": "-9.03619944444997",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999994039535522, 1), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9999967813491821, 3), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9920148849487305, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.9999667406082153, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.6064508557319641, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'name', 37), ('none_agg', 0), False, 0.9999994039535522, 1), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9999967813491821, 3), 'yes'), (('WHERE_OP', (('highschooler', 'grade', 38),), ('>', 1), 0.9920148849487305, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'grade', 38),), ('>', 1), 'terminal', 0.9999667406082153, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.6064508557319641, 6), 'no'), (('IUEN_v2', ('union', 2), 0.062194857746362686, 6), 'no'), (('IUEN_v2', ('except', 3), 0.008922857232391834, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 249
    },
    {
        "nl": "How many likes does Kyle have ?",
        "true_sql": "select count ( * ) where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.25622551258839027, 1), ('WHERE_COL', ('highschooler', 'name', 37), 1.0, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999946355819702, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-11.85301272511708",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.9986459936407869, 1), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.980523407459259, 3), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999946355819702, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.9986459936407869, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.25622551258839027, 1), 'yes'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('count', 3), False, 0.1727515497012927, 1), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('count', 3), True, 0.17254731356506067, 1), 'no'), (('WHERE_COL', ('likes', 'liked_id', 42), 0.980523407459259, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.0028526964597404003, 3), 'no'), (('WHERE_COL', ('highschooler', 'name', 37), 0.001708721392787993, 3), 'yes'), (('WHERE_COL', ('likes', 'student_id', 41), 0.0006847509648650885, 3), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999946355819702, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 250
    },
    {
        "nl": "Return the number of likes that the high schooler named Kyle has .",
        "true_sql": "select count ( * ) where highschooler.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kyle\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "highschooler.*",
            ")",
            "where",
            "highschooler.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 43, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', '*', 43), ('count', 3), False, 0.2185686588867858, 1), ('WHERE_COL', ('highschooler', 'name', 37), 1.0, 3), ('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999971389770508, 4), ('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-6.164578089995859",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.8663606833496853, 1), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999971389770508, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('likes', '*', 45), ('count', 3), False, 0.8663606833496853, 1), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('count', 3), True, 0.7726845801523778, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', 'name', 37), ('count', 3), True, 0.6853727553484618, 1), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('count', 3), False, 0.2754678312989822, 1), 'no'), (('WHERE_OP', (('highschooler', 'name', 37),), ('=', 0), 0.9999971389770508, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 251
    },
    {
        "nl": "Find the average grade of all students who have some friends .",
        "true_sql": "select avg ( highschooler.grade ) where highschooler.id in ( select friend.student_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "highschooler.grade",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 38, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('avg', 5), False, 0.9864823077424226, 1)]",
        "logprob": "-0.05900141196500095",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('avg', 5), False, 0.9864823077424226, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('avg', 5), False, 0.9864823077424226, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 252
    },
    {
        "nl": "What is the average grade of students who have friends ?",
        "true_sql": "select avg ( highschooler.grade ) where highschooler.id in ( select friend.student_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "highschooler.grade",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 38, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('avg', 5), False, 0.9997012299345075, 1)]",
        "logprob": "-0.0013486929507062829",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('avg', 5), False, 0.9997012299345075, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('avg', 5), False, 0.9997012299345075, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 253
    },
    {
        "nl": "Find the minimum grade of students who have no friends .",
        "true_sql": "select min ( highschooler.grade ) where highschooler.id not in ( select friend.student_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 3, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "highschooler.grade",
            ")",
            "where",
            "highschooler.id",
            "not",
            "in",
            "(",
            "select",
            "friend.student_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 38, 4], 6, 36, [22, 20], 5, 2, [39], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('min', 2), False, 0.9516365378361487, 1), ('WHERE_COL', ('highschooler', 'id', 36), 1.960929921551724e-06, 3), ('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9994566040754914, 4), ('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.9999747276306152, 5), ('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.008596721105277535, 7), ('O', '##END_NESTED##', 0.9992929697036743, 8)]",
        "logprob": "-18.93758119439609",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('min', 2), False, 0.9516365378361487, 1), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9362496733665466, 3), 'no'), (('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9994566040754914, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.9999747276306152, 5), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.990247905254364, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('min', 2), False, 0.9516365378361487, 1), 'yes'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9362496733665466, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.059030648320913315, 3), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.004020123276859522, 3), 'no'), (('WHERE_COL', ('likes', 'student_id', 41), 3.696986141221714e-06, 3), 'no'), (('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9994566040754914, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.9999747276306152, 5), 'yes'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.990247905254364, 7), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.008596721105277535, 7), 'yes'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.001131227007135749, 7), 'no'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 2.342501647945028e-05, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 254
    },
    {
        "nl": "What is the lowest grade of students who do not have any friends ?",
        "true_sql": "select min ( highschooler.grade ) where highschooler.id not in ( select friend.student_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 3, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'highschooler.id': 1, 'highschooler.name': 2, 'highschooler.grade': 3, 'friend.student_id': 4, 'friend.friend_id': 5, 'likes.student_id': 6, 'likes.liked_id': 7, 'highschooler.*': 8, 'friend.*': 9, 'likes.*': 10}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "friend.*",
            "where",
            "highschooler.id",
            "not",
            "in",
            "(",
            "select",
            "friend.student_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 36, [22, 20], 5, 2, [39], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('friend', '*', 44), ('none_agg', 0), False, 0.010296802967786784, 1), ('WHERE_COL', ('highschooler', 'id', 36), 2.586921027614153e-06, 3), ('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9992676095368374, 4), ('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.9999973773956299, 5), ('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.04083991423249245, 7), ('O', '##END_NESTED##', 0.9998251795768738, 8)]",
        "logprob": "-20.64289494590049",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('none_agg', 0), False, 0.9051544070243835, 1), 'no'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9938293099403381, 3), 'no'), (('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9992676095368374, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.9999973773956299, 5), 'yes'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.7055202722549438, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('highschooler', '*', 43), ('none_agg', 0), False, 0.9051544070243835, 1), 'no'), (('SELECT_AGG_v2', ('likes', '*', 45), ('none_agg', 0), False, 0.033461600542068475, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 0.02972190827131272, 1), 'no'), (('SELECT_AGG_v2', ('highschooler', 'grade', 38), ('max', 1), False, 0.34648716652892136, 1), 'no'), (('WHERE_COL', ('highschooler', 'grade', 38), 0.9938293099403381, 3), 'no'), (('WHERE_COL', ('friend', 'student_id', 39), 0.003956189379096031, 3), 'no'), (('WHERE_COL', ('friend', 'friend_id', 40), 0.002210769336670637, 3), 'no'), (('WHERE_COL', ('highschooler', 'id', 36), 2.586921027614153e-06, 3), 'yes'), (('WHERE_OP', (('highschooler', 'id', 36),), ('not in', 7), 0.9992676095368374, 4), 'yes'), (('WHERE_ROOT_TERM', (('highschooler', 'id', 36),), ('not in', 7), 'root', 0.9999973773956299, 5), 'yes'), (('SELECT_AGG_v2', ('likes', 'student_id', 41), ('none_agg', 0), False, 0.7055202722549438, 7), 'no'), (('SELECT_AGG_v2', ('friend', 'friend_id', 40), ('none_agg', 0), False, 0.24997925758361814, 7), 'no'), (('SELECT_AGG_v2', ('friend', 'student_id', 39), ('none_agg', 0), False, 0.04083991423249245, 7), 'yes'), (('SELECT_AGG_v2', ('likes', 'liked_id', 42), ('none_agg', 0), False, 0.0036564678885042676, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 255
    },
    {
        "nl": "How many poker players are there ?",
        "true_sql": "select count ( poker_player.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'poker_player.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "poker_player.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', '*', 47), ('count', 3), False, 0.9998450572674978, 1)]",
        "logprob": "-0.0007105413339686006",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', '*', 47), ('count', 3), False, 0.9998450572674978, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', '*', 47), ('count', 3), False, 0.9998450572674978, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 256
    },
    {
        "nl": "Count the number of poker players .",
        "true_sql": "select count ( poker_player.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'poker_player.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "poker_player.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', '*', 47), ('count', 3), False, 0.9998530138435862, 1)]",
        "logprob": "-0.000703865969006051",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', '*', 47), ('count', 3), False, 0.9998530138435862, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', '*', 47), ('count', 3), False, 0.9998530138435862, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 257
    },
    {
        "nl": "List the earnings of poker players in descending order .",
        "true_sql": "select poker_player.earnings order_by poker_player.earnings desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "poker_player.earnings",
            "order_by",
            "poker_player.earnings",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999701976776123, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999986886978149, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9998562335968018, 4)]",
        "logprob": "-0.00022805897052266224",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999701976776123, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999986886978149, 3), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9998562335968018, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999701976776123, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999986886978149, 3), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9998562335968018, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 258
    },
    {
        "nl": "What are the earnings of poker players , ordered descending by value ?",
        "true_sql": "select poker_player.earnings order_by poker_player.earnings desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "poker_player.earnings",
            "order_by",
            "poker_player.earnings",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9997506737709045, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.10039973258972168, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9948000907897949, 4)]",
        "logprob": "-2.304277515871895",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9997506737709045, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.8996002674102783, 3), 'no'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9948000907897949, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9997506737709045, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.8996002674102783, 3), 'no'), (('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.10039973258972168, 3), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 5.451561979619159e-10, 3), 'no'), (('ORDER_AGG_v2', ('poker_player', 'best_finish', 39), ('none_agg', 0), False, 2.0581926787888156e-11, 3), 'no'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9948000907897949, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 259
    },
    {
        "nl": "List the final tables made and the best finishes of poker players .",
        "true_sql": "select poker_player.final_table_made , poker_player.best_finish",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "poker_player.final_table_made",
            ",",
            "poker_player.best_finish",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.998969316482544, 1), ('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('none_agg', 0), False, 0.2151111662387848, 3)]",
        "logprob": "-1.6992680521294978",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.998969316482544, 1), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('max', 1), False, 0.9217705368895878, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.998969316482544, 1), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('max', 1), False, 0.9217705368895878, 3), 'no'), (('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('none_agg', 0), False, 0.2151111662387848, 3), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.46199444653761995, 3), 'no'), (('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.008756352588534355, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 260
    },
    {
        "nl": "What are the final tables made and best finishes for all poker players ?",
        "true_sql": "select poker_player.final_table_made , poker_player.best_finish",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "poker_player.final_table_made",
            ",",
            "poker_player.best_finish",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.9935170412063599, 1), ('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('none_agg', 0), False, 0.878550112247467, 3)]",
        "logprob": "-0.15221334215034768",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.9935170412063599, 1), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('none_agg', 0), False, 0.878550112247467, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.9935170412063599, 1), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'best_finish', 39), ('none_agg', 0), False, 0.878550112247467, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 261
    },
    {
        "nl": "What is the average earnings of poker players ?",
        "true_sql": "select avg ( poker_player.earnings )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.99955751416087, 1)]",
        "logprob": "-0.0017882166128152827",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.99955751416087, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.99955751416087, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 262
    },
    {
        "nl": "Return the average earnings across all poker players .",
        "true_sql": "select avg ( poker_player.earnings )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9998505029179386, 1)]",
        "logprob": "-0.0006117421937243649",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9998505029179386, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9998505029179386, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 263
    },
    {
        "nl": "What is the money rank of the poker player with the highest earnings ?",
        "true_sql": "select poker_player.money_rank order_by poker_player.earnings desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "poker_player.money_rank",
            "order_by",
            "poker_player.earnings",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [41], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.9999995231628418, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9996143579483032, 4), ('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999649524688721, 5)]",
        "logprob": "-0.0005938701240746756",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9996143579483032, 4), 'yes'), (('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999649524688721, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9996143579483032, 4), 'yes'), (('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999649524688721, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 264
    },
    {
        "nl": "Return the money rank of the player with the greatest earnings .",
        "true_sql": "select poker_player.money_rank order_by poker_player.earnings desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "poker_player.money_rank",
            "order_by",
            "poker_player.earnings",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [41], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.999998927116394, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999885559082031, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9656098484992981, 4), ('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999604225158691, 5)]",
        "logprob": "-0.03748631137162782",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.999998927116394, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999885559082031, 3), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9656098484992981, 4), 'yes'), (('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999604225158691, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.999998927116394, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.9999885559082031, 3), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9656098484992981, 4), 'yes'), (('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999604225158691, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 265
    },
    {
        "nl": "What is the maximum number of final tables made among poker players with earnings less than 200000 ?",
        "true_sql": "select max ( poker_player.final_table_made ) where poker_player.earnings < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 6, False], None], 200000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "poker_player.final_table_made",
            ")",
            "where",
            "poker_player.earnings",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 38, 4], 6, 41, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.9930235534332219, 1), ('WHERE_COL', ('poker_player', 'earnings', 41), 0.4378002882003784, 3), ('WHERE_OP', (('poker_player', 'earnings', 41),), ('<', 2), 0.7707818746566772, 4), ('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('<', 2), 'terminal', 0.9809386730194092, 5)]",
        "logprob": "-1.1342260550076049",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.9930235534332219, 1), 'yes'), (('WHERE_COL', ('poker_player', 'earnings', 41), 0.4378002882003784, 3), 'yes'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('<', 2), 0.7707818746566772, 4), 'yes'), (('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('<', 2), 'terminal', 0.9809386730194092, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.9930235534332219, 1), 'yes'), (('WHERE_COL', ('poker_player', 'earnings', 41), 0.4378002882003784, 3), 'yes'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('<', 2), 0.7707818746566772, 4), 'yes'), (('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('<', 2), 'terminal', 0.9809386730194092, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 266
    },
    {
        "nl": "Return the maximum final tables made across all poker players who have earnings below 200000 .",
        "true_sql": "select max ( poker_player.final_table_made ) where poker_player.earnings < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 6, False], None], 200000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "poker_player.final_table_made",
            ")",
            "where",
            "poker_player.earnings",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 38, 4], 6, 41, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.9957159784182918, 1), ('WHERE_COL', ('poker_player', 'earnings', 41), 0.9810232520103455, 3), ('WHERE_OP', (('poker_player', 'earnings', 41),), ('<', 2), 7.706102769589052e-05, 4), ('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('<', 2), 'terminal', 0.9866433143615723, 5)]",
        "logprob": "-10.104814138682638",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.9957159784182918, 1), 'yes'), (('WHERE_COL', ('poker_player', 'earnings', 41), 0.9810232520103455, 3), 'yes'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.9998894929885864, 4), 'no'), (('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('<', 2), 'terminal', 0.9866433143615723, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'final_table_made', 38), ('max', 1), False, 0.9957159784182918, 1), 'yes'), (('WHERE_COL', ('poker_player', 'earnings', 41), 0.9810232520103455, 3), 'yes'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.9998894929885864, 4), 'no'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('>=', 3), 0.018824798043900734, 4), 'no'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('<', 2), 7.706102769589052e-05, 4), 'yes'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('=', 0), 1.2015911124763079e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('<', 2), 'terminal', 0.9866433143615723, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 267
    },
    {
        "nl": "What are the names of poker players ?",
        "true_sql": "select people.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999324083328247, 1)]",
        "logprob": "-0.014551361271699193",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999324083328247, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999324083328247, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 268
    },
    {
        "nl": "Return the names of all the poker players .",
        "true_sql": "select people.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9321226477622986, 1)]",
        "logprob": "-0.07337127547882216",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9321226477622986, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9321226477622986, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 269
    },
    {
        "nl": "What are the names of poker players whose earnings is higher than 300000 ?",
        "true_sql": "select people.name where poker_player.earnings > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 6, False], None], 300000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "poker_player.earnings",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 41, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('poker_player', 'earnings', 41), 0.6810547113418579, 3), ('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.9999260902404785, 4), ('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('>', 1), 'terminal', 0.9994856119155884, 5)]",
        "logprob": "-0.5987239951098601",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('poker_player', 'earnings', 41), 0.6810547113418579, 3), 'yes'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.9999260902404785, 4), 'yes'), (('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('>', 1), 'terminal', 0.9994856119155884, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('poker_player', 'earnings', 41), 0.6810547113418579, 3), 'yes'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.9999260902404785, 4), 'yes'), (('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('>', 1), 'terminal', 0.9994856119155884, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 270
    },
    {
        "nl": "Give the names of poker players who have earnings above 300000 .",
        "true_sql": "select people.name where poker_player.earnings > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 6, False], None], 300000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "poker_player.earnings",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 41, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999979734420776, 1), ('WHERE_COL', ('poker_player', 'earnings', 41), 1.0, 3), ('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.999785840511322, 4), ('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('>', 1), 'terminal', 0.9998503923416138, 5)]",
        "logprob": "-1.2755616322249796",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999979734420776, 1), 'yes'), (('WHERE_COL', ('poker_player', 'money_rank', 40), 0.6786282062530518, 3), 'no'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.999785840511322, 4), 'yes'), (('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('>', 1), 'terminal', 0.9998503923416138, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999979734420776, 1), 'yes'), (('WHERE_COL', ('poker_player', 'money_rank', 40), 0.6786282062530518, 3), 'no'), (('WHERE_COL', ('poker_player', 'earnings', 41), 0.32137179374694824, 3), 'yes'), (('WHERE_COL', ('poker_player', 'poker_player_id', 36), 1.1740758365519355e-10, 3), 'no'), (('WHERE_COL', ('people', 'name', 44), 1.0992332044601483e-10, 3), 'no'), (('WHERE_OP', (('poker_player', 'earnings', 41),), ('>', 1), 0.999785840511322, 4), 'yes'), (('WHERE_ROOT_TERM', (('poker_player', 'earnings', 41),), ('>', 1), 'terminal', 0.9998503923416138, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 271
    },
    {
        "nl": "List the names of poker players ordered by the final tables made in ascending order .",
        "true_sql": "select people.name order_by poker_player.final_table_made",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "order_by",
            "poker_player.final_table_made",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.999998927116394, 1), ('ORDER_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 1.0, 3)]",
        "logprob": "-0.075118696988303",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.999998927116394, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.999998927116394, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 272
    },
    {
        "nl": "What are the names of poker players , ordered ascending by the number of final tables they have made ?",
        "true_sql": "select people.name order_by poker_player.final_table_made",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "order_by",
            "poker_player.final_table_made",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [38], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999773502349854, 1), ('ORDER_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.9999998807907104, 3), ('ORDER_DESC_ASC', (('poker_player', 'final_table_made', 38), ('none_agg', 0), False), 'asc', 0.9846353530883789, 4)]",
        "logprob": "-0.017323477391668278",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999773502349854, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.9999998807907104, 3), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'final_table_made', 38), ('none_agg', 0), False), 'asc', 0.9846353530883789, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999773502349854, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'final_table_made', 38), ('none_agg', 0), False, 0.9999998807907104, 3), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'final_table_made', 38), ('none_agg', 0), False), 'asc', 0.9846353530883789, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 273
    },
    {
        "nl": "What is the birth date of the poker player with the lowest earnings ?",
        "true_sql": "select people.birth_date order_by poker_player.earnings asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.birth_date",
            "order_by",
            "poker_player.earnings",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 11, [41], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'asc', 0.28884854912757874, 4), ('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999825954437256, 5)]",
        "logprob": "-1.2422960271654977",
        "q_counter": 2,
        "questioned_indices": [
            2,
            3
        ],
        "questioned_tags": "[(('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.7008488178253174, 4), 'no'), (('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999825954437256, 5), 'yes')]",
        "feedback_records": "[(('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.7008488178253174, 4), 'no'), (('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.9999825954437256, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 274
    },
    {
        "nl": "Return the birth date of the poker player with the lowest earnings .",
        "true_sql": "select people.birth_date order_by poker_player.earnings asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.birth_date",
            "order_by",
            "poker_player.earnings",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 11, [41], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.7944025993347168, 4)]",
        "logprob": "-0.23749353744249108",
        "q_counter": 1,
        "questioned_indices": [
            2
        ],
        "questioned_tags": "[(('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.7944025993347168, 4), 'yes')]",
        "feedback_records": "[(('ORDER_LIMIT', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'limit_value', 0.7944025993347168, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 275
    },
    {
        "nl": "What is the money rank of the tallest poker player ?",
        "true_sql": "select poker_player.money_rank order_by people.height desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "poker_player.money_rank",
            "order_by",
            "people.height",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [46], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.999962568283081, 1), ('ORDER_AGG_v2', ('people', 'height', 46), ('none_agg', 0), False, 0.4243905544281006, 3), ('ORDER_DESC_ASC', (('people', 'height', 46), ('none_agg', 0), False), 'desc', 0.7367593050003052, 4), ('ORDER_LIMIT', (('people', 'height', 46), ('none_agg', 0), False), 'limit_value', 0.999911904335022, 5)]",
        "logprob": "-1.5152326236241846",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.999962568283081, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.5756094455718994, 3), 'no'), (('ORDER_DESC_ASC', (('people', 'height', 46), ('none_agg', 0), False), 'desc', 0.7367593050003052, 4), 'yes'), (('ORDER_LIMIT', (('people', 'height', 46), ('none_agg', 0), False), 'limit_value', 0.999911904335022, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.999962568283081, 1), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 0.5756094455718994, 3), 'no'), (('ORDER_AGG_v2', ('people', 'height', 46), ('none_agg', 0), False, 0.4243905544281006, 3), 'yes'), (('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 4.490859684125333e-09, 3), 'no'), (('ORDER_AGG_v2', ('poker_player', 'money_rank', 40), ('count', 3), False, 0.004320076834251157, 3), 'no'), (('ORDER_DESC_ASC', (('people', 'height', 46), ('none_agg', 0), False), 'desc', 0.7367593050003052, 4), 'yes'), (('ORDER_LIMIT', (('people', 'height', 46), ('none_agg', 0), False), 'limit_value', 0.999911904335022, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 276
    },
    {
        "nl": "Return the money rank of the poker player with the greatest height .",
        "true_sql": "select poker_player.money_rank order_by people.height desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "poker_player.money_rank",
            "order_by",
            "people.height",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [46], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'money_rank', 40), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('people', 'height', 46), ('none_agg', 0), False, 0.8883950710296631, 3), ('ORDER_DESC_ASC', (('people', 'height', 46), ('none_agg', 0), False), 'desc', 0.7894163131713867, 4), ('ORDER_LIMIT', (('people', 'height', 46), ('none_agg', 0), False), 'limit_value', 0.9999752044677734, 5)]",
        "logprob": "-0.3584317360342661",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('people', 'height', 46), ('none_agg', 0), False, 0.8883950710296631, 3), 'yes'), (('ORDER_DESC_ASC', (('people', 'height', 46), ('none_agg', 0), False), 'desc', 0.7894163131713867, 4), 'yes'), (('ORDER_LIMIT', (('people', 'height', 46), ('none_agg', 0), False), 'limit_value', 0.9999752044677734, 5), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('people', 'height', 46), ('none_agg', 0), False, 0.8883950710296631, 3), 'yes'), (('ORDER_DESC_ASC', (('people', 'height', 46), ('none_agg', 0), False), 'desc', 0.7894163131713867, 4), 'yes'), (('ORDER_LIMIT', (('people', 'height', 46), ('none_agg', 0), False), 'limit_value', 0.9999752044677734, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 277
    },
    {
        "nl": "What is the average earnings of poker players with height higher than 200 ?",
        "true_sql": "select avg ( poker_player.earnings ) where people.height > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 11, False], None], 200.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "where",
            "people.height",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 41, 4], 6, 46, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9998964592710715, 1), ('WHERE_COL', ('people', 'height', 46), 1.0, 3), ('WHERE_OP', (('people', 'height', 46),), ('>', 1), 0.9999788999557495, 4), ('WHERE_ROOT_TERM', (('people', 'height', 46),), ('>', 1), 'terminal', 0.9976625442504883, 5)]",
        "logprob": "-8.231963392196494",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9998964592710715, 1), 'yes'), (('WHERE_COL', ('poker_player', 'money_rank', 40), 0.9997207522392273, 3), 'no'), (('WHERE_OP', (('people', 'height', 46),), ('>', 1), 0.9999788999557495, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'height', 46),), ('>', 1), 'terminal', 0.9976625442504883, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9998964592710715, 1), 'yes'), (('WHERE_COL', ('poker_player', 'money_rank', 40), 0.9997207522392273, 3), 'no'), (('WHERE_COL', ('people', 'height', 46), 0.00026931980391964316, 3), 'yes'), (('WHERE_COL', ('poker_player', 'earnings', 41), 9.94725360214943e-06, 3), 'no'), (('WHERE_COL', ('poker_player', 'best_finish', 39), 9.890613661411862e-09, 3), 'no'), (('WHERE_OP', (('people', 'height', 46),), ('>', 1), 0.9999788999557495, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'height', 46),), ('>', 1), 'terminal', 0.9976625442504883, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 278
    },
    {
        "nl": "Give average earnings of poker players who are taller than 200 .",
        "true_sql": "select avg ( poker_player.earnings ) where people.height > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 11, False], None], 200.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "where",
            "people.height",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 41, 4], 6, 46, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9992618669275936, 1), ('WHERE_COL', ('people', 'height', 46), 1.0, 3), ('WHERE_OP', (('people', 'height', 46),), ('>', 1), 0.9999693632125854, 4), ('WHERE_ROOT_TERM', (('people', 'height', 46),), ('>', 1), 'terminal', 0.9891931414604187, 5)]",
        "logprob": "-4.5047099848152214",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9992618669275936, 1), 'yes'), (('WHERE_COL', ('poker_player', 'money_rank', 40), 0.9884478449821472, 3), 'no'), (('WHERE_OP', (('people', 'height', 46),), ('>', 1), 0.9999693632125854, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'height', 46),), ('>', 1), 'terminal', 0.9891931414604187, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('poker_player', 'earnings', 41), ('avg', 5), False, 0.9992618669275936, 1), 'yes'), (('WHERE_COL', ('poker_player', 'money_rank', 40), 0.9884478449821472, 3), 'no'), (('WHERE_COL', ('people', 'height', 46), 0.011384941637516022, 3), 'yes'), (('WHERE_COL', ('poker_player', 'earnings', 41), 0.000163414137205109, 3), 'no'), (('WHERE_COL', ('poker_player', 'best_finish', 39), 3.811607030002051e-06, 3), 'no'), (('WHERE_OP', (('people', 'height', 46),), ('>', 1), 0.9999693632125854, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'height', 46),), ('>', 1), 'terminal', 0.9891931414604187, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 279
    },
    {
        "nl": "What are the names of poker players in descending order of earnings ?",
        "true_sql": "select people.name order_by poker_player.earnings desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "order_by",
            "poker_player.earnings",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.999913215637207, 4)]",
        "logprob": "-0.0001452015937210832",
        "q_counter": 1,
        "questioned_indices": [
            2
        ],
        "questioned_tags": "[(('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.999913215637207, 4), 'yes')]",
        "feedback_records": "[(('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.999913215637207, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 280
    },
    {
        "nl": "Return the names of poker players sorted by their earnings descending .",
        "true_sql": "select people.name order_by poker_player.earnings desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "order_by",
            "poker_player.earnings",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [41], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.999998927116394, 3), ('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9996463060379028, 4)]",
        "logprob": "-0.0004628374169716551",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.999998927116394, 3), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9996463060379028, 4), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('poker_player', 'earnings', 41), ('none_agg', 0), False, 0.999998927116394, 3), 'yes'), (('ORDER_DESC_ASC', (('poker_player', 'earnings', 41), ('none_agg', 0), False), 'desc', 0.9996463060379028, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 281
    },
    {
        "nl": "What are different nationalities of people and the corresponding number of people from each nation ?",
        "true_sql": "select people.nationality , count ( people.* ) group_by people.nationality",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.nationality",
            ",",
            "count",
            "(",
            "people.*",
            ")",
            "group_by",
            "people.nationality",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [9, 5, 48, 4], 10, 43, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9990442395210266, 1), ('SELECT_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9071490291817288, 3), ('GROUP_COL', ('people', 'nationality', 43), 1.0, 5)]",
        "logprob": "-0.3912044715249516",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9990442395210266, 1), 'yes'), (('SELECT_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9071490291817288, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9990442395210266, 1), 'yes'), (('SELECT_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9071490291817288, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 282
    },
    {
        "nl": "How many people are there of each nationality ?",
        "true_sql": "select people.nationality , count ( people.* ) group_by people.nationality",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "people.*",
            ")",
            ",",
            "people.nationality",
            "group_by",
            "people.nationality",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 48, 4], 8, [43], 10, 43, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.968347972336603, 1), ('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.999994158744812, 3), ('GROUP_COL', ('people', 'nationality', 43), 0.9999974966049194, 5)]",
        "logprob": "-0.12891930206898725",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.968347972336603, 1), 'yes'), (('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.999994158744812, 3), 'yes'), (('GROUP_COL', ('people', 'nationality', 43), 0.9999974966049194, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.968347972336603, 1), 'yes'), (('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.999994158744812, 3), 'yes'), (('GROUP_COL', ('people', 'nationality', 43), 0.9999974966049194, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 283
    },
    {
        "nl": "What is the most common nationality of people ?",
        "true_sql": "select people.nationality group_by people.nationality order_by count ( people.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.nationality",
            "group_by",
            "people.nationality",
            "order_by",
            "count",
            "(",
            "people.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 10, 43, 11, [9, 5, 48, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9984422326087952, 1), ('GROUP_COL', ('people', 'nationality', 43), 0.9761680960655212, 3), ('ORDER_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.8805547809350509, 5), ('ORDER_DESC_ASC', (('people', '*', 48), ('count', 3), False), 'desc', 0.9971151351928711, 6), ('ORDER_LIMIT', (('people', '*', 48), ('count', 3), False), 'limit_value', 0.9999275207519531, 7)]",
        "logprob": "-0.5389470036030232",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9984422326087952, 1), 'yes'), (('GROUP_COL', ('people', 'nationality', 43), 0.9761680960655212, 3), 'yes'), (('ORDER_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.8805547809350509, 5), 'yes'), (('ORDER_DESC_ASC', (('people', '*', 48), ('count', 3), False), 'desc', 0.9971151351928711, 6), 'yes'), (('ORDER_LIMIT', (('people', '*', 48), ('count', 3), False), 'limit_value', 0.9999275207519531, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9984422326087952, 1), 'yes'), (('GROUP_COL', ('people', 'nationality', 43), 0.9761680960655212, 3), 'yes'), (('ORDER_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.8805547809350509, 5), 'yes'), (('ORDER_DESC_ASC', (('people', '*', 48), ('count', 3), False), 'desc', 0.9971151351928711, 6), 'yes'), (('ORDER_LIMIT', (('people', '*', 48), ('count', 3), False), 'limit_value', 0.9999275207519531, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 284
    },
    {
        "nl": "Give the nationality that is most common across all people .",
        "true_sql": "select people.nationality group_by people.nationality order_by count ( people.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.nationality",
            "group_by",
            "people.nationality",
            "order_by",
            "count",
            "(",
            "people.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 10, 43, 11, [9, 5, 48, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('people', 'nationality', 43), 0.9995180368423462, 3), ('ORDER_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.4407563772386863, 5), ('ORDER_DESC_ASC', (('people', '*', 48), ('count', 3), False), 'desc', 0.9982312321662903, 6), ('ORDER_LIMIT', (('people', '*', 48), ('count', 3), False), 'limit_value', 0.9998780488967896, 7)]",
        "logprob": "-3.2802098817970196",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('people', 'nationality', 43), 0.9995180368423462, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9903861040668879, 5), 'no'), (('ORDER_DESC_ASC', (('people', '*', 48), ('count', 3), False), 'desc', 0.9982312321662903, 6), 'yes'), (('ORDER_LIMIT', (('people', '*', 48), ('count', 3), False), 'limit_value', 0.9998780488967896, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('people', 'nationality', 43), 0.9995180368423462, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9903861040668879, 5), 'no'), (('ORDER_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.4407563772386863, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.07525740142523939, 5), 'no'), (('ORDER_AGG_v2', ('people', '*', 48), ('avg', 5), False, 0.07062202986503023, 5), 'no'), (('ORDER_DESC_ASC', (('people', '*', 48), ('count', 3), False), 'desc', 0.9982312321662903, 6), 'yes'), (('ORDER_LIMIT', (('people', '*', 48), ('count', 3), False), 'limit_value', 0.9998780488967896, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 285
    },
    {
        "nl": "What are the nationalities that are shared by at least two people ?",
        "true_sql": "select people.nationality group_by people.nationality having count ( people.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.nationality",
            "group_by",
            "people.nationality",
            "having",
            "count",
            "(",
            "people.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 10, 43, 18, [9, 5, 48, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9999290704727173, 1), ('GROUP_COL', ('people', 'nationality', 43), 0.9998034834861755, 3), ('HAV_AGG_v2', ('people', '*', 48), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 0.9997553823336511, 6), ('HAV_ROOT_TERM_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 'terminal', 0.9999868869781494, 7)]",
        "logprob": "-1.2378127629098656",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9999290704727173, 1), 'yes'), (('GROUP_COL', ('people', 'nationality', 43), 0.9998034834861755, 3), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9151310395579353, 5), 'no'), (('HAV_OP_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 0.9997553823336511, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 'terminal', 0.9999868869781494, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.9999290704727173, 1), 'yes'), (('GROUP_COL', ('people', 'nationality', 43), 0.9998034834861755, 3), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9151310395579353, 5), 'no'), (('HAV_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.7341201654157216, 5), 'yes'), (('HAV_AGG_v2', ('poker_player', 'people_id', 37), ('count', 3), False, 0.24507618421951605, 5), 'no'), (('HAV_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.2590616188839707, 5), 'no'), (('HAV_OP_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 0.9997553823336511, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 'terminal', 0.9999868869781494, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 286
    },
    {
        "nl": "Return the nationalities for which there are two or more people .",
        "true_sql": "select people.nationality group_by people.nationality having count ( people.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'people.*'}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.nationality",
            "group_by",
            "people.nationality",
            "having",
            "count",
            "(",
            "people.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 10, 43, 18, [9, 5, 48, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.999981164932251, 1), ('GROUP_COL', ('people', 'nationality', 43), 0.9999972581863403, 3), ('HAV_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9994995288430752, 5), ('HAV_OP_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 0.999846458384915, 6), ('HAV_ROOT_TERM_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 'terminal', 0.9999861717224121, 7)]",
        "logprob": "-0.052419611403155",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.999981164932251, 1), 'yes'), (('GROUP_COL', ('people', 'nationality', 43), 0.9999972581863403, 3), 'yes'), (('HAV_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9994995288430752, 5), 'yes'), (('HAV_OP_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 0.999846458384915, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 'terminal', 0.9999861717224121, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('none_agg', 0), False, 0.999981164932251, 1), 'yes'), (('GROUP_COL', ('people', 'nationality', 43), 0.9999972581863403, 3), 'yes'), (('HAV_AGG_v2', ('people', '*', 48), ('count', 3), False, 0.9994995288430752, 5), 'yes'), (('HAV_OP_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 0.999846458384915, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('people', '*', 48), ('count', 3), False), ('>=', 3), 'terminal', 0.9999861717224121, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 287
    },
    {
        "nl": "List the names and birth dates of people in ascending alphabetical order of name .",
        "true_sql": "select people.name , people.birth_date order_by people.name asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            ",",
            "people.birth_date",
            "order_by",
            "people.name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 11, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.9999973773956299, 3), ('ORDER_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.09828665107488634, 5)]",
        "logprob": "-2.570911187739524",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.9999973773956299, 3), 'yes'), (('ORDER_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.9017127156257629, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.9999973773956299, 3), 'yes'), (('ORDER_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.9017127156257629, 5), 'no'), (('ORDER_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.09828665107488634, 5), 'yes'), (('ORDER_AGG_v2', ('people', 'people_id', 42), ('none_agg', 0), False, 6.174025202199122e-07, 5), 'no'), (('ORDER_AGG_v2', ('people', '*', 48), ('none_agg', 0), False, 4.978829437618517e-08, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 288
    },
    {
        "nl": "What are the names and birth dates of people , ordered by their names in alphabetical order ?",
        "true_sql": "select people.name , people.birth_date order_by people.name asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            ",",
            "people.birth_date",
            "order_by",
            "people.name",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 11, [44], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999847412109375, 1), ('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.999996542930603, 3), ('ORDER_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9939290285110474, 5), ('ORDER_DESC_ASC', (('people', 'name', 44), ('none_agg', 0), False), 'asc', 0.9978185892105103, 6)]",
        "logprob": "-0.00851832330499966",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999847412109375, 1), 'yes'), (('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.999996542930603, 3), 'yes'), (('ORDER_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9939290285110474, 5), 'yes'), (('ORDER_DESC_ASC', (('people', 'name', 44), ('none_agg', 0), False), 'asc', 0.9978185892105103, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999847412109375, 1), 'yes'), (('SELECT_AGG_v2', ('people', 'birth_date', 45), ('none_agg', 0), False, 0.999996542930603, 3), 'yes'), (('ORDER_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9939290285110474, 5), 'yes'), (('ORDER_DESC_ASC', (('people', 'name', 44), ('none_agg', 0), False), 'asc', 0.9978185892105103, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 289
    },
    {
        "nl": "Show names of people whose nationality is not `` Russia `` .",
        "true_sql": "select people.name where people.nationality != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 8, False], None], '\"Russia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "people.nationality",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 43, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('people', 'nationality', 43), 1.0, 3), ('WHERE_OP', (('people', 'nationality', 43),), ('!=', 5), 0.9992362260818481, 4), ('WHERE_ROOT_TERM', (('people', 'nationality', 43),), ('!=', 5), 'terminal', 0.9999740123748779, 5)]",
        "logprob": "-0.0015674782532915012",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_OP', (('people', 'nationality', 43),), ('!=', 5), 0.9992362260818481, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'nationality', 43),), ('!=', 5), 'terminal', 0.9999740123748779, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_OP', (('people', 'nationality', 43),), ('!=', 5), 0.9992362260818481, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'nationality', 43),), ('!=', 5), 'terminal', 0.9999740123748779, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 290
    },
    {
        "nl": "What are the names of people who are not from Russia ?",
        "true_sql": "select people.name where people.nationality != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 8, False], None], '\"Russia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "people.nationality",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 43, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('people', 'nationality', 43), 0.999998927116394, 3), ('WHERE_OP', (('people', 'nationality', 43),), ('!=', 5), 0.9977250695228577, 4), ('WHERE_ROOT_TERM', (('people', 'nationality', 43),), ('!=', 5), 'terminal', 0.9999911785125732, 5)]",
        "logprob": "-0.0023263983284637344",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('people', 'nationality', 43), 0.999998927116394, 3), 'yes'), (('WHERE_OP', (('people', 'nationality', 43),), ('!=', 5), 0.9977250695228577, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'nationality', 43),), ('!=', 5), 'terminal', 0.9999911785125732, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('people', 'nationality', 43), 0.999998927116394, 3), 'yes'), (('WHERE_OP', (('people', 'nationality', 43),), ('!=', 5), 0.9977250695228577, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'nationality', 43),), ('!=', 5), 'terminal', 0.9999911785125732, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 291
    },
    {
        "nl": "List the names of people that are not poker players .",
        "true_sql": "select people.name where people.people_id not in ( select poker_player.people_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 7, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "people.people_id",
            "not",
            "in",
            "(",
            "select",
            "poker_player.people_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 42, [22, 20], 5, 2, [37], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('people', 'people_id', 42), 1.0, 3), ('WHERE_OP', (('people', 'people_id', 42),), ('not in', 7), 0.7108838515513113, 4), ('WHERE_ROOT_TERM', (('people', 'people_id', 42),), ('not in', 7), 'root', 0.9999902248382568, 5), ('SELECT_AGG_v2', ('poker_player', 'people_id', 37), ('none_agg', 0), False, 0.9999953508377075, 7), ('O', '##END_NESTED##', 0.9997554421424866, 8)]",
        "logprob": "-5.047096326707215",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('poker_player', 'people_id', 37), 0.8940107822418213, 3), 'no'), (('WHERE_OP', (('people', 'people_id', 42),), ('not in', 7), 0.7108838515513113, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'people_id', 42),), ('not in', 7), 'root', 0.9999902248382568, 5), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'people_id', 37), ('none_agg', 0), False, 0.9999953508377075, 7), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('poker_player', 'people_id', 37), 0.8940107822418213, 3), 'no'), (('WHERE_COL', ('poker_player', 'poker_player_id', 36), 0.08737812936306, 3), 'no'), (('WHERE_COL', ('people', 'people_id', 42), 0.012884870171546936, 3), 'yes'), (('WHERE_COL', ('people', 'name', 44), 0.005582349840551615, 3), 'no'), (('WHERE_OP', (('people', 'people_id', 42),), ('not in', 7), 0.7108838515513113, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'people_id', 42),), ('not in', 7), 'root', 0.9999902248382568, 5), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'people_id', 37), ('none_agg', 0), False, 0.9999953508377075, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 292
    },
    {
        "nl": "What are the names of people who do not play poker ?",
        "true_sql": "select people.name where people.people_id not in ( select poker_player.people_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 7, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "people.name",
            "where",
            "people.people_id",
            "not",
            "in",
            "(",
            "select",
            "poker_player.people_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 42, [22, 20], 5, 2, [37], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('people', 'people_id', 42), 0.5545737743377686, 3), ('WHERE_OP', (('people', 'people_id', 42),), ('not in', 7), 0.9807866435324436, 4), ('WHERE_ROOT_TERM', (('people', 'people_id', 42),), ('not in', 7), 'root', 0.9999903440475464, 5), ('SELECT_AGG_v2', ('poker_player', 'people_id', 37), ('none_agg', 0), False, 0.9999113082885742, 7), ('O', '##END_NESTED##', 0.9998804330825806, 8)]",
        "logprob": "-0.6334835771201651",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('people', 'people_id', 42), 0.5545737743377686, 3), 'yes'), (('WHERE_OP', (('people', 'people_id', 42),), ('not in', 7), 0.9807866435324436, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'people_id', 42),), ('not in', 7), 'root', 0.9999903440475464, 5), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'people_id', 37), ('none_agg', 0), False, 0.9999113082885742, 7), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('people', 'people_id', 42), 0.5545737743377686, 3), 'yes'), (('WHERE_OP', (('people', 'people_id', 42),), ('not in', 7), 0.9807866435324436, 4), 'yes'), (('WHERE_ROOT_TERM', (('people', 'people_id', 42),), ('not in', 7), 'root', 0.9999903440475464, 5), 'yes'), (('SELECT_AGG_v2', ('poker_player', 'people_id', 37), ('none_agg', 0), False, 0.9999113082885742, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 293
    },
    {
        "nl": "How many distinct nationalities are there ?",
        "true_sql": "select count ( distinct people.nationality )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 8, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "people.nationality",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 43, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.9954872586307867, 1)]",
        "logprob": "-0.02262120994333868",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.9954872586307867, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.9954872586307867, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 294
    },
    {
        "nl": "Count the number of different nationalities .",
        "true_sql": "select count ( distinct people.nationality )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 8, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'poker_player.poker_player_id': 1, 'poker_player.people_id': 2, 'poker_player.final_table_made': 3, 'poker_player.best_finish': 4, 'poker_player.money_rank': 5, 'poker_player.earnings': 6, 'people.people_id': 7, 'people.nationality': 8, 'people.name': 9, 'people.birth_date': 10, 'people.height': 11, 'poker_player.*': 12, 'people.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "people.nationality",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 43, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.9871052368197534, 1)]",
        "logprob": "-0.06490658231281506",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.9871052368197534, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('people', 'nationality', 43), ('count', 3), True, 0.9871052368197534, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 295
    },
    {
        "nl": "How many visitors below age 30 are there ?",
        "true_sql": "select count ( visitor.* ) where visitor.age < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 8, False], None], 30.0, None]], 'extracted_clause_asterisk': {'select': 'visitor.*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "visit.num_of_ticket",
            ")",
            "where",
            "visitor.age",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 6, 43, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('count', 3), False, 0.0725200900732307, 1), ('WHERE_COL', ('visitor', 'age', 43), 0.9999998807907104, 3), ('WHERE_OP', (('visitor', 'age', 43),), ('<', 2), 0.040103886276483536, 4), ('WHERE_ROOT_TERM', (('visitor', 'age', 43),), ('<', 2), 'terminal', 0.9999215602874756, 5)]",
        "logprob": "-13.713093398214644",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9983178809163704, 1), 'no'), (('WHERE_COL', ('visitor', 'age', 43), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('visitor', 'age', 43),), ('>', 1), 0.9548474550247192, 4), 'no'), (('WHERE_ROOT_TERM', (('visitor', 'age', 43),), ('<', 2), 'terminal', 0.9999215602874756, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9983178809163704, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.275072688438341, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'name', 41), ('count', 3), True, 0.24163479318050254, 1), 'no'), (('SELECT_AGG_v2', ('visit', 'visitor_id', 45), ('count', 3), True, 0.1274885170696241, 1), 'no'), (('WHERE_COL', ('visitor', 'age', 43), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('visitor', 'age', 43),), ('>', 1), 0.9548474550247192, 4), 'no'), (('WHERE_OP', (('visitor', 'age', 43),), ('<', 2), 0.040103886276483536, 4), 'yes'), (('WHERE_OP', (('visitor', 'age', 43),), ('not in', 7), 0.034086076439576896, 4), 'no'), (('WHERE_OP', (('visitor', 'age', 43),), ('not like', 10), 0.019674650517206474, 4), 'no'), (('WHERE_ROOT_TERM', (('visitor', 'age', 43),), ('<', 2), 'terminal', 0.9999215602874756, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 296
    },
    {
        "nl": "Find the names of the visitors whose membership level is higher than 4 , and order the results by the level from high to low .",
        "true_sql": "select visitor.name where visitor.level_of_membership > value order_by visitor.level_of_membership desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 7, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "visitor.name",
            "where",
            "visitor.level_of_membership",
            ">",
            "value",
            "order_by",
            "visitor.level_of_membership",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 42, [14], 3, 11, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.8217039704322815, 1), ('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9999988079071045, 3), ('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.9994369149208069, 4), ('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('>', 1), 'terminal', 0.999982476234436, 5), ('ORDER_AGG_v2', ('visitor', 'level_of_membership', 42), ('none_agg', 0), False, 0.9999834299087524, 7)]",
        "logprob": "-0.23632866826273402",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.8217039704322815, 1), 'yes'), (('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9999988079071045, 3), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.9994369149208069, 4), 'yes'), (('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('>', 1), 'terminal', 0.999982476234436, 5), 'yes'), (('ORDER_AGG_v2', ('visitor', 'level_of_membership', 42), ('none_agg', 0), False, 0.9999834299087524, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.8217039704322815, 1), 'yes'), (('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9999988079071045, 3), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.9994369149208069, 4), 'yes'), (('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('>', 1), 'terminal', 0.999982476234436, 5), 'yes'), (('ORDER_AGG_v2', ('visitor', 'level_of_membership', 42), ('none_agg', 0), False, 0.9999834299087524, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 297
    },
    {
        "nl": "What is the average age of the visitors whose membership level is not higher than 4 ?",
        "true_sql": "select avg ( visitor.age ) where visitor.level_of_membership < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 6, [0, [0, 7, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "visitor.age",
            ")",
            "where",
            "visitor.level_of_membership",
            "<",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 43, 4], 6, 42, [21, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'age', 43), ('avg', 5), False, 0.34597277378676106, 1), ('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9991570711135864, 3), ('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('<=', 4), 0.1331294235867702, 4), ('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('<=', 4), 'terminal', 0.999996542930603, 5)]",
        "logprob": "-8.305079646383586",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('avg', 5), False, 0.9959877229928715, 1), 'no'), (('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9991570711135864, 3), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('<', 2), 0.6795443296432495, 4), 'no'), (('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('<=', 4), 'terminal', 0.999996542930603, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('avg', 5), False, 0.9959877229928715, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'age', 43), ('avg', 5), False, 0.34597277378676106, 1), 'yes'), (('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('avg', 5), False, 0.11205787632087319, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('sum', 4), False, 0.09784515297038057, 1), 'no'), (('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9991570711135864, 3), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('<', 2), 0.6795443296432495, 4), 'no'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.30877524614334106, 4), 'no'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('<=', 4), 0.1331294235867702, 4), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('not in', 7), 0.07887271119875537, 4), 'no'), (('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('<=', 4), 'terminal', 0.999996542930603, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 298
    },
    {
        "nl": "Find the name and membership level of the visitors whose membership level is higher than 4 , and sort by their age from old to young .",
        "true_sql": "select visitor.name , visitor.level_of_membership where visitor.level_of_membership > value order_by visitor.age desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 8, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 7, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "visitor.name",
            ",",
            "visitor.level_of_membership",
            "where",
            "visitor.level_of_membership",
            ">",
            "value",
            "order_by",
            "visitor.age",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 6, 42, [14], 3, 11, [43], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.06146237999200821, 1), ('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('none_agg', 0), False, 0.9393304586410522, 3), ('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9882021546363831, 5), ('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.9997361302375793, 6), ('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('>', 1), 'terminal', 0.999915599822998, 7), ('ORDER_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.9459356069564819, 9)]",
        "logprob": "-2.9240468234118766",
        "q_counter": 5,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9385260939598083, 1), 'no'), (('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9882021546363831, 5), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.9997361302375793, 6), 'yes'), (('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('>', 1), 'terminal', 0.999915599822998, 7), 'yes'), (('ORDER_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.9459356069564819, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9385260939598083, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.06146237999200821, 1), 'yes'), (('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('none_agg', 0), False, 1.552006779093062e-06, 1), 'yes'), (('SELECT_AGG_v2', ('visit', 'visitor_id', 45), ('none_agg', 0), False, 1.2736859389406172e-06, 1), 'no'), (('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.9882021546363831, 5), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('>', 1), 0.9997361302375793, 6), 'yes'), (('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('>', 1), 'terminal', 0.999915599822998, 7), 'yes'), (('ORDER_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.9459356069564819, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 299
    },
    {
        "nl": "Find the id and name of the museum that has the most staff members ?",
        "true_sql": "select museum.museum_id , museum.name order_by museum.num_of_staff desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "museum.name",
            ",",
            "museum.name",
            "order_by",
            "museum.num_of_staff",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 11, [38], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.6737836599349976, 1), ('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9999324083328247, 3), ('ORDER_AGG_v2', ('museum', 'num_of_staff', 38), ('none_agg', 0), False, 0.9987188577651978, 5), ('ORDER_DESC_ASC', (('museum', 'num_of_staff', 38), ('none_agg', 0), False), 'desc', 0.9884224534034729, 6), ('ORDER_LIMIT', (('museum', 'num_of_staff', 38), ('none_agg', 0), False), 'limit_value', 0.9997761845588684, 7)]",
        "logprob": "-7.978763379944779",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.6737836599349976, 1), 'yes'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9999324083328247, 3), 'yes'), (('GROUP_COL', ('visit', 'museum_id', 44), 0.9996570348739624, 5), 'no'), (('ORDER_AGG_v2', ('museum', 'num_of_staff', 38), ('none_agg', 0), False, 0.9987188577651978, 5), 'yes'), (('ORDER_DESC_ASC', (('museum', 'num_of_staff', 38), ('none_agg', 0), False), 'desc', 0.9884224534034729, 6), 'yes'), (('ORDER_LIMIT', (('museum', 'num_of_staff', 38), ('none_agg', 0), False), 'limit_value', 0.9997761845588684, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.6737836599349976, 1), 'yes'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9999324083328247, 3), 'yes'), (('GROUP_COL', ('visit', 'museum_id', 44), 0.9996570348739624, 5), 'no'), (('GROUP_COL', ('museum', 'museum_id', 36), 0.0003244088147766888, 5), 'no'), (('GROUP_COL', ('visit', 'visitor_id', 45), 1.8334281776333228e-05, 5), 'no'), (('GROUP_COL', ('museum', '*', 48), 7.151454184395334e-08, 5), 'no'), (('ORDER_AGG_v2', ('museum', 'num_of_staff', 38), ('none_agg', 0), False, 0.9987188577651978, 5), 'yes'), (('ORDER_DESC_ASC', (('museum', 'num_of_staff', 38), ('none_agg', 0), False), 'desc', 0.9884224534034729, 6), 'yes'), (('ORDER_LIMIT', (('museum', 'num_of_staff', 38), ('none_agg', 0), False), 'limit_value', 0.9997761845588684, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 300
    },
    {
        "nl": "Find the average number of staff working for the museums that were open before 2009 .",
        "true_sql": "select avg ( museum.num_of_staff ) where museum.open_year < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 4, False], None], 2009.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "museum.num_of_staff",
            ")",
            "where",
            "museum.open_year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 38, 4], 6, 39, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('avg', 5), False, 0.9994103801121579, 1), ('WHERE_COL', ('museum', 'open_year', 39), 0.9998738765716553, 3), ('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.7621421813964844, 4), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9979210495948792, 5)]",
        "logprob": "-0.27635440024483665",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('avg', 5), False, 0.9994103801121579, 1), 'yes'), (('WHERE_COL', ('museum', 'open_year', 39), 0.9998738765716553, 3), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.7621421813964844, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9979210495948792, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('avg', 5), False, 0.9994103801121579, 1), 'yes'), (('WHERE_COL', ('museum', 'open_year', 39), 0.9998738765716553, 3), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.7621421813964844, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9979210495948792, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 301
    },
    {
        "nl": "What are the opening year and staff number of the museum named Plaza Museum ?",
        "true_sql": "select museum.num_of_staff , museum.open_year where museum.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Plaza Museum\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "museum.open_year",
            ",",
            "museum.num_of_staff",
            "where",
            "museum.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'open_year', 39), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('none_agg', 0), False, 0.99498450756073, 3), ('WHERE_COL', ('museum', 'name', 37), 0.9999738931655884, 5), ('WHERE_OP', (('museum', 'name', 37),), ('=', 0), 0.9999982118606567, 6), ('WHERE_ROOT_TERM', (('museum', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 7)]",
        "logprob": "-0.00513492603348149",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('none_agg', 0), False, 0.99498450756073, 3), 'yes'), (('WHERE_COL', ('museum', 'name', 37), 0.9999738931655884, 5), 'yes'), (('WHERE_OP', (('museum', 'name', 37),), ('=', 0), 0.9999982118606567, 6), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('none_agg', 0), False, 0.99498450756073, 3), 'yes'), (('WHERE_COL', ('museum', 'name', 37), 0.9999738931655884, 5), 'yes'), (('WHERE_OP', (('museum', 'name', 37),), ('=', 0), 0.9999982118606567, 6), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 302
    },
    {
        "nl": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010 .",
        "true_sql": "select museum.name where museum.num_of_staff > ( select min ( museum.num_of_staff ) where museum.open_year > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 3, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 2010.0, None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "museum.name",
            "where",
            "museum.num_of_staff",
            ">",
            "(",
            "select",
            "min",
            "(",
            "museum.num_of_staff",
            ")",
            "where",
            "museum.open_year",
            ">",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [14], 5, 2, [26, 5, 38, 4], 6, 39, [14], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9999992847442627, 1), ('WHERE_COL', ('museum', 'num_of_staff', 38), 0.9885953068733215, 3), ('WHERE_OP', (('museum', 'num_of_staff', 38),), ('>', 1), 0.9994551539421082, 4), ('WHERE_ROOT_TERM', (('museum', 'num_of_staff', 38),), ('>', 1), 'root', 0.00024081836454570293, 5), ('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('min', 2), False, 0.9072512950549528, 7), ('WHERE_COL', ('museum', 'open_year', 39), 0.5769165754318237, 9), ('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.9986087679862976, 10), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999244213104248, 11), ('O', '##END_NESTED##', 0.9797398447990417, 12)]",
        "logprob": "-9.319925136708171",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9999992847442627, 1), 'yes'), (('WHERE_COL', ('museum', 'num_of_staff', 38), 0.9885953068733215, 3), 'yes'), (('WHERE_OP', (('museum', 'num_of_staff', 38),), ('>', 1), 0.9994551539421082, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'num_of_staff', 38),), ('>', 1), 'terminal', 0.9997501969337463, 5), 'no'), (('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('min', 2), False, 0.9072512950549528, 7), 'yes'), (('WHERE_COL', ('museum', 'open_year', 39), 0.5769165754318237, 9), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.9986087679862976, 10), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999244213104248, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9999992847442627, 1), 'yes'), (('WHERE_COL', ('museum', 'num_of_staff', 38), 0.9885953068733215, 3), 'yes'), (('WHERE_OP', (('museum', 'num_of_staff', 38),), ('>', 1), 0.9994551539421082, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'num_of_staff', 38),), ('>', 1), 'terminal', 0.9997501969337463, 5), 'no'), (('SELECT_AGG_v2', ('museum', 'num_of_staff', 38), ('min', 2), False, 0.9072512950549528, 7), 'yes'), (('WHERE_COL', ('museum', 'open_year', 39), 0.5769165754318237, 9), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.9986087679862976, 10), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999244213104248, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 303
    },
    {
        "nl": "find the id , name and age for visitors who visited some museums more than once .",
        "true_sql": "select visitor.id , visitor.name , visitor.age group_by visitor.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "visitor.name",
            ",",
            "visitor.age",
            ",",
            "visitor.age",
            "group_by",
            "visit.*",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [43], 8, [43], 10, 50, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 3.212847150280142e-05, 1), ('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 9.841675819188829e-06, 3), ('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.1468050926923752, 5), ('GROUP_COL', ('visit', '*', 50), 1.603761319302066e-07, 7), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 9), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998564720153809, 10), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.964195966720581, 11)]",
        "logprob": "-45.33412502766167",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', 'museum_id', 36), ('none_agg', 0), False, 0.7767980098724365, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 9.841675819188829e-06, 3), 'yes'), (('SELECT_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.707679685188579, 5), 'no'), (('WHERE_COL', ('museum', 'open_year', 39), 0.7282580733299255, 7), 'no'), (('GROUP_COL', ('visit', 'museum_id', 44), 0.9988089799880981, 7), 'no'), (('HAV_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9799524913590362, 9), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998564720153809, 10), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.964195966720581, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', 'museum_id', 36), ('none_agg', 0), False, 0.7767980098724365, 1), 'no'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.16978636384010318, 1), 'no'), (('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.05294027179479598, 1), 'no'), (('SELECT_AGG_v2', ('visit', 'visitor_id', 45), ('none_agg', 0), False, 0.0004367065848782659, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 9.841675819188829e-06, 3), 'yes'), (('SELECT_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.707679685188579, 5), 'no'), (('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.1468050926923752, 5), 'yes'), (('SELECT_AGG_v2', ('museum', 'open_year', 39), ('none_agg', 0), False, 0.09418294578790666, 5), 'no'), (('SELECT_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.3882175527626783, 5), 'no'), (('WHERE_COL', ('museum', 'open_year', 39), 0.7282580733299255, 7), 'no'), (('WHERE_COL', ('visitor', 'age', 43), 0.2499958723783493, 7), 'no'), (('WHERE_COL', ('museum', '*', 48), 0.0077255419455468655, 7), 'no'), (('WHERE_COL', ('visit', '*', 50), 0.004178999923169613, 7), 'no'), (('GROUP_COL', ('visit', 'museum_id', 44), 0.9988089799880981, 7), 'no'), (('GROUP_COL', ('museum', 'museum_id', 36), 0.0007363817421719432, 7), 'no'), (('GROUP_COL', ('visit', 'visitor_id', 45), 0.00044947664719074965, 7), 'no'), (('GROUP_COL', ('museum', 'name', 37), 3.503716925479239e-06, 7), 'no'), (('HAV_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9799524913590362, 9), 'no'), (('HAV_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.49789505611925483, 9), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3545781600728798, 9), 'yes'), (('HAV_AGG_v2', ('visit', '*', 50), ('sum', 4), False, 0.11109485680564339, 9), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998564720153809, 10), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.964195966720581, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 304
    },
    {
        "nl": "What are the id , name and membership level of visitors who have spent the largest amount of money in total in all museum tickets ?",
        "true_sql": "select visit.visitor_id , visitor.name , visitor.level_of_membership group_by visit.visitor_id order_by sum ( visit.total_spent ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [4, 12, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "visitor.name",
            ",",
            "visitor.name",
            ",",
            "avg",
            "(",
            "visit.total_spent",
            ")",
            "group_by",
            "visit.visitor_id",
            "order_by",
            "sum",
            "(",
            "visit.total_spent",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [41], 8, [17, 5, 47, 4], 10, 45, 11, [24, 5, 47, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.024928044527769092, 1), ('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.0006336258375085892, 3), ('SELECT_AGG_v2', ('visit', 'total_spent', 47), ('avg', 5), False, 0.09320477536139048, 5), ('GROUP_COL', ('visit', 'visitor_id', 45), 0.026343656703829765, 7), ('ORDER_AGG_v2', ('visit', 'total_spent', 47), ('sum', 4), False, 0.8162005509300955, 9), ('ORDER_DESC_ASC', (('visit', 'total_spent', 47), ('sum', 4), False), 'desc', 0.9747009873390198, 10), ('ORDER_LIMIT', (('visit', 'total_spent', 47), ('sum', 4), False), 'limit_value', 0.9879090189933777, 11)]",
        "logprob": "-25.300218752075015",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.6327109336853027, 1), 'no'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.8307650089263916, 3), 'no'), (('SELECT_AGG_v2', ('visit', 'total_spent', 47), ('max', 1), False, 0.1999983883638005, 5), 'no'), (('GROUP_COL', ('visit', 'museum_id', 44), 0.9669549465179443, 7), 'no'), (('ORDER_AGG_v2', ('visit', 'total_spent', 47), ('sum', 4), False, 0.8162005509300955, 9), 'yes'), (('ORDER_DESC_ASC', (('visit', 'total_spent', 47), ('sum', 4), False), 'desc', 0.9747009873390198, 10), 'yes'), (('ORDER_LIMIT', (('visit', 'total_spent', 47), ('sum', 4), False), 'limit_value', 0.9879090189933777, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.6327109336853027, 1), 'no'), (('SELECT_AGG_v2', ('museum', 'museum_id', 36), ('none_agg', 0), False, 0.20330363512039185, 1), 'no'), (('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('sum', 4), False, 0.5749442536551309, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.024928044527769092, 1), 'yes'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.8307650089263916, 3), 'no'), (('SELECT_AGG_v2', ('visit', 'total_spent', 47), ('sum', 4), False, 0.6084459034500435, 3), 'no'), (('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('sum', 4), False, 0.36533692380152183, 3), 'no'), (('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.0006336258375085892, 3), 'yes'), (('SELECT_AGG_v2', ('visit', 'total_spent', 47), ('max', 1), False, 0.1999983883638005, 5), 'no'), (('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('max', 1), False, 0.12389673851043641, 5), 'no'), (('SELECT_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.12043449787462887, 5), 'no'), (('SELECT_AGG_v2', ('visit', 'total_spent', 47), ('min', 2), False, 0.10321218998705291, 5), 'no'), (('GROUP_COL', ('visit', 'museum_id', 44), 0.9669549465179443, 7), 'no'), (('GROUP_COL', ('visit', 'visitor_id', 45), 0.026343656703829765, 7), 'yes'), (('GROUP_COL', ('museum', 'museum_id', 36), 0.006412788759917021, 7), 'no'), (('GROUP_COL', ('museum', 'name', 37), 0.0002761813229881227, 7), 'no'), (('ORDER_AGG_v2', ('visit', 'total_spent', 47), ('sum', 4), False, 0.8162005509300955, 9), 'yes'), (('ORDER_DESC_ASC', (('visit', 'total_spent', 47), ('sum', 4), False), 'desc', 0.9747009873390198, 10), 'yes'), (('ORDER_LIMIT', (('visit', 'total_spent', 47), ('sum', 4), False), 'limit_value', 0.9879090189933777, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 305
    },
    {
        "nl": "What are the id and name of the museum visited most times ?",
        "true_sql": "select visit.museum_id , museum.name group_by visit.museum_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "museum.name",
            ",",
            "museum.name",
            "group_by",
            "visit.museum_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 10, 44, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.5441052913665771, 1), ('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9962833523750305, 3), ('GROUP_COL', ('visit', 'museum_id', 44), 0.9999121427536011, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6416905004959527, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9972376823425293, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999037981033325, 9)]",
        "logprob": "-2.390598503301009",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.5441052913665771, 1), 'yes'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9962833523750305, 3), 'yes'), (('GROUP_COL', ('visit', 'museum_id', 44), 0.9999121427536011, 5), 'yes'), (('ORDER_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9418349666336759, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9972376823425293, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999037981033325, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.5441052913665771, 1), 'yes'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9962833523750305, 3), 'yes'), (('GROUP_COL', ('visit', 'museum_id', 44), 0.9999121427536011, 5), 'yes'), (('ORDER_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9418349666336759, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6416905004959527, 7), 'yes'), (('ORDER_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.4563477111357531, 7), 'no'), (('ORDER_AGG_v2', ('museum', '*', 48), ('avg', 5), False, 0.07406354663938246, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9972376823425293, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999037981033325, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 306
    },
    {
        "nl": "What is the name of the museum that had no visitor yet ?",
        "true_sql": "select museum.name where museum.museum_id not in ( select visit.museum_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "museum.name",
            "where",
            "museum.museum_id",
            "not",
            "in",
            "(",
            "select",
            "visit.museum_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('museum', 'museum_id', 36), 0.979367196559906, 3), ('WHERE_OP', (('museum', 'museum_id', 36),), ('not in', 7), 0.9947195548845527, 4), ('WHERE_ROOT_TERM', (('museum', 'museum_id', 36),), ('not in', 7), 'root', 0.9999905824661255, 5), ('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.9999959468841553, 7), ('O', '##END_NESTED##', 0.9997841715812683, 8)]",
        "logprob": "-0.0486424817984155",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('museum', 'museum_id', 36), 0.979367196559906, 3), 'yes'), (('WHERE_OP', (('museum', 'museum_id', 36),), ('not in', 7), 0.9947195548845527, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'museum_id', 36),), ('not in', 7), 'root', 0.9999905824661255, 5), 'yes'), (('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.9999959468841553, 7), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('museum', 'museum_id', 36), 0.979367196559906, 3), 'yes'), (('WHERE_OP', (('museum', 'museum_id', 36),), ('not in', 7), 0.9947195548845527, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'museum_id', 36),), ('not in', 7), 'root', 0.9999905824661255, 5), 'yes'), (('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.9999959468841553, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 307
    },
    {
        "nl": "Find the name and age of the visitor who bought the most tickets at once .",
        "true_sql": "select visitor.name , visitor.age order_by visit.num_of_ticket desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "visitor.name",
            ",",
            "visitor.age",
            "order_by",
            "visit.num_of_ticket",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [43], 11, [46], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.9996345043182373, 1), ('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.9602102637290955, 3), ('ORDER_AGG_v2', ('visit', 'num_of_ticket', 46), ('none_agg', 0), False, 0.8241694569587708, 5), ('ORDER_DESC_ASC', (('visit', 'num_of_ticket', 46), ('none_agg', 0), False), 'desc', 0.9895004630088806, 6), ('ORDER_LIMIT', (('visit', 'num_of_ticket', 46), ('none_agg', 0), False), 'limit_value', 0.9998782873153687, 7)]",
        "logprob": "-5.321330114848719",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.9996345043182373, 1), 'yes'), (('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.9602102637290955, 3), 'yes'), (('GROUP_COL', ('visit', 'num_of_ticket', 46), 0.8183032870292664, 5), 'no'), (('ORDER_AGG_v2', ('visit', 'num_of_ticket', 46), ('none_agg', 0), False, 0.8241694569587708, 5), 'yes'), (('ORDER_DESC_ASC', (('visit', 'num_of_ticket', 46), ('none_agg', 0), False), 'desc', 0.9895004630088806, 6), 'yes'), (('ORDER_LIMIT', (('visit', 'num_of_ticket', 46), ('none_agg', 0), False), 'limit_value', 0.9998782873153687, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.9996345043182373, 1), 'yes'), (('SELECT_AGG_v2', ('visitor', 'age', 43), ('none_agg', 0), False, 0.9602102637290955, 3), 'yes'), (('GROUP_COL', ('visit', 'num_of_ticket', 46), 0.8183032870292664, 5), 'no'), (('GROUP_COL', ('visitor', 'name', 41), 0.10810914635658264, 5), 'no'), (('GROUP_COL', ('visitor', 'age', 43), 0.0449795201420784, 5), 'no'), (('GROUP_COL', ('visit', 'visitor_id', 45), 0.025935208424925804, 5), 'no'), (('ORDER_AGG_v2', ('visit', 'num_of_ticket', 46), ('none_agg', 0), False, 0.8241694569587708, 5), 'yes'), (('ORDER_DESC_ASC', (('visit', 'num_of_ticket', 46), ('none_agg', 0), False), 'desc', 0.9895004630088806, 6), 'yes'), (('ORDER_LIMIT', (('visit', 'num_of_ticket', 46), ('none_agg', 0), False), 'limit_value', 0.9998782873153687, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 308
    },
    {
        "nl": "What are the average and maximum number of tickets bought in all visits ?",
        "true_sql": "select avg ( visit.num_of_ticket ) , max ( visit.num_of_ticket )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 11, False], None]], [1, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "visit.num_of_ticket",
            ")",
            ",",
            "max",
            "(",
            "visit.num_of_ticket",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 46, 4], 8, [19, 5, 46, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('avg', 5), False, 0.9792317320780823, 1), ('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('max', 1), False, 0.8252714272948444, 3)]",
        "logprob": "-0.8667959318693053",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('avg', 5), False, 0.9792317320780823, 1), 'yes'), (('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('max', 1), False, 0.8252714272948444, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('avg', 5), False, 0.9792317320780823, 1), 'yes'), (('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('max', 1), False, 0.8252714272948444, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 309
    },
    {
        "nl": "What is the total ticket expense of the visitors whose membership level is 1 ?",
        "true_sql": "select sum ( visit.total_spent ) where visitor.level_of_membership = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "visit.total_spent",
            ")",
            "where",
            "visitor.level_of_membership",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visit', 'total_spent', 47), ('sum', 4), False, 0.08029061708493417, 1), ('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.6119515299797058, 3), ('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('=', 0), 0.9857555031776428, 4), ('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('=', 0), 'terminal', 0.999994158744812, 5)]",
        "logprob": "-10.596412024617443",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('sum', 4), False, 0.9999215277850515, 1), 'no'), (('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.6119515299797058, 3), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('=', 0), 0.9857555031776428, 4), 'yes'), (('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('=', 0), 'terminal', 0.999994158744812, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('sum', 4), False, 0.9999215277850515, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'level_of_membership', 42), ('sum', 4), False, 0.10299969226569244, 1), 'no'), (('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('max', 1), False, 0.09461743002945586, 1), 'no'), (('SELECT_AGG_v2', ('visit', 'num_of_ticket', 46), ('avg', 5), False, 0.0804325408416642, 1), 'no'), (('WHERE_COL', ('visitor', 'level_of_membership', 42), 0.6119515299797058, 3), 'yes'), (('WHERE_OP', (('visitor', 'level_of_membership', 42),), ('=', 0), 0.9857555031776428, 4), 'yes'), (('WHERE_ROOT_TERM', (('visitor', 'level_of_membership', 42),), ('=', 0), 'terminal', 0.999994158744812, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 310
    },
    {
        "nl": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011 ?",
        "true_sql": "select visitor.name where museum.open_year < value intersect select visitor.name where museum.open_year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 2011.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 4, False], None], 2009.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "visitor.name",
            "where",
            "museum.open_year",
            "<",
            "value",
            "intersect",
            "select",
            "visitor.name",
            "where",
            "museum.open_year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 39, [21], 3, 23, 2, [41], 6, 39, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.0009496544371359049, 1), ('WHERE_COL', ('museum', 'open_year', 39), 0.9999897480010986, 3), ('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.5538172125816345, 4), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9999697208404541, 5), ('IUEN_v2', ('intersect', 1), 0.944674551486969, 6), ('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.0027178444433957343, 8), ('WHERE_COL', ('museum', 'open_year', 39), 0.999871015548706, 10), ('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.8550958037376404, 11), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999581575393677, 12)]",
        "logprob": "-13.672085558416452",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9990498423576355, 1), 'no'), (('WHERE_COL', ('museum', 'open_year', 39), 0.9999897480010986, 3), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.5538172125816345, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9999697208404541, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.944674551486969, 6), 'yes'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9972580671310425, 8), 'no'), (('WHERE_COL', ('museum', 'open_year', 39), 0.999871015548706, 10), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.8550958037376404, 11), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999581575393677, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9990498423576355, 1), 'no'), (('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.0009496544371359049, 1), 'yes'), (('SELECT_AGG_v2', ('visit', '*', 50), ('none_agg', 0), False, 3.4987994013135925e-07, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 8.32714874832162e-08, 1), 'no'), (('WHERE_COL', ('museum', 'open_year', 39), 0.9999897480010986, 3), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.5538172125816345, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9999697208404541, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.944674551486969, 6), 'yes'), (('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.9972580671310425, 8), 'no'), (('SELECT_AGG_v2', ('visitor', 'name', 41), ('none_agg', 0), False, 0.0027178444433957343, 8), 'yes'), (('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 1.146982776845106e-05, 8), 'no'), (('SELECT_AGG_v2', ('visit', '*', 50), ('none_agg', 0), False, 1.0266398021485658e-05, 8), 'no'), (('WHERE_COL', ('museum', 'open_year', 39), 0.999871015548706, 10), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.8550958037376404, 11), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999581575393677, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 311
    },
    {
        "nl": "Find the number of visitors who did not visit any museum opened after 2010 .",
        "true_sql": "select count ( visitor.* ) where visitor.id not in ( select visit.visitor_id where museum.open_year > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 2010.0, None]]}, None]], 'extracted_clause_asterisk': {'select': 'visitor.*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "museum.name",
            "where",
            "*",
            "not",
            "in",
            "(",
            "select",
            "visit.museum_id",
            "where",
            "museum.open_year",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 35, [22, 20], 5, 2, [44], 6, 39, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', 'name', 37), ('none_agg', 0), False, 0.0006788707687519492, 1), ('WHERE_COL', (None, '*', 35), 6.235283308342332e-06, 3), ('WHERE_OP', ((None, '*', 35),), ('not in', 7), 0.7300255175010327, 4), ('WHERE_ROOT_TERM', ((None, '*', 35),), ('not in', 7), 'root', 0.999984622001648, 5), ('SELECT_AGG_v2', ('visit', 'museum_id', 44), ('none_agg', 0), False, 0.999994158744812, 7), ('WHERE_COL', ('museum', 'open_year', 39), 0.9993835687637329, 9), ('WHERE_OP', (('museum', 'open_year', 39),), ('=', 0), 0.4688494801521301, 10), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('=', 0), 'terminal', 0.999997615814209, 11), ('O', '##END_NESTED##', 0.9967454671859741, 12)]",
        "logprob": "-20.72689068646379",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9768038920192129, 1), 'no'), (('WHERE_COL', ('museum', 'museum_id', 36), 0.9654381275177002, 3), 'no'), (('WHERE_OP', ((None, '*', 35),), ('not in', 7), 0.7300255175010327, 4), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('visit', '*', 50), ('count', 3), False, 0.9768038920192129, 1), 'no'), (('SELECT_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.5399583791981905, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.23409740307623023, 1), 'no'), (('SELECT_AGG_v2', ('museum', 'open_year', 39), ('none_agg', 0), False, 0.0008315113373100758, 1), 'no'), (('WHERE_COL', ('museum', 'museum_id', 36), 0.9654381275177002, 3), 'no'), (('WHERE_COL', ('museum', 'open_year', 39), 0.032187625765800476, 3), 'no'), (('WHERE_COL', ('museum', 'num_of_staff', 38), 3.184147135470994e-05, 3), 'no'), (('WHERE_COL', ('museum', 'name', 37), 9.889083230518736e-06, 3), 'no'), (('WHERE_OP', ((None, '*', 35),), ('not in', 7), 0.7300255175010327, 4), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 312
    },
    {
        "nl": "How many museums were opened after 2013 or before 2008 ?",
        "true_sql": "select count ( museum.* ) where museum.open_year > value or museum.open_year < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 2013.0, None], 'or', [False, 4, [0, [0, 4, False], None], 2008.0, None]], 'extracted_clause_asterisk': {'select': 'museum.*'}, 'column_names_surface_form_to_id': {'*': 0, 'museum.museum_id': 1, 'museum.name': 2, 'museum.num_of_staff': 3, 'museum.open_year': 4, 'visitor.id': 5, 'visitor.name': 6, 'visitor.level_of_membership': 7, 'visitor.age': 8, 'visit.museum_id': 9, 'visit.visitor_id': 10, 'visit.num_of_ticket': 11, 'visit.total_spent': 12, 'museum.*': 13, 'visitor.*': 14, 'visit.*': 15}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "museum.*",
            ")",
            "where",
            "museum.open_year",
            ">",
            "value",
            "or",
            "museum.open_year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 48, 4], 6, 39, [14], 3, 25, 39, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.9999281881389063, 1), ('WHERE_COL', ('museum', 'open_year', 39), 0.9992930889129639, 3), ('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.9859364032745361, 4), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999822378158569, 5), ('WHERE_COL', ('museum', 'open_year', 39), 0.9999915361404419, 7), ('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.9807919859886169, 8), ('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9998595714569092, 9)]",
        "logprob": "-0.18641059129678988",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.9999281881389063, 1), 'yes'), (('WHERE_COL', ('museum', 'open_year', 39), 0.9992930889129639, 3), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.9859364032745361, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999822378158569, 5), 'yes'), (('WHERE_COL', ('museum', 'open_year', 39), 0.9999915361404419, 7), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.9807919859886169, 8), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9998595714569092, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('museum', '*', 48), ('count', 3), False, 0.9999281881389063, 1), 'yes'), (('WHERE_COL', ('museum', 'open_year', 39), 0.9992930889129639, 3), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('>', 1), 0.9859364032745361, 4), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('>', 1), 'terminal', 0.9999822378158569, 5), 'yes'), (('WHERE_COL', ('museum', 'open_year', 39), 0.9999915361404419, 7), 'yes'), (('WHERE_OP', (('museum', 'open_year', 39),), ('<', 2), 0.9807919859886169, 8), 'yes'), (('WHERE_ROOT_TERM', (('museum', 'open_year', 39),), ('<', 2), 'terminal', 0.9998595714569092, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 313
    },
    {
        "nl": "List the title of all cartoons in alphabetical order .",
        "true_sql": "select cartoon.title order_by cartoon.title",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            "order_by",
            "cartoon.title",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 11, [55], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.996243953704834, 3)]",
        "logprob": "-0.0038398902362671494",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.996243953704834, 3), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.996243953704834, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 314
    },
    {
        "nl": "What are the titles of the cartoons sorted alphabetically ?",
        "true_sql": "select cartoon.title order_by cartoon.title",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            "order_by",
            "cartoon.title",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 11, [55], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9971319437026978, 3)]",
        "logprob": "-0.003028943463232608",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9971319437026978, 3), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9971319437026978, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 315
    },
    {
        "nl": "List all cartoon directed by `` Ben Jones `` .",
        "true_sql": "select cartoon.title where cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9996414184570312, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.99703049659729, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999978542327881, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999967813491821, 5)]",
        "logprob": "-0.003463704052131112",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9996414184570312, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.99703049659729, 3), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999978542327881, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999967813491821, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9996414184570312, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.99703049659729, 3), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999978542327881, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999967813491821, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 316
    },
    {
        "nl": "What are the names of all cartoons directed by Ben Jones ?",
        "true_sql": "select cartoon.title where cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.999995231628418, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999789297580719, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999996542930603, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-0.00024088470128641129",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.999995231628418, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999789297580719, 3), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999996542930603, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.999995231628418, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999789297580719, 3), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999996542930603, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 317
    },
    {
        "nl": "How many cartoons were written by `` Joseph Kuhr `` ?",
        "true_sql": "select count ( cartoon.* ) where cartoon.written_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Joseph Kuhr\"', None]], 'extracted_clause_asterisk': {'select': 'cartoon.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cartoon.*",
            ")",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 63, 4], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.6079219205459934, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.9998742341995239, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999978542327881, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999966621398926, 5)]",
        "logprob": "-1.9917795894981436",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'written_by', 57), ('count', 3), True, 0.9516297233714023, 1), 'no'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.9998742341995239, 3), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999978542327881, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999966621398926, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'written_by', 57), ('count', 3), True, 0.9516297233714023, 1), 'no'), (('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.6079219205459934, 1), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'title', 55), ('count', 3), True, 0.6054387841818392, 1), 'no'), (('SELECT_AGG_v2', ('cartoon', 'id', 54), ('count', 3), False, 0.1368080635741347, 1), 'no'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.9998742341995239, 3), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999978542327881, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999966621398926, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 318
    },
    {
        "nl": "What is the number of cartoones written by Joseph Kuhr ?",
        "true_sql": "select count ( cartoon.* ) where cartoon.written_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Joseph Kuhr\"', None]], 'extracted_clause_asterisk': {'select': 'cartoon.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cartoon.*",
            ")",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 63, 4], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9192485039419395, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.998701810836792, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999949932098389, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.3448515481366807",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9192485039419395, 1), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.998701810836792, 3), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999949932098389, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9192485039419395, 1), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.998701810836792, 3), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999949932098389, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 319
    },
    {
        "nl": "list all cartoon titles and their directors ordered by their air date",
        "true_sql": "select cartoon.title , cartoon.directed_by order_by cartoon.original_air_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 21, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            ",",
            "cartoon.directed_by",
            "order_by",
            "cartoon.original_air_date",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 8, [56], 11, [58], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.9649812579154968, 3), ('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9861187934875488, 5)]",
        "logprob": "-0.6173201564625813",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.9649812579154968, 3), 'yes'), (('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9861187934875488, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.9649812579154968, 3), 'yes'), (('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9861187934875488, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 320
    },
    {
        "nl": "What is the name and directors of all the cartoons that are ordered by air date ?",
        "true_sql": "select cartoon.title , cartoon.directed_by order_by cartoon.original_air_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 21, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            ",",
            "cartoon.directed_by",
            "order_by",
            "cartoon.original_air_date",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 8, [56], 11, [58], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.971825361251831, 3), ('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.6931958198547363, 5)]",
        "logprob": "-0.3997063728051053",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.971825361251831, 3), 'yes'), (('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.6931958198547363, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.971825361251831, 3), 'yes'), (('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.6931958198547363, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 321
    },
    {
        "nl": "List the title of all cartoon directed by `` Ben Jones `` or `` Brandon Vietti `` .",
        "true_sql": "select cartoon.title where cartoon.directed_by = value or cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None], 'or', [False, 2, [0, [0, 21, False], None], '\"Brandon Vietti\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "or",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 56, [7], 3, 25, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9962837100028992, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999666213989258, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999958276748657, 5), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.4876115024089813, 7), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999950647354126, 8), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999967813491821, 9)]",
        "logprob": "-0.7257067375137933",
        "q_counter": 6,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9962837100028992, 3), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999666213989258, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999958276748657, 5), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.5123876333236694, 7), 'no'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999950647354126, 8), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999967813491821, 9), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9962837100028992, 3), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999666213989258, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999958276748657, 5), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.5123876333236694, 7), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.4876115024089813, 7), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 8.125697945615684e-07, 7), 'no'), (('WHERE_COL', ('cartoon', 'title', 55), 1.3667062148670084e-07, 7), 'no'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999950647354126, 8), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999967813491821, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 322
    },
    {
        "nl": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti ?",
        "true_sql": "select cartoon.title where cartoon.directed_by = value or cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None], 'or', [False, 2, [0, [0, 21, False], None], '\"Brandon Vietti\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "or",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 56, [7], 3, 25, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998476505279541, 3), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999622106552124, 4), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999982118606567, 5), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9529667496681213, 7), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999675750732422, 8), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999963045120239, 9)]",
        "logprob": "-0.05200938855676131",
        "q_counter": 6,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998476505279541, 3), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999622106552124, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9529667496681213, 7), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999675750732422, 8), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999963045120239, 9), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998476505279541, 3), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999622106552124, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9529667496681213, 7), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999675750732422, 8), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999963045120239, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 323
    },
    {
        "nl": "Which country has the most of TV Channels ? List the country and number of TV Channels it has .",
        "true_sql": "select tv_channel.country , count ( tv_channel.* ) group_by tv_channel.country order_by count ( tv_channel.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*', 'order_by': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.country",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.country",
            "order_by",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [9, 5, 61, 4], 10, 38, 11, [9, 5, 61, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999997615814209, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.979399678219914, 3), ('GROUP_COL', ('tv_channel', 'country', 38), 1.0, 5), ('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9907767653610646, 7), ('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'desc', 0.9994944334030151, 8), ('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.999747097492218, 9)]",
        "logprob": "-0.13059457903401436",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.979399678219914, 3), 'yes'), (('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9907767653610646, 7), 'yes'), (('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'desc', 0.9994944334030151, 8), 'yes'), (('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.999747097492218, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.979399678219914, 3), 'yes'), (('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9907767653610646, 7), 'yes'), (('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'desc', 0.9994944334030151, 8), 'yes'), (('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.999747097492218, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 324
    },
    {
        "nl": "What is the country with the most number of TV Channels and how many does it have ?",
        "true_sql": "select tv_channel.country , count ( tv_channel.* ) group_by tv_channel.country order_by count ( tv_channel.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*', 'order_by': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.country",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.country",
            "order_by",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [9, 5, 61, 4], 10, 38, 11, [9, 5, 61, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999923706054688, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.5193754349600223, 3), ('GROUP_COL', ('tv_channel', 'country', 38), 0.9999994039535522, 5), ('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.6207198319727321, 7), ('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'desc', 0.9996989965438843, 8), ('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9996046423912048, 9)]",
        "logprob": "-4.55795554052534",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999923706054688, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9812630172339905, 3), 'no'), (('GROUP_COL', ('tv_channel', 'country', 38), 0.9999994039535522, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9603124381137172, 7), 'no'), (('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'desc', 0.9996989965438843, 8), 'yes'), (('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9996046423912048, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999923706054688, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9812630172339905, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.5193754349600223, 3), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.06764659623765314, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('max', 1), False, 0.06434110973339909, 3), 'no'), (('GROUP_COL', ('tv_channel', 'country', 38), 0.9999994039535522, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9603124381137172, 7), 'no'), (('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.6207198319727321, 7), 'yes'), (('ORDER_AGG_v2', ('tv_channel', 'country', 38), ('count', 3), False, 0.1701007207149568, 7), 'no'), (('ORDER_AGG_v2', ('tv_channel', 'id', 36), ('count', 3), False, 0.09563427907758501, 7), 'no'), (('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'desc', 0.9996989965438843, 8), 'yes'), (('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9996046423912048, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 325
    },
    {
        "nl": "List the number of different series names and contents in the TV Channel table .",
        "true_sql": "select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 2, True], None]], [3, [0, [0, 5, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "tv_channel.series_name",
            ")",
            ",",
            "max",
            "(",
            "tv_channel.series_name",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 37, 4], 8, [19, 5, 37, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('count', 3), True, 0.9012410653553872, 1), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('max', 1), False, 0.11706939130138483, 3)]",
        "logprob": "-9.11363491242504",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('count', 3), True, 0.9012410653553872, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9777652621269226, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('count', 3), True, 0.9012410653553872, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9777652621269226, 3), 'no'), (('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.02027629315853119, 3), 'no'), (('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.0006096744909882545, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('min', 2), False, 0.13304244605617416, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 326
    },
    {
        "nl": "How many different series and contents are listed in the TV Channel table ?",
        "true_sql": "select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 2, True], None]], [3, [0, [0, 5, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "tv_channel.series_name",
            ")",
            ",",
            "tv_series.rating",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 37, 4], 8, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('count', 3), True, 0.9998515170322833, 1), ('SELECT_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.0018233677837997677, 3)]",
        "logprob": "-7.37714396611069",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('count', 3), True, 0.9998515170322833, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.947536289691925, 3), 'no'), (('GROUP_COL', ('tv_channel', 'series_name', 37), 0.9994181394577026, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('count', 3), True, 0.9998515170322833, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.947536289691925, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.02863373979926109, 3), 'no'), (('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.01087866257876158, 3), 'no'), (('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.006848051212728026, 3), 'no'), (('GROUP_COL', ('tv_channel', 'series_name', 37), 0.9994181394577026, 5), 'no'), (('GROUP_COL', ('tv_channel', 'content', 40), 0.0003373730869498104, 5), 'no'), (('GROUP_COL', ('tv_series', 'channel', 53), 0.0001538838550914079, 5), 'no'), (('GROUP_COL', ('tv_series', 'episode', 46), 8.201082528103143e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 327
    },
    {
        "nl": "What is the content of TV Channel with serial name `` Sky Radio `` ?",
        "true_sql": "select tv_channel.content where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.content",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.9975065588951111, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.994549572467804, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999915361404419, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.008114965007469294",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.9975065588951111, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.994549572467804, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999915361404419, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.9975065588951111, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.994549572467804, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999915361404419, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 328
    },
    {
        "nl": "What is the content of the series Sky Radio ?",
        "true_sql": "select tv_channel.content where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.content",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.9971902966499329, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9998912811279297, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999988079071045, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.0029859229625433534",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.9971902966499329, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9998912811279297, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999988079071045, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.9971902966499329, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9998912811279297, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999988079071045, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 329
    },
    {
        "nl": "What is the Package Option of TV Channel with serial name `` Sky Radio `` ?",
        "true_sql": "select tv_channel.package_option where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9999973773956299, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9974145889282227, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.999992847442627, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.0027369454152921806",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9999973773956299, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9974145889282227, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.999992847442627, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9999973773956299, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9974145889282227, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.999992847442627, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 330
    },
    {
        "nl": "What are the Package Options of the TV Channels whose series names are Sky Radio ?",
        "true_sql": "select tv_channel.package_option where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9989270567893982, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999995231628418, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999901056289673, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.0019385022610090834",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9989270567893982, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999995231628418, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999901056289673, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9989270567893982, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999995231628418, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999901056289673, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 331
    },
    {
        "nl": "How many TV Channel using language English ?",
        "true_sql": "select count ( tv_channel.* ) where tv_channel.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {'select': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "where",
            "tv_channel.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9793149024455902, 1), ('WHERE_COL', ('tv_channel', 'language', 39), 1.0, 3), ('WHERE_OP', (('tv_channel', 'language', 39),), ('=', 0), 0.9999270439147949, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.0843160069802211",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9793149024455902, 1), 'yes'), (('WHERE_OP', (('tv_channel', 'language', 39),), ('=', 0), 0.9999270439147949, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9793149024455902, 1), 'yes'), (('WHERE_OP', (('tv_channel', 'language', 39),), ('=', 0), 0.9999270439147949, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 332
    },
    {
        "nl": "How many TV Channels use the English language ?",
        "true_sql": "select count ( tv_channel.* ) where tv_channel.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {'select': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "where",
            "tv_channel.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9810576099980778, 1), ('WHERE_COL', ('tv_channel', 'language', 39), 1.0, 3), ('WHERE_OP', (('tv_channel', 'language', 39),), ('=', 0), 0.999981164932251, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.07685442168969636",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9810576099980778, 1), 'yes'), (('WHERE_OP', (('tv_channel', 'language', 39),), ('=', 0), 0.999981164932251, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9810576099980778, 1), 'yes'), (('WHERE_OP', (('tv_channel', 'language', 39),), ('=', 0), 0.999981164932251, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 333
    },
    {
        "nl": "List the language used least number of TV Channel . List language and number of TV Channel .",
        "true_sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language order_by count ( tv_channel.* ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*', 'order_by': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.language",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.language",
            "order_by",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 61, 4], 10, 39, 11, [9, 5, 61, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.9999996423721313, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.5806129418116381, 3), ('GROUP_COL', ('tv_channel', 'language', 39), 0.9999995231628418, 5), ('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.7357655035232452, 7), ('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'asc', 0.9040830731391907, 8), ('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9810121059417725, 9)]",
        "logprob": "-3.7386066727601044",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9696909847132804, 3), 'no'), (('GROUP_COL', ('tv_channel', 'language', 39), 0.9999995231628418, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9166521507139698, 7), 'no'), (('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'asc', 0.9040830731391907, 8), 'yes'), (('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9810121059417725, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9696909847132804, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.5806129418116381, 3), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.17197608458470937, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('sum', 4), False, 0.1465164799702966, 3), 'no'), (('GROUP_COL', ('tv_channel', 'language', 39), 0.9999995231628418, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9166521507139698, 7), 'no'), (('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.7357655035232452, 7), 'yes'), (('ORDER_AGG_v2', ('tv_channel', 'language', 39), ('count', 3), False, 0.11779543662365204, 7), 'no'), (('ORDER_AGG_v2', ('tv_series', 'channel', 53), ('count', 3), False, 0.11183948746348131, 7), 'no'), (('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'asc', 0.9040830731391907, 8), 'yes'), (('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9810121059417725, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 334
    },
    {
        "nl": "What are the languages used by the least number of TV Channels and how many channels use it ?",
        "true_sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language order_by count ( tv_channel.* ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*', 'order_by': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.language",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.language",
            "order_by",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 61, 4], 10, 39, 11, [9, 5, 61, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.5594302516459038, 3), ('GROUP_COL', ('tv_channel', 'language', 39), 0.9999997615814209, 5), ('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.692712494822415, 7), ('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'asc', 0.9095810055732727, 8), ('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9856660962104797, 9)]",
        "logprob": "-4.109259690518277",
        "q_counter": 5,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9743967702888207, 3), 'no'), (('GROUP_COL', ('tv_channel', 'language', 39), 0.9999997615814209, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9364920527906163, 7), 'no'), (('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'asc', 0.9095810055732727, 8), 'yes'), (('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9856660962104797, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9743967702888207, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.5594302516459038, 3), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.1156926238565707, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('sum', 4), False, 0.10681006856733527, 3), 'no'), (('GROUP_COL', ('tv_channel', 'language', 39), 0.9999997615814209, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9364920527906163, 7), 'no'), (('ORDER_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.692712494822415, 7), 'yes'), (('ORDER_AGG_v2', ('tv_channel', 'language', 39), ('count', 3), False, 0.11709813214050303, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.09613613579393898, 7), 'no'), (('ORDER_DESC_ASC', (('tv_channel', '*', 61), ('count', 3), False), 'asc', 0.9095810055732727, 8), 'yes'), (('ORDER_LIMIT', (('tv_channel', '*', 61), ('count', 3), False), 'limit_value', 0.9856660962104797, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 335
    },
    {
        "nl": "List each language and the number of TV Channels using it .",
        "true_sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.language",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.language",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 61, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9999336709951248, 3), ('GROUP_COL', ('tv_channel', 'language', 39), 1.0, 5)]",
        "logprob": "-0.0005461531039786946",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9999336709951248, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9999336709951248, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 336
    },
    {
        "nl": "For each language , list the number of TV Channels that use it .",
        "true_sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.language",
            ",",
            "count",
            "(",
            "tv_channel.*",
            ")",
            "group_by",
            "tv_channel.language",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 61, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.999281108379364, 1), ('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.993702996666999, 3), ('GROUP_COL', ('tv_channel', 'language', 39), 0.9999997615814209, 5)]",
        "logprob": "-0.027635436843462504",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.999281108379364, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.993702996666999, 3), 'yes'), (('GROUP_COL', ('tv_channel', 'language', 39), 0.9999997615814209, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.999281108379364, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.993702996666999, 3), 'yes'), (('GROUP_COL', ('tv_channel', 'language', 39), 0.9999997615814209, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 337
    },
    {
        "nl": "What is the TV Channel that shows the cartoon `` The Rise of the Blue Beetle ! `` ? List the TV Channel 's series name .",
        "true_sql": "select tv_channel.series_name where cartoon.title = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"The Rise of the Blue Beetle!\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            "where",
            "cartoon.title",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 5.7063083147568276e-08, 1), ('WHERE_COL', ('cartoon', 'title', 55), 1.0, 3), ('WHERE_OP', (('cartoon', 'title', 55),), ('=', 0), 0.9999986886978149, 4), ('WHERE_ROOT_TERM', (('cartoon', 'title', 55),), ('=', 0), 'terminal', 0.9999978542327881, 5)]",
        "logprob": "-17.64726847232091",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.7920140624046326, 1), 'no'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.6200984716415405, 3), 'no'), (('WHERE_OP', (('cartoon', 'title', 55),), ('=', 0), 0.9999986886978149, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'title', 55),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.7920140624046326, 1), 'no'), (('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.20798593759536746, 1), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 5.7063083147568276e-08, 1), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 4.465563474553852e-09, 1), 'no'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.6200984716415405, 3), 'no'), (('WHERE_COL', ('cartoon', 'title', 55), 0.37988588213920593, 3), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 1.5334437193814665e-05, 3), 'no'), (('WHERE_COL', ('cartoon', 'written_by', 57), 2.638382738950895e-07, 3), 'no'), (('WHERE_OP', (('cartoon', 'title', 55),), ('=', 0), 0.9999986886978149, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'title', 55),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 338
    },
    {
        "nl": "What is the series name of the TV Channel that shows the cartoon `` The Rise of the Blue Beetle `` ?",
        "true_sql": "select tv_channel.series_name where cartoon.title = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"The Rise of the Blue Beetle!\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            "where",
            "cartoon.title",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.6557982563972473, 1), ('WHERE_COL', ('cartoon', 'title', 55), 0.9997060894966125, 3), ('WHERE_OP', (('cartoon', 'title', 55),), ('=', 0), 0.9999945163726807, 4), ('WHERE_ROOT_TERM', (('cartoon', 'title', 55),), ('=', 0), 'terminal', 0.9999973773956299, 5)]",
        "logprob": "-0.4227069539291486",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.6557982563972473, 1), 'yes'), (('WHERE_COL', ('cartoon', 'title', 55), 0.9997060894966125, 3), 'yes'), (('WHERE_OP', (('cartoon', 'title', 55),), ('=', 0), 0.9999945163726807, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'title', 55),), ('=', 0), 'terminal', 0.9999973773956299, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.6557982563972473, 1), 'yes'), (('WHERE_COL', ('cartoon', 'title', 55), 0.9997060894966125, 3), 'yes'), (('WHERE_OP', (('cartoon', 'title', 55),), ('=', 0), 0.9999945163726807, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'title', 55),), ('=', 0), 'terminal', 0.9999973773956299, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 339
    },
    {
        "nl": "List the title of all Cartoons showed on TV Channel with series name `` Sky Radio `` .",
        "true_sql": "select cartoon.title where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9999986886978149, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999791383743286, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999963045120239, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.002801901299818367",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999791383743286, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999963045120239, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999791383743286, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999963045120239, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 340
    },
    {
        "nl": "What is the title of all the cartools that are on the TV Channel with the series name `` Sky Radio `` ?",
        "true_sql": "select cartoon.title where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.title",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.3072243630886078, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999996423721313, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.999896764755249, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999969005584717, 5)]",
        "logprob": "-1.180543158738575",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.6806963086128235, 1), 'no'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999996423721313, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.999896764755249, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999969005584717, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.6806963086128235, 1), 'no'), (('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.3072243630886078, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.007516599725931885, 1), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'content', 40), ('none_agg', 0), False, 0.0036527204792946573, 1), 'no'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999996423721313, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.999896764755249, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999969005584717, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 341
    },
    {
        "nl": "List the Episode of all TV series sorted by rating .",
        "true_sql": "select tv_series.episode order_by tv_series.rating",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.episode",
            "order_by",
            "tv_series.rating",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 11, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9999995231628418, 1), ('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.9995085000991821, 3)]",
        "logprob": "-0.00131740351642327",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.9995085000991821, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.9995085000991821, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 342
    },
    {
        "nl": "What are all of the episodes ordered by ratings ?",
        "true_sql": "select tv_series.episode order_by tv_series.rating",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.episode",
            "order_by",
            "tv_series.rating",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 11, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9498249292373657, 1), ('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.9900422096252441, 3)]",
        "logprob": "-0.061779588807895684",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9498249292373657, 1), 'yes'), (('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.9900422096252441, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9498249292373657, 1), 'yes'), (('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.9900422096252441, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 343
    },
    {
        "nl": "List top 3 highest Rating TV series . List the TV series 's Episode and Rating .",
        "true_sql": "select tv_series.episode , tv_series.rating order_by tv_series.rating desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.episode",
            ",",
            "tv_series.rating",
            "order_by",
            "tv_series.rating",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [48], 11, [48], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.005267336033284662, 1), ('SELECT_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.8904733657836914, 3), ('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.7823827266693115, 5), ('ORDER_DESC_ASC', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'desc', 0.9920061230659485, 6), ('ORDER_LIMIT', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'limit_value', 0.9999406337738037, 7)]",
        "logprob": "-5.6278426884294905",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9894620776176453, 1), 'no'), (('SELECT_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.8904733657836914, 3), 'yes'), (('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.7823827266693115, 5), 'yes'), (('ORDER_DESC_ASC', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'desc', 0.9920061230659485, 6), 'yes'), (('ORDER_LIMIT', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'limit_value', 0.9999406337738037, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9894620776176453, 1), 'no'), (('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.005267336033284662, 1), 'yes'), (('SELECT_AGG_v2', ('tv_series', '*', 62), ('none_agg', 0), False, 0.0026077367365360256, 1), 'no'), (('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('max', 1), False, 0.11981745962099483, 1), 'no'), (('SELECT_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.8904733657836914, 3), 'yes'), (('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.7823827266693115, 5), 'yes'), (('ORDER_DESC_ASC', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'desc', 0.9920061230659485, 6), 'yes'), (('ORDER_LIMIT', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'limit_value', 0.9999406337738037, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 344
    },
    {
        "nl": "What are 3 most highly rated episodes in the TV series table and what were those ratings ?",
        "true_sql": "select tv_series.episode , tv_series.rating order_by tv_series.rating desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.episode",
            ",",
            "tv_series.episode",
            "order_by",
            "tv_series.rating",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [46], 11, [48], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9952436089515686, 1), ('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.06274547427892685, 3), ('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.277560830116272, 5), ('ORDER_DESC_ASC', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'desc', 0.9926273226737976, 6), ('ORDER_LIMIT', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'limit_value', 0.9998800754547119, 7)]",
        "logprob": "-6.7842627843241345",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9952436089515686, 1), 'yes'), (('SELECT_AGG_v2', ('tv_series', '*', 62), ('count', 3), False, 0.8802948107011823, 3), 'no'), (('GROUP_COL', ('tv_series', 'id', 45), 0.38010507822036743, 5), 'no'), (('ORDER_AGG_v2', ('tv_series', '18_49_rating_share', 50), ('none_agg', 0), False, 0.6811012029647827, 5), 'no'), (('ORDER_DESC_ASC', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'desc', 0.9926273226737976, 6), 'yes'), (('ORDER_LIMIT', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'limit_value', 0.9998800754547119, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9952436089515686, 1), 'yes'), (('SELECT_AGG_v2', ('tv_series', '*', 62), ('count', 3), False, 0.8802948107011823, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.57931554974698, 3), 'no'), (('SELECT_AGG_v2', ('tv_series', '18_49_rating_share', 50), ('max', 1), False, 0.5175148865656746, 3), 'no'), (('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.06274547427892685, 3), 'yes'), (('GROUP_COL', ('tv_series', 'id', 45), 0.38010507822036743, 5), 'no'), (('GROUP_COL', ('tv_series', 'episode', 46), 0.31195464730262756, 5), 'no'), (('GROUP_COL', ('tv_series', 'channel', 53), 0.16192485392093658, 5), 'no'), (('GROUP_COL', ('tv_channel', 'series_name', 37), 0.06650124490261078, 5), 'no'), (('ORDER_AGG_v2', ('tv_series', '18_49_rating_share', 50), ('none_agg', 0), False, 0.6811012029647827, 5), 'no'), (('ORDER_AGG_v2', ('tv_series', 'rating', 48), ('none_agg', 0), False, 0.277560830116272, 5), 'yes'), (('ORDER_AGG_v2', ('tv_series', 'weekly_rank', 52), ('none_agg', 0), False, 0.023500040173530582, 5), 'no'), (('ORDER_AGG_v2', ('tv_series', 'share', 49), ('none_agg', 0), False, 0.009984669275581837, 5), 'no'), (('ORDER_DESC_ASC', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'desc', 0.9926273226737976, 6), 'yes'), (('ORDER_LIMIT', (('tv_series', 'rating', 48), ('none_agg', 0), False), 'limit_value', 0.9998800754547119, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 345
    },
    {
        "nl": "What is minimum and maximum share of TV series ?",
        "true_sql": "select max ( tv_series.share ) , min ( tv_series.share )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]], [2, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "tv_series.share",
            ")",
            ",",
            "max",
            "(",
            "tv_series.share",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 49, 4], 8, [19, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'share', 49), ('min', 2), False, 0.9824144755967037, 1), ('SELECT_AGG_v2', ('tv_series', 'share', 49), ('max', 1), False, 0.9318135660499279, 3)]",
        "logprob": "-0.35357175927308826",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'share', 49), ('min', 2), False, 0.9824144755967037, 1), 'yes'), (('SELECT_AGG_v2', ('tv_series', 'share', 49), ('max', 1), False, 0.9318135660499279, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'share', 49), ('min', 2), False, 0.9824144755967037, 1), 'yes'), (('SELECT_AGG_v2', ('tv_series', 'share', 49), ('max', 1), False, 0.9318135660499279, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 346
    },
    {
        "nl": "What is the maximum and minimum share for the TV series ?",
        "true_sql": "select max ( tv_series.share ) , min ( tv_series.share )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]], [2, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "tv_series.share",
            ")",
            ",",
            "min",
            "(",
            "tv_series.share",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 49, 4], 8, [26, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'share', 49), ('max', 1), False, 0.8410382925652876, 1), ('SELECT_AGG_v2', ('tv_series', 'share', 49), ('min', 2), False, 0.9242973730207615, 3)]",
        "logprob": "-1.0085969086845312",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'share', 49), ('max', 1), False, 0.8410382925652876, 1), 'yes'), (('SELECT_AGG_v2', ('tv_series', 'share', 49), ('min', 2), False, 0.9242973730207615, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'share', 49), ('max', 1), False, 0.8410382925652876, 1), 'yes'), (('SELECT_AGG_v2', ('tv_series', 'share', 49), ('min', 2), False, 0.9242973730207615, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 347
    },
    {
        "nl": "What is the air date of TV series with Episode `` A Love of a Lifetime `` ?",
        "true_sql": "select tv_series.air_date where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.air_date",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'air_date', 47), ('none_agg', 0), False, 0.9999947547912598, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.9999997615814209, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999381303787231, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9998354911804199, 5)]",
        "logprob": "-0.000560510296746952",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'air_date', 47), ('none_agg', 0), False, 0.9999947547912598, 1), 'yes'), (('WHERE_COL', ('tv_series', 'episode', 46), 0.9999997615814209, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999381303787231, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9998354911804199, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'air_date', 47), ('none_agg', 0), False, 0.9999947547912598, 1), 'yes'), (('WHERE_COL', ('tv_series', 'episode', 46), 0.9999997615814209, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999381303787231, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9998354911804199, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 348
    },
    {
        "nl": "When did the episode `` A Love of a Lifetime `` air ?",
        "true_sql": "select tv_series.air_date where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.air_date",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'air_date', 47), ('none_agg', 0), False, 0.002260580658912659, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 1.0, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.999956488609314, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9995840191841125, 5)]",
        "logprob": "-8.55119511192697",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9679574966430664, 1), 'no'), (('WHERE_COL', ('tv_series', 'air_date', 47), 0.8619546294212341, 3), 'no'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.999956488609314, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9995840191841125, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9679574966430664, 1), 'no'), (('SELECT_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.028728714212775227, 1), 'no'), (('SELECT_AGG_v2', ('tv_series', 'air_date', 47), ('none_agg', 0), False, 0.002260580658912659, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.0006905534537509082, 1), 'no'), (('WHERE_COL', ('tv_series', 'air_date', 47), 0.8619546294212341, 3), 'no'), (('WHERE_COL', ('tv_series', 'episode', 46), 0.08558665215969086, 3), 'yes'), (('WHERE_COL', ('cartoon', 'original_air_date', 58), 0.04564281925559044, 3), 'no'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.006731057073920965, 3), 'no'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.999956488609314, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9995840191841125, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 349
    },
    {
        "nl": "What is Weekly Rank of TV series with Episode `` A Love of a Lifetime `` ?",
        "true_sql": "select tv_series.weekly_rank where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.weekly_rank",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'weekly_rank', 52), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.9999997615814209, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999496936798096, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.999830961227417, 5)]",
        "logprob": "-0.0003527624643191828",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('tv_series', 'episode', 46), 0.9999997615814209, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999496936798096, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.999830961227417, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('tv_series', 'episode', 46), 0.9999997615814209, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999496936798096, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.999830961227417, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 350
    },
    {
        "nl": "What is the weekly rank for the episode `` A Love of a Lifetime `` ?",
        "true_sql": "select tv_series.weekly_rank where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.weekly_rank",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'weekly_rank', 52), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.999996542930603, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999539852142334, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9991699457168579, 5)]",
        "logprob": "-0.001456771026712698",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('tv_series', 'episode', 46), 0.999996542930603, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999539852142334, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9991699457168579, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('tv_series', 'episode', 46), 0.999996542930603, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9999539852142334, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9991699457168579, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 351
    },
    {
        "nl": "What is the TV Channel of TV series with Episode `` A Love of a Lifetime `` ? List the TV Channel 's series name .",
        "true_sql": "select tv_channel.series_name where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.00027198161114938546, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.9999905824661255, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9998562335968018, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9804319143295288, 5)]",
        "logprob": "-8.230368716849213",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.9997195601463318, 1), 'no'), (('WHERE_COL', ('tv_series', 'episode', 46), 0.9999905824661255, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9998562335968018, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9804319143295288, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.9997195601463318, 1), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.00027198161114938546, 1), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 8.490996151522264e-06, 1), 'no'), (('SELECT_AGG_v2', ('tv_series', 'viewers_m', 51), ('none_agg', 0), False, 1.4403818415775765e-11, 1), 'no'), (('WHERE_COL', ('tv_series', 'episode', 46), 0.9999905824661255, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9998562335968018, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9804319143295288, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 352
    },
    {
        "nl": "What is the name of the series that has the episode `` A Love of a Lifetime `` ?",
        "true_sql": "select tv_channel.series_name where tv_series.episode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"A Love of a Lifetime\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            "where",
            "tv_series.episode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9999995231628418, 1), ('WHERE_COL', ('tv_series', 'episode', 46), 0.9999985694885254, 3), ('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9998481273651123, 4), ('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9998449087142944, 5)]",
        "logprob": "-0.0011325796327662369",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('WHERE_COL', ('tv_series', 'episode', 46), 0.9999985694885254, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9998481273651123, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9998449087142944, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('WHERE_COL', ('tv_series', 'episode', 46), 0.9999985694885254, 3), 'yes'), (('WHERE_OP', (('tv_series', 'episode', 46),), ('=', 0), 0.9998481273651123, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_series', 'episode', 46),), ('=', 0), 'terminal', 0.9998449087142944, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 353
    },
    {
        "nl": "List the Episode of all TV series showed on TV Channel with series name `` Sky Radio `` .",
        "true_sql": "select tv_series.episode where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.episode",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9998831748962402, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999955892562866, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999971389770508, 5)]",
        "logprob": "-0.0007603427313536384",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9998831748962402, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999955892562866, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999971389770508, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9998831748962402, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999955892562866, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999971389770508, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 354
    },
    {
        "nl": "What is the episode for the TV series named `` Sky Radio `` ?",
        "true_sql": "select tv_series.episode where tv_channel.series_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Sky Radio\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_series.episode",
            "where",
            "tv_channel.series_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_series', 'episode', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999995231628418, 3), ('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.00018318057344470594",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999995231628418, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('tv_channel', 'series_name', 37), 0.9999995231628418, 3), 'yes'), (('WHERE_OP', (('tv_channel', 'series_name', 37),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'series_name', 37),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 355
    },
    {
        "nl": "Find the number of cartoons directed by each of the listed directors .",
        "true_sql": "select count ( cartoon.* ) , cartoon.directed_by group_by cartoon.directed_by",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 21, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 21, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'cartoon.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cartoon.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 63, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9961585653656472, 1)]",
        "logprob": "-0.046893025704797114",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9961585653656472, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9961585653656472, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 356
    },
    {
        "nl": "How many cartoons did each director create ?",
        "true_sql": "select count ( cartoon.* ) , cartoon.directed_by group_by cartoon.directed_by",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 21, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 21, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'cartoon.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cartoon.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 63, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9975330698615654, 1)]",
        "logprob": "-0.009976595504454204",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9975330698615654, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', '*', 63), ('count', 3), False, 0.9975330698615654, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 357
    },
    {
        "nl": "Find the production code and channel of the most recently aired cartoon .",
        "true_sql": "select cartoon.production_code , cartoon.channel order_by cartoon.original_air_date limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.production_code",
            ",",
            "cartoon.channel",
            "order_by",
            "cartoon.original_air_date",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 8, [60], 11, [58], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'production_code', 59), ('none_agg', 0), False, 0.9999990463256836, 1), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9959850311279297, 3), ('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9975948929786682, 5), ('ORDER_DESC_ASC', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'asc', 0.03066037967801094, 6), ('ORDER_LIMIT', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'limit_value', 0.9999140501022339, 7)]",
        "logprob": "-3.8402281359805235",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'production_code', 59), ('none_agg', 0), False, 0.9999990463256836, 1), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9959850311279297, 3), 'yes'), (('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9975948929786682, 5), 'yes'), (('ORDER_DESC_ASC', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'desc', 0.8614487648010254, 6), 'no'), (('ORDER_LIMIT', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'limit_value', 0.9999140501022339, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'production_code', 59), ('none_agg', 0), False, 0.9999990463256836, 1), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9959850311279297, 3), 'yes'), (('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9975948929786682, 5), 'yes'), (('ORDER_DESC_ASC', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'desc', 0.8614487648010254, 6), 'no'), (('ORDER_LIMIT', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'limit_value', 0.9999140501022339, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 358
    },
    {
        "nl": "What is the produdction code and channel of the most recent cartoon ?",
        "true_sql": "select cartoon.production_code , cartoon.channel order_by cartoon.original_air_date limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cartoon.production_code",
            ",",
            "cartoon.channel",
            "order_by",
            "cartoon.original_air_date",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 8, [60], 11, [58], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cartoon', 'production_code', 59), ('none_agg', 0), False, 0.9971826076507568, 1), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9944522976875305, 3), ('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9349885582923889, 5), ('ORDER_DESC_ASC', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'asc', 0.0008919324609450996, 6), ('ORDER_LIMIT', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'limit_value', 0.9999575614929199, 7)]",
        "logprob": "-7.099402596761062",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'production_code', 59), ('none_agg', 0), False, 0.9971826076507568, 1), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9944522976875305, 3), 'yes'), (('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9349885582923889, 5), 'yes'), (('ORDER_DESC_ASC', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'desc', 0.9928908348083496, 6), 'no'), (('ORDER_LIMIT', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'limit_value', 0.9999575614929199, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'production_code', 59), ('none_agg', 0), False, 0.9971826076507568, 1), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9944522976875305, 3), 'yes'), (('ORDER_AGG_v2', ('cartoon', 'original_air_date', 58), ('none_agg', 0), False, 0.9349885582923889, 5), 'yes'), (('ORDER_DESC_ASC', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'desc', 0.9928908348083496, 6), 'no'), (('ORDER_LIMIT', (('cartoon', 'original_air_date', 58), ('none_agg', 0), False), 'limit_value', 0.9999575614929199, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 359
    },
    {
        "nl": "Find the package choice and series name of the TV channel that has high definition TV .",
        "true_sql": "select tv_channel.package_option , tv_channel.series_name where tv_channel.hight_definition_tv = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"yes\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            ",",
            "tv_channel.series_name",
            "where",
            "tv_channel.hight_definition_tv",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [37], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9996343851089478, 1), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9990620017051697, 3), ('WHERE_COL', ('tv_channel', 'hight_definition_tv', 42), 1.0, 5), ('WHERE_OP', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 0.999671459197998, 6), ('WHERE_ROOT_TERM', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 'terminal', 0.9995777010917664, 7)]",
        "logprob": "-3.2272301026716",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9996343851089478, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9990620017051697, 3), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.49970680475234985, 5), 'no'), (('WHERE_OP', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 0.999671459197998, 6), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 'terminal', 0.9995777010917664, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9996343851089478, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9990620017051697, 3), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.49970680475234985, 5), 'no'), (('WHERE_COL', ('tv_series', 'rating', 48), 0.45881393551826477, 5), 'no'), (('WHERE_COL', ('tv_channel', 'hight_definition_tv', 42), 0.040975071489810944, 5), 'yes'), (('WHERE_COL', ('tv_channel', 'pixel_aspect_ratio_par', 41), 0.00035554327769204974, 5), 'no'), (('WHERE_OP', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 0.999671459197998, 6), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 'terminal', 0.9995777010917664, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 360
    },
    {
        "nl": "What are the package options and the name of the series for the TV Channel that supports high definition TV ?",
        "true_sql": "select tv_channel.package_option , tv_channel.series_name where tv_channel.hight_definition_tv = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"yes\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            ",",
            "tv_channel.series_name",
            "where",
            "tv_channel.hight_definition_tv",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [37], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9999023675918579, 1), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.969388484954834, 3), ('WHERE_COL', ('tv_channel', 'hight_definition_tv', 42), 0.4582701325416565, 5), ('WHERE_OP', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 0.9990893602371216, 6), ('WHERE_ROOT_TERM', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 'terminal', 0.9999754428863525, 7)]",
        "logprob": "-0.8295716028182833",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9999023675918579, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.969388484954834, 3), 'yes'), (('WHERE_COL', ('tv_channel', 'hight_definition_tv', 42), 0.4582701325416565, 5), 'yes'), (('WHERE_OP', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 0.9990893602371216, 6), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 'terminal', 0.9999754428863525, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9999023675918579, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.969388484954834, 3), 'yes'), (('WHERE_COL', ('tv_channel', 'hight_definition_tv', 42), 0.4582701325416565, 5), 'yes'), (('WHERE_OP', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 0.9990893602371216, 6), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'hight_definition_tv', 42),), ('=', 0), 'terminal', 0.9999754428863525, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 361
    },
    {
        "nl": "which countries ' tv channels are playing some cartoon written by Todd Casey ?",
        "true_sql": "select tv_channel.country where cartoon.written_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Todd Casey\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.country",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9906726479530334, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.9838828444480896, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999961853027344, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.02576978511871394",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9906726479530334, 1), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.9838828444480896, 3), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999961853027344, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9906726479530334, 1), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.9838828444480896, 3), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999961853027344, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 362
    },
    {
        "nl": "What are the countries that have cartoons on TV that were written by Todd Casey ?",
        "true_sql": "select tv_channel.country where cartoon.written_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Todd Casey\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.country",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.9871987700462341, 3), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999881982803345, 4), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.01688604125613373",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('cartoon', 'written_by', 57), 0.9871987700462341, 3), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999881982803345, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('cartoon', 'written_by', 57), 0.9871987700462341, 3), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9999881982803345, 4), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 363
    },
    {
        "nl": "which countries ' tv channels are not playing any cartoon written by Todd Casey ?",
        "true_sql": "select tv_channel.country except select tv_channel.country where cartoon.written_by = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Todd Casey\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.country",
            "except",
            "select",
            "tv_channel.country",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 28, 2, [38], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9850538372993469, 1), ('IUEN_v2', ('except', 3), 4.623850145435426e-06, 2), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9812927842140198, 4), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.6498993635177612, 6), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9940605759620667, 7), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999992847442627, 8)]",
        "logprob": "-12.758678449769722",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9850538372993469, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.5761250853538513, 3), 'no'), (('IUEN_v2', ('except', 3), 4.623850145435426e-06, 2), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9812927842140198, 4), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.6498993635177612, 6), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9940605759620667, 7), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999992847442627, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9850538372993469, 1), 'yes'), (('WHERE_COL', ('tv_channel', 'series_name', 37), 0.5761250853538513, 3), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.22236229479312897, 3), 'no'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.17436712980270386, 3), 'no'), (('WHERE_COL', ('cartoon', 'id', 54), 0.026642268523573875, 3), 'no'), (('IUEN_v2', ('except', 3), 4.623850145435426e-06, 2), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9812927842140198, 4), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.6498993635177612, 6), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.9940605759620667, 7), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.999992847442627, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 364
    },
    {
        "nl": "What are the countries that are not playing cartoons written by Todd Casey ?",
        "true_sql": "select tv_channel.country except select tv_channel.country where cartoon.written_by = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 22, False], None], '\"Todd Casey\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.country",
            "except",
            "select",
            "tv_channel.country",
            "where",
            "cartoon.written_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 28, 2, [38], 6, 57, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.999762237071991, 1), ('IUEN_v2', ('except', 3), 1.5139798961172346e-06, 2), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.4505627155303955, 4), ('WHERE_COL', ('cartoon', 'written_by', 57), 0.9998745918273926, 6), ('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.8889310956001282, 7), ('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999932050704956, 8)]",
        "logprob": "-14.326086817807527",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.999762237071991, 1), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.9991821646690369, 3), 'no'), (('IUEN_v2', ('except', 3), 1.5139798961172346e-06, 2), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'written_by', 57), ('none_agg', 0), False, 0.5446259379386902, 4), 'no'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.9998745918273926, 6), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.8889310956001282, 7), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999932050704956, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.999762237071991, 1), 'yes'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.9991821646690369, 3), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.0008172903908416629, 3), 'no'), (('WHERE_COL', ('cartoon', 'title', 55), 4.363188281786279e-07, 3), 'no'), (('WHERE_COL', ('cartoon', 'id', 54), 1.3809052512581133e-10, 3), 'no'), (('IUEN_v2', ('except', 3), 1.5139798961172346e-06, 2), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'written_by', 57), ('none_agg', 0), False, 0.5446259379386902, 4), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.4505627155303955, 4), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.004387700930237769, 4), 'no'), (('SELECT_AGG_v2', ('cartoon', 'directed_by', 56), ('none_agg', 0), False, 0.0004184113058727235, 4), 'no'), (('WHERE_COL', ('cartoon', 'written_by', 57), 0.9998745918273926, 6), 'yes'), (('WHERE_OP', (('cartoon', 'written_by', 57),), ('=', 0), 0.8889310956001282, 7), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'written_by', 57),), ('=', 0), 'terminal', 0.9999932050704956, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 365
    },
    {
        "nl": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang ?",
        "true_sql": "select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value intersect select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Michael Chang\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            ",",
            "tv_channel.country",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "intersect",
            "select",
            "tv_channel.series_name",
            ",",
            "tv_channel.country",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 56, [7], 3, 23, 2, [37], 8, [38], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9413639307022095, 1), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9985645413398743, 3), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998075366020203, 5), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999728202819824, 6), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999991655349731, 7), ('IUEN_v2', ('intersect', 1), 0.8933481574058533, 8), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.8974186182022095, 10), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9978163242340088, 12), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9997777342796326, 14), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999942779541016, 15), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999997615814209, 16)]",
        "logprob": "-0.3041995836336661",
        "q_counter": 11,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9413639307022095, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9985645413398743, 3), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998075366020203, 5), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999728202819824, 6), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999991655349731, 7), 'yes'), (('IUEN_v2', ('intersect', 1), 0.8933481574058533, 8), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.8974186182022095, 10), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9978163242340088, 12), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9997777342796326, 14), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999942779541016, 15), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999997615814209, 16), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9413639307022095, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9985645413398743, 3), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9998075366020203, 5), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999728202819824, 6), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999991655349731, 7), 'yes'), (('IUEN_v2', ('intersect', 1), 0.8933481574058533, 8), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.8974186182022095, 10), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9978163242340088, 12), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9997777342796326, 14), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999942779541016, 15), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999997615814209, 16), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 366
    },
    {
        "nl": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang ?",
        "true_sql": "select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value intersect select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Michael Chang\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.series_name",
            ",",
            "tv_channel.country",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "intersect",
            "select",
            "tv_channel.series_name",
            ",",
            "tv_channel.country",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 56, [7], 3, 23, 2, [37], 8, [38], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9762228727340698, 1), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999709129333496, 3), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999871015548706, 5), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999703168869019, 6), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999988079071045, 7), ('IUEN_v2', ('intersect', 1), 0.969695508480072, 8), ('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9395160675048828, 10), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999303817749023, 12), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9996891021728516, 14), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999995231628418, 15), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999996423721313, 16)]",
        "logprob": "-0.1422294707834726",
        "q_counter": 11,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9762228727340698, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999709129333496, 3), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999871015548706, 5), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999703168869019, 6), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999988079071045, 7), 'yes'), (('IUEN_v2', ('intersect', 1), 0.969695508480072, 8), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9395160675048828, 10), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999303817749023, 12), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9996891021728516, 14), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999995231628418, 15), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999996423721313, 16), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9762228727340698, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999709129333496, 3), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999871015548706, 5), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9999703168869019, 6), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999988079071045, 7), 'yes'), (('IUEN_v2', ('intersect', 1), 0.969695508480072, 8), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'series_name', 37), ('none_agg', 0), False, 0.9395160675048828, 10), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.9999303817749023, 12), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9996891021728516, 14), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.999995231628418, 15), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999996423721313, 16), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 367
    },
    {
        "nl": "find the pixel aspect ratio and nation of the tv channels that do not use English .",
        "true_sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country where tv_channel.language != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.pixel_aspect_ratio_par",
            ",",
            "tv_channel.pixel_aspect_ratio_par",
            "where",
            "tv_channel.language",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [41], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'pixel_aspect_ratio_par', 41), ('none_agg', 0), False, 0.9950645565986633, 1), ('SELECT_AGG_v2', ('tv_channel', 'pixel_aspect_ratio_par', 41), ('none_agg', 0), False, 0.0029891834128648034, 3), ('WHERE_COL', ('tv_channel', 'language', 39), 0.9972038269042969, 5), ('WHERE_OP', (('tv_channel', 'language', 39),), ('!=', 5), 0.9984613656997681, 6), ('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('!=', 5), 'terminal', 0.9999170303344727, 7)]",
        "logprob": "-5.823002025099595",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'pixel_aspect_ratio_par', 41), ('none_agg', 0), False, 0.9950645565986633, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.9969610571861267, 3), 'no'), (('WHERE_COL', ('tv_channel', 'language', 39), 0.9972038269042969, 5), 'yes'), (('WHERE_OP', (('tv_channel', 'language', 39),), ('!=', 5), 0.9984613656997681, 6), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('!=', 5), 'terminal', 0.9999170303344727, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'pixel_aspect_ratio_par', 41), ('none_agg', 0), False, 0.9950645565986633, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'language', 39), ('none_agg', 0), False, 0.9969610571861267, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'pixel_aspect_ratio_par', 41), ('none_agg', 0), False, 0.0029891834128648034, 3), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'hight_definition_tv', 42), ('none_agg', 0), False, 2.688855420274192e-05, 3), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'pixel_aspect_ratio_par', 41), ('count', 3), False, 0.0661382093388458, 3), 'no'), (('WHERE_COL', ('tv_channel', 'language', 39), 0.9972038269042969, 5), 'yes'), (('WHERE_OP', (('tv_channel', 'language', 39),), ('!=', 5), 0.9984613656997681, 6), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('!=', 5), 'terminal', 0.9999170303344727, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 368
    },
    {
        "nl": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English ?",
        "true_sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country where tv_channel.language != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.country",
            ",",
            "tv_channel.country",
            "where",
            "tv_channel.language",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [38], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.5475375652313232, 1), ('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.955730140209198, 3), ('WHERE_COL', ('tv_channel', 'language', 39), 1.0, 5), ('WHERE_OP', (('tv_channel', 'language', 39),), ('!=', 5), 0.9974969029426575, 6), ('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('!=', 5), 'terminal', 0.9999102354049683, 7)]",
        "logprob": "-2.5730046300851868",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.5475375652313232, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.955730140209198, 3), 'yes'), (('WHERE_COL', ('tv_channel', 'country', 38), 0.8532626628875732, 5), 'no'), (('WHERE_OP', (('tv_channel', 'language', 39),), ('!=', 5), 0.9974969029426575, 6), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('!=', 5), 'terminal', 0.9999102354049683, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.5475375652313232, 1), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'country', 38), ('none_agg', 0), False, 0.955730140209198, 3), 'yes'), (('WHERE_COL', ('tv_channel', 'country', 38), 0.8532626628875732, 5), 'no'), (('WHERE_COL', ('tv_channel', 'language', 39), 0.14622585475444794, 5), 'yes'), (('WHERE_COL', ('tv_channel', 'pixel_aspect_ratio_par', 41), 0.0004802031035069376, 5), 'no'), (('WHERE_COL', ('tv_channel', 'id', 36), 1.584855272085406e-05, 5), 'no'), (('WHERE_OP', (('tv_channel', 'language', 39),), ('!=', 5), 0.9974969029426575, 6), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'language', 39),), ('!=', 5), 'terminal', 0.9999102354049683, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 369
    },
    {
        "nl": "find id of the tv channels that from the countries where have more than two tv channels .",
        "true_sql": "select tv_channel.id group_by tv_channel.country having count ( tv_channel.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.id",
            "group_by",
            "tv_channel.country",
            "having",
            "count",
            "(",
            "tv_channel.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 10, 38, 18, [9, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.9948486089706421, 1), ('GROUP_COL', ('tv_channel', 'country', 38), 0.8542927503585815, 3), ('HAV_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9992190818144154, 5), ('HAV_OP_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 0.9995468258857727, 6), ('HAV_ROOT_TERM_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9999284744262695, 7)]",
        "logprob": "-0.1873250992227005",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.9948486089706421, 1), 'yes'), (('GROUP_COL', ('tv_channel', 'country', 38), 0.8542927503585815, 3), 'yes'), (('HAV_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9992190818144154, 5), 'yes'), (('HAV_OP_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 0.9995468258857727, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9999284744262695, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.9948486089706421, 1), 'yes'), (('GROUP_COL', ('tv_channel', 'country', 38), 0.8542927503585815, 3), 'yes'), (('HAV_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9992190818144154, 5), 'yes'), (('HAV_OP_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 0.9995468258857727, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9999284744262695, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 370
    },
    {
        "nl": "What are the ids of all tv channels that have more than 2 TV channels ?",
        "true_sql": "select tv_channel.id group_by tv_channel.country having count ( tv_channel.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'tv_channel.*'}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.id",
            "group_by",
            "cartoon.id",
            "having",
            "count",
            "(",
            "tv_channel.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 10, 54, 18, [9, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.9998579025268555, 1), ('GROUP_COL', ('cartoon', 'id', 54), 1.5522262231115747e-07, 3), ('HAV_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9995543995934958, 5), ('HAV_OP_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 0.9998390674591064, 6), ('HAV_ROOT_TERM_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9996664524078369, 7)]",
        "logprob": "-15.681960042222027",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.9998579025268555, 1), 'yes'), (('GROUP_COL', ('tv_channel', 'id', 36), 0.9997866749763489, 3), 'no'), (('HAV_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9995543995934958, 5), 'yes'), (('HAV_OP_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 0.9998390674591064, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9996664524078369, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.9998579025268555, 1), 'yes'), (('GROUP_COL', ('tv_channel', 'id', 36), 0.9997866749763489, 3), 'no'), (('GROUP_COL', ('tv_series', 'channel', 53), 0.0001548405271023512, 3), 'no'), (('GROUP_COL', ('tv_series', 'id', 45), 5.810363654745743e-05, 3), 'no'), (('GROUP_COL', ('cartoon', 'channel', 60), 1.61153124622615e-07, 3), 'no'), (('HAV_AGG_v2', ('tv_channel', '*', 61), ('count', 3), False, 0.9995543995934958, 5), 'yes'), (('HAV_OP_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 0.9998390674591064, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('tv_channel', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9996664524078369, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 371
    },
    {
        "nl": "find the id of tv channels that do not play any cartoon directed by Ben Jones .",
        "true_sql": "select tv_channel.id except select cartoon.channel where cartoon.directed_by = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.id",
            "except",
            "select",
            "cartoon.channel",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 28, 2, [60], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.7283316850662231, 1), ('IUEN_v2', ('except', 3), 1.016509941109689e-05, 2), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.10265343636274339, 4), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999935507774353, 6), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9864993095397949, 7), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999923706054688, 8)]",
        "logprob": "-14.116140110891106",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.7283316850662231, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.6414768099784851, 3), 'no'), (('IUEN_v2', ('except', 3), 1.016509941109689e-05, 2), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.6763325929641724, 4), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999935507774353, 6), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9864993095397949, 7), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999923706054688, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.7283316850662231, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.6414768099784851, 3), 'no'), (('WHERE_COL', ('cartoon', 'id', 54), 0.3556246757507324, 3), 'no'), (('WHERE_COL', ('cartoon', 'title', 55), 0.0014889775775372982, 3), 'no'), (('WHERE_COL', ('tv_channel', 'id', 36), 0.0012964324560016394, 3), 'no'), (('IUEN_v2', ('except', 3), 1.016509941109689e-05, 2), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.6763325929641724, 4), 'no'), (('SELECT_AGG_v2', ('cartoon', 'id', 54), ('none_agg', 0), False, 0.2201651930809021, 4), 'no'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.10265343636274339, 4), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'title', 55), ('none_agg', 0), False, 0.0004640310653485359, 4), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.999935507774353, 6), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9864993095397949, 7), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999923706054688, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 372
    },
    {
        "nl": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones ?",
        "true_sql": "select tv_channel.id except select cartoon.channel where cartoon.directed_by = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.id",
            "except",
            "select",
            "cartoon.channel",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 28, 2, [60], 6, 56, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.23710940778255465, 1), ('IUEN_v2', ('except', 3), 5.4989036470942665e-06, 2), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.006625194568186998, 4), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9999699592590332, 6), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9254016876220703, 7), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999921321868896, 8)]",
        "logprob": "-18.66758960009619",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cartoon', 'id', 54), ('none_agg', 0), False, 0.6962018013000488, 1), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9317665100097656, 3), 'no'), (('IUEN_v2', ('except', 3), 5.4989036470942665e-06, 2), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.7999463677406311, 4), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9999699592590332, 6), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9254016876220703, 7), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999921321868896, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cartoon', 'id', 54), ('none_agg', 0), False, 0.6962018013000488, 1), 'no'), (('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.23710940778255465, 1), 'yes'), (('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.05156942084431649, 1), 'no'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.015117302536964417, 1), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9317665100097656, 3), 'no'), (('WHERE_COL', ('cartoon', 'id', 54), 0.059092942625284195, 3), 'no'), (('WHERE_COL', ('tv_channel', 'id', 36), 0.008760008029639721, 3), 'no'), (('WHERE_COL', ('tv_series', 'channel', 53), 0.00023288195370696485, 3), 'no'), (('IUEN_v2', ('except', 3), 5.4989036470942665e-06, 2), 'yes'), (('SELECT_AGG_v2', ('tv_channel', 'id', 36), ('none_agg', 0), False, 0.7999463677406311, 4), 'no'), (('SELECT_AGG_v2', ('cartoon', 'id', 54), ('none_agg', 0), False, 0.1928642988204956, 4), 'no'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.006625194568186998, 4), 'yes'), (('SELECT_AGG_v2', ('tv_series', 'channel', 53), ('none_agg', 0), False, 0.0004979702061973512, 4), 'no'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9999699592590332, 6), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9254016876220703, 7), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999921321868896, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 373
    },
    {
        "nl": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones .",
        "true_sql": "select tv_channel.package_option where tv_channel.id not in ( select cartoon.channel where cartoon.directed_by = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            "where",
            "tv_channel.id",
            "not",
            "in",
            "(",
            "select",
            "cartoon.channel",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 36, [22, 20], 5, 2, [60], 6, 56, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9990934133529663, 1), ('WHERE_COL', ('tv_channel', 'id', 36), 1.0, 3), ('WHERE_OP', (('tv_channel', 'id', 36),), ('not in', 7), 0.9765144307686597, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'id', 36),), ('not in', 7), 'root', 0.9998664855957031, 5), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9987217783927917, 7), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9997636675834656, 9), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.997795820236206, 10), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999970197677612, 11), ('O', '##END_NESTED##', 0.9963065385818481, 12)]",
        "logprob": "-5.940030977613064",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9990934133529663, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9919131994247437, 3), 'no'), (('WHERE_OP', (('tv_channel', 'id', 36),), ('not in', 7), 0.9765144307686597, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'id', 36),), ('not in', 7), 'root', 0.9998664855957031, 5), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9987217783927917, 7), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9997636675834656, 9), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.997795820236206, 10), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999970197677612, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9990934133529663, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9919131994247437, 3), 'no'), (('WHERE_COL', ('cartoon', 'id', 54), 0.005248418543487787, 3), 'no'), (('WHERE_COL', ('tv_channel', 'id', 36), 0.0028162826783955097, 3), 'yes'), (('WHERE_COL', ('cartoon', 'title', 55), 1.9967483240179718e-05, 3), 'no'), (('WHERE_OP', (('tv_channel', 'id', 36),), ('not in', 7), 0.9765144307686597, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'id', 36),), ('not in', 7), 'root', 0.9998664855957031, 5), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.9987217783927917, 7), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9997636675834656, 9), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.997795820236206, 10), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999970197677612, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 374
    },
    {
        "nl": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones ?",
        "true_sql": "select tv_channel.package_option where tv_channel.id not in ( select cartoon.channel where cartoon.directed_by = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 21, False], None], '\"Ben Jones\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'tv_channel.id': 1, 'tv_channel.series_name': 2, 'tv_channel.country': 3, 'tv_channel.language': 4, 'tv_channel.content': 5, 'tv_channel.pixel_aspect_ratio_par': 6, 'tv_channel.hight_definition_tv': 7, 'tv_channel.pay_per_view_ppv': 8, 'tv_channel.package_option': 9, 'tv_series.id': 10, 'tv_series.episode': 11, 'tv_series.air_date': 12, 'tv_series.rating': 13, 'tv_series.share': 14, 'tv_series.18_49_rating_share': 15, 'tv_series.viewers_m': 16, 'tv_series.weekly_rank': 17, 'tv_series.channel': 18, 'cartoon.id': 19, 'cartoon.title': 20, 'cartoon.directed_by': 21, 'cartoon.written_by': 22, 'cartoon.original_air_date': 23, 'cartoon.production_code': 24, 'cartoon.channel': 25, 'tv_channel.*': 26, 'tv_series.*': 27, 'cartoon.*': 28}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "tv_channel.package_option",
            "where",
            "tv_channel.id",
            "not",
            "in",
            "(",
            "select",
            "cartoon.channel",
            "where",
            "cartoon.directed_by",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 36, [22, 20], 5, 2, [60], 6, 56, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9996764659881592, 1), ('WHERE_COL', ('tv_channel', 'id', 36), 1.0, 3), ('WHERE_OP', (('tv_channel', 'id', 36),), ('not in', 7), 0.9555136092920131, 4), ('WHERE_ROOT_TERM', (('tv_channel', 'id', 36),), ('not in', 7), 'root', 0.9998476505279541, 5), ('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.94620680809021, 7), ('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9999452829360962, 9), ('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9986479878425598, 10), ('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999982118606567, 11), ('O', '##END_NESTED##', 0.9958299994468689, 12)]",
        "logprob": "-10.693640094058242",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9996764659881592, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9994438290596008, 3), 'no'), (('WHERE_OP', (('tv_channel', 'id', 36),), ('not in', 7), 0.9555136092920131, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'id', 36),), ('not in', 7), 'root', 0.9998476505279541, 5), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.94620680809021, 7), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9999452829360962, 9), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9986479878425598, 10), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999982118606567, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('tv_channel', 'package_option', 44), ('none_agg', 0), False, 0.9996764659881592, 1), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9994438290596008, 3), 'no'), (('WHERE_COL', ('cartoon', 'id', 54), 0.0005272781709209085, 3), 'no'), (('WHERE_COL', ('tv_channel', 'id', 36), 2.6570936825009994e-05, 3), 'yes'), (('WHERE_COL', ('cartoon', 'title', 55), 1.351153969153529e-06, 3), 'no'), (('WHERE_OP', (('tv_channel', 'id', 36),), ('not in', 7), 0.9555136092920131, 4), 'yes'), (('WHERE_ROOT_TERM', (('tv_channel', 'id', 36),), ('not in', 7), 'root', 0.9998476505279541, 5), 'yes'), (('SELECT_AGG_v2', ('cartoon', 'channel', 60), ('none_agg', 0), False, 0.94620680809021, 7), 'yes'), (('WHERE_COL', ('cartoon', 'directed_by', 56), 0.9999452829360962, 9), 'yes'), (('WHERE_OP', (('cartoon', 'directed_by', 56),), ('=', 0), 0.9986479878425598, 10), 'yes'), (('WHERE_ROOT_TERM', (('cartoon', 'directed_by', 56),), ('=', 0), 'terminal', 0.9999982118606567, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 375
    },
    {
        "nl": "Find the number of pets whose weight is heavier than 10 .",
        "true_sql": "select count ( pets.* ) where pets.weight > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 14, False], None], 10.0, None]], 'extracted_clause_asterisk': {'select': 'pets.*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "pets.*",
            ")",
            "where",
            "pets.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 52, 4], 6, 49, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.7749747641232437, 1), ('WHERE_COL', ('pets', 'weight', 49), 0.8405513167381287, 3), ('WHERE_OP', (('pets', 'weight', 49),), ('>', 1), 0.9996798038482666, 4), ('WHERE_ROOT_TERM', (('pets', 'weight', 49),), ('>', 1), 'terminal', 0.9998205304145813, 5)]",
        "logprob": "-1.213564567108715",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8938960174904379, 1), 'no'), (('WHERE_COL', ('pets', 'weight', 49), 0.8405513167381287, 3), 'yes'), (('WHERE_OP', (('pets', 'weight', 49),), ('>', 1), 0.9996798038482666, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'weight', 49),), ('>', 1), 'terminal', 0.9998205304145813, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8938960174904379, 1), 'no'), (('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.7749747641232437, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.0007302511367015541, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('count', 3), False, 0.08114076729596201, 1), 'no'), (('WHERE_COL', ('pets', 'weight', 49), 0.8405513167381287, 3), 'yes'), (('WHERE_OP', (('pets', 'weight', 49),), ('>', 1), 0.9996798038482666, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'weight', 49),), ('>', 1), 'terminal', 0.9998205304145813, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 376
    },
    {
        "nl": "How many pets have a greater weight than 10 ?",
        "true_sql": "select count ( pets.* ) where pets.weight > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 14, False], None], 10.0, None]], 'extracted_clause_asterisk': {'select': 'pets.*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "pets.*",
            ")",
            "where",
            "pets.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 52, 4], 6, 49, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.3287771553097169, 1), ('WHERE_COL', ('pets', 'weight', 49), 0.8087629079818726, 3), ('WHERE_OP', (('pets', 'weight', 49),), ('>', 1), 0.9995150566101074, 4), ('WHERE_ROOT_TERM', (('pets', 'weight', 49),), ('>', 1), 'terminal', 0.9996974468231201, 5)]",
        "logprob": "-4.667726542755131",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9969652396065559, 1), 'no'), (('WHERE_COL', ('pets', 'weight', 49), 0.8087629079818726, 3), 'yes'), (('WHERE_OP', (('pets', 'weight', 49),), ('>', 1), 0.9995150566101074, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'weight', 49),), ('>', 1), 'terminal', 0.9996974468231201, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9969652396065559, 1), 'no'), (('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.3287771553097169, 1), 'yes'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.12228155446870283, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('sum', 4), False, 0.10353567828161939, 1), 'no'), (('WHERE_COL', ('pets', 'weight', 49), 0.8087629079818726, 3), 'yes'), (('WHERE_OP', (('pets', 'weight', 49),), ('>', 1), 0.9995150566101074, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'weight', 49),), ('>', 1), 'terminal', 0.9996974468231201, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 377
    },
    {
        "nl": "Find the weight of the youngest dog .",
        "true_sql": "select pets.weight order_by pets.pet_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "pets.weight",
            "order_by",
            "pets.pet_age",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 11, [48], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9999971389770508, 1), ('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9986396431922913, 3), ('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.6125546097755432, 4)]",
        "logprob": "-3.1406477622988724",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9999971389770508, 1), 'yes'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.999575674533844, 3), 'no'), (('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9986396431922913, 3), 'yes'), (('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.6125546097755432, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9999971389770508, 1), 'yes'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.999575674533844, 3), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.00041444614180363715, 3), 'no'), (('WHERE_COL', ('pets', 'weight', 49), 9.778811545402277e-06, 3), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 8.352884606210864e-08, 3), 'no'), (('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9986396431922913, 3), 'yes'), (('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.6125546097755432, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 378
    },
    {
        "nl": "How much does the youngest dog weigh ?",
        "true_sql": "select pets.weight order_by pets.pet_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "student.age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'age', 39), ('max', 1), False, 0.43471815513511713, 1)]",
        "logprob": "-3.569941494589783",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.8540012427029561, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.8540012427029561, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('sum', 4), False, 0.6393091687701725, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('max', 1), False, 0.6229158299384316, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('sum', 4), False, 0.4768934412559864, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 379
    },
    {
        "nl": "Find the maximum weight for each type of pet . List the maximum weight and pet type .",
        "true_sql": "select max ( pets.weight ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "pets.pettype",
            ",",
            "max",
            "(",
            "pets.weight",
            ")",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [19, 5, 49, 4], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.42390376329421997, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.9858043117458799, 3), ('GROUP_COL', ('pets', 'pettype', 47), 1.0, 5)]",
        "logprob": "-1.0453717788387336",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.42390376329421997, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.9858043117458799, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.42390376329421997, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.9858043117458799, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 380
    },
    {
        "nl": "List the maximum weight and type for each type of pet .",
        "true_sql": "select max ( pets.weight ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "pets.weight",
            ")",
            ",",
            "pets.pettype",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 49, 4], 8, [47], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.6985938561110799, 1), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9332033395767212, 3), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9958481788635254, 5), ('GROUP_COL', ('pets', 'pettype', 47), 0.9999964237213135, 7)]",
        "logprob": "-2.080411621226389",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('min', 2), False, 0.9253024540322083, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9958481788635254, 5), 'yes'), (('GROUP_COL', ('pets', 'pettype', 47), 0.9999964237213135, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('min', 2), False, 0.9253024540322083, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('max', 1), False, 0.6985938561110799, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.023730894550681114, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('min', 2), False, 0.2034627520481807, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9958481788635254, 5), 'yes'), (('GROUP_COL', ('pets', 'pettype', 47), 0.9999964237213135, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 381
    },
    {
        "nl": "Find number of pets owned by students who are older than 20 .",
        "true_sql": "select count ( * ) where student.age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 20.0, None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "student.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 39, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7640369239620582, 1), ('WHERE_COL', ('student', 'age', 39), 0.9946593642234802, 3), ('WHERE_OP', (('student', 'age', 39),), ('>', 1), 0.9462060928344727, 4), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('>', 1), 'terminal', 0.9999427795410156, 5)]",
        "logprob": "-1.13835364482465",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.8973111219564287, 1), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.9946593642234802, 3), 'yes'), (('WHERE_OP', (('student', 'age', 39),), ('>', 1), 0.9462060928344727, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'age', 39),), ('>', 1), 'terminal', 0.9999427795410156, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.8973111219564287, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7640369239620582, 1), 'yes'), (('SELECT_AGG_v2', ('student', '*', 50), ('count', 3), False, 0.29360681018839063, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.17786349772338497, 1), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.9946593642234802, 3), 'yes'), (('WHERE_OP', (('student', 'age', 39),), ('>', 1), 0.9462060928344727, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'age', 39),), ('>', 1), 'terminal', 0.9999427795410156, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 382
    },
    {
        "nl": "How many pets are owned by students that have an age greater than 20 ?",
        "true_sql": "select count ( * ) where student.age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 4, False], None], 20.0, None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "student.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 39, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.5054274860937383, 1), ('WHERE_COL', ('student', 'age', 39), 0.992662787437439, 3), ('WHERE_OP', (('student', 'age', 39),), ('>', 1), 0.9997766613960266, 4), ('WHERE_ROOT_TERM', (('student', 'age', 39),), ('>', 1), 'terminal', 0.9999608993530273, 5)]",
        "logprob": "-2.7383846763198116",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.9357455613041126, 1), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.992662787437439, 3), 'yes'), (('WHERE_OP', (('student', 'age', 39),), ('>', 1), 0.9997766613960266, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'age', 39),), ('>', 1), 'terminal', 0.9999608993530273, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.9357455613041126, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.5054274860937383, 1), 'yes'), (('SELECT_AGG_v2', ('student', '*', 50), ('count', 3), False, 0.45276732969496114, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('count', 3), True, 0.5281104398576718, 1), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.992662787437439, 3), 'yes'), (('WHERE_OP', (('student', 'age', 39),), ('>', 1), 0.9997766613960266, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'age', 39),), ('>', 1), 'terminal', 0.9999608993530273, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 383
    },
    {
        "nl": "Find the number of dog pets that are raised by female students ( with sex F ) .",
        "true_sql": "select count ( * ) where student.sex = value and pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"F\"', None], 'and', [False, 2, [0, [0, 12, False], None], '\"dog\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "student.sex",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9278182780905422, 1), ('WHERE_COL', ('student', 'sex', 40), 0.9999991655349731, 3), ('WHERE_OP', (('student', 'sex', 40),), ('=', 0), 0.999997615814209, 4), ('WHERE_ROOT_TERM', (('student', 'sex', 40),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.37877479906181993",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9278182780905422, 1), 'yes'), (('WHERE_COL', ('student', 'sex', 40), 0.9999991655349731, 3), 'yes'), (('WHERE_OP', (('student', 'sex', 40),), ('=', 0), 0.999997615814209, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'sex', 40),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9278182780905422, 1), 'yes'), (('WHERE_COL', ('student', 'sex', 40), 0.9999991655349731, 3), 'yes'), (('WHERE_OP', (('student', 'sex', 40),), ('=', 0), 0.999997615814209, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'sex', 40),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 384
    },
    {
        "nl": "How many dog pets are raised by female students ?",
        "true_sql": "select count ( * ) where student.sex = value and pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"F\"', None], 'and', [False, 2, [0, [0, 12, False], None], '\"dog\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "student.sex",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6987210617078474, 1), ('WHERE_COL', ('student', 'sex', 40), 0.9999995231628418, 3), ('WHERE_OP', (('student', 'sex', 40),), ('=', 0), 0.9999984502792358, 4), ('WHERE_ROOT_TERM', (('student', 'sex', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-1.4345701629955463",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.9180311704063242, 1), 'no'), (('WHERE_COL', ('student', 'sex', 40), 0.9999995231628418, 3), 'yes'), (('WHERE_OP', (('student', 'sex', 40),), ('=', 0), 0.9999984502792358, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'sex', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.9180311704063242, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6987210617078474, 1), 'yes'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.36633895874491096, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.42764042230119026, 1), 'no'), (('WHERE_COL', ('student', 'sex', 40), 0.9999995231628418, 3), 'yes'), (('WHERE_OP', (('student', 'sex', 40),), ('=', 0), 0.9999984502792358, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'sex', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 385
    },
    {
        "nl": "Find the number of distinct type of pets .",
        "true_sql": "select count ( distinct pets.pettype )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 12, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "pets.pettype",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.99228352199942, 1)]",
        "logprob": "-0.03873666949988016",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.99228352199942, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.99228352199942, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 386
    },
    {
        "nl": "How many different types of pet are there ?",
        "true_sql": "select count ( distinct pets.pettype )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 12, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "pets.pettype",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.9998909380247404, 1)]",
        "logprob": "-0.0005489158998276453",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.9998909380247404, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('count', 3), True, 0.9998909380247404, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 387
    },
    {
        "nl": "Find the first name of students who have cat or dog pet .",
        "true_sql": "select distinct student.fname where pets.pettype = value or pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None], 'or', [False, 2, [0, [0, 12, False], None], '\"dog\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "or",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 47, [7], 3, 25, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('pets', 'pettype', 47), 0.9999948740005493, 3), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999891519546509, 4), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('WHERE_COL', ('pets', 'pettype', 47), 0.9852816462516785, 7), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999233484268188, 8), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999953508377075, 9)]",
        "logprob": "-0.016660749037078863",
        "q_counter": 6,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('WHERE_COL', ('pets', 'pettype', 47), 0.9999948740005493, 3), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999891519546509, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9852816462516785, 7), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999233484268188, 8), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999953508377075, 9), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('pets', 'pettype', 47), 0.9999948740005493, 3), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999891519546509, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9852816462516785, 7), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999233484268188, 8), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999953508377075, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 388
    },
    {
        "nl": "What are the first names of every student who has a cat or dog as a pet ?",
        "true_sql": "select distinct student.fname where pets.pettype = value or pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None], 'or', [False, 2, [0, [0, 12, False], None], '\"dog\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "or",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 47, [7], 3, 25, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('pets', 'pettype', 47), 0.9716290235519409, 3), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999964237213135, 4), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999994039535522, 5), ('WHERE_COL', ('pets', 'pettype', 47), 0.6775475740432739, 7), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.999958872795105, 8), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999929666519165, 9)]",
        "logprob": "-0.4203077314202542",
        "q_counter": 6,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('WHERE_COL', ('pets', 'pettype', 47), 0.9716290235519409, 3), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999964237213135, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.6775475740432739, 7), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.999958872795105, 8), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999929666519165, 9), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('pets', 'pettype', 47), 0.9716290235519409, 3), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999964237213135, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.6775475740432739, 7), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.999958872795105, 8), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999929666519165, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 389
    },
    {
        "nl": "Find the name of students who have both cat and dog pets .",
        "true_sql": "select student.fname where pets.pettype = value intersect select student.fname where pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"dog\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "intersect",
            "select",
            "has_pet.stuid",
            "where",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 47, [7], 3, 23, 2, [44], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.2842487692832947, 1), ('WHERE_COL', ('pets', 'pettype', 47), 0.9999998807907104, 3), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999933242797852, 4), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999994039535522, 5), ('IUEN_v2', ('intersect', 1), 0.9935024380683899, 6), ('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.04957719147205353, 8), ('WHERE_COL', ('pets', 'pettype', 47), 0.9999995231628418, 10), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999958276748657, 11), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 12)]",
        "logprob": "-4.318862685374255",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.5941430926322937, 1), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999933242797852, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9935024380683899, 6), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.29717889428138733, 8), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9999995231628418, 10), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999958276748657, 11), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.5941430926322937, 1), 'no'), (('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.2842487692832947, 1), 'yes'), (('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 0.07600419223308562, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 0.010344236157834533, 1), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999933242797852, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9935024380683899, 6), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.29717889428138733, 8), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.2314170002937317, 8), 'no'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('none_agg', 0), False, 0.1594744175672531, 8), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 0.07005009800195694, 8), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9999995231628418, 10), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999958276748657, 11), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 390
    },
    {
        "nl": "What are the students ' first names who have both cats and dogs as pets ?",
        "true_sql": "select student.fname where pets.pettype = value intersect select student.fname where pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"dog\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "intersect",
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 47, [7], 3, 23, 2, [38], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999991655349731, 1), ('WHERE_COL', ('pets', 'pettype', 47), 0.9541968703269958, 3), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999810457229614, 4), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.9984778761863708, 6), ('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9957433342933655, 8), ('WHERE_COL', ('pets', 'pettype', 47), 0.9999101161956787, 10), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999960660934448, 11), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.999998927116394, 12)]",
        "logprob": "-0.0575614385473778",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9541968703269958, 3), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999810457229614, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9984778761863708, 6), 'yes'), (('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9957433342933655, 8), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9999101161956787, 10), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999960660934448, 11), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.999998927116394, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9541968703269958, 3), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999810457229614, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9984778761863708, 6), 'yes'), (('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9957433342933655, 8), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.9999101161956787, 10), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9999960660934448, 11), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.999998927116394, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 391
    },
    {
        "nl": "Find the major and age of students who do not have a cat pet .",
        "true_sql": "select student.major , student.age where student.stuid not in ( select student.stuid where pets.pettype = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.major",
            ",",
            "student.age",
            "where",
            "student.stuid",
            "not",
            "in",
            "(",
            "select",
            "student.major",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [39], 6, 36, [22, 20], 5, 2, [41], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.9949048757553101, 1), ('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.00849031563848257, 3), ('WHERE_COL', ('student', 'stuid', 36), 2.820623308252834e-07, 5), ('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.1096590409330638, 6), ('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999760389328003, 7), ('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.00024048709019552933, 9), ('O', '##END_NESTED##', 0.9695091247558594, 10)]",
        "logprob": "-32.639874841448496",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.9949048757553101, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.980222761631012, 3), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.9997767806053162, 5), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('!=', 5), 0.78792405128479, 6), 'no'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999760389328003, 7), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9219424724578857, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.9949048757553101, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.980222761631012, 3), 'no'), (('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.010103386826813218, 3), 'yes'), (('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.00849031563848257, 3), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.001182036590762436, 3), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.9997767806053162, 5), 'no'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.00018941910821013153, 5), 'no'), (('WHERE_COL', ('student', 'major', 41), 2.0322564523667097e-05, 5), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 1.3000289982301183e-05, 5), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('!=', 5), 0.78792405128479, 6), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('=', 0), 0.19821760058403015, 6), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.1096590409330638, 6), 'yes'), (('WHERE_OP', (('student', 'stuid', 36),), ('in', 8), 0.0008030055905692279, 6), 'no'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999760389328003, 7), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9219424724578857, 9), 'no'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.0758710205554962, 9), 'no'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.001494372962042689, 9), 'no'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.0004323553002905099, 9), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 392
    },
    {
        "nl": "What major is every student who does not own a cat as a pet , and also how old are they ?",
        "true_sql": "select student.major , student.age where student.stuid not in ( select student.stuid where pets.pettype = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.major",
            ",",
            "student.age",
            "where",
            "student.stuid",
            "not",
            "in",
            "(",
            "select",
            "pets.pettype",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [39], 6, 36, [22, 20], 5, 2, [47], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.9999996423721313, 1), ('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.033447448164224625, 3), ('WHERE_COL', ('student', 'stuid', 36), 1.4678990964966943e-06, 5), ('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.40391831794169, 6), ('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999892711639404, 7), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 2.234332214356982e-06, 9), ('O', '##END_NESTED##', 0.9725430607795715, 10)]",
        "logprob": "-31.683131486004715",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.830176830291748, 3), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.9992520213127136, 5), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('!=', 5), 0.47204309701919556, 6), 'no'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999892711639404, 7), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.9830159544944763, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.830176830291748, 3), 'no'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.10226956754922867, 3), 'no'), (('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.033447448164224625, 3), 'yes'), (('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.026721697300672524, 3), 'yes'), (('WHERE_COL', ('student', 'age', 39), 0.9992520213127136, 5), 'no'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.0007440671324729919, 5), 'no'), (('WHERE_COL', ('student', 'stuid', 36), 1.4678990964966943e-06, 5), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 1.4637541880802019e-06, 5), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('!=', 5), 0.47204309701919556, 6), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('=', 0), 0.3611360192298889, 6), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.40391831794169, 6), 'yes'), (('WHERE_OP', (('student', 'stuid', 36),), ('in', 8), 0.0011189733631908894, 6), 'no'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999892711639404, 7), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.9830159544944763, 9), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.01333463564515114, 9), 'no'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.003147584851831198, 9), 'no'), (('SELECT_AGG_v2', ('student', 'major', 41), ('none_agg', 0), False, 0.0004994071205146612, 9), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 393
    },
    {
        "nl": "Find the id of students who do not have a cat pet .",
        "true_sql": "select student.stuid except select student.stuid where pets.pettype = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.stuid",
            "except",
            "select",
            "student.stuid",
            "where",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 28, 2, [36], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.49530860781669617, 1), ('IUEN_v2', ('except', 3), 0.00014757970348000526, 2), ('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.005993468221276996, 4), ('WHERE_COL', ('pets', 'pettype', 47), 1.0, 6), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9683637619018555, 7), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999985694885254, 8)]",
        "logprob": "-17.109794305363543",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.49530860781669617, 1), 'yes'), (('WHERE_COL', ('has_pet', 'petid', 45), 0.8924708366394043, 3), 'no'), (('IUEN_v2', ('except', 3), 0.00014757970348000526, 2), 'yes'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.7508916854858398, 4), 'no'), (('WHERE_COL', ('has_pet', 'petid', 45), 0.6474891304969788, 6), 'no'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9683637619018555, 7), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999985694885254, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.49530860781669617, 1), 'yes'), (('WHERE_COL', ('has_pet', 'petid', 45), 0.8924708366394043, 3), 'no'), (('WHERE_COL', ('pets', 'petid', 46), 0.06183813139796257, 3), 'no'), (('WHERE_COL', ('has_pet', 'stuid', 44), 0.04044482484459877, 3), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.004579964093863964, 3), 'no'), (('IUEN_v2', ('except', 3), 0.00014757970348000526, 2), 'yes'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.7508916854858398, 4), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.2408491373062134, 4), 'no'), (('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.005993468221276996, 4), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.0015341426478698845, 4), 'no'), (('WHERE_COL', ('has_pet', 'petid', 45), 0.6474891304969788, 6), 'no'), (('WHERE_COL', ('pets', 'petid', 46), 0.2634720504283905, 6), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.08751554787158966, 6), 'yes'), (('WHERE_COL', ('has_pet', 'stuid', 44), 0.0013405075296759605, 6), 'no'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9683637619018555, 7), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999985694885254, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 394
    },
    {
        "nl": "What are the ids of the students who do not own cats as pets ?",
        "true_sql": "select student.stuid except select student.stuid where pets.pettype = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.stuid",
            "except",
            "select",
            "student.stuid",
            "where",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 28, 2, [36], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.5826748013496399, 1), ('IUEN_v2', ('except', 3), 0.005697814282029867, 2), ('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.06914085894823074, 4), ('WHERE_COL', ('pets', 'pettype', 47), 1.0, 6), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9806005358695984, 7), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999983310699463, 8)]",
        "logprob": "-11.162496458229043",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.5826748013496399, 1), 'yes'), (('WHERE_COL', ('pets', 'petid', 46), 0.6895787715911865, 3), 'no'), (('IUEN_v2', ('except', 3), 0.005697814282029867, 2), 'yes'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.7927768230438232, 4), 'no'), (('WHERE_COL', ('pets', 'petid', 46), 0.7453579306602478, 6), 'no'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9806005358695984, 7), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999983310699463, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.5826748013496399, 1), 'yes'), (('WHERE_COL', ('pets', 'petid', 46), 0.6895787715911865, 3), 'no'), (('WHERE_COL', ('has_pet', 'petid', 45), 0.17910541594028473, 3), 'no'), (('WHERE_COL', ('has_pet', 'stuid', 44), 0.10343745350837708, 3), 'no'), (('WHERE_COL', ('student', 'stuid', 36), 0.023658502846956253, 3), 'no'), (('IUEN_v2', ('except', 3), 0.005697814282029867, 2), 'yes'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.7927768230438232, 4), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.13248504698276517, 4), 'no'), (('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.06914085894823074, 4), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.0039542806334793585, 4), 'no'), (('WHERE_COL', ('pets', 'petid', 46), 0.7453579306602478, 6), 'no'), (('WHERE_COL', ('has_pet', 'petid', 45), 0.16613587737083435, 6), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.06316640228033066, 6), 'yes'), (('WHERE_COL', ('has_pet', 'stuid', 44), 0.01664247177541256, 6), 'no'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9806005358695984, 7), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999983310699463, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 395
    },
    {
        "nl": "Find the first name and age of students who have a dog but do not have a cat as a pet .",
        "true_sql": "select student.fname , student.age where pets.pettype = value and student.stuid not in ( select student.stuid where pets.pettype = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"dog\"', None], 'and', [True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            ",",
            "student.age",
            "where",
            "pets.pettype",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999992847442627, 1), ('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.012534734793007377, 3), ('WHERE_COL', ('pets', 'pettype', 47), 1.0, 5), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.8290311694145203, 6), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999960660934448, 7)]",
        "logprob": "-15.704514183268495",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999992847442627, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.987316906452179, 3), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.9659516215324402, 5), 'no'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.8290311694145203, 6), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999960660934448, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999992847442627, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.987316906452179, 3), 'no'), (('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.012534734793007377, 3), 'yes'), (('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.00011126880417577929, 3), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 2.1012809156673012e-05, 3), 'no'), (('WHERE_COL', ('student', 'age', 39), 0.9659516215324402, 5), 'no'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.033358316868543625, 5), 'no'), (('WHERE_COL', ('student', 'fname', 38), 0.0006710814777761698, 5), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 1.461738247598987e-05, 5), 'yes'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.8290311694145203, 6), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999960660934448, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 396
    },
    {
        "nl": "What is the first name of every student who has a dog but does not have a cat ?",
        "true_sql": "select student.fname , student.age where pets.pettype = value and student.stuid not in ( select student.stuid where pets.pettype = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"dog\"', None], 'and', [True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"cat\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            "where",
            "student.stuid",
            "not",
            "in",
            "(",
            "select",
            "student.fname",
            "where",
            "pets.pettype",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 36, [22, 20], 5, 2, [38], 6, 47, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999995231628418, 1), ('WHERE_COL', ('student', 'stuid', 36), 0.05872216448187828, 3), ('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.08365458522761662, 4), ('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999427795410156, 5), ('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 1.8396218592897631e-06, 7), ('WHERE_COL', ('pets', 'pettype', 47), 1.0, 9), ('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9996254444122314, 10), ('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 11), ('O', '##END_NESTED##', 0.9959679841995239, 12)]",
        "logprob": "-22.32632229482615",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('WHERE_COL', ('student', 'fname', 38), 0.9373422861099243, 3), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('=', 0), 0.9703919887542725, 4), 'no'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999427795410156, 5), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.7561445832252502, 7), 'no'), (('WHERE_COL', ('student', 'fname', 38), 0.6827322244644165, 9), 'no'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9996254444122314, 10), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('WHERE_COL', ('student', 'fname', 38), 0.9373422861099243, 3), 'no'), (('WHERE_COL', ('student', 'stuid', 36), 0.05872216448187828, 3), 'yes'), (('WHERE_COL', ('student', 'lname', 37), 0.00390781881287694, 3), 'no'), (('WHERE_COL', ('has_pet', 'stuid', 44), 7.142598860809812e-06, 3), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('=', 0), 0.9703919887542725, 4), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('!=', 5), 0.020834075286984444, 4), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.08365458522761662, 4), 'yes'), (('WHERE_OP', (('student', 'stuid', 36),), ('in', 8), 0.0008343856316059828, 4), 'no'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999427795410156, 5), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.7561445832252502, 7), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.24094466865062714, 7), 'no'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.002900629304349421, 7), 'no'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 6.815042070229541e-06, 7), 'no'), (('WHERE_COL', ('student', 'fname', 38), 0.6827322244644165, 9), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.2711983919143677, 9), 'yes'), (('WHERE_COL', ('student', 'lname', 37), 0.04380728676915169, 9), 'no'), (('WHERE_COL', ('pets', 'petid', 46), 0.000851908465847373, 9), 'no'), (('WHERE_OP', (('pets', 'pettype', 47),), ('=', 0), 0.9996254444122314, 10), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pettype', 47),), ('=', 0), 'terminal', 0.9999992847442627, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 397
    },
    {
        "nl": "Find the type and weight of the youngest pet .",
        "true_sql": "select pets.pettype , pets.weight order_by pets.pet_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 12, False], None]], [0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "pets.pettype",
            ",",
            "pets.weight",
            "order_by",
            "pets.pet_age",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [49], 11, [48], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9872698783874512, 3), ('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.98032146692276, 5), ('ORDER_DESC_ASC', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'asc', 0.014353170059621334, 6), ('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.99983811378479, 7)]",
        "logprob": "-4.286689559690243",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9872698783874512, 3), 'yes'), (('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.98032146692276, 5), 'yes'), (('ORDER_DESC_ASC', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'desc', 0.7240155935287476, 6), 'no'), (('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.99983811378479, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9872698783874512, 3), 'yes'), (('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.98032146692276, 5), 'yes'), (('ORDER_DESC_ASC', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'desc', 0.7240155935287476, 6), 'no'), (('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.99983811378479, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 398
    },
    {
        "nl": "What type of pet is the youngest animal , and how much does it weigh ?",
        "true_sql": "select pets.pettype , pets.weight order_by pets.pet_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 12, False], None]], [0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "pets.pettype",
            ",",
            "pets.weight",
            "order_by",
            "pets.pet_age",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 8, [49], 11, [48], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.010499070398509508, 3), ('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.18634288012981418, 5), ('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.3731755316257477, 6)]",
        "logprob": "-7.236117750343346",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9489925503730774, 3), 'no'), (('ORDER_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.8097901940345764, 5), 'no'), (('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.3731755316257477, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9489925503730774, 3), 'no'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.040417682379484184, 3), 'yes'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.010499070398509508, 3), 'yes'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 8.611314115114515e-05, 3), 'no'), (('ORDER_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.8097901940345764, 5), 'no'), (('ORDER_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.18634288012981418, 5), 'yes'), (('ORDER_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.0038666338659822936, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 2.988863059272262e-07, 5), 'no'), (('ORDER_LIMIT', (('pets', 'pet_age', 48), ('none_agg', 0), False), 'limit_value', 0.3731755316257477, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 399
    },
    {
        "nl": "Find the id and weight of all pets whose age is older than 1 .",
        "true_sql": "select pets.petid , pets.weight where pets.pet_age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "pets.petid",
            ",",
            "pets.weight",
            "where",
            "pets.pet_age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [49], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.9899575114250183, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9987820982933044, 3), ('WHERE_COL', ('pets', 'pet_age', 48), 0.9997313618659973, 5), ('WHERE_OP', (('pets', 'pet_age', 48),), ('>', 1), 0.9788255095481873, 6), ('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('>', 1), 'terminal', 0.9991422891616821, 7)]",
        "logprob": "-0.03423366752798601",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.9899575114250183, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9987820982933044, 3), 'yes'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.9997313618659973, 5), 'yes'), (('WHERE_OP', (('pets', 'pet_age', 48),), ('>', 1), 0.9788255095481873, 6), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('>', 1), 'terminal', 0.9991422891616821, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.9899575114250183, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.9987820982933044, 3), 'yes'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.9997313618659973, 5), 'yes'), (('WHERE_OP', (('pets', 'pet_age', 48),), ('>', 1), 0.9788255095481873, 6), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('>', 1), 'terminal', 0.9991422891616821, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 400
    },
    {
        "nl": "What is the id and weight of every pet who is older than 1 ?",
        "true_sql": "select pets.petid , pets.weight where pets.pet_age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 1.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "pets.petid",
            ",",
            "pets.weight",
            "where",
            "pets.pet_age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [49], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.404373437166214, 1), ('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.99924635887146, 3), ('WHERE_COL', ('pets', 'pet_age', 48), 0.9999754428863525, 5), ('WHERE_OP', (('pets', 'pet_age', 48),), ('>', 1), 0.8809828162193298, 6), ('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('>', 1), 'terminal', 0.9999527931213379, 7)]",
        "logprob": "-1.0334919941345928",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.5956166982650757, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.99924635887146, 3), 'yes'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.9999754428863525, 5), 'yes'), (('WHERE_OP', (('pets', 'pet_age', 48),), ('>', 1), 0.8809828162193298, 6), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('>', 1), 'terminal', 0.9999527931213379, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.5956166982650757, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.404373437166214, 1), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 6.863881935714746e-06, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 1.8946573163702866e-06, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'weight', 49), ('none_agg', 0), False, 0.99924635887146, 3), 'yes'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.9999754428863525, 5), 'yes'), (('WHERE_OP', (('pets', 'pet_age', 48),), ('>', 1), 0.8809828162193298, 6), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('>', 1), 'terminal', 0.9999527931213379, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 401
    },
    {
        "nl": "Find the average and maximum age for each type of pet .",
        "true_sql": "select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "pets.pet_age",
            ")",
            ",",
            "max",
            "(",
            "pets.pet_age",
            ")",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 48, 4], 8, [19, 5, 48, 4], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('avg', 5), False, 0.5858754330792704, 1), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('max', 1), False, 0.39445711212034235, 3), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9998599290847778, 5), ('GROUP_COL', ('pets', 'pettype', 47), 1.0, 7)]",
        "logprob": "-5.861771002036377",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('min', 2), False, 0.9682219233208251, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('min', 2), False, 0.9682219233208251, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('avg', 5), False, 0.5858754330792704, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('max', 1), False, 0.20563077254906595, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.000734178989659995, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 402
    },
    {
        "nl": "What is the average and maximum age for each pet type ?",
        "true_sql": "select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "pets.pet_age",
            ")",
            ",",
            "max",
            "(",
            "pets.pet_age",
            ")",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 48, 4], 8, [19, 5, 48, 4], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('avg', 5), False, 0.683600428638774, 1), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('max', 1), False, 0.8398517106505218, 3), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9981468915939331, 5), ('GROUP_COL', ('pets', 'pettype', 47), 0.9999954700469971, 7)]",
        "logprob": "-2.2245458125959106",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('min', 2), False, 0.9354343244011777, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9981468915939331, 5), 'yes'), (('GROUP_COL', ('pets', 'pettype', 47), 0.9999954700469971, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('min', 2), False, 0.9354343244011777, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('avg', 5), False, 0.683600428638774, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('max', 1), False, 0.332633557744175, 1), 'yes'), (('SELECT_AGG_v2', ('student', 'age', 39), ('min', 2), False, 0.20360851867185578, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9981468915939331, 5), 'yes'), (('GROUP_COL', ('pets', 'pettype', 47), 0.9999954700469971, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 403
    },
    {
        "nl": "Find the average weight for each pet type .",
        "true_sql": "select avg ( pets.weight ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "pets.weight",
            ")",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 49, 4], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('avg', 5), False, 0.9841187791943891, 1), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 1.0, 3), ('GROUP_COL', ('pets', 'pettype', 47), 1.0, 5)]",
        "logprob": "-0.06542065503358341",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('avg', 5), False, 0.9841187791943891, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('avg', 5), False, 0.9841187791943891, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 404
    },
    {
        "nl": "What is the average weight for each type of pet ?",
        "true_sql": "select avg ( pets.weight ) , pets.pettype group_by pets.pettype",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 12, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "pets.weight",
            ")",
            ",",
            "pets.pettype",
            "group_by",
            "pets.pettype",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 49, 4], 8, [47], 10, 47, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('pets', 'weight', 49), ('avg', 5), False, 0.9993094274087932, 1), ('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9999842643737793, 3), ('GROUP_COL', ('pets', 'pettype', 47), 0.9999983310699463, 5)]",
        "logprob": "-0.004159028524355936",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('avg', 5), False, 0.9993094274087932, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9999842643737793, 3), 'yes'), (('GROUP_COL', ('pets', 'pettype', 47), 0.9999983310699463, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'weight', 49), ('avg', 5), False, 0.9993094274087932, 1), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.9999842643737793, 3), 'yes'), (('GROUP_COL', ('pets', 'pettype', 47), 0.9999983310699463, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 405
    },
    {
        "nl": "Find the first name and age of students who have a pet .",
        "true_sql": "select distinct student.fname , student.age",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            ",",
            "student.age",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.0024798985105007887, 3)]",
        "logprob": "-6.016318390183643",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9959595799446106, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9959595799446106, 3), 'no'), (('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.0024798985105007887, 3), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.0014959572581574319, 3), 'no'), (('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 6.248921999940643e-05, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 406
    },
    {
        "nl": "What are the different first names and ages of the students who do have pets ?",
        "true_sql": "select distinct student.fname , student.age",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "student.fname",
            ",",
            "student.age",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [38], 8, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9986898303031921, 2), ('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.0005320925847627224, 4)]",
        "logprob": "-7.544030520893851",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9986898303031921, 2), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9994674324989319, 4), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9986898303031921, 2), 'yes'), (('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 0.9994674324989319, 4), 'no'), (('SELECT_AGG_v2', ('student', 'age', 39), ('none_agg', 0), False, 0.0005320925847627224, 4), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 3.88425945629933e-07, 4), 'no'), (('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 9.763522967887184e-08, 4), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 407
    },
    {
        "nl": "Find the id of the pet owned by student whose last name is \u2018 Smith \u2019 .",
        "true_sql": "select has_pet.petid where student.lname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Smith\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "has_pet.petid",
            "where",
            "student.lname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9529083967208862, 1), ('WHERE_COL', ('student', 'lname', 37), 0.9999840259552002, 3), ('WHERE_OP', (('student', 'lname', 37),), ('=', 0), 0.9999679327011108, 4), ('WHERE_ROOT_TERM', (('student', 'lname', 37),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.05550668851404925",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9529083967208862, 1), 'yes'), (('WHERE_COL', ('student', 'lname', 37), 0.9999840259552002, 3), 'yes'), (('WHERE_OP', (('student', 'lname', 37),), ('=', 0), 0.9999679327011108, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'lname', 37),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9529083967208862, 1), 'yes'), (('WHERE_COL', ('student', 'lname', 37), 0.9999840259552002, 3), 'yes'), (('WHERE_OP', (('student', 'lname', 37),), ('=', 0), 0.9999679327011108, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'lname', 37),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 408
    },
    {
        "nl": "What is the id of the pet owned by the student whose last name is 'Smith ' ?",
        "true_sql": "select has_pet.petid where student.lname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Smith\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "has_pet.petid",
            "where",
            "student.lname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9553437829017639, 1), ('WHERE_COL', ('student', 'lname', 37), 0.9999984502792358, 3), ('WHERE_OP', (('student', 'lname', 37),), ('=', 0), 0.9999902248382568, 4), ('WHERE_ROOT_TERM', (('student', 'lname', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.04629195992747393",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9553437829017639, 1), 'yes'), (('WHERE_COL', ('student', 'lname', 37), 0.9999984502792358, 3), 'yes'), (('WHERE_OP', (('student', 'lname', 37),), ('=', 0), 0.9999902248382568, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'lname', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.9553437829017639, 1), 'yes'), (('WHERE_COL', ('student', 'lname', 37), 0.9999984502792358, 3), 'yes'), (('WHERE_OP', (('student', 'lname', 37),), ('=', 0), 0.9999902248382568, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'lname', 37),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 409
    },
    {
        "nl": "Find the number of pets for each student who has any pet and student id .",
        "true_sql": "select count ( * ) , student.stuid group_by student.stuid",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student.stuid",
            "group_by",
            "student.stuid",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 8, [36], 10, 36, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.27192451084389807, 1), ('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.009657070040702822, 3), ('GROUP_COL', ('student', 'stuid', 36), 0.0011424996191635728, 5)]",
        "logprob": "-16.795282466395285",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.7559705376625061, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.04173790663480759, 3), 'no'), (('GROUP_COL', ('has_pet', 'petid', 45), 0.904852032661438, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.7559705376625061, 1), 'no'), (('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.5623170305768369, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.5113440776547333, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.05470886826515198, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.04173790663480759, 3), 'no'), (('SELECT_AGG_v2', ('student', 'stuid', 36), ('none_agg', 0), False, 0.009657070040702822, 3), 'yes'), (('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.00034845233312807977, 3), 'no'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('none_agg', 0), False, 9.325432074547278e-06, 3), 'no'), (('GROUP_COL', ('has_pet', 'petid', 45), 0.904852032661438, 5), 'no'), (('GROUP_COL', ('has_pet', 'stuid', 44), 0.0936417281627655, 5), 'no'), (('GROUP_COL', ('student', 'stuid', 36), 0.0011424996191635728, 5), 'yes'), (('GROUP_COL', ('pets', 'petid', 46), 0.00035820913035422564, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 410
    },
    {
        "nl": "For students who have pets , how many pets does each student have ?",
        "true_sql": "select count ( * ) , student.stuid group_by student.stuid",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "has_pet.stuid",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "pets.pet_age",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [9, 5, 35, 4], 10, 48, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.006738876458257438, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4945238729467381, 3), ('GROUP_COL', ('pets', 'pet_age', 48), 1.057143435900798e-06, 5)]",
        "logprob": "-21.58178783594895",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.7400590777397156, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.9769131786430691, 3), 'no'), (('GROUP_COL', ('pets', 'pettype', 47), 0.5610229969024658, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('pets', 'pettype', 47), ('none_agg', 0), False, 0.7400590777397156, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.09638929367065428, 1), 'no'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.058490112423896776, 1), 'no'), (('SELECT_AGG_v2', ('pets', '*', 52), ('none_agg', 0), False, 0.008142672479152681, 1), 'no'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.9769131786430691, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4945238729467381, 3), 'yes'), (('SELECT_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.35966484909228996, 3), 'no'), (('SELECT_AGG_v2', ('student', '*', 50), ('count', 3), False, 0.28281321041552426, 3), 'no'), (('GROUP_COL', ('pets', 'pettype', 47), 0.5610229969024658, 5), 'no'), (('GROUP_COL', ('has_pet', 'petid', 45), 0.373872309923172, 5), 'no'), (('GROUP_COL', ('pets', 'petid', 46), 0.06503807753324509, 5), 'no'), (('GROUP_COL', ('has_pet', 'stuid', 44), 6.473760731751099e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 411
    },
    {
        "nl": "Find the first name and gender of student who have more than one pet .",
        "true_sql": "select student.fname , student.sex group_by student.stuid having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            ",",
            "student.sex",
            "group_by",
            "pets.pettype",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 10, 47, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.999993085861206, 1), ('SELECT_AGG_v2', ('student', 'sex', 40), ('none_agg', 0), False, 0.25822675228118896, 3), ('GROUP_COL', ('pets', 'pettype', 47), 0.00021034438395872712, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998745918273926, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9966232776641846, 9)]",
        "logprob": "-11.1045965338307",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.999993085861206, 1), 'yes'), (('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 0.6800345778465271, 3), 'no'), (('GROUP_COL', ('has_pet', 'petid', 45), 0.9761496186256409, 5), 'no'), (('HAV_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.8862562293424582, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998745918273926, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9966232776641846, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.999993085861206, 1), 'yes'), (('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 0.6800345778465271, 3), 'no'), (('SELECT_AGG_v2', ('student', 'sex', 40), ('none_agg', 0), False, 0.25822675228118896, 3), 'yes'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.39485207205683315, 3), 'no'), (('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.019676664844155315, 3), 'yes'), (('GROUP_COL', ('has_pet', 'petid', 45), 0.9761496186256409, 5), 'no'), (('GROUP_COL', ('has_pet', 'stuid', 44), 0.01817185804247856, 5), 'no'), (('GROUP_COL', ('pets', 'petid', 46), 0.0028699426911771297, 5), 'no'), (('GROUP_COL', ('student', 'sex', 40), 0.002382533624768257, 5), 'no'), (('HAV_AGG_v2', ('has_pet', '*', 51), ('count', 3), False, 0.8862562293424582, 7), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7862699105492306, 7), 'yes'), (('HAV_AGG_v2', ('student', '*', 50), ('count', 3), False, 0.16244676884531958, 7), 'no'), (('HAV_AGG_v2', ('pets', '*', 52), ('count', 3), False, 0.08355074339041506, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998745918273926, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9966232776641846, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 412
    },
    {
        "nl": "What is the first name and gender of the all the students who have more than one pet ?",
        "true_sql": "select student.fname , student.sex group_by student.stuid having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.fname",
            ",",
            "student.sex",
            "group_by",
            "pets.pettype",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [40], 10, 47, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999997615814209, 1), ('SELECT_AGG_v2', ('student', 'sex', 40), ('none_agg', 0), False, 0.9951323866844177, 3), ('GROUP_COL', ('pets', 'pettype', 47), 0.0001621964038349688, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9972366486076502, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998935461044312, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9962770342826843, 9)]",
        "logprob": "-9.340731512365833",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('SELECT_AGG_v2', ('student', 'sex', 40), ('none_agg', 0), False, 0.9951323866844177, 3), 'yes'), (('GROUP_COL', ('has_pet', 'petid', 45), 0.9862679243087769, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9972366486076502, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998935461044312, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9962770342826843, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'fname', 38), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('SELECT_AGG_v2', ('student', 'sex', 40), ('none_agg', 0), False, 0.9951323866844177, 3), 'yes'), (('GROUP_COL', ('has_pet', 'petid', 45), 0.9862679243087769, 5), 'no'), (('GROUP_COL', ('pets', 'petid', 46), 0.008089848794043064, 5), 'no'), (('GROUP_COL', ('student', 'sex', 40), 0.004439488053321838, 5), 'no'), (('GROUP_COL', ('student', 'fname', 38), 0.0009051827364601195, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9972366486076502, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998935461044312, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9962770342826843, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 413
    },
    {
        "nl": "Find the last name of the student who has a cat that is age 3 .",
        "true_sql": "select student.lname where pets.pet_age = value and pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], 3.0, None], 'and', [False, 2, [0, [0, 12, False], None], '\"cat\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.lname",
            "where",
            "pets.pet_age",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('pets', 'pet_age', 48), 1.0, 3), ('WHERE_OP', (('pets', 'pet_age', 48),), ('=', 0), 0.9998230338096619, 4), ('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-7.09169046128944",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('student', 'age', 39), 0.999160885810852, 3), 'no'), (('WHERE_OP', (('pets', 'pet_age', 48),), ('=', 0), 0.9998230338096619, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('student', 'age', 39), 0.999160885810852, 3), 'no'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.0008387375855818391, 3), 'yes'), (('WHERE_COL', ('student', 'lname', 37), 3.7571470556940767e-07, 3), 'no'), (('WHERE_COL', ('student', 'fname', 38), 8.767585768509889e-09, 3), 'no'), (('WHERE_OP', (('pets', 'pet_age', 48),), ('=', 0), 0.9998230338096619, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 414
    },
    {
        "nl": "What is the last name of the student who has a cat that is 3 years old ?",
        "true_sql": "select student.lname where pets.pet_age = value and pets.pettype = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], 3.0, None], 'and', [False, 2, [0, [0, 12, False], None], '\"cat\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student.lname",
            "where",
            "pets.pet_age",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'lname', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('pets', 'pet_age', 48), 1.0, 3), ('WHERE_OP', (('pets', 'pet_age', 48),), ('=', 0), 0.9999479055404663, 4), ('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-8.273741050296278",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('student', 'age', 39), 0.9997420907020569, 3), 'no'), (('WHERE_OP', (('pets', 'pet_age', 48),), ('=', 0), 0.9999479055404663, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('student', 'age', 39), 0.9997420907020569, 3), 'no'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.0002556599793024361, 3), 'yes'), (('WHERE_COL', ('student', 'lname', 37), 1.4584621794710984e-06, 3), 'no'), (('WHERE_COL', ('student', 'fname', 38), 7.672095989619265e-07, 3), 'no'), (('WHERE_OP', (('pets', 'pet_age', 48),), ('=', 0), 0.9999479055404663, 4), 'yes'), (('WHERE_ROOT_TERM', (('pets', 'pet_age', 48),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 415
    },
    {
        "nl": "Find the average age of students who do not have any pet .",
        "true_sql": "select avg ( student.age ) where student.stuid not in ( select student.stuid )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 4, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "student.age",
            ")",
            "where",
            "student.stuid",
            "not",
            "in",
            "(",
            "select",
            "pets.pet_age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 39, 4], 6, 36, [22, 20], 5, 2, [48], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'age', 39), ('avg', 5), False, 0.9996822595740787, 1), ('WHERE_COL', ('student', 'stuid', 36), 0.01526376511901617, 3), ('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.9996081580924165, 4), ('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999817609786987, 5), ('SELECT_AGG_v2', ('pets', 'pet_age', 48), ('none_agg', 0), False, 2.3859826114858146e-07, 7), ('O', '##END_NESTED##', 0.999068558216095, 8)]",
        "logprob": "-19.479476850026927",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'age', 39), ('avg', 5), False, 0.9996822595740787, 1), 'yes'), (('WHERE_COL', ('student', 'age', 39), 0.8829584717750549, 3), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.9996081580924165, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999817609786987, 5), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.5471542477607727, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'age', 39), ('avg', 5), False, 0.9996822595740787, 1), 'yes'), (('WHERE_COL', ('student', 'age', 39), 0.8829584717750549, 3), 'no'), (('WHERE_COL', ('pets', 'pettype', 47), 0.07918590307235718, 3), 'no'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.020067015662789345, 3), 'no'), (('WHERE_COL', ('student', 'stuid', 36), 0.01526376511901617, 3), 'yes'), (('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.9996081580924165, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999817609786987, 5), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.5471542477607727, 7), 'no'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.4503447115421295, 7), 'no'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 0.0024980192538350825, 7), 'no'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('none_agg', 0), False, 2.5159754386550027e-06, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 416
    },
    {
        "nl": "What is the average age for all students who do not own any pets ?",
        "true_sql": "select avg ( student.age ) where student.stuid not in ( select student.stuid )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 4, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'student.stuid': 1, 'student.lname': 2, 'student.fname': 3, 'student.age': 4, 'student.sex': 5, 'student.major': 6, 'student.advisor': 7, 'student.city_code': 8, 'has_pet.stuid': 9, 'has_pet.petid': 10, 'pets.petid': 11, 'pets.pettype': 12, 'pets.pet_age': 13, 'pets.weight': 14, 'student.*': 15, 'has_pet.*': 16, 'pets.*': 17}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "student.age",
            ")",
            "where",
            "student.stuid",
            "not",
            "in",
            "(",
            "select",
            "pets.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 39, 4], 6, 36, [22, 20], 5, 2, [52], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student', 'age', 39), ('avg', 5), False, 0.9963832760609407, 1), ('WHERE_COL', ('student', 'stuid', 36), 0.11431817710399628, 3), ('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.9996003046044927, 4), ('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999634027481079, 5), ('SELECT_AGG_v2', ('pets', '*', 52), ('none_agg', 0), False, 1.1114674407508573e-06, 7), ('O', '##END_NESTED##', 0.9996681213378906, 8)]",
        "logprob": "-15.940419104826466",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student', 'age', 39), ('avg', 5), False, 0.9963832760609407, 1), 'yes'), (('WHERE_COL', ('student', 'age', 39), 0.7604190707206726, 3), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.9996003046044927, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999634027481079, 5), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.9264872074127197, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student', 'age', 39), ('avg', 5), False, 0.9963832760609407, 1), 'yes'), (('WHERE_COL', ('student', 'age', 39), 0.7604190707206726, 3), 'no'), (('WHERE_COL', ('student', 'stuid', 36), 0.11431817710399628, 3), 'yes'), (('WHERE_COL', ('pets', 'pettype', 47), 0.06380264461040497, 3), 'no'), (('WHERE_COL', ('pets', 'pet_age', 48), 0.04854349419474602, 3), 'no'), (('WHERE_OP', (('student', 'stuid', 36),), ('not in', 7), 0.9996003046044927, 4), 'yes'), (('WHERE_ROOT_TERM', (('student', 'stuid', 36),), ('not in', 7), 'root', 0.9999634027481079, 5), 'yes'), (('SELECT_AGG_v2', ('has_pet', 'stuid', 44), ('none_agg', 0), False, 0.9264872074127197, 7), 'no'), (('SELECT_AGG_v2', ('has_pet', 'petid', 45), ('none_agg', 0), False, 0.07347336411476135, 7), 'no'), (('SELECT_AGG_v2', ('pets', 'petid', 46), ('none_agg', 0), False, 3.328915408928878e-05, 7), 'no'), (('SELECT_AGG_v2', ('has_pet', '*', 51), ('none_agg', 0), False, 3.927782927348746e-06, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 417
    },
    {
        "nl": "How many teachers are there ?",
        "true_sql": "select count ( teacher.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "teacher.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9996325343052256, 1)]",
        "logprob": "-0.001572538930390492",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9996325343052256, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9996325343052256, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 418
    },
    {
        "nl": "What is the total count of teachers ?",
        "true_sql": "select count ( teacher.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "teacher.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9037416833570774, 1)]",
        "logprob": "-0.4182871769877427",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9037416833570774, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9037416833570774, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 419
    },
    {
        "nl": "List the names of teachers in ascending order of age .",
        "true_sql": "select teacher.name order_by teacher.age asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "order_by",
            "teacher.age",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [41], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9999997615814209, 3), ('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'asc', 0.03244197368621826, 4)]",
        "logprob": "-3.428319853513168",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9999997615814209, 3), 'yes'), (('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.8600765466690063, 4), 'no')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9999997615814209, 3), 'yes'), (('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.8600765466690063, 4), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 420
    },
    {
        "nl": "What are the names of the teachers ordered by ascending age ?",
        "true_sql": "select teacher.name order_by teacher.age asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "order_by",
            "teacher.age",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 11, [41], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9999991655349731, 3), ('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'asc', 0.0028726370073854923, 4)]",
        "logprob": "-5.852539158333042",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9999991655349731, 3), 'yes'), (('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.5616846680641174, 4), 'no')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9999991655349731, 3), 'yes'), (('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.5616846680641174, 4), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 421
    },
    {
        "nl": "What are the age and hometown of teachers ?",
        "true_sql": "select teacher.age , teacher.hometown",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.age",
            ",",
            "teacher.hometown",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9998717308044434, 1), ('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9990757703781128, 3)]",
        "logprob": "-0.004534809568117961",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9998717308044434, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9990757703781128, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9998717308044434, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9990757703781128, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 422
    },
    {
        "nl": "What is the age and hometown of every teacher ?",
        "true_sql": "select teacher.age , teacher.hometown",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.age",
            ",",
            "teacher.hometown",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9115439653396606, 1), ('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9990874528884888, 3)]",
        "logprob": "-0.09588173292706763",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9115439653396606, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9990874528884888, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.9115439653396606, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9990874528884888, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 423
    },
    {
        "nl": "List the name of teachers whose hometown is not `` Little Lever Urban District `` .",
        "true_sql": "select teacher.name where teacher.hometown != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 7, False], None], '\"Little Lever Urban Distric\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.hometown",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 42, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999985694885254, 1), ('WHERE_COL', ('teacher', 'hometown', 42), 0.9999978542327881, 3), ('WHERE_OP', (('teacher', 'hometown', 42),), ('!=', 5), 0.9989495873451233, 4), ('WHERE_ROOT_TERM', (('teacher', 'hometown', 42),), ('!=', 5), 'terminal', 0.9996253252029419, 5)]",
        "logprob": "-0.0021009839614893866",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999985694885254, 1), 'yes'), (('WHERE_COL', ('teacher', 'hometown', 42), 0.9999978542327881, 3), 'yes'), (('WHERE_OP', (('teacher', 'hometown', 42),), ('!=', 5), 0.9989495873451233, 4), 'yes'), (('WHERE_ROOT_TERM', (('teacher', 'hometown', 42),), ('!=', 5), 'terminal', 0.9996253252029419, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999985694885254, 1), 'yes'), (('WHERE_COL', ('teacher', 'hometown', 42), 0.9999978542327881, 3), 'yes'), (('WHERE_OP', (('teacher', 'hometown', 42),), ('!=', 5), 0.9989495873451233, 4), 'yes'), (('WHERE_ROOT_TERM', (('teacher', 'hometown', 42),), ('!=', 5), 'terminal', 0.9996253252029419, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 424
    },
    {
        "nl": "What are the names of the teachers whose hometown is not `` Little Lever Urban District `` ?",
        "true_sql": "select teacher.name where teacher.hometown != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 7, False], None], '\"Little Lever Urban Distric\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.hometown",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 42, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999997615814209, 1), ('WHERE_COL', ('teacher', 'hometown', 42), 0.9999967813491821, 3), ('WHERE_OP', (('teacher', 'hometown', 42),), ('!=', 5), 0.9990013241767883, 4), ('WHERE_ROOT_TERM', (('teacher', 'hometown', 42),), ('!=', 5), 'terminal', 0.9995183944702148, 5)]",
        "logprob": "-0.00230251723539745",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('WHERE_COL', ('teacher', 'hometown', 42), 0.9999967813491821, 3), 'yes'), (('WHERE_OP', (('teacher', 'hometown', 42),), ('!=', 5), 0.9990013241767883, 4), 'yes'), (('WHERE_ROOT_TERM', (('teacher', 'hometown', 42),), ('!=', 5), 'terminal', 0.9995183944702148, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('WHERE_COL', ('teacher', 'hometown', 42), 0.9999967813491821, 3), 'yes'), (('WHERE_OP', (('teacher', 'hometown', 42),), ('!=', 5), 0.9990013241767883, 4), 'yes'), (('WHERE_ROOT_TERM', (('teacher', 'hometown', 42),), ('!=', 5), 'terminal', 0.9995183944702148, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 425
    },
    {
        "nl": "Show the name of teachers aged either 32 or 33 ?",
        "true_sql": "select teacher.name where teacher.age = value or teacher.age = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], 32.0, None], 'or', [False, 2, [0, [0, 6, False], None], 33.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.age",
            "between",
            "(",
            "select",
            "min",
            "(",
            "teacher.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 41, [32], 5, 2, [26, 5, 41, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999990463256836, 1), ('WHERE_COL', ('teacher', 'age', 41), 0.9999895095825195, 3), ('WHERE_OP', (('teacher', 'age', 41),), ('between', 9), 0.4294629991054535, 4), ('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('between', 9), 'root', 2.8898162781842984e-05, 5), ('SELECT_AGG_v2', ('teacher', 'age', 41), ('min', 2), False, 0.907554284235322, 7), ('O', '##END_NESTED##', 0.9151440858840942, 8)]",
        "logprob": "-11.786587247914388",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999990463256836, 1), 'yes'), (('WHERE_COL', ('teacher', 'age', 41), 0.9999895095825195, 3), 'yes'), (('WHERE_OP', (('teacher', 'age', 41),), ('between', 9), 0.4294629991054535, 4), 'no'), (('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('between', 9), 'terminal', 0.9999161958694458, 5), 'no'), (('SELECT_AGG_v2', ('teacher', 'age', 41), ('min', 2), False, 0.907554284235322, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999990463256836, 1), 'yes'), (('WHERE_COL', ('teacher', 'age', 41), 0.9999895095825195, 3), 'yes'), (('WHERE_OP', (('teacher', 'age', 41),), ('between', 9), 0.4294629991054535, 4), 'no'), (('WHERE_OP', (('teacher', 'age', 41),), ('<', 2), 0.371369332075119, 4), 'no'), (('WHERE_OP', (('teacher', 'age', 41),), ('like', 6), 0.08054477721452713, 4), 'no'), (('WHERE_OP', (('teacher', 'age', 41),), ('in', 8), 0.030532047152519226, 4), 'no'), (('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('between', 9), 'terminal', 0.9999161958694458, 5), 'no'), (('SELECT_AGG_v2', ('teacher', 'age', 41), ('min', 2), False, 0.907554284235322, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 426
    },
    {
        "nl": "What are the names of the teachers who are aged either 32 or 33 ?",
        "true_sql": "select teacher.name where teacher.age = value or teacher.age = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], 32.0, None], 'or', [False, 2, [0, [0, 6, False], None], 33.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.age",
            "<",
            "(",
            "select",
            "min",
            "(",
            "teacher.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 41, [21], 5, 2, [26, 5, 41, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('teacher', 'age', 41), 0.9999951124191284, 3), ('WHERE_OP', (('teacher', 'age', 41),), ('<', 2), 0.39970678091049194, 4), ('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('<', 2), 'root', 0.00011166188778588548, 5), ('SELECT_AGG_v2', ('teacher', 'age', 41), ('min', 2), False, 0.9904538910466854, 7), ('O', '##END_NESTED##', 0.7891215085983276, 8)]",
        "logprob": "-10.292768733991092",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('teacher', 'age', 41), 0.9999951124191284, 3), 'yes'), (('WHERE_OP', (('teacher', 'age', 41),), ('<', 2), 0.39970678091049194, 4), 'no'), (('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('<', 2), 'terminal', 0.9994266033172607, 5), 'no'), (('SELECT_AGG_v2', ('teacher', 'age', 41), ('min', 2), False, 0.9904538910466854, 7), 'exit')]",
        "feedback_records": "[(('WHERE_COL', ('teacher', 'age', 41), 0.9999951124191284, 3), 'yes'), (('WHERE_OP', (('teacher', 'age', 41),), ('<', 2), 0.39970678091049194, 4), 'no'), (('WHERE_OP', (('teacher', 'age', 41),), ('between', 9), 0.39076775312423706, 4), 'no'), (('WHERE_OP', (('teacher', 'age', 41),), ('like', 6), 0.0610145665705204, 4), 'no'), (('WHERE_OP', (('teacher', 'age', 41),), ('>', 1), 0.054171375930309296, 4), 'no'), (('WHERE_ROOT_TERM', (('teacher', 'age', 41),), ('<', 2), 'terminal', 0.9994266033172607, 5), 'no'), (('SELECT_AGG_v2', ('teacher', 'age', 41), ('min', 2), False, 0.9904538910466854, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 427
    },
    {
        "nl": "What is the hometown of the youngest teacher ?",
        "true_sql": "select teacher.hometown order_by teacher.age asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.hometown",
            "order_by",
            "teacher.age",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 11, [41], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999208450317383, 1), ('ORDER_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'asc', 0.001910290913656354, 4), ('ORDER_LIMIT', (('teacher', 'age', 41), ('none_agg', 0), False), 'limit_value', 0.9998965263366699, 5)]",
        "logprob": "-6.26794760054506",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999208450317383, 1), 'yes'), (('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.9928826093673706, 4), 'no'), (('ORDER_LIMIT', (('teacher', 'age', 41), ('none_agg', 0), False), 'limit_value', 0.9998965263366699, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999208450317383, 1), 'yes'), (('ORDER_DESC_ASC', (('teacher', 'age', 41), ('none_agg', 0), False), 'desc', 0.9928826093673706, 4), 'no'), (('ORDER_LIMIT', (('teacher', 'age', 41), ('none_agg', 0), False), 'limit_value', 0.9998965263366699, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 428
    },
    {
        "nl": "Where is the youngest teacher from ?",
        "true_sql": "select teacher.hometown order_by teacher.age asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "teacher.age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'age', 41), ('max', 1), False, 0.04757097830236013, 1)]",
        "logprob": "-12.216115917720085",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9981145858764648, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9981145858764648, 1), 'no'), (('SELECT_AGG_v2', ('teacher', 'teacher_id', 39), ('none_agg', 0), False, 0.0015788684831932194, 1), 'no'), (('SELECT_AGG_v2', ('teacher', 'age', 41), ('none_agg', 0), False, 0.00027471757493913185, 1), 'no'), (('SELECT_AGG_v2', ('teacher', '*', 47), ('none_agg', 0), False, 2.0008659703307802e-05, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 429
    },
    {
        "nl": "Show different hometown of teachers and the number of teachers from each hometown .",
        "true_sql": "select teacher.hometown , count ( teacher.* ) group_by teacher.hometown",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.hometown",
            ",",
            "count",
            "(",
            "teacher.*",
            ")",
            "group_by",
            "teacher.hometown",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [9, 5, 47, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999872446060181, 1), ('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9479252057695374, 3), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9999879598617554, 5)]",
        "logprob": "-0.21417621343238555",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999872446060181, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9479252057695374, 3), 'yes'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9999879598617554, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999872446060181, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9479252057695374, 3), 'yes'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9999879598617554, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 430
    },
    {
        "nl": "For each hometown , how many teachers are there ?",
        "true_sql": "select teacher.hometown , count ( teacher.* ) group_by teacher.hometown",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.hometown",
            ",",
            "count",
            "(",
            "teacher.*",
            ")",
            "group_by",
            "teacher.hometown",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [9, 5, 47, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.8435468673706055, 1), ('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9807125770885532, 3), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9966172575950623, 5)]",
        "logprob": "-0.251961646959347",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.8435468673706055, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9807125770885532, 3), 'yes'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9966172575950623, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.8435468673706055, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.9807125770885532, 3), 'yes'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9966172575950623, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 431
    },
    {
        "nl": "List the most common hometown of teachers .",
        "true_sql": "select teacher.hometown group_by teacher.hometown order_by count ( teacher.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.hometown",
            "group_by",
            "teacher.hometown",
            "order_by",
            "count",
            "(",
            "teacher.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 10, 42, 11, [9, 5, 47, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9927247762680054, 1), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9984283447265625, 3), ('ORDER_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.20827476611449364, 5), ('ORDER_DESC_ASC', (('teacher', '*', 47), ('count', 3), False), 'desc', 0.9957432150840759, 6), ('ORDER_LIMIT', (('teacher', '*', 47), ('count', 3), False), 'limit_value', 0.9999505281448364, 7)]",
        "logprob": "-6.289205166436746",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9927247762680054, 1), 'yes'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9984283447265625, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9994833161717708, 5), 'no'), (('ORDER_DESC_ASC', (('teacher', '*', 47), ('count', 3), False), 'desc', 0.9957432150840759, 6), 'yes'), (('ORDER_LIMIT', (('teacher', '*', 47), ('count', 3), False), 'limit_value', 0.9999505281448364, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9927247762680054, 1), 'yes'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9984283447265625, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9994833161717708, 5), 'no'), (('ORDER_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.20827476611449364, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.0871445185634251, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('avg', 5), False, 0.08701552038124041, 5), 'no'), (('ORDER_DESC_ASC', (('teacher', '*', 47), ('count', 3), False), 'desc', 0.9957432150840759, 6), 'yes'), (('ORDER_LIMIT', (('teacher', '*', 47), ('count', 3), False), 'limit_value', 0.9999505281448364, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 432
    },
    {
        "nl": "What is the most commmon hometowns for teachers ?",
        "true_sql": "select teacher.hometown group_by teacher.hometown order_by count ( teacher.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.hometown",
            "group_by",
            "teacher.hometown",
            "order_by",
            "count",
            "(",
            "teacher.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 10, 42, 11, [9, 5, 47, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999594688415527, 1), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9769658446311951, 3), ('ORDER_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.42047779506387206, 5), ('ORDER_DESC_ASC', (('teacher', '*', 47), ('count', 3), False), 'desc', 0.9944977164268494, 6), ('ORDER_LIMIT', (('teacher', '*', 47), ('count', 3), False), 'limit_value', 0.999908447265625, 7)]",
        "logprob": "-13.540347637051221",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999594688415527, 1), 'yes'), (('WHERE_COL', ('teacher', 'age', 41), 0.6284348964691162, 3), 'no'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9769658446311951, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9920326347610633, 5), 'no'), (('ORDER_DESC_ASC', (('teacher', '*', 47), ('count', 3), False), 'desc', 0.9944977164268494, 6), 'yes'), (('ORDER_LIMIT', (('teacher', '*', 47), ('count', 3), False), 'limit_value', 0.999908447265625, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9999594688415527, 1), 'yes'), (('WHERE_COL', ('teacher', 'age', 41), 0.6284348964691162, 3), 'no'), (('WHERE_COL', ('teacher', 'name', 40), 0.27290797233581543, 3), 'no'), (('WHERE_COL', ('teacher', 'hometown', 42), 0.08824338018894196, 3), 'no'), (('WHERE_COL', ('teacher', 'teacher_id', 39), 0.006089271977543831, 3), 'no'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9769658446311951, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9920326347610633, 5), 'no'), (('ORDER_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.42047779506387206, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.09315035570903568, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('avg', 5), False, 0.08770776444217383, 5), 'no'), (('ORDER_DESC_ASC', (('teacher', '*', 47), ('count', 3), False), 'desc', 0.9944977164268494, 6), 'yes'), (('ORDER_LIMIT', (('teacher', '*', 47), ('count', 3), False), 'limit_value', 0.999908447265625, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 433
    },
    {
        "nl": "Show the hometowns shared by at least two teachers .",
        "true_sql": "select teacher.hometown group_by teacher.hometown having count ( teacher.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.hometown",
            "group_by",
            "teacher.hometown",
            "having",
            "count",
            "(",
            "teacher.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 10, 42, 18, [9, 5, 47, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9993614554405212, 1), ('GROUP_COL', ('teacher', 'hometown', 42), 0.9475314617156982, 3), ('HAV_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 0.9996241023333098, 6), ('HAV_ROOT_TERM_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 'terminal', 0.9999912977218628, 7)]",
        "logprob": "-3.531912461075872",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9993614554405212, 1), 'yes'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9475314617156982, 3), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.992124572877424, 5), 'no'), (('HAV_OP_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 0.9996241023333098, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 'terminal', 0.9999912977218628, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.9993614554405212, 1), 'yes'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.9475314617156982, 3), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.992124572877424, 5), 'no'), (('HAV_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.4194588655276218, 5), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('avg', 5), False, 0.10074799759092161, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.07630164245123922, 5), 'no'), (('HAV_OP_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 0.9996241023333098, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 'terminal', 0.9999912977218628, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 434
    },
    {
        "nl": "What are the towns from which at least two teachers come from ?",
        "true_sql": "select teacher.hometown group_by teacher.hometown having count ( teacher.* ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'teacher.*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.hometown",
            "group_by",
            "teacher.hometown",
            "having",
            "count",
            "(",
            "teacher.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 10, 42, 18, [9, 5, 47, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.05147895961999894, 1), ('GROUP_COL', ('teacher', 'hometown', 42), 0.004636468831449747, 3), ('HAV_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 0.9994648037853924, 6), ('HAV_ROOT_TERM_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 'terminal', 0.9999929666519165, 7)]",
        "logprob": "-10.642365164815995",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.845434844493866, 1), 'no'), (('GROUP_COL', ('teacher', 'teacher_id', 39), 0.985844612121582, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9738179146103462, 5), 'no'), (('HAV_OP_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 0.9994648037853924, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 'terminal', 0.9999929666519165, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.845434844493866, 1), 'no'), (('SELECT_AGG_v2', ('teacher', 'teacher_id', 39), ('none_agg', 0), False, 0.07304940372705458, 1), 'no'), (('SELECT_AGG_v2', ('teacher', 'hometown', 42), ('none_agg', 0), False, 0.05147895961999894, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('max', 1), False, 0.2265864284713585, 1), 'no'), (('GROUP_COL', ('teacher', 'teacher_id', 39), 0.985844612121582, 3), 'no'), (('GROUP_COL', ('teacher', 'name', 40), 0.005250786896795034, 3), 'no'), (('GROUP_COL', ('teacher', 'hometown', 42), 0.004636468831449747, 3), 'yes'), (('GROUP_COL', ('course_arrange', 'teacher_id', 44), 0.0040089222602546215, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9738179146103462, 5), 'no'), (('HAV_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.5629378417268566, 5), 'yes'), (('HAV_AGG_v2', (None, '*', 35), ('avg', 5), False, 0.10943791937805708, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.07980368989554124, 5), 'no'), (('HAV_OP_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 0.9994648037853924, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('teacher', '*', 47), ('count', 3), False), ('>=', 3), 'terminal', 0.9999929666519165, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 435
    },
    {
        "nl": "Show names of teachers and the courses they are arranged to teach .",
        "true_sql": "select teacher.name , course.course",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.8153403401374817, 3)]",
        "logprob": "-0.20554784674099086",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.8153403401374817, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.8153403401374817, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 436
    },
    {
        "nl": "What is the name of each teacher and what course they teach ?",
        "true_sql": "select teacher.name , course.course",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.6043659448623657, 3)]",
        "logprob": "-0.5060499990242446",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.6043659448623657, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.6043659448623657, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 437
    },
    {
        "nl": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher 's name .",
        "true_sql": "select teacher.name , course.course order_by teacher.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "order_by",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 11, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9239121675491333, 3), ('ORDER_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.2771162986755371, 5)]",
        "logprob": "-1.8048655372274869",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9239121675491333, 3), 'yes'), (('ORDER_AGG_v2', ('course', 'course', 38), ('none_agg', 0), False, 0.6960619688034058, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9239121675491333, 3), 'yes'), (('ORDER_AGG_v2', ('course', 'course', 38), ('none_agg', 0), False, 0.6960619688034058, 5), 'no'), (('ORDER_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.2771162986755371, 5), 'yes'), (('ORDER_AGG_v2', ('course_arrange', 'course_id', 43), ('none_agg', 0), False, 0.018055763095617287, 5), 'no'), (('ORDER_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.004971637390553951, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 438
    },
    {
        "nl": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher ?",
        "true_sql": "select teacher.name , course.course order_by teacher.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "order_by",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 11, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.8895992040634155, 3), ('ORDER_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.09759684652090074, 5)]",
        "logprob": "-2.499347441387056",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.8895992040634155, 3), 'yes'), (('ORDER_AGG_v2', ('course', 'course', 38), ('none_agg', 0), False, 0.9008677005767822, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.8895992040634155, 3), 'yes'), (('ORDER_AGG_v2', ('course', 'course', 38), ('none_agg', 0), False, 0.9008677005767822, 5), 'no'), (('ORDER_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.09759684652090074, 5), 'yes'), (('ORDER_AGG_v2', ('course', 'course_id', 36), ('none_agg', 0), False, 0.0014387251576408744, 5), 'no'), (('ORDER_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 3.453656245255841e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 439
    },
    {
        "nl": "Show the name of the teacher for the math course .",
        "true_sql": "select teacher.name where course.course = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], '\"Math\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "course.course",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('course', 'course', 38), 0.8681643009185791, 3), ('WHERE_OP', (('course', 'course', 38),), ('=', 0), 0.9999815225601196, 4), ('WHERE_ROOT_TERM', (('course', 'course', 38),), ('=', 0), 'terminal', 0.9999935626983643, 5)]",
        "logprob": "-0.14186248703493162",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('course', 'course', 38), 0.8681643009185791, 3), 'yes'), (('WHERE_OP', (('course', 'course', 38),), ('=', 0), 0.9999815225601196, 4), 'yes'), (('WHERE_ROOT_TERM', (('course', 'course', 38),), ('=', 0), 'terminal', 0.9999935626983643, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('course', 'course', 38), 0.8681643009185791, 3), 'yes'), (('WHERE_OP', (('course', 'course', 38),), ('=', 0), 0.9999815225601196, 4), 'yes'), (('WHERE_ROOT_TERM', (('course', 'course', 38),), ('=', 0), 'terminal', 0.9999935626983643, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 440
    },
    {
        "nl": "What are the names of the people who teach math courses ?",
        "true_sql": "select teacher.name where course.course = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], '\"Math\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "course.course",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999996423721313, 1), ('WHERE_COL', ('course', 'course', 38), 1.0, 3), ('WHERE_OP', (('course', 'course', 38),), ('=', 0), 0.9999885559082031, 4), ('WHERE_ROOT_TERM', (('course', 'course', 38),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-2.164388397690513",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('WHERE_COL', ('teacher', 'name', 40), 0.7643551230430603, 3), 'no'), (('WHERE_OP', (('course', 'course', 38),), ('=', 0), 0.9999885559082031, 4), 'yes'), (('WHERE_ROOT_TERM', (('course', 'course', 38),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('WHERE_COL', ('teacher', 'name', 40), 0.7643551230430603, 3), 'no'), (('WHERE_COL', ('course', 'course', 38), 0.11484362930059433, 3), 'yes'), (('WHERE_COL', ('course', 'course_id', 36), 0.08273998647928238, 3), 'no'), (('WHERE_COL', ('teacher', 'age', 41), 0.03280242532491684, 3), 'no'), (('WHERE_OP', (('course', 'course', 38),), ('=', 0), 0.9999885559082031, 4), 'yes'), (('WHERE_ROOT_TERM', (('course', 'course', 38),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 441
    },
    {
        "nl": "Show names of teachers and the number of courses they teach .",
        "true_sql": "select teacher.name , count ( * ) group_by teacher.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [9, 5, 35, 4], 10, 40, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6668073968028225, 3), ('GROUP_COL', ('teacher', 'name', 40), 0.78453528881073, 5)]",
        "logprob": "-1.8640273350157137",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('course', '*', 46), ('count', 3), False, 0.8305482157193204, 3), 'no'), (('GROUP_COL', ('teacher', 'name', 40), 0.78453528881073, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('course', '*', 46), ('count', 3), False, 0.8305482157193204, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6668073968028225, 3), 'yes'), (('SELECT_AGG_v2', ('teacher', '*', 47), ('count', 3), False, 0.6446269752632647, 3), 'no'), (('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('count', 3), True, 0.5134390908037645, 3), 'no'), (('GROUP_COL', ('teacher', 'name', 40), 0.78453528881073, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 442
    },
    {
        "nl": "What are the names of the teachers and how many courses do they teach ?",
        "true_sql": "select teacher.name , count ( * ) group_by teacher.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            ",",
            "teacher.name",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.4474368095397949, 3)]",
        "logprob": "-0.8102002897197876",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.4474368095397949, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.4474368095397949, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 443
    },
    {
        "nl": "Show names of teachers that teach at least two courses .",
        "true_sql": "select teacher.name group_by teacher.name having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "group_by",
            "course.*",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 46, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999997615814209, 1), ('GROUP_COL', ('course', '*', 46), 2.7522522941580974e-05, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9943737460952489, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9992657652083188, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999874830245972, 7)]",
        "logprob": "-10.52615464391289",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('GROUP_COL', ('course_arrange', 'teacher_id', 44), 0.9938919544219971, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9943737460952489, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9992657652083188, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999874830245972, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('GROUP_COL', ('course_arrange', 'teacher_id', 44), 0.9938919544219971, 3), 'no'), (('GROUP_COL', ('course', 'course', 38), 0.0038299786392599344, 3), 'no'), (('GROUP_COL', ('course', 'course_id', 36), 0.002063444582745433, 3), 'no'), (('GROUP_COL', ('teacher', 'teacher_id', 39), 0.00018430204363539815, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9943737460952489, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9992657652083188, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999874830245972, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 444
    },
    {
        "nl": "What are the names of the teachers who teach at least two courses ?",
        "true_sql": "select teacher.name group_by teacher.name having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 5, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "group_by",
            "course.*",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 46, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('GROUP_COL', ('course', '*', 46), 8.154585520969704e-05, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9940638497230363, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994972330621741, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999872446060181, 7)]",
        "logprob": "-9.440082110535782",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('GROUP_COL', ('course_arrange', 'teacher_id', 44), 0.9927400946617126, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9940638497230363, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994972330621741, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999872446060181, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('GROUP_COL', ('course_arrange', 'teacher_id', 44), 0.9927400946617126, 3), 'no'), (('GROUP_COL', ('course', 'course_id', 36), 0.005379350855946541, 3), 'no'), (('GROUP_COL', ('course', 'course', 38), 0.0013528142590075731, 3), 'no'), (('GROUP_COL', ('teacher', 'teacher_id', 39), 0.0004355107375886291, 3), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9940638497230363, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994972330621741, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999872446060181, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 445
    },
    {
        "nl": "List the names of teachers who have not been arranged to teach courses .",
        "true_sql": "select teacher.name where teacher.teacher_id not in ( select course_arrange.teacher_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 4, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.teacher_id",
            "not",
            "in",
            "(",
            "select",
            "course_arrange.teacher_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 39, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('teacher', 'teacher_id', 39), 1.0, 3), ('WHERE_OP', (('teacher', 'teacher_id', 39),), ('not in', 7), 0.9900976777213115, 4), ('WHERE_ROOT_TERM', (('teacher', 'teacher_id', 39),), ('not in', 7), 'root', 0.9999947547912598, 5), ('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.9931703805923462, 7), ('O', '##END_NESTED##', 0.9997779726982117, 8)]",
        "logprob": "-3.450927800264219",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('course_arrange', 'course_id', 43), 0.4660453796386719, 3), 'no'), (('WHERE_OP', (('teacher', 'teacher_id', 39),), ('not in', 7), 0.9900976777213115, 4), 'yes'), (('WHERE_ROOT_TERM', (('teacher', 'teacher_id', 39),), ('not in', 7), 'root', 0.9999947547912598, 5), 'yes'), (('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.9931703805923462, 7), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('course_arrange', 'course_id', 43), 0.4660453796386719, 3), 'no'), (('WHERE_COL', ('course', 'course', 38), 0.2460697442293167, 3), 'no'), (('WHERE_COL', ('course_arrange', 'teacher_id', 44), 0.19958697259426117, 3), 'no'), (('WHERE_COL', ('teacher', 'teacher_id', 39), 0.04715994372963905, 3), 'yes'), (('WHERE_OP', (('teacher', 'teacher_id', 39),), ('not in', 7), 0.9900976777213115, 4), 'yes'), (('WHERE_ROOT_TERM', (('teacher', 'teacher_id', 39),), ('not in', 7), 'root', 0.9999947547912598, 5), 'yes'), (('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.9931703805923462, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 446
    },
    {
        "nl": "What are the names of the teachers whose courses have not been arranged ?",
        "true_sql": "select teacher.name where teacher.teacher_id not in ( select course_arrange.teacher_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 4, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'course.course_id': 1, 'course.staring_date': 2, 'course.course': 3, 'teacher.teacher_id': 4, 'teacher.name': 5, 'teacher.age': 6, 'teacher.hometown': 7, 'course_arrange.course_id': 8, 'course_arrange.teacher_id': 9, 'course_arrange.grade': 10, 'course.*': 11, 'teacher.*': 12, 'course_arrange.*': 13}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "teacher.name",
            "where",
            "teacher.teacher_id",
            "not",
            "in",
            "(",
            "select",
            "course_arrange.teacher_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 6, 39, [22, 20], 5, 2, [44], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('teacher', 'name', 40), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('teacher', 'teacher_id', 39), 1.0, 3), ('WHERE_OP', (('teacher', 'teacher_id', 39),), ('not in', 7), 0.9858735586087846, 4), ('WHERE_ROOT_TERM', (('teacher', 'teacher_id', 39),), ('not in', 7), 'root', 0.9999904632568359, 5), ('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.9804777503013611, 7), ('O', '##END_NESTED##', 0.9998435974121094, 8)]",
        "logprob": "-4.108669345688498",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('course_arrange', 'course_id', 43), 0.7897221446037292, 3), 'no'), (('WHERE_OP', (('teacher', 'teacher_id', 39),), ('not in', 7), 0.9858735586087846, 4), 'yes'), (('WHERE_ROOT_TERM', (('teacher', 'teacher_id', 39),), ('not in', 7), 'root', 0.9999904632568359, 5), 'yes'), (('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.9804777503013611, 7), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('course_arrange', 'course_id', 43), 0.7897221446037292, 3), 'no'), (('WHERE_COL', ('course', 'course', 38), 0.14216578006744385, 3), 'no'), (('WHERE_COL', ('course_arrange', 'teacher_id', 44), 0.03386446833610535, 3), 'no'), (('WHERE_COL', ('teacher', 'teacher_id', 39), 0.017573747783899307, 3), 'yes'), (('WHERE_OP', (('teacher', 'teacher_id', 39),), ('not in', 7), 0.9858735586087846, 4), 'yes'), (('WHERE_ROOT_TERM', (('teacher', 'teacher_id', 39),), ('not in', 7), 'root', 0.9999904632568359, 5), 'yes'), (('SELECT_AGG_v2', ('course_arrange', 'teacher_id', 44), ('none_agg', 0), False, 0.9804777503013611, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 447
    },
    {
        "nl": "Find the total number of players .",
        "true_sql": "select count ( players.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "players.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 79, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.724897411550765, 1)]",
        "logprob": "-1.2874235900482103",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'hand', 39), ('count', 3), True, 0.9280738450515272, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'hand', 39), ('count', 3), True, 0.9280738450515272, 1), 'no'), (('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.724897411550765, 1), 'yes'), (('SELECT_AGG_v2', ('rankings', 'player_id', 76), ('count', 3), True, 0.49019440096307254, 1), 'no'), (('SELECT_AGG_v2', ('players', 'player_id', 36), ('count', 3), True, 0.32386755549448826, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 448
    },
    {
        "nl": "How many players are there ?",
        "true_sql": "select count ( players.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "players.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 79, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9765201776147876, 1)]",
        "logprob": "-0.09514389550614916",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9765201776147876, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9765201776147876, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 449
    },
    {
        "nl": "Find the total number of matches .",
        "true_sql": "select count ( matches.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 80, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.7537185570905734, 1)]",
        "logprob": "-1.1336653454481256",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9008512824621221, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9008512824621221, 1), 'no'), (('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.7537185570905734, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'score', 57), ('count', 3), False, 0.27153039911731264, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), True, 0.3486501562074078, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 450
    },
    {
        "nl": "Count the number of matches .",
        "true_sql": "select count ( matches.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 80, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.7634828775647922, 1)]",
        "logprob": "-1.0802313365774463",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.8979736682204553, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.8979736682204553, 1), 'no'), (('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.7634828775647922, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'score', 57), ('count', 3), False, 0.27132789718071415, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), True, 0.2809128973777787, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 451
    },
    {
        "nl": "List the first name and birth date of all players from the country with code USA .",
        "true_sql": "select players.first_name , players.birth_date where players.country_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.birth_date",
            "where",
            "players.country_code",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [40], 6, 41, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9999407529830933, 1), ('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.33119258284568787, 3), ('WHERE_COL', ('players', 'country_code', 41), 0.9965749382972717, 5), ('WHERE_OP', (('players', 'country_code', 41),), ('=', 0), 0.9999910593032837, 6), ('WHERE_ROOT_TERM', (('players', 'country_code', 41),), ('=', 0), 'terminal', 0.999998927116394, 7)]",
        "logprob": "-1.1087470331669675",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9999407529830933, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.6678990125656128, 3), 'no'), (('WHERE_COL', ('players', 'country_code', 41), 0.9965749382972717, 5), 'yes'), (('WHERE_OP', (('players', 'country_code', 41),), ('=', 0), 0.9999910593032837, 6), 'yes'), (('WHERE_ROOT_TERM', (('players', 'country_code', 41),), ('=', 0), 'terminal', 0.999998927116394, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9999407529830933, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.6678990125656128, 3), 'no'), (('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.33119258284568787, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.0008964181179180745, 3), 'no'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 1.1973385880992292e-05, 3), 'yes'), (('WHERE_COL', ('players', 'country_code', 41), 0.9965749382972717, 5), 'yes'), (('WHERE_OP', (('players', 'country_code', 41),), ('=', 0), 0.9999910593032837, 6), 'yes'), (('WHERE_ROOT_TERM', (('players', 'country_code', 41),), ('=', 0), 'terminal', 0.999998927116394, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 452
    },
    {
        "nl": "What are the first names and birth dates of players from the USA ?",
        "true_sql": "select players.first_name , players.birth_date where players.country_code = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.birth_date",
            "where",
            "matches.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [40], 6, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9999146461486816, 1), ('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.0034099593758583073, 3), ('WHERE_COL', ('matches', 'year', 73), 0.011968301609158516, 5), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9999523162841797, 6), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999990463256836, 7)]",
        "logprob": "-10.106797117234914",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9999146461486816, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9965898990631104, 3), 'no'), (('WHERE_COL', ('players', 'first_name', 37), 0.8827099204063416, 5), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9999523162841797, 6), 'no'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999990463256836, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9999146461486816, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9965898990631104, 3), 'no'), (('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.0034099593758583073, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 1.868374965852127e-07, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 1.5400185571223814e-09, 3), 'no'), (('WHERE_COL', ('players', 'first_name', 37), 0.8827099204063416, 5), 'no'), (('WHERE_COL', ('players', 'birth_date', 40), 0.05001061037182808, 5), 'no'), (('WHERE_COL', ('matches', 'winner_age', 63), 0.026344606652855873, 5), 'no'), (('WHERE_COL', ('players', 'last_name', 38), 0.026294870302081108, 5), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9999523162841797, 6), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('>', 1), 3.6548539355862886e-05, 6), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('!=', 5), 5.069325652584666e-06, 6), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('like', 6), 2.3288396278076107e-06, 6), 'no'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999990463256836, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 453
    },
    {
        "nl": "Find the average age of losers and winners of all matches .",
        "true_sql": "select avg ( matches.loser_age ) , avg ( matches.winner_age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 9, False], None]], [5, [0, [0, 28, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "matches.winner_age",
            ")",
            ",",
            "avg",
            "(",
            "matches.loser_age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 63, 4], 8, [17, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_age', 63), ('avg', 5), False, 0.9971271875621452, 1), ('SELECT_AGG_v2', ('matches', 'loser_age', 44), ('avg', 5), False, 0.8903931137113679, 3)]",
        "logprob": "-0.47633076951325515",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_age', 63), ('avg', 5), False, 0.9971271875621452, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_age', 44), ('avg', 5), False, 0.8903931137113679, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_age', 63), ('avg', 5), False, 0.9971271875621452, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_age', 44), ('avg', 5), False, 0.8903931137113679, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 454
    },
    {
        "nl": "What are the average ages of losers and winners across matches ?",
        "true_sql": "select avg ( matches.loser_age ) , avg ( matches.winner_age )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 9, False], None]], [5, [0, [0, 28, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "matches.winner_age",
            ")",
            ",",
            "avg",
            "(",
            "matches.loser_age",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 63, 4], 8, [17, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_age', 63), ('avg', 5), False, 0.9961288626381416, 1), ('SELECT_AGG_v2', ('matches', 'loser_age', 44), ('avg', 5), False, 0.9099941070154196, 3)]",
        "logprob": "-0.39353646800161934",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_age', 63), ('avg', 5), False, 0.9961288626381416, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_age', 44), ('avg', 5), False, 0.9099941070154196, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_age', 63), ('avg', 5), False, 0.9961288626381416, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_age', 44), ('avg', 5), False, 0.9099941070154196, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 455
    },
    {
        "nl": "Find the average rank of winners in all matches .",
        "true_sql": "select avg ( matches.winner_rank )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "matches.winner_rank",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 70, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('avg', 5), False, 0.30341376525365865, 1)]",
        "logprob": "-4.77208821697164",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('avg', 5), False, 0.9724347407206472, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('avg', 5), False, 0.9724347407206472, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('avg', 5), False, 0.5097064947225866, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_rank', 51), ('avg', 5), False, 0.4107454824515937, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('avg', 5), False, 0.30341376525365865, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 456
    },
    {
        "nl": "What is the average rank for winners in all matches ?",
        "true_sql": "select avg ( matches.winner_rank )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "matches.winner_rank",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 70, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('avg', 5), False, 0.6613630394467104, 1)]",
        "logprob": "-1.6541248074751564",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('avg', 5), False, 0.9363103395294147, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('avg', 5), False, 0.9363103395294147, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('avg', 5), False, 0.6613630394467104, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('avg', 5), False, 0.43594371130304177, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_rank', 51), ('avg', 5), False, 0.23336569389364564, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 457
    },
    {
        "nl": "Find the highest rank of losers in all matches .",
        "true_sql": "select min ( matches.loser_rank )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 16, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "matches.loser_rank",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 51, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'loser_rank', 51), ('min', 2), False, 0.5113468483221385, 1)]",
        "logprob": "-2.9086562212905456",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('min', 2), False, 0.8659342208760745, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('min', 2), False, 0.8659342208760745, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('min', 2), False, 0.634712980255443, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('max', 1), False, 0.6137202746857862, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_rank', 51), ('min', 2), False, 0.5113468483221385, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 458
    },
    {
        "nl": "What is the best rank of losers across all matches ?",
        "true_sql": "select min ( matches.loser_rank )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 16, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "matches.winner_rank_points",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 71, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('min', 2), False, 0.23762608895804133, 1)]",
        "logprob": "-5.862352940806174",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('max', 1), False, 0.8269008158749676, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'loser_rank_points', 52), ('max', 1), False, 0.8269008158749676, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('max', 1), False, 0.8188584392385404, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_rank', 51), ('max', 1), False, 0.47099551529968975, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('max', 1), False, 0.39177447410068805, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 459
    },
    {
        "nl": "find the number of distinct country codes of all players .",
        "true_sql": "select count ( distinct players.country_code )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 6, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "players.country_code",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('count', 3), True, 0.9999925136410199, 1)]",
        "logprob": "-4.124663911603395e-05",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'country_code', 41), ('count', 3), True, 0.9999925136410199, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'country_code', 41), ('count', 3), True, 0.9999925136410199, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 460
    },
    {
        "nl": "How many distinct countries do players come from ?",
        "true_sql": "select count ( distinct players.country_code )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 6, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "players.country_code",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('count', 3), True, 0.9997168144468903, 1)]",
        "logprob": "-0.0014565410494887456",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'country_code', 41), ('count', 3), True, 0.9997168144468903, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'country_code', 41), ('count', 3), True, 0.9997168144468903, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 461
    },
    {
        "nl": "Find the number of distinct name of losers .",
        "true_sql": "select count ( distinct matches.loser_name )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 15, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "matches.loser_name",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 50, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('count', 3), True, 0.7886494621554963, 1)]",
        "logprob": "-1.1871823066858274",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.8912833855636222, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.8912833855636222, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('count', 3), True, 0.7886494621554963, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('count', 3), True, 0.6663146952508595, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('count', 3), True, 0.2330676091461169, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 462
    },
    {
        "nl": "How many different loser names are there ?",
        "true_sql": "select count ( distinct matches.loser_name )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 15, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "matches.loser_name",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 50, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('count', 3), True, 0.7862959011222671, 1)]",
        "logprob": "-1.2021313261696862",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.9111305776254103, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.9111305776254103, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('count', 3), True, 0.7862959011222671, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('count', 3), True, 0.5889634413925725, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('count', 3), True, 0.21164057984451196, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 463
    },
    {
        "nl": "Find the name of tourney that has more than 10 matches .",
        "true_sql": "select matches.tourney_name group_by matches.tourney_name having count ( matches.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 27, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 27, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.tourney_name",
            "group_by",
            "matches.tourney_name",
            "having",
            "count",
            "(",
            "matches.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [62], 10, 62, 18, [9, 5, 80, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.9997891783714294, 1), ('GROUP_COL', ('matches', 'tourney_name', 62), 3.055758043046808e-06, 3), ('HAV_AGG_v2', ('matches', '*', 80), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 0.9998829364776611, 6), ('HAV_ROOT_TERM_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 'terminal', 0.9898958206176758, 7)]",
        "logprob": "-14.566985260823786",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.9997891783714294, 1), 'yes'), (('GROUP_COL', ('matches', 'tourney_id', 60), 0.9999901056289673, 3), 'no'), (('HAV_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.9245199514255337, 5), 'no'), (('HAV_OP_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 0.9998829364776611, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 'terminal', 0.9898958206176758, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.9997891783714294, 1), 'yes'), (('GROUP_COL', ('matches', 'tourney_id', 60), 0.9999901056289673, 3), 'no'), (('GROUP_COL', ('matches', 'round', 56), 5.974057785351761e-06, 3), 'no'), (('GROUP_COL', ('matches', 'tourney_name', 62), 3.055758043046808e-06, 3), 'yes'), (('GROUP_COL', ('matches', 'winner_hand', 65), 4.203841967864719e-07, 3), 'no'), (('HAV_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.9245199514255337, 5), 'no'), (('HAV_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.6286175646338226, 5), 'yes'), (('HAV_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.466769077564795, 5), 'no'), (('HAV_AGG_v2', ('matches', 'tourney_id', 60), ('count', 3), False, 0.4664674890641355, 5), 'no'), (('HAV_OP_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 0.9998829364776611, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 'terminal', 0.9898958206176758, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 464
    },
    {
        "nl": "What are the names of tournaments that have more than 10 matches ?",
        "true_sql": "select matches.tourney_name group_by matches.tourney_name having count ( matches.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 27, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 27, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.tourney_name",
            "group_by",
            "matches.winner_seed",
            "having",
            "count",
            "(",
            "matches.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [62], 10, 72, 18, [9, 5, 80, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.0952906683087349, 1), ('GROUP_COL', ('matches', 'winner_seed', 72), 0.0020800831262022257, 3), ('HAV_AGG_v2', ('matches', '*', 80), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 0.9999212026596069, 6), ('HAV_ROOT_TERM_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 'terminal', 0.9876553416252136, 7)]",
        "logprob": "-10.41200656606644",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.8597049713134766, 1), 'no'), (('GROUP_COL', ('matches', 'round', 56), 0.9635715484619141, 3), 'no'), (('HAV_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.9294157844825532, 5), 'no'), (('HAV_OP_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 0.9999212026596069, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 'terminal', 0.9876553416252136, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.8597049713134766, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.0952906683087349, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.04078491777181626, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'round', 56), ('none_agg', 0), False, 0.0024234270676970486, 1), 'no'), (('GROUP_COL', ('matches', 'round', 56), 0.9635715484619141, 3), 'no'), (('GROUP_COL', ('matches', 'winner_hand', 65), 0.0214746855199337, 3), 'no'), (('GROUP_COL', ('matches', 'winner_name', 69), 0.00436436990275979, 3), 'no'), (('GROUP_COL', ('matches', 'match_num', 54), 0.0034368112683296204, 3), 'no'), (('HAV_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.9294157844825532, 5), 'no'), (('HAV_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.6263103167827452, 5), 'yes'), (('HAV_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.5165841149542826, 5), 'no'), (('HAV_AGG_v2', ('matches', 'score', 57), ('count', 3), False, 0.3100928248280397, 5), 'no'), (('HAV_OP_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 0.9999212026596069, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('matches', '*', 80), ('count', 3), False), ('>', 1), 'terminal', 0.9876553416252136, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 465
    },
    {
        "nl": "List the names of all winners who played in both 2013 and 2016 .",
        "true_sql": "select matches.winner_name where matches.year = value intersect select matches.winner_name where matches.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2016.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            "where",
            "matches.year",
            "=",
            "value",
            "intersect",
            "select",
            "matches.winner_name",
            "where",
            "matches.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 6, 73, [7], 3, 23, 2, [69], 6, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9990553259849548, 1), ('WHERE_COL', ('matches', 'year', 73), 1.0, 3), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9997137188911438, 4), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999977350234985, 5), ('IUEN_v2', ('intersect', 1), 0.9948785305023193, 6), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.986454427242279, 8), ('WHERE_COL', ('matches', 'year', 73), 0.8917756676673889, 10), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.999976396560669, 11), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999984502792358, 12)]",
        "logprob": "-3.0222733384108458",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9990553259849548, 1), 'yes'), (('WHERE_COL', ('players', 'first_name', 37), 0.9433491826057434, 3), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9997137188911438, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9948785305023193, 6), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.986454427242279, 8), 'yes'), (('WHERE_COL', ('matches', 'year', 73), 0.8917756676673889, 10), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.999976396560669, 11), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999984502792358, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9990553259849548, 1), 'yes'), (('WHERE_COL', ('players', 'first_name', 37), 0.9433491826057434, 3), 'no'), (('WHERE_COL', ('matches', 'year', 73), 0.055718597024679184, 3), 'yes'), (('WHERE_COL', ('matches', 'winner_age', 63), 0.00042301040957681835, 3), 'no'), (('WHERE_COL', ('matches', 'winner_name', 69), 0.0004054360033478588, 3), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9997137188911438, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9948785305023193, 6), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.986454427242279, 8), 'yes'), (('WHERE_COL', ('matches', 'year', 73), 0.8917756676673889, 10), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.999976396560669, 11), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999984502792358, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 466
    },
    {
        "nl": "What are the names of players who won in both 2013 and 2016 ?",
        "true_sql": "select matches.winner_name where matches.year = value intersect select matches.winner_name where matches.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2016.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            "where",
            "matches.year",
            "=",
            "value",
            "intersect",
            "select",
            "matches.winner_name",
            "where",
            "matches.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 6, 73, [7], 3, 23, 2, [69], 6, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.0043824482709169405, 1), ('WHERE_COL', ('matches', 'year', 73), 0.029132168740034103, 3), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9982263445854187, 4), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999979734420776, 5), ('IUEN_v2', ('intersect', 1), 0.9976261258125305, 6), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.04125447571277619, 8), ('WHERE_COL', ('matches', 'year', 73), 1.0, 10), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9998923540115356, 11), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999986886978149, 12)]",
        "logprob": "-13.674306473257671",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9083676338195801, 1), 'no'), (('WHERE_COL', ('matches', 'winner_name', 69), 0.72291499376297, 3), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9982263445854187, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999979734420776, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9976261258125305, 6), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.4722544848918915, 8), 'no'), (('WHERE_COL', ('matches', 'loser_name', 50), 0.5610184073448181, 10), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9998923540115356, 11), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999986886978149, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9083676338195801, 1), 'no'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.08393654972314833, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.0043824482709169405, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.002903350396081806, 1), 'no'), (('WHERE_COL', ('matches', 'winner_name', 69), 0.72291499376297, 3), 'no'), (('WHERE_COL', ('players', 'first_name', 37), 0.2278100699186325, 3), 'no'), (('WHERE_COL', ('matches', 'year', 73), 0.029132168740034103, 3), 'yes'), (('WHERE_COL', ('matches', 'loser_name', 50), 0.014892359264194965, 3), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9982263445854187, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999979734420776, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9976261258125305, 6), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.4722544848918915, 8), 'no'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.45011213421821594, 8), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.04125447571277619, 8), 'yes'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.025463428348302838, 8), 'no'), (('WHERE_COL', ('matches', 'loser_name', 50), 0.5610184073448181, 10), 'no'), (('WHERE_COL', ('matches', 'year', 73), 0.21965523064136505, 10), 'yes'), (('WHERE_COL', ('matches', 'winner_name', 69), 0.13777880370616913, 10), 'no'), (('WHERE_COL', ('matches', 'winner_age', 63), 0.06479016691446304, 10), 'no'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9998923540115356, 11), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999986886978149, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 467
    },
    {
        "nl": "List the number of all matches who played in years of 2013 or 2016 .",
        "true_sql": "select count ( matches.* ) where matches.year = value or matches.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None], 'or', [False, 2, [0, [0, 38, False], None], 2016.0, None]], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.loser_ht",
            ")",
            "where",
            "matches.year",
            "=",
            "value",
            "or",
            "matches.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 6, 73, [7], 3, 25, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'loser_ht', 47), ('count', 3), False, 0.3835635256872141, 1), ('WHERE_COL', ('matches', 'year', 73), 0.9999775886535645, 3), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9975503087043762, 4), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('matches', 'year', 73), 0.9999951124191284, 7), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9856459498405457, 8), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999948740005493, 9)]",
        "logprob": "-3.995379984256672",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9122634922367626, 1), 'no'), (('WHERE_COL', ('matches', 'year', 73), 0.9999775886535645, 3), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9975503087043762, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('matches', 'year', 73), 0.9999951124191284, 7), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9856459498405457, 8), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999948740005493, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9122634922367626, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.5681739162755908, 1), 'no'), (('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.44272624612594413, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'score', 57), ('count', 3), False, 0.4071131328271803, 1), 'no'), (('WHERE_COL', ('matches', 'year', 73), 0.9999775886535645, 3), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9975503087043762, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('matches', 'year', 73), 0.9999951124191284, 7), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9856459498405457, 8), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999948740005493, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 468
    },
    {
        "nl": "How many matches were played in 2013 or 2016 ?",
        "true_sql": "select count ( matches.* ) where matches.year = value or matches.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None], 'or', [False, 2, [0, [0, 38, False], None], 2016.0, None]], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "matches.year",
            "=",
            "value",
            "or",
            "matches.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 73, [7], 3, 25, 73, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4442904796053308, 1), ('WHERE_COL', ('matches', 'year', 73), 0.999940037727356, 3), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9998350143432617, 4), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999984502792358, 5), ('WHERE_COL', ('matches', 'year', 73), 0.9999914169311523, 7), ('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9977120161056519, 8), ('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999969005584717, 9)]",
        "logprob": "-3.5977327799613574",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.7941947590595778, 1), 'no'), (('WHERE_COL', ('matches', 'year', 73), 0.999940037727356, 3), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9998350143432617, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes'), (('WHERE_COL', ('matches', 'year', 73), 0.9999914169311523, 7), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9977120161056519, 8), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999969005584717, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.7941947590595778, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_ht', 47), ('count', 3), False, 0.6136856291573912, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'tourney_id', 60), ('count', 3), False, 0.5079034259412297, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'round', 56), ('count', 3), True, 0.5349409468255298, 1), 'no'), (('WHERE_COL', ('matches', 'year', 73), 0.999940037727356, 3), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9998350143432617, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes'), (('WHERE_COL', ('matches', 'year', 73), 0.9999914169311523, 7), 'yes'), (('WHERE_OP', (('matches', 'year', 73),), ('=', 0), 0.9977120161056519, 8), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'year', 73),), ('=', 0), 'terminal', 0.9999969005584717, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 469
    },
    {
        "nl": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open ?",
        "true_sql": "select players.country_code , players.first_name where matches.tourney_name = value intersect select players.country_code , players.first_name where matches.tourney_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"Australian Open\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"WTA Championships\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.country_code",
            ",",
            "players.first_name",
            "where",
            "matches.tourney_name",
            "=",
            "value",
            "intersect",
            "select",
            "players.country_code",
            ",",
            "players.first_name",
            "where",
            "matches.tourney_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [37], 6, 62, [7], 3, 23, 2, [41], 8, [37], 6, 62, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9998743534088135, 1), ('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.0024442099966108803, 3), ('WHERE_COL', ('matches', 'tourney_name', 62), 0.0011189751094207168, 5), ('WHERE_OP', (('matches', 'tourney_name', 62),), ('=', 0), 0.9999755620956421, 6), ('WHERE_ROOT_TERM', (('matches', 'tourney_name', 62),), ('=', 0), 'terminal', 0.9999990463256836, 7), ('IUEN_v2', ('intersect', 1), 0.6589975953102112, 8), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999887228012085, 10), ('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 8.121683640638361e-05, 12), ('WHERE_COL', ('matches', 'tourney_name', 62), 1.0, 14), ('WHERE_OP', (('matches', 'tourney_name', 62),), ('=', 0), 0.9999924898147583, 15), ('WHERE_ROOT_TERM', (('matches', 'tourney_name', 62),), ('=', 0), 'terminal', 0.9999996423721313, 16)]",
        "logprob": "-26.246851498789475",
        "q_counter": 11,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9998743534088135, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9971573352813721, 3), 'no'), (('WHERE_COL', ('players', 'first_name', 37), 0.9876254200935364, 5), 'no'), (('WHERE_OP', (('matches', 'tourney_name', 62),), ('=', 0), 0.9999755620956421, 6), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'tourney_name', 62),), ('=', 0), 'terminal', 0.9999990463256836, 7), 'yes'), (('IUEN_v2', ('intersect', 1), 0.6589975953102112, 8), 'yes'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999887228012085, 10), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9979520440101624, 12), 'no'), (('WHERE_COL', ('players', 'first_name', 37), 0.7873428463935852, 14), 'no'), (('WHERE_OP', (('matches', 'tourney_name', 62),), ('=', 0), 0.9999924898147583, 15), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'tourney_name', 62),), ('=', 0), 'terminal', 0.9999996423721313, 16), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9998743534088135, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9971573352813721, 3), 'no'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.0024442099966108803, 3), 'yes'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.0002156303235096857, 3), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.00010984243272105235, 3), 'no'), (('WHERE_COL', ('players', 'first_name', 37), 0.9876254200935364, 5), 'no'), (('WHERE_COL', ('matches', 'winner_name', 69), 0.011200967244803905, 5), 'no'), (('WHERE_COL', ('matches', 'tourney_name', 62), 0.0011189751094207168, 5), 'yes'), (('WHERE_COL', ('matches', 'loser_name', 50), 3.994395228801295e-05, 5), 'no'), (('WHERE_OP', (('matches', 'tourney_name', 62),), ('=', 0), 0.9999755620956421, 6), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'tourney_name', 62),), ('=', 0), 'terminal', 0.9999990463256836, 7), 'yes'), (('IUEN_v2', ('intersect', 1), 0.6589975953102112, 8), 'yes'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999887228012085, 10), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9979520440101624, 12), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.0017564323497936136, 12), 'no'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.00015929259825497855, 12), 'no'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 8.121683640638361e-05, 12), 'yes'), (('WHERE_COL', ('players', 'first_name', 37), 0.7873428463935852, 14), 'no'), (('WHERE_COL', ('matches', 'winner_name', 69), 0.1541006714105606, 14), 'no'), (('WHERE_COL', ('matches', 'tourney_name', 62), 0.028306158259510994, 14), 'yes'), (('WHERE_COL', ('matches', 'loser_name', 50), 0.0280612725764513, 14), 'no'), (('WHERE_OP', (('matches', 'tourney_name', 62),), ('=', 0), 0.9999924898147583, 15), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'tourney_name', 62),), ('=', 0), 'terminal', 0.9999996423721313, 16), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 470
    },
    {
        "nl": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open ?",
        "true_sql": "select players.country_code , players.first_name where matches.tourney_name = value intersect select players.country_code , players.first_name where matches.tourney_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"Australian Open\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"WTA Championships\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            "where",
            "matches.winner_id",
            "=",
            "value",
            "and",
            "matches.winner_hand",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [41], 6, 67, [7], 3, 16, 65, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9946139454841614, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.0010044070659205315, 3), ('WHERE_COL', ('matches', 'winner_id', 67), 0.010337293148040771, 5), ('WHERE_OP', (('matches', 'winner_id', 67),), ('=', 0), 0.9992613196372986, 6), ('WHERE_ROOT_TERM', (('matches', 'winner_id', 67),), ('=', 0), 'terminal', 0.9999982118606567, 7), ('WHERE_COL', ('matches', 'winner_hand', 65), 0.44587093591690063, 9), ('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.982223391532898, 10), ('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.9999895095825195, 11)]",
        "logprob": "-12.674813829264727",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9946139454841614, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9986128807067871, 3), 'no'), (('WHERE_COL', ('players', 'first_name', 37), 0.4407714605331421, 5), 'no'), (('WHERE_OP', (('matches', 'winner_id', 67),), ('=', 0), 0.9992613196372986, 6), 'no'), (('WHERE_ROOT_TERM', (('matches', 'winner_id', 67),), ('=', 0), 'terminal', 0.9999982118606567, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9946139454841614, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9986128807067871, 3), 'no'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.0010044070659205315, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.00028092868160456424, 3), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 6.593381112907087e-05, 3), 'no'), (('WHERE_COL', ('players', 'first_name', 37), 0.4407714605331421, 5), 'no'), (('WHERE_COL', ('matches', 'winner_name', 69), 0.3938259184360504, 5), 'no'), (('WHERE_COL', ('matches', 'winner_rank', 70), 0.056958526372909546, 5), 'no'), (('WHERE_COL', ('rankings', 'ranking', 75), 0.05398125201463699, 5), 'no'), (('WHERE_OP', (('matches', 'winner_id', 67),), ('=', 0), 0.9992613196372986, 6), 'no'), (('WHERE_OP', (('matches', 'winner_id', 67),), ('>', 1), 0.0005308104446157813, 6), 'no'), (('WHERE_OP', (('matches', 'winner_id', 67),), ('in', 8), 7.400893809972331e-05, 6), 'no'), (('WHERE_OP', (('matches', 'winner_id', 67),), ('like', 6), 4.420354525791481e-05, 6), 'no'), (('WHERE_ROOT_TERM', (('matches', 'winner_id', 67),), ('=', 0), 'terminal', 0.9999982118606567, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 471
    },
    {
        "nl": "Find the first name and country code of the oldest player .",
        "true_sql": "select players.first_name , players.country_code order_by players.birth_date limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            "order_by",
            "players.birth_date",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [41], 11, [40], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9758445024490356, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.29494765400886536, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.867062509059906, 5), ('ORDER_LIMIT', (('players', 'birth_date', 40), ('none_agg', 0), False), 'limit_value', 0.8124107122421265, 6)]",
        "logprob": "-1.6033525067081078",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9758445024490356, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.7050436735153198, 3), 'no'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.867062509059906, 5), 'yes'), (('ORDER_LIMIT', (('players', 'birth_date', 40), ('none_agg', 0), False), 'limit_value', 0.8124107122421265, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9758445024490356, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.7050436735153198, 3), 'no'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.29494765400886536, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 7.961340998008383e-06, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 4.584354940107007e-07, 3), 'no'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.867062509059906, 5), 'yes'), (('ORDER_LIMIT', (('players', 'birth_date', 40), ('none_agg', 0), False), 'limit_value', 0.8124107122421265, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 472
    },
    {
        "nl": "What is the first name and country code of the oldest player ?",
        "true_sql": "select players.first_name , players.country_code order_by players.birth_date limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            "order_by",
            "players.birth_date",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [41], 11, [40], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9893660545349121, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.28197231888771057, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.8898909687995911, 5), ('ORDER_LIMIT', (('players', 'birth_date', 40), ('none_agg', 0), False), 'limit_value', 0.7487341165542603, 6)]",
        "logprob": "-1.6846276544404595",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9893660545349121, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.7180241346359253, 3), 'no'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.8898909687995911, 5), 'yes'), (('ORDER_LIMIT', (('players', 'birth_date', 40), ('none_agg', 0), False), 'limit_value', 0.7487341165542603, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9893660545349121, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.7180241346359253, 3), 'no'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.28197231888771057, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 3.238235649405399e-06, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 2.09010508456231e-07, 3), 'no'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.8898909687995911, 5), 'yes'), (('ORDER_LIMIT', (('players', 'birth_date', 40), ('none_agg', 0), False), 'limit_value', 0.7487341165542603, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 473
    },
    {
        "nl": "List the first and last name of all players in the order of birth date .",
        "true_sql": "select players.first_name , players.last_name order_by players.birth_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "order_by",
            "players.birth_date",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 11, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9998108744621277, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9999790191650391, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.9902591705322266, 5)]",
        "logprob": "-0.4337239849654386",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9998108744621277, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9999790191650391, 3), 'yes'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.9902591705322266, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9998108744621277, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9999790191650391, 3), 'yes'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.9902591705322266, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 474
    },
    {
        "nl": "What are the full names of all players , sorted by birth date ?",
        "true_sql": "select players.first_name , players.last_name order_by players.birth_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "order_by",
            "players.birth_date",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 11, [40], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9911379218101501, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9526695609092712, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.9982544779777527, 5), ('ORDER_DESC_ASC', (('players', 'birth_date', 40), ('none_agg', 0), False), 'asc', 0.935751736164093, 6)]",
        "logprob": "-0.13275043451321641",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9911379218101501, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9526695609092712, 3), 'yes'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.9982544779777527, 5), 'yes'), (('ORDER_DESC_ASC', (('players', 'birth_date', 40), ('none_agg', 0), False), 'asc', 0.935751736164093, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9911379218101501, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9526695609092712, 3), 'yes'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.9982544779777527, 5), 'yes'), (('ORDER_DESC_ASC', (('players', 'birth_date', 40), ('none_agg', 0), False), 'asc', 0.935751736164093, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 475
    },
    {
        "nl": "List the first and last name of all players who are left / L hand in the order of birth date .",
        "true_sql": "select players.first_name , players.last_name where players.hand = value order_by players.birth_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"L\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "where",
            "players.hand",
            "=",
            "value",
            "order_by",
            "players.birth_date",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 39, [7], 3, 11, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9714116454124451, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9567880630493164, 3), ('WHERE_COL', ('players', 'hand', 39), 0.8777501583099365, 5), ('WHERE_OP', (('players', 'hand', 39),), ('=', 0), 0.9999923706054688, 6), ('WHERE_ROOT_TERM', (('players', 'hand', 39),), ('=', 0), 'terminal', 0.9999957084655762, 7), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.16633620858192447, 9)]",
        "logprob": "-2.0020396054075786",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9714116454124451, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9567880630493164, 3), 'yes'), (('WHERE_COL', ('players', 'hand', 39), 0.8777501583099365, 5), 'yes'), (('WHERE_OP', (('players', 'hand', 39),), ('=', 0), 0.9999923706054688, 6), 'yes'), (('WHERE_ROOT_TERM', (('players', 'hand', 39),), ('=', 0), 'terminal', 0.9999957084655762, 7), 'yes'), (('ORDER_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8238940834999084, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9714116454124451, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9567880630493164, 3), 'yes'), (('WHERE_COL', ('players', 'hand', 39), 0.8777501583099365, 5), 'yes'), (('WHERE_OP', (('players', 'hand', 39),), ('=', 0), 0.9999923706054688, 6), 'yes'), (('WHERE_ROOT_TERM', (('players', 'hand', 39),), ('=', 0), 'terminal', 0.9999957084655762, 7), 'yes'), (('ORDER_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8238940834999084, 9), 'no'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.16633620858192447, 9), 'yes'), (('ORDER_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.009615162387490273, 9), 'no'), (('ORDER_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 7.703874871367594e-05, 9), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 476
    },
    {
        "nl": "What are the full names of all left handed players , in order of birth date ?",
        "true_sql": "select players.first_name , players.last_name where players.hand = value order_by players.birth_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"L\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.last_name",
            "order_by",
            "players.birth_date",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 11, [40], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9340649247169495, 1), ('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.890475332736969, 3), ('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.995431661605835, 5), ('ORDER_DESC_ASC', (('players', 'birth_date', 40), ('none_agg', 0), False), 'asc', 0.9261976480484009, 6)]",
        "logprob": "-0.2748238926834102",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9340649247169495, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.890475332736969, 3), 'yes'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.995431661605835, 5), 'yes'), (('ORDER_DESC_ASC', (('players', 'birth_date', 40), ('none_agg', 0), False), 'asc', 0.9261976480484009, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9340649247169495, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.890475332736969, 3), 'yes'), (('ORDER_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.995431661605835, 5), 'yes'), (('ORDER_DESC_ASC', (('players', 'birth_date', 40), ('none_agg', 0), False), 'asc', 0.9261976480484009, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 477
    },
    {
        "nl": "Find the first name and country code of the player who did the most number of tours .",
        "true_sql": "select players.country_code , players.first_name order_by rankings.tours desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            "order_by",
            "rankings.tours",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [41], 11, [78], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9543179869651794, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.10869596153497697, 3), ('ORDER_AGG_v2', ('rankings', 'tours', 78), ('none_agg', 0), False, 0.07590601593255998, 5)]",
        "logprob": "-25.846749817613535",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9543179869651794, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8589448928833008, 3), 'no'), (('GROUP_COL', ('players', 'country_code', 41), 0.9862025380134583, 5), 'no'), (('ORDER_AGG_v2', ('players', '*', 79), ('none_agg', 0), False, 0.7593668103218079, 5), 'no'), (('GROUP_COL', ('players', 'country_code', 41), 0.9998447895050049, 7), 'no'), (('IUEN_v2', ('union', 2), 5.254732968751341e-05, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9543179869651794, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8589448928833008, 3), 'no'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.10869596153497697, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.022662600502371788, 3), 'yes'), (('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.30058725252616425, 3), 'no'), (('GROUP_COL', ('players', 'country_code', 41), 0.9862025380134583, 5), 'no'), (('GROUP_COL', ('matches', 'tourney_id', 60), 0.01373777911067009, 5), 'no'), (('GROUP_COL', ('rankings', 'tours', 78), 3.278401345596649e-05, 5), 'no'), (('GROUP_COL', ('matches', 'tourney_name', 62), 2.521825081203133e-05, 5), 'no'), (('ORDER_AGG_v2', ('players', '*', 79), ('none_agg', 0), False, 0.7593668103218079, 5), 'no'), (('ORDER_AGG_v2', ('matches', 'tourney_id', 60), ('none_agg', 0), False, 0.08479508012533188, 5), 'no'), (('ORDER_AGG_v2', ('rankings', 'tours', 78), ('none_agg', 0), False, 0.07590601593255998, 5), 'yes'), (('ORDER_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.028802240267395973, 5), 'no'), (('GROUP_COL', ('players', 'country_code', 41), 0.9998447895050049, 7), 'no'), (('GROUP_COL', ('matches', 'tourney_id', 60), 0.00012380177213344723, 7), 'no'), (('GROUP_COL', ('matches', 'tourney_name', 62), 3.006215047207661e-05, 7), 'no'), (('GROUP_COL', ('rankings', 'tours', 78), 1.1149871852467186e-06, 7), 'no'), (('IUEN_v2', ('union', 2), 5.254732968751341e-05, 6), 'no'), (('IUEN_v2', ('intersect', 1), 5.503476586454781e-06, 6), 'no'), (('IUEN_v2', ('except', 3), 6.5814583649626e-07, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 478
    },
    {
        "nl": "What is the first name and country code of the player with the most tours ?",
        "true_sql": "select players.country_code , players.first_name order_by rankings.tours desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            "order_by",
            "rankings.tours",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [41], 11, [78], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9955381751060486, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.12900952994823453, 3), ('ORDER_AGG_v2', ('rankings', 'tours', 78), ('none_agg', 0), False, 0.055313233286142356, 5), ('ORDER_DESC_ASC', (('rankings', 'tours', 78), ('none_agg', 0), False), 'desc', 0.9718326926231384, 6), ('ORDER_LIMIT', (('rankings', 'tours', 78), ('none_agg', 0), False), 'limit_value', 0.9999473094940186, 7)]",
        "logprob": "-8.527493228606849",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9955381751060486, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8699855804443359, 3), 'no'), (('GROUP_COL', ('players', 'country_code', 41), 0.5690027475357056, 5), 'no'), (('ORDER_AGG_v2', ('players', '*', 79), ('none_agg', 0), False, 0.499453067779541, 5), 'no'), (('ORDER_DESC_ASC', (('rankings', 'tours', 78), ('none_agg', 0), False), 'desc', 0.9718326926231384, 6), 'yes'), (('ORDER_LIMIT', (('rankings', 'tours', 78), ('none_agg', 0), False), 'limit_value', 0.9999473094940186, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9955381751060486, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.8699855804443359, 3), 'no'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.12900952994823453, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.0009394598309881983, 3), 'yes'), (('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.07688955911137962, 3), 'no'), (('GROUP_COL', ('players', 'country_code', 41), 0.5690027475357056, 5), 'no'), (('GROUP_COL', ('matches', 'tourney_id', 60), 0.4307290017604828, 5), 'no'), (('GROUP_COL', ('rankings', 'tours', 78), 0.0001555128546897322, 5), 'no'), (('GROUP_COL', ('matches', 'tourney_name', 62), 8.453119517071173e-05, 5), 'no'), (('ORDER_AGG_v2', ('players', '*', 79), ('none_agg', 0), False, 0.499453067779541, 5), 'no'), (('ORDER_AGG_v2', ('matches', 'tourney_id', 60), ('none_agg', 0), False, 0.3416960835456848, 5), 'no'), (('ORDER_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.05755051597952842, 5), 'no'), (('ORDER_AGG_v2', ('rankings', 'tours', 78), ('none_agg', 0), False, 0.055313233286142356, 5), 'yes'), (('ORDER_DESC_ASC', (('rankings', 'tours', 78), ('none_agg', 0), False), 'desc', 0.9718326926231384, 6), 'yes'), (('ORDER_LIMIT', (('rankings', 'tours', 78), ('none_agg', 0), False), 'limit_value', 0.9999473094940186, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 479
    },
    {
        "nl": "Find the year that has the most number of matches .",
        "true_sql": "select matches.year group_by matches.year order_by count ( matches.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 38, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.year",
            "group_by",
            "matches.year",
            "order_by",
            "count",
            "(",
            "matches.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [73], 10, 73, 11, [9, 5, 80, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9268631339073181, 1), ('GROUP_COL', ('matches', 'year', 73), 0.9999984502792358, 3), ('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.995969762144161, 5), ('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.9972678422927856, 6), ('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9998999834060669, 7)]",
        "logprob": "-0.1877806443703917",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9268631339073181, 1), 'yes'), (('GROUP_COL', ('matches', 'year', 73), 0.9999984502792358, 3), 'yes'), (('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.995969762144161, 5), 'yes'), (('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.9972678422927856, 6), 'yes'), (('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9998999834060669, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9268631339073181, 1), 'yes'), (('GROUP_COL', ('matches', 'year', 73), 0.9999984502792358, 3), 'yes'), (('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.995969762144161, 5), 'yes'), (('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.9972678422927856, 6), 'yes'), (('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9998999834060669, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 480
    },
    {
        "nl": "Which year had the most matches ?",
        "true_sql": "select matches.year group_by matches.year order_by count ( matches.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 38, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.year",
            "group_by",
            "matches.year",
            "order_by",
            "count",
            "(",
            "matches.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [73], 10, 73, 11, [9, 5, 80, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999018907546997, 1), ('GROUP_COL', ('matches', 'year', 73), 0.9999998807907104, 3), ('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.9095638149585303, 5), ('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.997288703918457, 6), ('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9999353885650635, 7)]",
        "logprob": "-0.9869759953661225",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999018907546997, 1), 'yes'), (('GROUP_COL', ('matches', 'year', 73), 0.9999998807907104, 3), 'yes'), (('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.9095638149585303, 5), 'yes'), (('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.997288703918457, 6), 'yes'), (('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9999353885650635, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999018907546997, 1), 'yes'), (('GROUP_COL', ('matches', 'year', 73), 0.9999998807907104, 3), 'yes'), (('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.9095638149585303, 5), 'yes'), (('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.997288703918457, 6), 'yes'), (('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9999353885650635, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 481
    },
    {
        "nl": "Find the name and rank points of the winner who won the most times .",
        "true_sql": "select matches.winner_name , matches.winner_rank_points group_by matches.winner_name order_by count ( matches.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 34, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.winner_name",
            "group_by",
            "rankings.ranking",
            "order_by",
            "sum",
            "(",
            "rankings.ranking_points",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [69], 10, 75, 11, [24, 5, 77, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9993460774421692, 1), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.10562581568956375, 3), ('GROUP_COL', ('rankings', 'ranking', 75), 0.0023308838717639446, 5), ('ORDER_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.09674268231304929, 7), ('ORDER_DESC_ASC', (('rankings', 'ranking_points', 77), ('sum', 4), False), 'desc', 0.9996588230133057, 8), ('ORDER_LIMIT', (('rankings', 'ranking_points', 77), ('sum', 4), False), 'limit_value', 0.9999592304229736, 9)]",
        "logprob": "-17.65461445990967",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9993460774421692, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.4681780934333801, 3), 'no'), (('GROUP_COL', ('matches', 'winner_id', 67), 0.6725451350212097, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9997601182417736, 7), 'no'), (('ORDER_DESC_ASC', (('rankings', 'ranking_points', 77), ('sum', 4), False), 'desc', 0.9996588230133057, 8), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9993460774421692, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.4681780934333801, 3), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.3114229738712311, 3), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.10562581568956375, 3), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.08341223001480103, 3), 'no'), (('GROUP_COL', ('matches', 'winner_id', 67), 0.6725451350212097, 5), 'no'), (('GROUP_COL', ('matches', 'winner_seed', 72), 0.20525869727134705, 5), 'no'), (('GROUP_COL', ('rankings', 'tours', 78), 0.11473719030618668, 5), 'no'), (('GROUP_COL', ('rankings', 'player_id', 76), 0.0038240840658545494, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9997601182417736, 7), 'no'), (('ORDER_AGG_v2', ('rankings', '*', 81), ('count', 3), False, 0.11357580046178586, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('sum', 4), False, 0.11043501325224658, 7), 'no'), (('ORDER_AGG_v2', ('rankings', 'ranking_points', 77), ('avg', 5), False, 0.10292336070882427, 7), 'no'), (('ORDER_DESC_ASC', (('rankings', 'ranking_points', 77), ('sum', 4), False), 'desc', 0.9996588230133057, 8), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 482
    },
    {
        "nl": "What is the name of the winner who has won the most matches , and how many rank points does this player have ?",
        "true_sql": "select matches.winner_name , matches.winner_rank_points group_by matches.winner_name order_by count ( matches.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 34, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.winner_name",
            "group_by",
            "matches.winner_hand",
            "order_by",
            "count",
            "(",
            "matches.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [69], 10, 65, 11, [9, 5, 80, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9979884624481201, 1), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.17250415682792664, 3), ('GROUP_COL', ('matches', 'winner_hand', 65), 6.598068284802139e-05, 5), ('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.19453448976898627, 7), ('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.9996016621589661, 8), ('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9999312162399292, 9)]",
        "logprob": "-17.946032195594235",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9979884624481201, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.6480777263641357, 3), 'no'), (('GROUP_COL', ('matches', 'winner_id', 67), 0.9888414740562439, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.995765877293002, 7), 'no'), (('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.9996016621589661, 8), 'yes'), (('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9999312162399292, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9979884624481201, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.6480777263641357, 3), 'no'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.17555153369903564, 3), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.17250415682792664, 3), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.20857800118198186, 3), 'no'), (('GROUP_COL', ('matches', 'winner_id', 67), 0.9888414740562439, 5), 'no'), (('GROUP_COL', ('matches', 'winner_entry', 64), 0.010526333004236221, 5), 'no'), (('GROUP_COL', ('matches', 'winner_seed', 72), 0.00034909206442534924, 5), 'no'), (('GROUP_COL', ('matches', 'loser_hand', 46), 9.95675363810733e-05, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.995765877293002, 7), 'no'), (('ORDER_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.32966557585023915, 7), 'no'), (('ORDER_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.19453448976898627, 7), 'yes'), (('ORDER_AGG_v2', ('matches', 'winner_ht', 66), ('count', 3), False, 0.18742988194727828, 7), 'no'), (('ORDER_DESC_ASC', (('matches', '*', 80), ('count', 3), False), 'desc', 0.9996016621589661, 8), 'yes'), (('ORDER_LIMIT', (('matches', '*', 80), ('count', 3), False), 'limit_value', 0.9999312162399292, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 483
    },
    {
        "nl": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney .",
        "true_sql": "select matches.winner_name where matches.tourney_name = value order_by matches.winner_rank_points desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"Australian Open\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.winner_name",
            "where",
            "matches.winner_rank_points",
            "=",
            "value",
            "group_by",
            "matches.winner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [69], 6, 71, [7], 3, 10, 67, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.5024833083152771, 1), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.01717815361917019, 3), ('WHERE_COL', ('matches', 'winner_rank_points', 71), 0.020095638930797577, 5), ('WHERE_OP', (('matches', 'winner_rank_points', 71),), ('=', 0), 0.9870665669441223, 6), ('WHERE_ROOT_TERM', (('matches', 'winner_rank_points', 71),), ('=', 0), 'terminal', 0.9241750836372375, 7), ('GROUP_COL', ('matches', 'winner_id', 67), 0.9621655941009521, 9), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9298021830695312, 11), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9886916875839233, 12), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998989105224609, 13)]",
        "logprob": "-9.688082461260914",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.5024833083152771, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.9430921077728271, 3), 'no'), (('WHERE_COL', ('rankings', 'ranking_points', 77), 0.4129939675331116, 5), 'no'), (('WHERE_OP', (('matches', 'winner_rank_points', 71),), ('=', 0), 0.9870665669441223, 6), 'no'), (('WHERE_ROOT_TERM', (('matches', 'winner_rank_points', 71),), ('=', 0), 'terminal', 0.9241750836372375, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.5024833083152771, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'tourney_name', 62), ('none_agg', 0), False, 0.9430921077728271, 3), 'no'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.018841443583369255, 3), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.01717815361917019, 3), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.008934637531638144, 3), 'no'), (('WHERE_COL', ('rankings', 'ranking_points', 77), 0.4129939675331116, 5), 'no'), (('WHERE_COL', ('matches', 'winner_rank', 70), 0.30554428696632385, 5), 'no'), (('WHERE_COL', ('matches', 'loser_rank', 51), 0.21525749564170837, 5), 'no'), (('WHERE_COL', ('matches', 'loser_rank_points', 52), 0.041385482996702194, 5), 'no'), (('WHERE_OP', (('matches', 'winner_rank_points', 71),), ('=', 0), 0.9870665669441223, 6), 'no'), (('WHERE_OP', (('matches', 'winner_rank_points', 71),), ('>', 1), 0.01183401606976986, 6), 'no'), (('WHERE_OP', (('matches', 'winner_rank_points', 71),), ('>=', 3), 0.0218265528042005, 6), 'no'), (('WHERE_OP', (('matches', 'winner_rank_points', 71),), ('in', 8), 4.029232150060125e-05, 6), 'no'), (('WHERE_ROOT_TERM', (('matches', 'winner_rank_points', 71),), ('=', 0), 'terminal', 0.9241750836372375, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 484
    },
    {
        "nl": "What is the name of the winner with the most rank points who participated in the Australian Open tournament ?",
        "true_sql": "select matches.winner_name where matches.tourney_name = value order_by matches.winner_rank_points desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"Australian Open\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            "where",
            "matches.loser_rank_points",
            "=",
            "value",
            "group_by",
            "matches.winner_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 6, 52, [7], 3, 10, 67, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9948369264602661, 1), ('WHERE_COL', ('matches', 'loser_rank_points', 52), 0.016267744824290276, 3), ('WHERE_OP', (('matches', 'loser_rank_points', 52),), ('=', 0), 0.9924168586730957, 4), ('WHERE_ROOT_TERM', (('matches', 'loser_rank_points', 52),), ('=', 0), 'terminal', 0.9673552513122559, 5), ('GROUP_COL', ('matches', 'winner_id', 67), 0.9822511076927185, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9935414342223542, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997552037239075, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999736547470093, 11)]",
        "logprob": "-4.275510690061094",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9948369264602661, 1), 'yes'), (('WHERE_COL', ('matches', 'winner_rank', 70), 0.7308368682861328, 3), 'no'), (('WHERE_OP', (('matches', 'loser_rank_points', 52),), ('=', 0), 0.9924168586730957, 4), 'no'), (('WHERE_ROOT_TERM', (('matches', 'loser_rank_points', 52),), ('=', 0), 'terminal', 0.9673552513122559, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9948369264602661, 1), 'yes'), (('WHERE_COL', ('matches', 'winner_rank', 70), 0.7308368682861328, 3), 'no'), (('WHERE_COL', ('rankings', 'ranking_points', 77), 0.13805130124092102, 3), 'no'), (('WHERE_COL', ('matches', 'loser_rank', 51), 0.07138808071613312, 3), 'no'), (('WHERE_COL', ('matches', 'winner_rank_points', 71), 0.04345294460654259, 3), 'no'), (('WHERE_OP', (('matches', 'loser_rank_points', 52),), ('=', 0), 0.9924168586730957, 4), 'no'), (('WHERE_OP', (('matches', 'loser_rank_points', 52),), ('>', 1), 0.006396607495844364, 4), 'no'), (('WHERE_OP', (('matches', 'loser_rank_points', 52),), ('in', 8), 0.00010311118967365474, 4), 'no'), (('WHERE_OP', (('matches', 'loser_rank_points', 52),), ('not in', 7), 0.007755480890038242, 4), 'no'), (('WHERE_ROOT_TERM', (('matches', 'loser_rank_points', 52),), ('=', 0), 'terminal', 0.9673552513122559, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 485
    },
    {
        "nl": "find the names of loser and winner who played in the match with greatest number of minutes .",
        "true_sql": "select matches.winner_name , matches.loser_name order_by matches.minutes desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.loser_name",
            ",",
            "matches.winner_name",
            "order_by",
            "matches.minutes",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [69], 11, [55], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.6695337295532227, 1), ('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.6984661221504211, 3), ('ORDER_AGG_v2', ('matches', 'minutes', 55), ('none_agg', 0), False, 0.9999829530715942, 5), ('ORDER_DESC_ASC', (('matches', 'minutes', 55), ('none_agg', 0), False), 'desc', 0.9207888245582581, 6), ('ORDER_LIMIT', (('matches', 'minutes', 55), ('none_agg', 0), False), 'limit_value', 0.9999696016311646, 7)]",
        "logprob": "-0.934834386121249",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.6695337295532227, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.6984661221504211, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'minutes', 55), ('none_agg', 0), False, 0.9999829530715942, 5), 'yes'), (('ORDER_DESC_ASC', (('matches', 'minutes', 55), ('none_agg', 0), False), 'desc', 0.9207888245582581, 6), 'yes'), (('ORDER_LIMIT', (('matches', 'minutes', 55), ('none_agg', 0), False), 'limit_value', 0.9999696016311646, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.6695337295532227, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.6984661221504211, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'minutes', 55), ('none_agg', 0), False, 0.9999829530715942, 5), 'yes'), (('ORDER_DESC_ASC', (('matches', 'minutes', 55), ('none_agg', 0), False), 'desc', 0.9207888245582581, 6), 'yes'), (('ORDER_LIMIT', (('matches', 'minutes', 55), ('none_agg', 0), False), 'limit_value', 0.9999696016311646, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 486
    },
    {
        "nl": "What are the names of the winner and loser who played in the longest match ?",
        "true_sql": "select matches.winner_name , matches.loser_name order_by matches.minutes desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.loser_name",
            "order_by",
            "matches.minutes",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [50], 11, [55], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9867156147956848, 1), ('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.9888629913330078, 3), ('ORDER_AGG_v2', ('matches', 'minutes', 55), ('none_agg', 0), False, 0.9999921321868896, 5), ('ORDER_LIMIT', (('matches', 'minutes', 55), ('none_agg', 0), False), 'limit_value', 0.9741325378417969, 6)]",
        "logprob": "-0.06802121943732724",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9867156147956848, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.9888629913330078, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'minutes', 55), ('none_agg', 0), False, 0.9999921321868896, 5), 'yes'), (('ORDER_LIMIT', (('matches', 'minutes', 55), ('none_agg', 0), False), 'limit_value', 0.9741325378417969, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9867156147956848, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.9888629913330078, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'minutes', 55), ('none_agg', 0), False, 0.9999921321868896, 5), 'yes'), (('ORDER_LIMIT', (('matches', 'minutes', 55), ('none_agg', 0), False), 'limit_value', 0.9741325378417969, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 487
    },
    {
        "nl": "Find the average ranking for each player and their first name .",
        "true_sql": "select avg ( rankings.ranking ) , players.first_name group_by players.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 40, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "rankings.ranking",
            ")",
            ",",
            "players.first_name",
            "group_by",
            "players.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 75, 4], 8, [37], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('rankings', 'ranking', 75), ('avg', 5), False, 0.1294829131587175, 1), ('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.45913004875183105, 3), ('GROUP_COL', ('players', 'first_name', 37), 0.4345519244670868, 5)]",
        "logprob": "-9.79091353091361",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('avg', 5), False, 0.9991536944048581, 1), 'no'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.45913004875183105, 3), 'yes'), (('GROUP_COL', ('players', 'last_name', 38), 0.5617784261703491, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('avg', 5), False, 0.9991536944048581, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('avg', 5), False, 0.18136713670545204, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.1303247516112163, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking', 75), ('avg', 5), False, 0.1294829131587175, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.45913004875183105, 3), 'yes'), (('GROUP_COL', ('players', 'last_name', 38), 0.5617784261703491, 5), 'no'), (('GROUP_COL', ('players', 'first_name', 37), 0.4345519244670868, 5), 'yes'), (('GROUP_COL', ('rankings', 'ranking', 75), 0.0025978635530918837, 5), 'no'), (('GROUP_COL', ('matches', 'winner_name', 69), 0.001054251566529274, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 488
    },
    {
        "nl": "What are the first names of all players , and their average rankings ?",
        "true_sql": "select avg ( rankings.ranking ) , players.first_name group_by players.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 40, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9994251728057861, 1), ('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 5.1315801101736724e-05, 3)]",
        "logprob": "-10.354273259044994",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9994251728057861, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9998103976249695, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9994251728057861, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9998103976249695, 3), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('avg', 5), False, 0.10228138302712214, 3), 'no'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 5.1315801101736724e-05, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 1.3766119991487368e-05, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 489
    },
    {
        "nl": "Find the total ranking points for each player and their first name .",
        "true_sql": "select sum ( rankings.ranking_points ) , players.first_name group_by players.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 42, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "rankings.ranking_points",
            ")",
            ",",
            "players.first_name",
            "group_by",
            "players.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 77, 4], 8, [37], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.9994170960416185, 1), ('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.8294938802719116, 3), ('GROUP_COL', ('players', 'first_name', 37), 0.9955990314483643, 5)]",
        "logprob": "-0.21134396205914444",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.9994170960416185, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.8294938802719116, 3), 'yes'), (('GROUP_COL', ('players', 'first_name', 37), 0.9955990314483643, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.9994170960416185, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.8294938802719116, 3), 'yes'), (('GROUP_COL', ('players', 'first_name', 37), 0.9955990314483643, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 490
    },
    {
        "nl": "What are the first names of all players , and their total ranking points ?",
        "true_sql": "select sum ( rankings.ranking_points ) , players.first_name group_by players.first_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 42, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "sum",
            "(",
            "rankings.ranking_points",
            ")",
            "group_by",
            "players.first_name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [24, 5, 77, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.999728262424469, 1), ('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.2014941073531182, 3), ('GROUP_COL', ('players', 'first_name', 37), 0.9612830877304077, 5)]",
        "logprob": "-6.662422991312036",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.999728262424469, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9776466488838196, 3), 'no'), (('GROUP_COL', ('players', 'first_name', 37), 0.9612830877304077, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.999728262424469, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9776466488838196, 3), 'no'), (('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.020263839513063434, 3), 'yes'), (('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.2014941073531182, 3), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.00027482915902510285, 3), 'no'), (('GROUP_COL', ('players', 'first_name', 37), 0.9612830877304077, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 491
    },
    {
        "nl": "find the number of players for each country .",
        "true_sql": "select count ( players.* ) , players.country_code group_by players.country_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "players.*",
            ")",
            ",",
            "players.country_code",
            "group_by",
            "players.country_code",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 79, 4], 8, [41], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9983542132310118, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999366819858551, 3), ('GROUP_COL', ('players', 'country_code', 41), 0.9999181032180786, 5)]",
        "logprob": "-0.0074937598795486345",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9983542132310118, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999366819858551, 3), 'yes'), (('GROUP_COL', ('players', 'country_code', 41), 0.9999181032180786, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9983542132310118, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999366819858551, 3), 'yes'), (('GROUP_COL', ('players', 'country_code', 41), 0.9999181032180786, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 492
    },
    {
        "nl": "How many players are from each country ?",
        "true_sql": "select count ( players.* ) , players.country_code group_by players.country_code",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "players.*",
            ")",
            ",",
            "players.country_code",
            "group_by",
            "players.country_code",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 79, 4], 8, [41], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9944147697268042, 1), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9995983242988586, 3), ('GROUP_COL', ('players', 'country_code', 41), 0.9999188184738159, 5)]",
        "logprob": "-0.02305159461553012",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9944147697268042, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9995983242988586, 3), 'yes'), (('GROUP_COL', ('players', 'country_code', 41), 0.9999188184738159, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9944147697268042, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.9995983242988586, 3), 'yes'), (('GROUP_COL', ('players', 'country_code', 41), 0.9999188184738159, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 493
    },
    {
        "nl": "find the code of the country where has the greatest number of players .",
        "true_sql": "select players.country_code group_by players.country_code order_by count ( players.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.country_code",
            "group_by",
            "players.country_code",
            "order_by",
            "count",
            "(",
            "players.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 79, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('players', 'country_code', 41), 1.0, 3), ('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9270141927917963, 5), ('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9988431930541992, 6), ('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.999976396560669, 7)]",
        "logprob": "-0.3060655270491712",
        "q_counter": 3,
        "questioned_indices": [
            2,
            3,
            4
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9270141927917963, 5), 'yes'), (('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9988431930541992, 6), 'yes'), (('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.999976396560669, 7), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9270141927917963, 5), 'yes'), (('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9988431930541992, 6), 'yes'), (('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.999976396560669, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 494
    },
    {
        "nl": "What is the code of the country with the most players ?",
        "true_sql": "select players.country_code group_by players.country_code order_by count ( players.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.country_code",
            "group_by",
            "players.country_code",
            "order_by",
            "count",
            "(",
            "players.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 79, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('players', 'country_code', 41), 1.0, 3), ('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9995519355512335, 5), ('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9996566772460938, 6), ('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.9999535083770752, 7)]",
        "logprob": "-0.002959517419448924",
        "q_counter": 3,
        "questioned_indices": [
            2,
            3,
            4
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9995519355512335, 5), 'yes'), (('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9996566772460938, 6), 'yes'), (('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.9999535083770752, 7), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9995519355512335, 5), 'yes'), (('ORDER_DESC_ASC', (('players', '*', 79), ('count', 3), False), 'desc', 0.9996566772460938, 6), 'yes'), (('ORDER_LIMIT', (('players', '*', 79), ('count', 3), False), 'limit_value', 0.9999535083770752, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 495
    },
    {
        "nl": "Find the codes of countries that have more than 50 players .",
        "true_sql": "select players.country_code group_by players.country_code having count ( players.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 50.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.country_code",
            "group_by",
            "players.country_code",
            "having",
            "count",
            "(",
            "players.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 18, [9, 5, 79, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999987006187439, 1), ('GROUP_COL', ('players', 'country_code', 41), 1.0, 3), ('HAV_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9856957624127313, 5), ('HAV_OP_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 0.9996664524078369, 6), ('HAV_ROOT_TERM_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 'terminal', 0.9989935755729675, 7)]",
        "logprob": "-0.07089839512119295",
        "q_counter": 4,
        "questioned_indices": [
            0,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999987006187439, 1), 'yes'), (('HAV_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9856957624127313, 5), 'yes'), (('HAV_OP_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 0.9996664524078369, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 'terminal', 0.9989935755729675, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.999987006187439, 1), 'yes'), (('HAV_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9856957624127313, 5), 'yes'), (('HAV_OP_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 0.9996664524078369, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 'terminal', 0.9989935755729675, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 496
    },
    {
        "nl": "What are the codes of countries with more than 50 players ?",
        "true_sql": "select players.country_code group_by players.country_code having count ( players.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 50.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.country_code",
            "group_by",
            "players.country_code",
            "having",
            "count",
            "(",
            "players.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 18, [9, 5, 79, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('players', 'country_code', 41), 1.0, 3), ('HAV_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9863460980355632, 5), ('HAV_OP_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 0.9996347427368164, 6), ('HAV_ROOT_TERM_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 'terminal', 0.999038815498352, 7)]",
        "logprob": "-0.07560933211910115",
        "q_counter": 3,
        "questioned_indices": [
            2,
            3,
            4
        ],
        "questioned_tags": "[(('HAV_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9863460980355632, 5), 'yes'), (('HAV_OP_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 0.9996347427368164, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 'terminal', 0.999038815498352, 7), 'yes')]",
        "feedback_records": "[(('HAV_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.9863460980355632, 5), 'yes'), (('HAV_OP_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 0.9996347427368164, 6), 'yes'), (('HAV_ROOT_TERM_v2', (('players', '*', 79), ('count', 3), False), ('>', 1), 'terminal', 0.999038815498352, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 497
    },
    {
        "nl": "Find the total number of tours for each ranking date .",
        "true_sql": "select sum ( rankings.tours ) , rankings.ranking_date group_by rankings.ranking_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 39, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 43, False], None]], [0, [0, [0, 39, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "rankings.ranking_date",
            ")",
            ",",
            "rankings.ranking_date",
            "group_by",
            "rankings.ranking_date",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 74, 4], 8, [74], 10, 74, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('count', 3), False, 0.43269016829188744, 1), ('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.9419441819190979, 3), ('GROUP_COL', ('rankings', 'ranking_date', 74), 0.9925705790519714, 5)]",
        "logprob": "-3.4200537769889765",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('rankings', 'tours', 78), ('count', 3), False, 0.7902092741493636, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.9419441819190979, 3), 'yes'), (('GROUP_COL', ('rankings', 'ranking_date', 74), 0.9925705790519714, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('rankings', 'tours', 78), ('count', 3), False, 0.7902092741493636, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'tourney_date', 59), ('count', 3), False, 0.7029080402903465, 1), 'no'), (('SELECT_AGG_v2', ('rankings', '*', 81), ('count', 3), False, 0.6672128368282796, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('count', 3), True, 0.5308343655159299, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.9419441819190979, 3), 'yes'), (('GROUP_COL', ('rankings', 'ranking_date', 74), 0.9925705790519714, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 498
    },
    {
        "nl": "How many total tours were there for each ranking date ?",
        "true_sql": "select sum ( rankings.tours ) , rankings.ranking_date group_by rankings.ranking_date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 39, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 43, False], None]], [0, [0, [0, 39, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "matches.winner_rank_points",
            ")",
            ",",
            "rankings.ranking_date",
            "group_by",
            "rankings.ranking_date",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 71, 4], 8, [74], 10, 74, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('sum', 4), False, 0.4706319281810357, 1), ('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.9296588897705078, 3), ('GROUP_COL', ('rankings', 'ranking_date', 74), 0.9391958713531494, 5)]",
        "logprob": "-3.150784369595137",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('rankings', '*', 81), ('count', 3), False, 0.8635741872656476, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.9296588897705078, 3), 'yes'), (('GROUP_COL', ('rankings', 'ranking_date', 74), 0.9391958713531494, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('rankings', '*', 81), ('count', 3), False, 0.8635741872656476, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'tours', 78), ('count', 3), True, 0.6625720194312215, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_points', 77), ('sum', 4), False, 0.5183434870501744, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'tours', 78), ('count', 3), False, 0.513088606090951, 1), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.9296588897705078, 3), 'yes'), (('GROUP_COL', ('rankings', 'ranking_date', 74), 0.9391958713531494, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 499
    },
    {
        "nl": "Find the number of matches happened in each year .",
        "true_sql": "select count ( matches.* ) , matches.year group_by matches.year",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 38, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 38, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.*",
            ")",
            ",",
            "matches.year",
            "group_by",
            "matches.year",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 80, 4], 8, [73], 10, 73, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.598857310735261, 1), ('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999943971633911, 3), ('GROUP_COL', ('matches', 'year', 73), 0.9999998807907104, 5)]",
        "logprob": "-2.0512513106564523",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9657743996988823, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999943971633911, 3), 'yes'), (('GROUP_COL', ('matches', 'year', 73), 0.9999998807907104, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'match_num', 54), ('count', 3), False, 0.9657743996988823, 1), 'no'), (('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.598857310735261, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'score', 57), ('count', 3), False, 0.16400701144580096, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'year', 73), ('count', 3), True, 0.2083867544652693, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999943971633911, 3), 'yes'), (('GROUP_COL', ('matches', 'year', 73), 0.9999998807907104, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 500
    },
    {
        "nl": "How many matches were played in each year ?",
        "true_sql": "select count ( matches.* ) , matches.year group_by matches.year",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 38, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 38, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'matches.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "matches.*",
            ")",
            ",",
            "matches.year",
            "group_by",
            "matches.year",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 80, 4], 8, [73], 10, 73, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.9912574679808289, 1), ('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999921321868896, 3), ('GROUP_COL', ('matches', 'year', 73), 0.9999991655349731, 5)]",
        "logprob": "-0.03529233771426214",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.9912574679808289, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999921321868896, 3), 'yes'), (('GROUP_COL', ('matches', 'year', 73), 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', '*', 80), ('count', 3), False, 0.9912574679808289, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'year', 73), ('none_agg', 0), False, 0.9999921321868896, 3), 'yes'), (('GROUP_COL', ('matches', 'year', 73), 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 501
    },
    {
        "nl": "Find the name and rank of the 3 youngest winners across all matches .",
        "true_sql": "select distinct matches.winner_name , matches.winner_rank order_by matches.winner_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['asc', [[0, [0, 28, False], None]]], 'select': [True, [[0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.winner_rank",
            "order_by",
            "matches.winner_age",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [70], 11, [63], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9970786571502686, 1), ('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.47297146916389465, 3), ('ORDER_AGG_v2', ('matches', 'winner_age', 63), ('none_agg', 0), False, 0.007335548754781487, 5), ('ORDER_DESC_ASC', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'asc', 0.0400250107049942, 6), ('ORDER_LIMIT', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'limit_value', 0.9993957281112671, 7)]",
        "logprob": "-8.901456910882573",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9970786571502686, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.47297146916389465, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.762188196182251, 5), 'no'), (('ORDER_DESC_ASC', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'desc', 0.6922907829284668, 6), 'no'), (('ORDER_LIMIT', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'limit_value', 0.9993957281112671, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9970786571502686, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.47297146916389465, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.762188196182251, 5), 'no'), (('ORDER_AGG_v2', ('matches', 'loser_rank_points', 52), ('none_agg', 0), False, 0.1409056931734085, 5), 'no'), (('ORDER_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.08878610283136369, 5), 'no'), (('ORDER_AGG_v2', ('matches', 'winner_age', 63), ('none_agg', 0), False, 0.007335548754781487, 5), 'yes'), (('ORDER_DESC_ASC', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'desc', 0.6922907829284668, 6), 'no'), (('ORDER_LIMIT', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'limit_value', 0.9993957281112671, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 502
    },
    {
        "nl": "What are the names and ranks of the three youngest winners across all matches ?",
        "true_sql": "select distinct matches.winner_name , matches.winner_rank order_by matches.winner_age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['asc', [[0, [0, 28, False], None]]], 'select': [True, [[0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "matches.winner_name",
            ",",
            "matches.winner_rank",
            "order_by",
            "matches.winner_age",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [69], 8, [70], 11, [63], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9958398342132568, 1), ('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.9627472162246704, 3), ('ORDER_AGG_v2', ('matches', 'winner_age', 63), ('none_agg', 0), False, 0.6012267470359802, 5), ('ORDER_LIMIT', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'limit_value', 0.7789388298988342, 6)]",
        "logprob": "-0.8085778362132767",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9958398342132568, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.9627472162246704, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'winner_age', 63), ('none_agg', 0), False, 0.6012267470359802, 5), 'yes'), (('ORDER_LIMIT', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'limit_value', 0.7789388298988342, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.9958398342132568, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_rank', 70), ('none_agg', 0), False, 0.9627472162246704, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'winner_age', 63), ('none_agg', 0), False, 0.6012267470359802, 5), 'yes'), (('ORDER_LIMIT', (('matches', 'winner_age', 63), ('none_agg', 0), False), 'limit_value', 0.7789388298988342, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 503
    },
    {
        "nl": "How many different winners both participated in the WTA Championships and were left handed ?",
        "true_sql": "select count ( distinct matches.winner_name ) where matches.tourney_name = value and matches.winner_hand = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 34, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"WTA Championships\"', None], 'and', [False, 2, [0, [0, 30, False], None], '\"L\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "matches.winner_name",
            ")",
            "where",
            "matches.winner_hand",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 69, 4], 6, 65, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.8244961959379917, 1), ('WHERE_COL', ('matches', 'winner_hand', 65), 1.0, 3), ('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.9998363256454468, 4), ('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-2.3166571945500656",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_hand', 65), ('count', 3), True, 0.8414496583566285, 1), 'no'), (('WHERE_COL', ('matches', 'loser_name', 50), 0.35382118821144104, 3), 'no'), (('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.9998363256454468, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_hand', 65), ('count', 3), True, 0.8414496583566285, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.8244961959379917, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'round', 56), ('count', 3), True, 0.7110297970190936, 1), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_entry', 64), ('count', 3), True, 0.40801447636856436, 1), 'no'), (('WHERE_COL', ('matches', 'loser_name', 50), 0.35382118821144104, 3), 'no'), (('WHERE_COL', ('matches', 'winner_hand', 65), 0.2616409957408905, 3), 'yes'), (('WHERE_COL', ('matches', 'loser_rank', 51), 0.18485304713249207, 3), 'no'), (('WHERE_COL', ('matches', 'winner_name', 69), 0.10453329980373383, 3), 'no'), (('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.9998363256454468, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 504
    },
    {
        "nl": "Find the number of left handed winners who participated in the WTA Championships .",
        "true_sql": "select count ( distinct matches.winner_name ) where matches.tourney_name = value and matches.winner_hand = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 34, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 27, False], None], '\"WTA Championships\"', None], 'and', [False, 2, [0, [0, 30, False], None], '\"L\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "matches.winner_name",
            ")",
            "where",
            "matches.winner_hand",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 69, 4], 6, 65, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.966598082488389, 1), ('WHERE_COL', ('matches', 'winner_hand', 65), 0.9301331639289856, 3), ('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.9999434947967529, 4), ('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.24276860647335313",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.966598082488389, 1), 'yes'), (('WHERE_COL', ('matches', 'winner_hand', 65), 0.9301331639289856, 3), 'yes'), (('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.9999434947967529, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('count', 3), True, 0.966598082488389, 1), 'yes'), (('WHERE_COL', ('matches', 'winner_hand', 65), 0.9301331639289856, 3), 'yes'), (('WHERE_OP', (('matches', 'winner_hand', 65),), ('=', 0), 0.9999434947967529, 4), 'yes'), (('WHERE_ROOT_TERM', (('matches', 'winner_hand', 65),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 505
    },
    {
        "nl": "Find the first name , country code and birth date of the winner who has the highest rank points in all matches .",
        "true_sql": "select players.first_name , players.country_code , players.birth_date order_by matches.winner_rank_points desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.birth_date",
            ",",
            "players.birth_date",
            "order_by",
            "matches.winner_rank_points",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [40], 8, [40], 11, [71], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9480065107345581, 1), ('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.024825783446431163, 3), ('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.19537341594696045, 5), ('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.935604989528656, 7), ('ORDER_DESC_ASC', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'desc', 0.8129741549491882, 8), ('ORDER_LIMIT', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'limit_value', 0.9999245405197144, 9)]",
        "logprob": "-5.848762677290712",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9480065107345581, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.909873902797699, 3), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.4392063319683075, 5), 'no'), (('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.935604989528656, 7), 'yes'), (('ORDER_DESC_ASC', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'desc', 0.8129741549491882, 8), 'yes'), (('ORDER_LIMIT', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'limit_value', 0.9999245405197144, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9480065107345581, 1), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.909873902797699, 3), 'no'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.03624220937490464, 3), 'no'), (('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.024825783446431163, 3), 'yes'), (('SELECT_AGG_v2', ('matches', 'loser_name', 50), ('none_agg', 0), False, 0.023601613938808445, 3), 'no'), (('SELECT_AGG_v2', ('rankings', 'ranking_date', 74), ('none_agg', 0), False, 0.4392063319683075, 5), 'no'), (('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.19537341594696045, 5), 'yes'), (('SELECT_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.09170836210250856, 5), 'no'), (('SELECT_AGG_v2', ('matches', 'tourney_date', 59), ('none_agg', 0), False, 0.08036810904741287, 5), 'no'), (('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.935604989528656, 7), 'yes'), (('ORDER_DESC_ASC', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'desc', 0.8129741549491882, 8), 'yes'), (('ORDER_LIMIT', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'limit_value', 0.9999245405197144, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 506
    },
    {
        "nl": "What is the first name , country code , and birth date of the player with the most winner rank points across all matches ?",
        "true_sql": "select players.first_name , players.country_code , players.birth_date order_by matches.winner_rank_points desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.first_name",
            ",",
            "players.birth_date",
            ",",
            "players.country_code",
            "order_by",
            "matches.winner_rank_points",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [40], 8, [41], 11, [71], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9904057383537292, 1), ('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.002166242804378271, 3), ('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.03325857222080231, 5), ('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.8180040121078491, 7), ('ORDER_DESC_ASC', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'desc', 0.9273397922515869, 8), ('ORDER_LIMIT', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'limit_value', 0.9999427795410156, 9)]",
        "logprob": "-10.477835302487815",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9904057383537292, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9843132495880127, 3), 'no'), (('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.8180040121078491, 7), 'yes'), (('ORDER_DESC_ASC', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'desc', 0.9273397922515869, 8), 'yes'), (('ORDER_LIMIT', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'limit_value', 0.9999427795410156, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'first_name', 37), ('none_agg', 0), False, 0.9904057383537292, 1), 'yes'), (('SELECT_AGG_v2', ('players', 'last_name', 38), ('none_agg', 0), False, 0.9843132495880127, 3), 'no'), (('SELECT_AGG_v2', ('matches', 'winner_name', 69), ('none_agg', 0), False, 0.01079170498996973, 3), 'no'), (('SELECT_AGG_v2', ('players', 'birth_date', 40), ('none_agg', 0), False, 0.002166242804378271, 3), 'yes'), (('SELECT_AGG_v2', ('players', 'country_code', 41), ('none_agg', 0), False, 0.0012404040899127726, 3), 'yes'), (('ORDER_AGG_v2', ('matches', 'winner_rank_points', 71), ('none_agg', 0), False, 0.8180040121078491, 7), 'yes'), (('ORDER_DESC_ASC', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'desc', 0.9273397922515869, 8), 'yes'), (('ORDER_LIMIT', (('matches', 'winner_rank_points', 71), ('none_agg', 0), False), 'limit_value', 0.9999427795410156, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 507
    },
    {
        "nl": "Find the number of players for each hand type .",
        "true_sql": "select count ( players.* ) , players.hand group_by players.hand",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.hand",
            ",",
            "count",
            "(",
            "players.*",
            ")",
            "group_by",
            "players.hand",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 79, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.9740152359008789, 1), ('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.8480360280728149, 3), ('GROUP_COL', ('players', 'hand', 39), 0.9979606866836548, 5)]",
        "logprob": "-0.6878740827028366",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.9740152359008789, 1), 'yes'), (('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.8480360280728149, 3), 'yes'), (('GROUP_COL', ('players', 'hand', 39), 0.9979606866836548, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.9740152359008789, 1), 'yes'), (('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.8480360280728149, 3), 'yes'), (('GROUP_COL', ('players', 'hand', 39), 0.9979606866836548, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 508
    },
    {
        "nl": "How many players are there for each hand type ?",
        "true_sql": "select count ( players.* ) , players.hand group_by players.hand",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'players.*'}, 'column_names_surface_form_to_id': {'*': 0, 'players.player_id': 1, 'players.first_name': 2, 'players.last_name': 3, 'players.hand': 4, 'players.birth_date': 5, 'players.country_code': 6, 'matches.best_of': 7, 'matches.draw_size': 8, 'matches.loser_age': 9, 'matches.loser_entry': 10, 'matches.loser_hand': 11, 'matches.loser_ht': 12, 'matches.loser_id': 13, 'matches.loser_ioc': 14, 'matches.loser_name': 15, 'matches.loser_rank': 16, 'matches.loser_rank_points': 17, 'matches.loser_seed': 18, 'matches.match_num': 19, 'matches.minutes': 20, 'matches.round': 21, 'matches.score': 22, 'matches.surface': 23, 'matches.tourney_date': 24, 'matches.tourney_id': 25, 'matches.tourney_level': 26, 'matches.tourney_name': 27, 'matches.winner_age': 28, 'matches.winner_entry': 29, 'matches.winner_hand': 30, 'matches.winner_ht': 31, 'matches.winner_id': 32, 'matches.winner_ioc': 33, 'matches.winner_name': 34, 'matches.winner_rank': 35, 'matches.winner_rank_points': 36, 'matches.winner_seed': 37, 'matches.year': 38, 'rankings.ranking_date': 39, 'rankings.ranking': 40, 'rankings.player_id': 41, 'rankings.ranking_points': 42, 'rankings.tours': 43, 'players.*': 44, 'matches.*': 45, 'rankings.*': 46}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "players.hand",
            ",",
            "count",
            "(",
            "players.*",
            ")",
            "group_by",
            "players.hand",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [9, 5, 79, 4], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.9644755125045776, 1), ('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.8917877784077678, 3), ('GROUP_COL', ('players', 'hand', 39), 0.9977879524230957, 5)]",
        "logprob": "-0.4968476042634044",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.9644755125045776, 1), 'yes'), (('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.8917877784077678, 3), 'yes'), (('GROUP_COL', ('players', 'hand', 39), 0.9977879524230957, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('players', 'hand', 39), ('none_agg', 0), False, 0.9644755125045776, 1), 'yes'), (('SELECT_AGG_v2', ('players', '*', 79), ('count', 3), False, 0.8917877784077678, 3), 'yes'), (('GROUP_COL', ('players', 'hand', 39), 0.9977879524230957, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 509
    },
    {
        "nl": "How many conductors are there ?",
        "true_sql": "select count ( conductor.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'conductor.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "conductor.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9999946057563156, 1)]",
        "logprob": "-4.3273358995443904e-05",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9999946057563156, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9999946057563156, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 510
    },
    {
        "nl": "Count the number of conductors .",
        "true_sql": "select count ( conductor.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'conductor.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "conductor.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9997374290146719, 1)]",
        "logprob": "-0.001096676121057096",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9997374290146719, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.9997374290146719, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 511
    },
    {
        "nl": "List the names of conductors in ascending order of age .",
        "true_sql": "select conductor.name order_by conductor.age asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.age",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [38], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('conductor', 'age', 38), ('none_agg', 0), False, 0.9999995231628418, 3), ('ORDER_DESC_ASC', (('conductor', 'age', 38), ('none_agg', 0), False), 'asc', 0.012633536010980606, 4)]",
        "logprob": "-4.371409472530977",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('conductor', 'age', 38), ('none_agg', 0), False, 0.9999995231628418, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'age', 38), ('none_agg', 0), False), 'desc', 0.578642725944519, 4), 'no')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('conductor', 'age', 38), ('none_agg', 0), False, 0.9999995231628418, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'age', 38), ('none_agg', 0), False), 'desc', 0.578642725944519, 4), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 512
    },
    {
        "nl": "What are the names of conductors , ordered by age ?",
        "true_sql": "select conductor.name order_by conductor.age asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.age",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [38], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('ORDER_AGG_v2', ('conductor', 'age', 38), ('none_agg', 0), False, 0.9997476935386658, 3), ('ORDER_DESC_ASC', (('conductor', 'age', 38), ('none_agg', 0), False), 'asc', 0.8880757093429565, 4)]",
        "logprob": "-0.11920903025224562",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('ORDER_AGG_v2', ('conductor', 'age', 38), ('none_agg', 0), False, 0.9997476935386658, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'age', 38), ('none_agg', 0), False), 'asc', 0.8880757093429565, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('ORDER_AGG_v2', ('conductor', 'age', 38), ('none_agg', 0), False, 0.9997476935386658, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'age', 38), ('none_agg', 0), False), 'asc', 0.8880757093429565, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 513
    },
    {
        "nl": "What are the names of conductors whose nationalities are not `` USA `` ?",
        "true_sql": "select conductor.name where conductor.nationality != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "where",
            "conductor.nationality",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('conductor', 'nationality', 39), 0.933485209941864, 3), ('WHERE_OP', (('conductor', 'nationality', 39),), ('!=', 5), 0.9992786049842834, 4), ('WHERE_ROOT_TERM', (('conductor', 'nationality', 39),), ('!=', 5), 'terminal', 0.9999632835388184, 5)]",
        "logprob": "-0.0698384774486801",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('conductor', 'nationality', 39), 0.933485209941864, 3), 'yes'), (('WHERE_OP', (('conductor', 'nationality', 39),), ('!=', 5), 0.9992786049842834, 4), 'yes'), (('WHERE_ROOT_TERM', (('conductor', 'nationality', 39),), ('!=', 5), 'terminal', 0.9999632835388184, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('conductor', 'nationality', 39), 0.933485209941864, 3), 'yes'), (('WHERE_OP', (('conductor', 'nationality', 39),), ('!=', 5), 0.9992786049842834, 4), 'yes'), (('WHERE_ROOT_TERM', (('conductor', 'nationality', 39),), ('!=', 5), 'terminal', 0.9999632835388184, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 514
    },
    {
        "nl": "Return the names of conductors that do not have the nationality `` USA `` .",
        "true_sql": "select conductor.name where conductor.nationality != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "where",
            "conductor.nationality",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999810457229614, 1), ('WHERE_COL', ('conductor', 'nationality', 39), 0.9998658895492554, 3), ('WHERE_OP', (('conductor', 'nationality', 39),), ('!=', 5), 0.9991952776908875, 4), ('WHERE_ROOT_TERM', (('conductor', 'nationality', 39),), ('!=', 5), 'terminal', 0.9990180730819702, 5)]",
        "logprob": "-0.0034164637759331535",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999810457229614, 1), 'yes'), (('WHERE_COL', ('conductor', 'nationality', 39), 0.9998658895492554, 3), 'yes'), (('WHERE_OP', (('conductor', 'nationality', 39),), ('!=', 5), 0.9991952776908875, 4), 'yes'), (('WHERE_ROOT_TERM', (('conductor', 'nationality', 39),), ('!=', 5), 'terminal', 0.9990180730819702, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999810457229614, 1), 'yes'), (('WHERE_COL', ('conductor', 'nationality', 39), 0.9998658895492554, 3), 'yes'), (('WHERE_OP', (('conductor', 'nationality', 39),), ('!=', 5), 0.9991952776908875, 4), 'yes'), (('WHERE_ROOT_TERM', (('conductor', 'nationality', 39),), ('!=', 5), 'terminal', 0.9990180730819702, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 515
    },
    {
        "nl": "What are the record companies of orchestras in descending order of years in which they were founded ?",
        "true_sql": "select orchestra.record_company order_by orchestra.year_of_founded desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 10, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "order_by",
            "orchestra.year_of_founded",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [45], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999985694885254, 1), ('ORDER_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.9998997449874878, 3), ('ORDER_DESC_ASC', (('orchestra', 'year_of_founded', 45), ('none_agg', 0), False), 'desc', 0.9996273517608643, 4)]",
        "logprob": "-0.0005372327224952431",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999985694885254, 1), 'yes'), (('ORDER_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.9998997449874878, 3), 'yes'), (('ORDER_DESC_ASC', (('orchestra', 'year_of_founded', 45), ('none_agg', 0), False), 'desc', 0.9996273517608643, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999985694885254, 1), 'yes'), (('ORDER_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.9998997449874878, 3), 'yes'), (('ORDER_DESC_ASC', (('orchestra', 'year_of_founded', 45), ('none_agg', 0), False), 'desc', 0.9996273517608643, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 516
    },
    {
        "nl": "Return the record companies of orchestras , sorted descending by the years in which they were founded .",
        "true_sql": "select orchestra.record_company order_by orchestra.year_of_founded desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 10, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "order_by",
            "orchestra.year_of_founded",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [45], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.999982476234436, 3), ('ORDER_DESC_ASC', (('orchestra', 'year_of_founded', 45), ('none_agg', 0), False), 'desc', 0.9390004277229309, 4)]",
        "logprob": "-0.06426567485852716",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.999982476234436, 3), 'yes'), (('ORDER_DESC_ASC', (('orchestra', 'year_of_founded', 45), ('none_agg', 0), False), 'desc', 0.9390004277229309, 4), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.999982476234436, 3), 'yes'), (('ORDER_DESC_ASC', (('orchestra', 'year_of_founded', 45), ('none_agg', 0), False), 'desc', 0.9390004277229309, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 517
    },
    {
        "nl": "What is the average attendance of shows ?",
        "true_sql": "select avg ( show.attendance )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "show.attendance",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 58, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('show', 'attendance', 58), ('avg', 5), False, 0.9998606236859975, 1)]",
        "logprob": "-0.0005761409332241844",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('show', 'attendance', 58), ('avg', 5), False, 0.9998606236859975, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('show', 'attendance', 58), ('avg', 5), False, 0.9998606236859975, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 518
    },
    {
        "nl": "Return the average attendance across all shows .",
        "true_sql": "select avg ( show.attendance )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "show.attendance",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 58, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('show', 'attendance', 58), ('avg', 5), False, 0.9994604320003899, 1)]",
        "logprob": "-0.0024156046071790774",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('show', 'attendance', 58), ('avg', 5), False, 0.9994604320003899, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('show', 'attendance', 58), ('avg', 5), False, 0.9994604320003899, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 519
    },
    {
        "nl": "What are the maximum and minimum share of performances whose type is not `` Live final `` .",
        "true_sql": "select max ( performance.share ) , min ( performance.share ) where performance.type != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 18, False], None]], [2, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 14, False], None], '\"Live final\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "performance.share",
            ")",
            ",",
            "min",
            "(",
            "performance.share",
            ")",
            "where",
            "performance.type",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 53, 4], 8, [26, 5, 53, 4], 6, 49, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('performance', 'share', 53), ('max', 1), False, 0.9573299350516055, 1), ('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.993762024826853, 3), ('WHERE_COL', ('performance', 'type', 49), 0.9999828338623047, 5), ('WHERE_OP', (('performance', 'type', 49),), ('!=', 5), 0.9793773293495178, 6), ('WHERE_ROOT_TERM', (('performance', 'type', 49),), ('!=', 5), 'terminal', 0.9999372959136963, 7)]",
        "logprob": "-0.22078903983145162",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('performance', 'share', 53), ('max', 1), False, 0.9573299350516055, 1), 'yes'), (('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.993762024826853, 3), 'yes'), (('WHERE_COL', ('performance', 'type', 49), 0.9999828338623047, 5), 'yes'), (('WHERE_OP', (('performance', 'type', 49),), ('!=', 5), 0.9793773293495178, 6), 'yes'), (('WHERE_ROOT_TERM', (('performance', 'type', 49),), ('!=', 5), 'terminal', 0.9999372959136963, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('performance', 'share', 53), ('max', 1), False, 0.9573299350516055, 1), 'yes'), (('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.993762024826853, 3), 'yes'), (('WHERE_COL', ('performance', 'type', 49), 0.9999828338623047, 5), 'yes'), (('WHERE_OP', (('performance', 'type', 49),), ('!=', 5), 0.9793773293495178, 6), 'yes'), (('WHERE_ROOT_TERM', (('performance', 'type', 49),), ('!=', 5), 'terminal', 0.9999372959136963, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 520
    },
    {
        "nl": "Return the maximum and minimum shares for performances that do not have the type `` Live final `` .",
        "true_sql": "select max ( performance.share ) , min ( performance.share ) where performance.type != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 18, False], None]], [2, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 14, False], None], '\"Live final\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "performance.share",
            ")",
            ",",
            "min",
            "(",
            "performance.share",
            ")",
            "where",
            "performance.type",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 53, 4], 8, [26, 5, 53, 4], 6, 49, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.8803002335722516, 1), ('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.9767951416138407, 3), ('WHERE_COL', ('performance', 'type', 49), 0.9999997615814209, 5), ('WHERE_OP', (('performance', 'type', 49),), ('!=', 5), 0.4437459409236908, 6), ('WHERE_ROOT_TERM', (('performance', 'type', 49),), ('!=', 5), 'terminal', 0.9999552965164185, 7)]",
        "logprob": "-1.425623766095989",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.8803002335722516, 1), 'yes'), (('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.9767951416138407, 3), 'yes'), (('WHERE_COL', ('performance', 'type', 49), 0.9999997615814209, 5), 'yes'), (('WHERE_OP', (('performance', 'type', 49),), ('=', 0), 0.5539333820343018, 6), 'no'), (('WHERE_ROOT_TERM', (('performance', 'type', 49),), ('!=', 5), 'terminal', 0.9999552965164185, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.8803002335722516, 1), 'yes'), (('SELECT_AGG_v2', ('performance', 'share', 53), ('min', 2), False, 0.9767951416138407, 3), 'yes'), (('WHERE_COL', ('performance', 'type', 49), 0.9999997615814209, 5), 'yes'), (('WHERE_OP', (('performance', 'type', 49),), ('=', 0), 0.5539333820343018, 6), 'no'), (('WHERE_OP', (('performance', 'type', 49),), ('!=', 5), 0.4437459409236908, 6), 'yes'), (('WHERE_OP', (('performance', 'type', 49),), ('not in', 7), 0.03986832846949993, 6), 'no'), (('WHERE_OP', (('performance', 'type', 49),), ('like', 6), 0.000123691264889203, 6), 'no'), (('WHERE_ROOT_TERM', (('performance', 'type', 49),), ('!=', 5), 'terminal', 0.9999552965164185, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 521
    },
    {
        "nl": "How many different nationalities do conductors have ?",
        "true_sql": "select count ( distinct conductor.nationality )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 4, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "conductor.nationality",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'nationality', 39), ('count', 3), True, 0.9987872828703994, 1)]",
        "logprob": "-0.006076206065970474",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', 'nationality', 39), ('count', 3), True, 0.9987872828703994, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', 'nationality', 39), ('count', 3), True, 0.9987872828703994, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 522
    },
    {
        "nl": "Count the number of different nationalities of conductors .",
        "true_sql": "select count ( distinct conductor.nationality )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 4, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "conductor.nationality",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'nationality', 39), ('count', 3), True, 0.9763614148092171, 1)]",
        "logprob": "-0.11961610997983901",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', 'nationality', 39), ('count', 3), True, 0.9763614148092171, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', 'nationality', 39), ('count', 3), True, 0.9763614148092171, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 523
    },
    {
        "nl": "List names of conductors in descending order of years of work .",
        "true_sql": "select conductor.name order_by conductor.year_of_work desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.year_of_work",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [40], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999997615814209, 3), ('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9998989105224609, 4)]",
        "logprob": "-0.00015342834359861576",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999997615814209, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9998989105224609, 4), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999997615814209, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9998989105224609, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 524
    },
    {
        "nl": "What are the names of conductors , sorted descending by the number of years they have worked ?",
        "true_sql": "select conductor.name order_by conductor.year_of_work desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.year_of_work",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [40], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999175071716309, 3), ('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9992250204086304, 4)]",
        "logprob": "-0.001000356281691061",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999175071716309, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9992250204086304, 4), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999175071716309, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9992250204086304, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 525
    },
    {
        "nl": "List the name of the conductor with the most years of work .",
        "true_sql": "select conductor.name order_by conductor.year_of_work desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.year_of_work",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [40], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999997615814209, 3), ('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9931948184967041, 4), ('ORDER_LIMIT', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'limit_value', 0.9999703168869019, 5)]",
        "logprob": "-4.275352285674164",
        "q_counter": 4,
        "questioned_indices": [
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.8727602958679199, 3), 'no'), (('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999997615814209, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9931948184967041, 4), 'yes'), (('ORDER_LIMIT', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'limit_value', 0.9999703168869019, 5), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.8727602958679199, 3), 'no'), (('GROUP_COL', ('conductor', 'name', 37), 0.09100955724716187, 3), 'no'), (('GROUP_COL', ('conductor', 'conductor_id', 36), 0.03135449066758156, 3), 'no'), (('GROUP_COL', ('conductor', '*', 59), 0.0047763194888830185, 3), 'no'), (('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999997615814209, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9931948184967041, 4), 'yes'), (('ORDER_LIMIT', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'limit_value', 0.9999703168869019, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 526
    },
    {
        "nl": "What is the name of the conductor who has worked the greatest number of years ?",
        "true_sql": "select conductor.name order_by conductor.year_of_work desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "order_by",
            "conductor.year_of_work",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [40], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999998807907104, 3), ('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9742864370346069, 4), ('ORDER_LIMIT', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'limit_value', 0.9999778270721436, 5)]",
        "logprob": "-4.636766534079178",
        "q_counter": 4,
        "questioned_indices": [
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('GROUP_COL', ('conductor', 'conductor_id', 36), 0.5652486085891724, 3), 'no'), (('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999998807907104, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9742864370346069, 4), 'yes'), (('ORDER_LIMIT', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'limit_value', 0.9999778270721436, 5), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('conductor', 'conductor_id', 36), 0.5652486085891724, 3), 'no'), (('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.4287678301334381, 3), 'no'), (('GROUP_COL', ('conductor', 'name', 37), 0.005852702539414167, 3), 'no'), (('GROUP_COL', ('conductor', '*', 59), 0.0001076793996617198, 3), 'no'), (('ORDER_AGG_v2', ('conductor', 'year_of_work', 40), ('none_agg', 0), False, 0.9999998807907104, 3), 'yes'), (('ORDER_DESC_ASC', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'desc', 0.9742864370346069, 4), 'yes'), (('ORDER_LIMIT', (('conductor', 'year_of_work', 40), ('none_agg', 0), False), 'limit_value', 0.9999778270721436, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 527
    },
    {
        "nl": "Show the names of conductors and the orchestras they have conducted .",
        "true_sql": "select conductor.name , orchestra.orchestra",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            ",",
            "conductor.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.8092910051345825, 3)]",
        "logprob": "-0.2118431400409777",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.8092910051345825, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.8092910051345825, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 528
    },
    {
        "nl": "What are the names of conductors as well as the corresonding orchestras that they have conducted ?",
        "true_sql": "select conductor.name , orchestra.orchestra",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            ",",
            "conductor.name",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9937664270401001, 3)]",
        "logprob": "-8.455210698940025",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9937664270401001, 3), 'yes'), (('WHERE_COL', ('conductor', 'conductor_id', 36), 0.7467141151428223, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9937664270401001, 3), 'yes'), (('WHERE_COL', ('conductor', 'conductor_id', 36), 0.7467141151428223, 5), 'no'), (('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.07301249355077744, 5), 'no'), (('WHERE_COL', ('conductor', 'age', 38), 0.07257957011461258, 5), 'no'), (('WHERE_COL', ('conductor', 'name', 37), 0.05629531294107437, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 529
    },
    {
        "nl": "Show the names of conductors that have conducted more than one orchestras .",
        "true_sql": "select conductor.name group_by orchestra.conductor_id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999986886978149, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998140931129456, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9999486207962036, 7)]",
        "logprob": "-5.091744805006873",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999986886978149, 3), 'yes'), (('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9941610926417046, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998140931129456, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9999486207962036, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999986886978149, 3), 'yes'), (('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9941610926417046, 5), 'no'), (('HAV_AGG_v2', ('orchestra', 'conductor_id', 43), ('count', 3), False, 0.34873911532201723, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.2800998487331676, 5), 'yes'), (('HAV_AGG_v2', ('orchestra', 'orchestra', 42), ('count', 3), False, 0.19364835808985595, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998140931129456, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9999486207962036, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 530
    },
    {
        "nl": "What are the names of conductors who have conducted at more than one orchestra ?",
        "true_sql": "select conductor.name group_by orchestra.conductor_id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999994039535522, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998326301574707, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.999929666519165, 7)]",
        "logprob": "-7.688933295830087",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999994039535522, 3), 'yes'), (('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9977236497367062, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998326301574707, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.999929666519165, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999994039535522, 3), 'yes'), (('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9977236497367062, 5), 'no'), (('HAV_AGG_v2', ('orchestra', 'conductor_id', 43), ('count', 3), False, 0.2734277407335174, 5), 'no'), (('HAV_AGG_v2', ('orchestra', 'orchestra', 42), ('count', 3), False, 0.23114891559051393, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.1463580216509659, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9998326301574707, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.999929666519165, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 531
    },
    {
        "nl": "Show the name of the conductor that has conducted the most number of orchestras .",
        "true_sql": "select conductor.name group_by orchestra.conductor_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999994039535522, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9871084651804464, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9994102716445923, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999945878982544, 7)]",
        "logprob": "-0.05424098133338206",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999994039535522, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9871084651804464, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9994102716445923, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999945878982544, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('GROUP_COL', ('orchestra', 'conductor_id', 43), 0.9999994039535522, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9871084651804464, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9994102716445923, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999945878982544, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 532
    },
    {
        "nl": "What is the name of the conductor who has conducted the most orchestras ?",
        "true_sql": "select conductor.name group_by orchestra.conductor_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "group_by",
            "orchestra.conductor_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 43, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'conductor_id', 43), 1.0, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.27047008008721096, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996495246887207, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999115467071533, 7)]",
        "logprob": "-5.231100302593705",
        "q_counter": 3,
        "questioned_indices": [
            2,
            3,
            4
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9969227442627954, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996495246887207, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999115467071533, 7), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9969227442627954, 5), 'no'), (('ORDER_AGG_v2', ('orchestra', 'conductor_id', 43), ('count', 3), False, 0.2712921675593671, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.27047008008721096, 5), 'yes'), (('ORDER_AGG_v2', ('conductor', '*', 59), ('count', 3), False, 0.190119843870945, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996495246887207, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999115467071533, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 533
    },
    {
        "nl": "Please show the name of the conductor that has conducted orchestras founded after 2008 .",
        "true_sql": "select conductor.name where orchestra.year_of_founded > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 10, False], None], 2008.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "where",
            "orchestra.year_of_founded",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9999927282333374, 3), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9980266690254211, 4), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999970197677612, 5)]",
        "logprob": "-0.004228934024042662",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9999927282333374, 3), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9980266690254211, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999970197677612, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9999927282333374, 3), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9980266690254211, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999970197677612, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 534
    },
    {
        "nl": "What are the names of conductors who have conducted orchestras founded after the year 2008 ?",
        "true_sql": "select conductor.name where orchestra.year_of_founded > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 10, False], None], 2008.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "conductor.name",
            "where",
            "orchestra.year_of_founded",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('conductor', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9999983310699463, 3), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9372434020042419, 4), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999974966049194, 5)]",
        "logprob": "-0.07177557228752325",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9999983310699463, 3), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9372434020042419, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999974966049194, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9999983310699463, 3), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9372434020042419, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999974966049194, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 535
    },
    {
        "nl": "Please show the different record companies and the corresponding number of orchestras .",
        "true_sql": "select orchestra.record_company , count ( orchestra.* ) group_by orchestra.record_company",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "orchestra.record_company",
            ",",
            "count",
            "(",
            "orchestra.*",
            ")",
            "group_by",
            "orchestra.record_company",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [44], 8, [9, 5, 60, 4], 10, 44, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999979734420776, 2), ('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9918487157065043, 4), ('GROUP_COL', ('orchestra', 'record_company', 44), 0.9999977350234985, 6)]",
        "logprob": "-0.10454431568411669",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999979734420776, 2), 'yes'), (('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9918487157065043, 4), 'yes'), (('GROUP_COL', ('orchestra', 'record_company', 44), 0.9999977350234985, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999979734420776, 2), 'yes'), (('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9918487157065043, 4), 'yes'), (('GROUP_COL', ('orchestra', 'record_company', 44), 0.9999977350234985, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 536
    },
    {
        "nl": "How many orchestras does each record company manage ?",
        "true_sql": "select orchestra.record_company , count ( orchestra.* ) group_by orchestra.record_company",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "orchestra.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9816410230956772, 1)]",
        "logprob": "-0.09252268405198719",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9816410230956772, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9816410230956772, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 537
    },
    {
        "nl": "Please show the record formats of orchestras in ascending order of count .",
        "true_sql": "select orchestra.major_record_format group_by orchestra.major_record_format order_by count ( orchestra.* ) asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.major_record_format",
            "order_by",
            "orchestra.record_company",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 11, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'major_record_format', 46), ('none_agg', 0), False, 0.9999997615814209, 1), ('ORDER_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 4.4478732888819636e-05, 3)]",
        "logprob": "-10.270014472075466",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'major_record_format', 46), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('ORDER_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.8654994964599609, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'major_record_format', 46), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('ORDER_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.8654994964599609, 3), 'no'), (('ORDER_AGG_v2', ('show', 'result', 57), ('none_agg', 0), False, 0.0996130108833313, 3), 'no'), (('ORDER_AGG_v2', ('orchestra', 'major_record_format', 46), ('none_agg', 0), False, 0.034737583249807365, 3), 'no'), (('ORDER_AGG_v2', ('orchestra', 'orchestra_id', 41), ('none_agg', 0), False, 0.00010382694745203484, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 538
    },
    {
        "nl": "What are the major record formats of orchestras , sorted by their frequency ?",
        "true_sql": "select orchestra.major_record_format group_by orchestra.major_record_format order_by count ( orchestra.* ) asc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.major_record_format",
            "order_by",
            "performance.orchestra_id",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 11, [48], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'major_record_format', 46), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('performance', 'orchestra_id', 48), ('none_agg', 0), False, 9.71417248365469e-05, 3), ('ORDER_DESC_ASC', (('performance', 'orchestra_id', 48), ('none_agg', 0), False), 'desc', 0.00043260332313366234, 4)]",
        "logprob": "-17.02187064402035",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9825747609138489, 3), 'no'), (('ORDER_DESC_ASC', (('performance', 'orchestra_id', 48), ('none_agg', 0), False), 'asc', 0.9942857623100281, 4), 'no')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9825747609138489, 3), 'no'), (('ORDER_AGG_v2', ('orchestra', 'major_record_format', 46), ('none_agg', 0), False, 0.015249722637236113, 3), 'no'), (('ORDER_AGG_v2', ('orchestra', 'orchestra_id', 41), ('none_agg', 0), False, 0.0016461425693705682, 3), 'no'), (('ORDER_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.00042916648089885706, 3), 'no'), (('ORDER_DESC_ASC', (('performance', 'orchestra_id', 48), ('none_agg', 0), False), 'asc', 0.9942857623100281, 4), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 539
    },
    {
        "nl": "List the record company shared by the most number of orchestras .",
        "true_sql": "select orchestra.record_company group_by orchestra.record_company order_by count ( orchestra.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "group_by",
            "orchestra.record_company",
            "order_by",
            "count",
            "(",
            "orchestra.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 44, 11, [9, 5, 60, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('orchestra', 'record_company', 44), 0.9999992847442627, 3), ('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9941942724904191, 5), ('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9993913173675537, 6), ('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999170303344727, 7)]",
        "logprob": "-0.024624507813405",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('orchestra', 'record_company', 44), 0.9999992847442627, 3), 'yes'), (('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9941942724904191, 5), 'yes'), (('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9993913173675537, 6), 'yes'), (('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999170303344727, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('orchestra', 'record_company', 44), 0.9999992847442627, 3), 'yes'), (('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9941942724904191, 5), 'yes'), (('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9993913173675537, 6), 'yes'), (('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999170303344727, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 540
    },
    {
        "nl": "What is the record company used by the greatest number of orchestras ?",
        "true_sql": "select orchestra.record_company group_by orchestra.record_company order_by count ( orchestra.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "group_by",
            "orchestra.record_company",
            "order_by",
            "count",
            "(",
            "orchestra.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 44, 11, [9, 5, 60, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999982118606567, 1), ('GROUP_COL', ('orchestra', 'record_company', 44), 0.9997672438621521, 3), ('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9623641541703385, 5), ('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9992552399635315, 6), ('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999387264251709, 7)]",
        "logprob": "-0.15485516427834392",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999982118606567, 1), 'yes'), (('GROUP_COL', ('orchestra', 'record_company', 44), 0.9997672438621521, 3), 'yes'), (('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9623641541703385, 5), 'yes'), (('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9992552399635315, 6), 'yes'), (('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999387264251709, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999982118606567, 1), 'yes'), (('GROUP_COL', ('orchestra', 'record_company', 44), 0.9997672438621521, 3), 'yes'), (('ORDER_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9623641541703385, 5), 'yes'), (('ORDER_DESC_ASC', (('orchestra', '*', 60), ('count', 3), False), 'desc', 0.9992552399635315, 6), 'yes'), (('ORDER_LIMIT', (('orchestra', '*', 60), ('count', 3), False), 'limit_value', 0.9999387264251709, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 541
    },
    {
        "nl": "List the names of orchestras that have no performance .",
        "true_sql": "select orchestra.orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 6, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.orchestra",
            "where",
            "orchestra.orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "performance.orchestra_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [22, 20], 5, 2, [48], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9048169851303101, 1), ('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.9995052814483643, 3), ('WHERE_OP', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 0.9991968218664549, 4), ('WHERE_ROOT_TERM', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 'root', 0.9999948740005493, 5), ('SELECT_AGG_v2', ('performance', 'orchestra_id', 48), ('none_agg', 0), False, 0.13327316939830777, 7), ('O', '##END_NESTED##', 0.9997764229774475, 8)]",
        "logprob": "-2.3014887448129526",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9048169851303101, 1), 'yes'), (('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.9995052814483643, 3), 'yes'), (('WHERE_OP', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 0.9991968218664549, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 'root', 0.9999948740005493, 5), 'yes'), (('SELECT_AGG_v2', ('show', 'performance_id', 55), ('none_agg', 0), False, 0.4035142958164215, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9048169851303101, 1), 'yes'), (('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.9995052814483643, 3), 'yes'), (('WHERE_OP', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 0.9991968218664549, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 'root', 0.9999948740005493, 5), 'yes'), (('SELECT_AGG_v2', ('show', 'performance_id', 55), ('none_agg', 0), False, 0.4035142958164215, 7), 'no'), (('SELECT_AGG_v2', ('show', 'result', 57), ('none_agg', 0), False, 0.3138014376163483, 7), 'no'), (('SELECT_AGG_v2', ('performance', 'performance_id', 47), ('none_agg', 0), False, 0.1490372717380524, 7), 'no'), (('SELECT_AGG_v2', ('performance', 'orchestra_id', 48), ('none_agg', 0), False, 0.13327316939830777, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 542
    },
    {
        "nl": "What are the orchestras that do not have any performances ?",
        "true_sql": "select orchestra.orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 6, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.orchestra",
            "where",
            "orchestra.orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "performance.orchestra_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [22, 20], 5, 2, [48], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9973666071891785, 1), ('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.9999593496322632, 3), ('WHERE_OP', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 0.9998480677444335, 4), ('WHERE_ROOT_TERM', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 'root', 0.9999853372573853, 5), ('SELECT_AGG_v2', ('performance', 'orchestra_id', 48), ('none_agg', 0), False, 0.3106083273887635, 7), ('O', '##END_NESTED##', 0.9999161958694458, 8)]",
        "logprob": "-1.1732069804429845",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9973666071891785, 1), 'yes'), (('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.9999593496322632, 3), 'yes'), (('WHERE_OP', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 0.9998480677444335, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 'root', 0.9999853372573853, 5), 'yes'), (('SELECT_AGG_v2', ('show', 'performance_id', 55), ('none_agg', 0), False, 0.645537257194519, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.9973666071891785, 1), 'yes'), (('WHERE_COL', ('orchestra', 'orchestra_id', 41), 0.9999593496322632, 3), 'yes'), (('WHERE_OP', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 0.9998480677444335, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'orchestra_id', 41),), ('not in', 7), 'root', 0.9999853372573853, 5), 'yes'), (('SELECT_AGG_v2', ('show', 'performance_id', 55), ('none_agg', 0), False, 0.645537257194519, 7), 'no'), (('SELECT_AGG_v2', ('performance', 'orchestra_id', 48), ('none_agg', 0), False, 0.3106083273887635, 7), 'yes'), (('SELECT_AGG_v2', ('show', 'result', 57), ('none_agg', 0), False, 0.03608496114611626, 7), 'no'), (('SELECT_AGG_v2', ('performance', 'performance_id', 47), ('none_agg', 0), False, 0.005202866159379483, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 543
    },
    {
        "nl": "Show the record companies shared by orchestras founded before 2003 and after 2003 .",
        "true_sql": "select orchestra.record_company where orchestra.year_of_founded < value intersect select orchestra.record_company where orchestra.year_of_founded > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 10, False], None], 2003.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 10, False], None], 2003.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "where",
            "orchestra.year_of_founded",
            "<",
            "value",
            "intersect",
            "select",
            "orchestra.record_company",
            "where",
            "orchestra.year_of_founded",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 45, [21], 3, 23, 2, [44], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9972715973854065, 3), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('<', 2), 0.5188953280448914, 4), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('<', 2), 'terminal', 0.9999934434890747, 5), ('IUEN_v2', ('intersect', 1), 0.9964137673377991, 6), ('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.999997615814209, 8), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.947337806224823, 10), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.8548511266708374, 11), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999947547912598, 12)]",
        "logprob": "-0.873419237691734",
        "q_counter": 8,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9972715973854065, 3), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('<', 2), 0.5188953280448914, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('<', 2), 'terminal', 0.9999934434890747, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9964137673377991, 6), 'yes'), (('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.999997615814209, 8), 'yes'), (('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.947337806224823, 10), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.8548511266708374, 11), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999947547912598, 12), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9972715973854065, 3), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('<', 2), 0.5188953280448914, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('<', 2), 'terminal', 0.9999934434890747, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9964137673377991, 6), 'yes'), (('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.999997615814209, 8), 'yes'), (('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.947337806224823, 10), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.8548511266708374, 11), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.9999947547912598, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 544
    },
    {
        "nl": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 ?",
        "true_sql": "select orchestra.record_company where orchestra.year_of_founded < value intersect select orchestra.record_company where orchestra.year_of_founded > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 10, False], None], 2003.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 10, False], None], 2003.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.record_company",
            "where",
            "orchestra.year_of_founded",
            "<",
            "value",
            "intersect",
            "select",
            "orchestra.record_company",
            "where",
            "orchestra.year_of_founded",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 45, [21], 3, 23, 2, [44], 6, 45, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999991655349731, 1), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9997389912605286, 3), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('<', 2), 0.9582292437553406, 4), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('<', 2), 'terminal', 0.9999878406524658, 5), ('IUEN_v2', ('intersect', 1), 0.9996201992034912, 6), ('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.999974250793457, 8), ('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9998310804367065, 10), ('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9659298062324524, 11), ('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.999985933303833, 12)]",
        "logprob": "-0.0783523730078129",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9997389912605286, 3), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('<', 2), 0.9582292437553406, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('<', 2), 'terminal', 0.9999878406524658, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9996201992034912, 6), 'yes'), (('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.999974250793457, 8), 'yes'), (('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9998310804367065, 10), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9659298062324524, 11), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.999985933303833, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9997389912605286, 3), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('<', 2), 0.9582292437553406, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('<', 2), 'terminal', 0.9999878406524658, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9996201992034912, 6), 'yes'), (('SELECT_AGG_v2', ('orchestra', 'record_company', 44), ('none_agg', 0), False, 0.999974250793457, 8), 'yes'), (('WHERE_COL', ('orchestra', 'year_of_founded', 45), 0.9998310804367065, 10), 'yes'), (('WHERE_OP', (('orchestra', 'year_of_founded', 45),), ('>', 1), 0.9659298062324524, 11), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'year_of_founded', 45),), ('>', 1), 'terminal', 0.999985933303833, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 545
    },
    {
        "nl": "Find the number of orchestras whose record format is `` CD `` or `` DVD `` .",
        "true_sql": "select count ( orchestra.* ) where orchestra.major_record_format = value or orchestra.major_record_format = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"CD\"', None], 'or', [False, 2, [0, [0, 11, False], None], '\"DVD\"', None]], 'extracted_clause_asterisk': {'select': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "orchestra.*",
            ")",
            "where",
            "orchestra.major_record_format",
            "=",
            "value",
            "or",
            "orchestra.major_record_format",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 6, 46, [7], 3, 25, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.8552518503855449, 1), ('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999992847442627, 3), ('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9999921321868896, 4), ('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999018907546997, 7), ('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9999452829360962, 8), ('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999978542327881, 9)]",
        "logprob": "-0.6260552102305795",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.8552518503855449, 1), 'yes'), (('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999992847442627, 3), 'yes'), (('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9999921321868896, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999018907546997, 7), 'yes'), (('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9999452829360962, 8), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999978542327881, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.8552518503855449, 1), 'yes'), (('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999992847442627, 3), 'yes'), (('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9999921321868896, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999018907546997, 7), 'yes'), (('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9999452829360962, 8), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999978542327881, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 546
    },
    {
        "nl": "Count the number of orchestras that have CD or DVD as their record format .",
        "true_sql": "select count ( orchestra.* ) where orchestra.major_record_format = value or orchestra.major_record_format = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"CD\"', None], 'or', [False, 2, [0, [0, 11, False], None], '\"DVD\"', None]], 'extracted_clause_asterisk': {'select': 'orchestra.*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "orchestra.*",
            ")",
            "where",
            "orchestra.major_record_format",
            "=",
            "value",
            "or",
            "orchestra.major_record_format",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 6, 46, [7], 3, 25, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9128612084931704, 1), ('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999806880950928, 3), ('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.99997878074646, 4), ('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9895402789115906, 7), ('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9998542070388794, 8), ('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999974966049194, 9)]",
        "logprob": "-0.37608332283066503",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9128612084931704, 1), 'yes'), (('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999806880950928, 3), 'yes'), (('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.99997878074646, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9895402789115906, 7), 'yes'), (('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9998542070388794, 8), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999974966049194, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9128612084931704, 1), 'yes'), (('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9999806880950928, 3), 'yes'), (('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.99997878074646, 4), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('orchestra', 'major_record_format', 46), 0.9895402789115906, 7), 'yes'), (('WHERE_OP', (('orchestra', 'major_record_format', 46),), ('=', 0), 0.9998542070388794, 8), 'yes'), (('WHERE_ROOT_TERM', (('orchestra', 'major_record_format', 46),), ('=', 0), 'terminal', 0.9999974966049194, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 547
    },
    {
        "nl": "Show the years in which orchestras that have given more than one performance are founded .",
        "true_sql": "select orchestra.year_of_founded group_by performance.orchestra_id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 13, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.year_of_founded",
            "group_by",
            "performance.orchestra_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 48, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.4003397822380066, 1), ('GROUP_COL', ('performance', 'orchestra_id', 48), 0.1930529922246933, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999161958694458, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9996275901794434, 7)]",
        "logprob": "-4.153174685230009",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.5995259881019592, 1), 'no'), (('GROUP_COL', ('orchestra', 'orchestra', 42), 0.6191366910934448, 3), 'no'), (('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9416659854391028, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999161958694458, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9996275901794434, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'orchestra', 42), ('none_agg', 0), False, 0.5995259881019592, 1), 'no'), (('SELECT_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.4003397822380066, 1), 'yes'), (('SELECT_AGG_v2', ('orchestra', '*', 60), ('none_agg', 0), False, 4.614900535671038e-05, 1), 'no'), (('SELECT_AGG_v2', ('orchestra', 'orchestra_id', 41), ('none_agg', 0), False, 2.0141002096352174e-05, 1), 'no'), (('GROUP_COL', ('orchestra', 'orchestra', 42), 0.6191366910934448, 3), 'no'), (('GROUP_COL', ('performance', 'orchestra_id', 48), 0.1930529922246933, 3), 'yes'), (('GROUP_COL', ('orchestra', 'year_of_founded', 45), 0.16897545754909515, 3), 'no'), (('GROUP_COL', ('performance', 'performance_id', 47), 0.011386275291442871, 3), 'no'), (('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9416659854391028, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.673124909999327, 5), 'yes'), (('HAV_AGG_v2', ('performance', '*', 61), ('count', 3), False, 0.2605207449842521, 5), 'no'), (('HAV_AGG_v2', ('orchestra', 'orchestra', 42), ('count', 3), False, 0.22121502204071436, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999161958694458, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9996275901794434, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 548
    },
    {
        "nl": "What are years of founding for orchestras that have had more than a single performance ?",
        "true_sql": "select orchestra.year_of_founded group_by performance.orchestra_id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 13, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'conductor.conductor_id': 1, 'conductor.name': 2, 'conductor.age': 3, 'conductor.nationality': 4, 'conductor.year_of_work': 5, 'orchestra.orchestra_id': 6, 'orchestra.orchestra': 7, 'orchestra.conductor_id': 8, 'orchestra.record_company': 9, 'orchestra.year_of_founded': 10, 'orchestra.major_record_format': 11, 'performance.performance_id': 12, 'performance.orchestra_id': 13, 'performance.type': 14, 'performance.date': 15, 'performance.official_ratings_(millions)': 16, 'performance.weekly_rank': 17, 'performance.share': 18, 'show.show_id': 19, 'show.performance_id': 20, 'show.if_first_show': 21, 'show.result': 22, 'show.attendance': 23, 'conductor.*': 24, 'orchestra.*': 25, 'performance.*': 26, 'show.*': 27}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "orchestra.year_of_founded",
            "group_by",
            "performance.orchestra_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 48, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.9999983310699463, 1), ('GROUP_COL', ('performance', 'orchestra_id', 48), 0.22052541375160217, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999032020568848, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9881992340087891, 7)]",
        "logprob": "-5.507175504832546",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.9999983310699463, 1), 'yes'), (('GROUP_COL', ('orchestra', 'year_of_founded', 45), 0.773010790348053, 3), 'no'), (('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9756325314059946, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999032020568848, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9881992340087891, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('orchestra', 'year_of_founded', 45), ('none_agg', 0), False, 0.9999983310699463, 1), 'yes'), (('GROUP_COL', ('orchestra', 'year_of_founded', 45), 0.773010790348053, 3), 'no'), (('GROUP_COL', ('performance', 'orchestra_id', 48), 0.22052541375160217, 3), 'yes'), (('GROUP_COL', ('orchestra', 'orchestra', 42), 0.0060407621785998344, 3), 'no'), (('GROUP_COL', ('show', 'result', 57), 0.00026092969346791506, 3), 'no'), (('HAV_AGG_v2', ('orchestra', '*', 60), ('count', 3), False, 0.9756325314059946, 5), 'no'), (('HAV_AGG_v2', ('performance', '*', 61), ('count', 3), False, 0.44386178739967597, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.40227363071164757, 5), 'yes'), (('HAV_AGG_v2', ('performance', 'orchestra_id', 48), ('count', 3), False, 0.37706681228158967, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999032020568848, 6), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9881992340087891, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 549
    },
    {
        "nl": "Which country does Airline `` JetBlue Airways `` belong to ?",
        "true_sql": "select airlines.country where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.country",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.9994800686836243, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9960075616836548, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.38412012062329437",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.9994800686836243, 1), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9960075616836548, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.9994800686836243, 1), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9960075616836548, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 550
    },
    {
        "nl": "What country is Jetblue Airways affiliated with ?",
        "true_sql": "select airlines.country where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.country",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.999874472618103, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9990361928939819, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.006880443227291048",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.999874472618103, 1), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9990361928939819, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.999874472618103, 1), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9990361928939819, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 551
    },
    {
        "nl": "What is the abbreviation of Airline `` JetBlue Airways `` ?",
        "true_sql": "select airlines.abbreviation where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.abbreviation",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999911785125732, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9999822378158569, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999969005584717, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999971389770508, 5)]",
        "logprob": "-0.00030014269642302194",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999911785125732, 1), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9999822378158569, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999969005584717, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999971389770508, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999911785125732, 1), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9999822378158569, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999969005584717, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999971389770508, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 552
    },
    {
        "nl": "Which abbreviation corresponds to Jetblue Airways ?",
        "true_sql": "select airlines.abbreviation where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.abbreviation",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9998408555984497, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999970197677612, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.0004028361601092367",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9998408555984497, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999970197677612, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9998408555984497, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999970197677612, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 553
    },
    {
        "nl": "List all airline names and their abbreviations in `` USA `` .",
        "true_sql": "select airlines.airline , airlines.abbreviation where airlines.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            ",",
            "airlines.abbreviation",
            "where",
            "airlines.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9999947547912598, 1), ('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999608993530273, 3), ('WHERE_COL', ('airlines', 'country', 39), 1.0, 5), ('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999951124191284, 6), ('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999977350234985, 7)]",
        "logprob": "-4.643237875429078",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9999947547912598, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999608993530273, 3), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9226563572883606, 5), 'no'), (('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999951124191284, 6), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999977350234985, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9999947547912598, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999608993530273, 3), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9226563572883606, 5), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.06739822775125504, 5), 'no'), (('WHERE_COL', ('airlines', 'country', 39), 0.00962803978472948, 5), 'yes'), (('WHERE_COL', ('airlines', 'uid', 36), 0.0003165275265928358, 5), 'no'), (('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999951124191284, 6), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999977350234985, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 554
    },
    {
        "nl": "What are the airline names and abbreviations for airlines in the USA ?",
        "true_sql": "select airlines.airline , airlines.abbreviation where airlines.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            ",",
            "airlines.abbreviation",
            "where",
            "airlines.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9999973773956299, 1), ('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999973773956299, 3), ('WHERE_COL', ('airlines', 'country', 39), 1.0, 5), ('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999852180480957, 6), ('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999983310699463, 7)]",
        "logprob": "-1.7216140260656407",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9999973773956299, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999973773956299, 3), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.8071680665016174, 5), 'no'), (('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999852180480957, 6), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999983310699463, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9999973773956299, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9999973773956299, 3), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.8071680665016174, 5), 'no'), (('WHERE_COL', ('airlines', 'country', 39), 0.1789243370294571, 5), 'yes'), (('WHERE_COL', ('airlines', 'airline', 37), 0.012550677172839642, 5), 'no'), (('WHERE_COL', ('airlines', 'uid', 36), 0.0013553554890677333, 5), 'no'), (('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999852180480957, 6), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999983310699463, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 555
    },
    {
        "nl": "List the airport code and name in the city of Anthony .",
        "true_sql": "select airports.airportcode , airports.airportname where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Anthony\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportcode",
            ",",
            "airports.airportname",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.6381061673164368, 3), ('WHERE_COL', ('airports', 'city', 40), 0.9999996423721313, 5), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999958276748657, 6), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999992847442627, 7)]",
        "logprob": "-0.450489056223811",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.6381061673164368, 3), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.9999996423721313, 5), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999958276748657, 6), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999992847442627, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.6381061673164368, 3), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.9999996423721313, 5), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999958276748657, 6), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999992847442627, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 556
    },
    {
        "nl": "Give the airport code and airport name corresonding to the city Anthony .",
        "true_sql": "select airports.airportcode , airports.airportname where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Anthony\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportcode",
            ",",
            "airports.airportname",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [42], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.999841570854187, 1), ('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9840071797370911, 3), ('WHERE_COL', ('airports', 'city', 40), 1.0, 5), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999924898147583, 6), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999986886978149, 7)]",
        "logprob": "-0.0222734217247089",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.999841570854187, 1), 'yes'), (('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9840071797370911, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999924898147583, 6), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999986886978149, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.999841570854187, 1), 'yes'), (('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9840071797370911, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999924898147583, 6), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999986886978149, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 557
    },
    {
        "nl": "How many airlines do we have ?",
        "true_sql": "select count ( airlines.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'airlines.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "airlines.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9999909102280864, 1)]",
        "logprob": "-9.608488340265262e-05",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9999909102280864, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9999909102280864, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 558
    },
    {
        "nl": "What is the total number of airlines ?",
        "true_sql": "select count ( airlines.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'airlines.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "airlines.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9999536551511933, 1)]",
        "logprob": "-0.002344327791878735",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9999536551511933, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9999536551511933, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 559
    },
    {
        "nl": "How many airports do we have ?",
        "true_sql": "select count ( airports.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'airports.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "airports.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 50, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999982416609847, 1)]",
        "logprob": "-0.00020690768590812933",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999982416609847, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999982416609847, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 560
    },
    {
        "nl": "Return the number of airports .",
        "true_sql": "select count ( airports.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'airports.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "airports.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 50, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999639970179823, 1)]",
        "logprob": "-0.0012217104335960614",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999639970179823, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999639970179823, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 561
    },
    {
        "nl": "How many flights do we have ?",
        "true_sql": "select count ( flights.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9999899266756905, 1)]",
        "logprob": "-0.00011301381086652475",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9999899266756905, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9999899266756905, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 562
    },
    {
        "nl": "Return the number of flights .",
        "true_sql": "select count ( flights.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.999992668600752, 1)]",
        "logprob": "-0.0001624913312087829",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.999992668600752, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.999992668600752, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 563
    },
    {
        "nl": "Which airline has abbreviation 'UAL ' ?",
        "true_sql": "select airlines.airline where airlines.abbreviation = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], '\"UAL\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9976983666419983, 1), ('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9997268319129944, 3), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999442100524902, 4), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.005887548907079858",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9976983666419983, 1), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9997268319129944, 3), 'yes'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999442100524902, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9976983666419983, 1), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9997268319129944, 3), 'yes'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999442100524902, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 564
    },
    {
        "nl": "Give the airline with abbreviation 'UAL ' .",
        "true_sql": "select airlines.airline where airlines.abbreviation = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 3, False], None], '\"UAL\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9673717617988586, 1), ('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9999973773956299, 3), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999847412109375, 4), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.03404669497831975",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9673717617988586, 1), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9999973773956299, 3), 'yes'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999847412109375, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9673717617988586, 1), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9999973773956299, 3), 'yes'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999847412109375, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 565
    },
    {
        "nl": "How many airlines are from USA ?",
        "true_sql": "select count ( airlines.* ) where airlines.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {'select': 'airlines.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "airlines.*",
            ")",
            "where",
            "airlines.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.999835139602229, 1), ('WHERE_COL', ('airlines', 'country', 39), 0.9999717473983765, 3), ('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999910593032837, 4), ('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.0009193875575851246",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.999835139602229, 1), 'yes'), (('WHERE_COL', ('airlines', 'country', 39), 0.9999717473983765, 3), 'yes'), (('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999910593032837, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.999835139602229, 1), 'yes'), (('WHERE_COL', ('airlines', 'country', 39), 0.9999717473983765, 3), 'yes'), (('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.9999910593032837, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 566
    },
    {
        "nl": "Return the number of airlines in the USA .",
        "true_sql": "select count ( airlines.* ) where airlines.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"USA\"', None]], 'extracted_clause_asterisk': {'select': 'airlines.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "airlines.*",
            ")",
            "where",
            "airlines.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 49, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9992755002306749, 1), ('WHERE_COL', ('airlines', 'country', 39), 0.9771784543991089, 3), ('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.99989914894104, 4), ('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999973773956299, 5)]",
        "logprob": "-0.053897872342888835",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9992755002306749, 1), 'yes'), (('WHERE_COL', ('airlines', 'country', 39), 0.9771784543991089, 3), 'yes'), (('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.99989914894104, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999973773956299, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.9992755002306749, 1), 'yes'), (('WHERE_COL', ('airlines', 'country', 39), 0.9771784543991089, 3), 'yes'), (('WHERE_OP', (('airlines', 'country', 39),), ('=', 0), 0.99989914894104, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'country', 39),), ('=', 0), 'terminal', 0.9999973773956299, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 567
    },
    {
        "nl": "Which city and country is the Alton airport at ?",
        "true_sql": "select airports.city , airports.country where airports.airportname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"Alton\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.city",
            ",",
            "airports.country",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [43], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.9189603328704834, 1), ('SELECT_AGG_v2', ('airports', 'country', 43), ('none_agg', 0), False, 0.9785445332527161, 3), ('WHERE_COL', ('airports', 'airportname', 42), 1.0, 5), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999966621398926, 6), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.999998927116394, 7)]",
        "logprob": "-3.4900473813030994",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.9189603328704834, 1), 'yes'), (('SELECT_AGG_v2', ('airports', 'country', 43), ('none_agg', 0), False, 0.9785445332527161, 3), 'yes'), (('WHERE_COL', ('airports', 'country', 43), 0.9630018472671509, 5), 'no'), (('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999966621398926, 6), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.999998927116394, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.9189603328704834, 1), 'yes'), (('SELECT_AGG_v2', ('airports', 'country', 43), ('none_agg', 0), False, 0.9785445332527161, 3), 'yes'), (('WHERE_COL', ('airports', 'country', 43), 0.9630018472671509, 5), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.034058354794979095, 5), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.002328542759642005, 5), 'no'), (('WHERE_COL', ('airlines', 'country', 39), 0.0005952862557023764, 5), 'no'), (('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999966621398926, 6), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.999998927116394, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 568
    },
    {
        "nl": "Give the city and country for the Alton airport .",
        "true_sql": "select airports.city , airports.country where airports.airportname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"Alton\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.city",
            ",",
            "airports.country",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [43], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.08685096353292465, 1), ('SELECT_AGG_v2', ('airports', 'country', 43), ('none_agg', 0), False, 0.705987274646759, 3), ('WHERE_COL', ('airports', 'airportname', 42), 0.6766247749328613, 5), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999966621398926, 6), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999991655349731, 7)]",
        "logprob": "-3.18398784465988",
        "q_counter": 4,
        "questioned_indices": [
            0,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.904265820980072, 1), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.6766247749328613, 5), 'yes'), (('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999966621398926, 6), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999991655349731, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.904265820980072, 1), 'no'), (('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.08685096353292465, 1), 'yes'), (('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.008541997522115707, 1), 'no'), (('SELECT_AGG_v2', ('airports', 'country', 43), ('none_agg', 0), False, 0.0002588508650660513, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.6766247749328613, 5), 'yes'), (('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999966621398926, 6), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999991655349731, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 569
    },
    {
        "nl": "What is the airport name for airport 'AKO ' ?",
        "true_sql": "select airports.airportname where airports.airportcode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], '\"AKO\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.airportcode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999945163726807, 1), ('WHERE_COL', ('airports', 'airportcode', 41), 1.0, 3), ('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999963045120239, 4), ('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-7.632508346796411",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999945163726807, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9799219369888306, 3), 'no'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999963045120239, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999945163726807, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9799219369888306, 3), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.019552690908312798, 3), 'no'), (('WHERE_COL', ('airports', 'airportcode', 41), 0.0004846015071962029, 3), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 2.7837519155582413e-05, 3), 'no'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999963045120239, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 570
    },
    {
        "nl": "Return the name of the airport with code 'AKO ' .",
        "true_sql": "select airports.airportname where airports.airportcode = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 6, False], None], '\"AKO\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.airportcode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999889135360718, 1), ('WHERE_COL', ('airports', 'airportcode', 41), 0.9999998807907104, 3), ('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999889135360718, 4), ('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.0007258704436041981",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999889135360718, 1), 'yes'), (('WHERE_COL', ('airports', 'airportcode', 41), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999889135360718, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999889135360718, 1), 'yes'), (('WHERE_COL', ('airports', 'airportcode', 41), 0.9999998807907104, 3), 'yes'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999889135360718, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 571
    },
    {
        "nl": "What are airport names at City 'Aberdeen ' ?",
        "true_sql": "select airports.airportname where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999592304229736, 1), ('WHERE_COL', ('airports', 'city', 40), 1.0, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-0.0016589576661316255",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999592304229736, 1), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9999592304229736, 1), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 572
    },
    {
        "nl": "What are the names of airports in Aberdeen ?",
        "true_sql": "select airports.airportname where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 1.0, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999972581863403, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.005148536420039187",
        "q_counter": 2,
        "questioned_indices": [
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999972581863403, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999972581863403, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 573
    },
    {
        "nl": "How many flights depart from 'APG ' ?",
        "true_sql": "select count ( flights.* ) where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airports.airportcode",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 41, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9999515102822221, 1), ('WHERE_COL', ('airports', 'airportcode', 41), 6.52081798762083e-05, 3), ('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999986886978149, 4), ('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-9.63861002524084",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9999515102822221, 1), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9907518625259399, 3), 'no'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999986886978149, 4), 'no'), (('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9999515102822221, 1), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.9907518625259399, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.005991291254758835, 3), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.0030904265586286783, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.00010036347521236166, 3), 'no'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('=', 0), 0.9999986886978149, 4), 'no'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('>', 1), 5.548087074203067e-07, 4), 'no'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('!=', 5), 3.00061913094396e-07, 4), 'no'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('in', 8), 9.154287283763551e-08, 4), 'no'), (('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 574
    },
    {
        "nl": "Count the number of flights departing from 'APG ' .",
        "true_sql": "select count ( flights.* ) where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.7247617625523801, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.0003921078168787062, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999983310699463, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-9.13663656046082",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.9184405165474366, 1), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9513983726501465, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999983310699463, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.9184405165474366, 1), 'no'), (('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.7247617625523801, 1), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), True, 0.3490643284368822, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.0045741461217403395, 1), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9513983726501465, 3), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.04429282993078232, 3), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.0032402467913925648, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.00066153216175735, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999983310699463, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('>', 1), 8.6658332065781e-07, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('!=', 5), 2.72389371502868e-07, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('in', 8), 9.784802301737727e-08, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 575
    },
    {
        "nl": "How many flights have destination ATO ?",
        "true_sql": "select count ( flights.* ) where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"ATO\"', None]], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "flights.destairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9364782346640174, 1), ('WHERE_COL', ('flights', 'destairport', 48), 1.0, 3), ('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999903440475464, 4), ('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-4.538190772702693",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9364782346640174, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9860829710960388, 3), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999903440475464, 4), 'yes'), (('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9364782346640174, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9860829710960388, 3), 'no'), (('WHERE_COL', ('flights', 'destairport', 48), 0.013904870487749577, 3), 'yes'), (('WHERE_COL', ('airports', 'airportcode', 41), 5.839370260218857e-06, 3), 'no'), (('WHERE_COL', ('airports', 'city', 40), 3.799224941758439e-06, 3), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999903440475464, 4), 'yes'), (('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 576
    },
    {
        "nl": "Count the number of flights into ATO .",
        "true_sql": "select count ( flights.* ) where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"ATO\"', None]], 'extracted_clause_asterisk': {'select': 'flights.*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.*",
            ")",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 38, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9923405337070056, 1), ('WHERE_COL', ('airlines', 'abbreviation', 38), 2.5973400624934584e-05, 3), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999929666519165, 4), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-10.592027554000829",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9923405337070056, 1), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.9137460589408875, 3), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999929666519165, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9923405337070056, 1), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.9137460589408875, 3), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.05601201578974724, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.02998550422489643, 3), 'no'), (('WHERE_COL', ('airports', 'airportcode', 41), 0.00017091970948968083, 3), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9999929666519165, 4), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('>', 1), 5.794392563984729e-06, 4), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('not in', 7), 0.0007520468346922961, 4), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('!=', 5), 2.406677310773375e-07, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 577
    },
    {
        "nl": "How many flights depart from City Aberdeen ?",
        "true_sql": "select count ( * ) where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3009633303899692, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9992325305938721, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-4.816067833084531",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9940781562856518, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9992325305938721, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9940781562856518, 1), 'no'), (('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.3302611871876143, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3009633303899692, 1), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.22296580673898853, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9992325305938721, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 578
    },
    {
        "nl": "Return the number of flights departing from Aberdeen .",
        "true_sql": "select count ( * ) where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "and",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 16, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3679030470134114, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9957793951034546, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999997615814209, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('airports', 'city', 40), 0.005918432958424091, 7), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999967098236084, 8), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999927282333374, 9)]",
        "logprob": "-9.713223344110604",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9513274601059698, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9957793951034546, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999997615814209, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('flights', 'destairport', 48), 0.9663913249969482, 7), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999967098236084, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999927282333374, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9513274601059698, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.6299435968620304, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3679030470134114, 1), 'yes'), (('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.24516733357764522, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9957793951034546, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999997615814209, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('flights', 'destairport', 48), 0.9663913249969482, 7), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.017024770379066467, 7), 'no'), (('WHERE_COL', ('airports', 'countryabbrev', 44), 0.009443146176636219, 7), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.005918432958424091, 7), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999967098236084, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999927282333374, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 579
    },
    {
        "nl": "How many flights arriving in Aberdeen city ?",
        "true_sql": "select count ( * ) where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.37861421928204847, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9999904632568359, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999985694885254, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-3.9069881754712847",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9878122259566875, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9999904632568359, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999985694885254, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9878122259566875, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.37861421928204847, 1), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.34010309844250736, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), True, 0.4017869324952186, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9999904632568359, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999985694885254, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 580
    },
    {
        "nl": "Return the number of flights arriving in Aberdeen .",
        "true_sql": "select count ( * ) where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.29471459883847084, 1), ('WHERE_COL', ('airports', 'city', 40), 0.999506950378418, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-5.582428583460614",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.9686355687072027, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.999506950378418, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.9686355687072027, 1), 'no'), (('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.5592047433528595, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.009416435845196247, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.29471459883847084, 1), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.999506950378418, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 581
    },
    {
        "nl": "How many flights depart from City 'Aberdeen ' and have destination City 'Ashley ' ?",
        "true_sql": "select count ( * ) where airports.city = value and airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Ashley\"', None], 'and', [False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "and",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 16, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.29089306157614087, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9993316531181335, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999955892562866, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), ('WHERE_COL', ('airports', 'city', 40), 0.2871045470237732, 7), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999699592590332, 8), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999977350234985, 9)]",
        "logprob": "-6.218407703367845",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9973230460306589, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9993316531181335, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999955892562866, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes'), (('WHERE_COL', ('flights', 'destairport', 48), 0.6618936657905579, 7), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999699592590332, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999977350234985, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9973230460306589, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.29089306157614087, 1), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.22020929499364122, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), True, 0.22057819549224908, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9993316531181335, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999955892562866, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes'), (('WHERE_COL', ('flights', 'destairport', 48), 0.6618936657905579, 7), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.2871045470237732, 7), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.05097515881061554, 7), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 2.301846689078957e-05, 7), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999699592590332, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999977350234985, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 582
    },
    {
        "nl": "How many flights fly from Aberdeen to Ashley ?",
        "true_sql": "select count ( * ) where airports.city = value and airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Ashley\"', None], 'and', [False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "and",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 16, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.5231041438984775, 1), ('WHERE_COL', ('airports', 'city', 40), 0.8433202505111694, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999949932098389, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('airports', 'city', 40), 0.045227229595184326, 7), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999583959579468, 8), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.999993085861206, 9)]",
        "logprob": "-5.864955270724242",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9284706457480247, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.8433202505111694, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999949932098389, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('airports', 'countryabbrev', 44), 0.624904990196228, 7), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999583959579468, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.999993085861206, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9284706457480247, 1), 'no'), (('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.6493998347928532, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.5231041438984775, 1), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.21882314576515763, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.8433202505111694, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999949932098389, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('airports', 'countryabbrev', 44), 0.624904990196228, 7), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.26949360966682434, 7), 'no'), (('WHERE_COL', ('flights', 'destairport', 48), 0.05904202163219452, 7), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.045227229595184326, 7), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999583959579468, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.999993085861206, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 583
    },
    {
        "nl": "How many flights does airline 'JetBlue Airways ' have ?",
        "true_sql": "select count ( * ) where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "flights.flightno",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 46, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), True, 0.4611190569289782, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9997995495796204, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999978542327881, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-3.8709257361680134",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.8984734359912464, 1), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9997995495796204, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999978542327881, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.8984734359912464, 1), 'no'), (('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.618418731626881, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'airline', 45), ('count', 3), True, 0.6696181981988629, 1), 'no'), (('SELECT_AGG_v2', ('airlines', 'airline', 37), ('count', 3), True, 0.5108251237449661, 1), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.9997995495796204, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999978542327881, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 584
    },
    {
        "nl": "Give the number of Jetblue Airways flights .",
        "true_sql": "select count ( * ) where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"JetBlue Airways\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "flights.flightno",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.045510018685602664, 1), ('WHERE_COL', ('airlines', 'airline', 37), 1.0, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.999993085861206, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999982118606567, 5)]",
        "logprob": "-13.078589018142836",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9933608770370483, 1), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.5020638108253479, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.999993085861206, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9933608770370483, 1), 'no'), (('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.2845348837380058, 1), 'no'), (('SELECT_AGG_v2', ('flights', '*', 51), ('none_agg', 0), False, 1.3794624464935628e-05, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 9.720143680169716e-06, 1), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.5020638108253479, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.4936365485191345, 3), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.004105850122869015, 3), 'no'), (('WHERE_COL', ('flights', 'airline', 45), 0.00013505086826626211, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.999993085861206, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 585
    },
    {
        "nl": "How many 'United Airlines ' flights go to Airport 'ASY ' ?",
        "true_sql": "select count ( * ) where airlines.airline = value and flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None], 'and', [False, 2, [0, [0, 13, False], None], '\"ASY\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6634500429571206, 1), ('WHERE_COL', ('airlines', 'airline', 37), 1.0, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-8.379214638951082",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), True, 0.853871564421635, 1), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9987332224845886, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), True, 0.853871564421635, 1), 'no'), (('SELECT_AGG_v2', ('airlines', 'airline', 37), ('count', 3), True, 0.7350081985927859, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6634500429571206, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('count', 3), True, 0.5988785892828845, 1), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9987332224845886, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.0012602896895259619, 3), 'yes'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 2.533808128646342e-06, 3), 'no'), (('WHERE_COL', ('airports', 'city', 40), 2.056881612588768e-06, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 586
    },
    {
        "nl": "Count the number of United Airlines flights arriving in ASY Airport .",
        "true_sql": "select count ( * ) where airlines.airline = value and flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None], 'and', [False, 2, [0, [0, 13, False], None], '\"ASY\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.26775219404569967, 1), ('WHERE_COL', ('airlines', 'airline', 37), 1.0, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-13.198274924118953",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9191014766693115, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9934285283088684, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9191014766693115, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.5166725593941308, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.26775219404569967, 1), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), True, 0.2932034012181931, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9934285283088684, 3), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.006170214619487524, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.00039016036316752434, 3), 'yes'), (('WHERE_COL', ('flights', 'flightno', 46), 1.0325938092137221e-05, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 587
    },
    {
        "nl": "How many 'United Airlines ' flights depart from Airport 'AHD ' ?",
        "true_sql": "select count ( * ) where airlines.airline = value and flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None], 'and', [False, 2, [0, [0, 12, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8752808810487577, 1), ('WHERE_COL', ('airlines', 'airline', 37), 1.0, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999983310699463, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-5.668634145782574",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8752808810487577, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9931598901748657, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999983310699463, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8752808810487577, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9931598901748657, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.006307738367468119, 3), 'yes'), (('WHERE_COL', ('airports', 'airportcode', 41), 0.0003391551726963371, 3), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.00016387997311539948, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999983310699463, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 588
    },
    {
        "nl": "Return the number of United Airlines flights leaving from AHD Airport .",
        "true_sql": "select count ( * ) where airlines.airline = value and flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None], 'and', [False, 2, [0, [0, 12, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7119798916567479, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.8862800598144531, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-1.5374115162631201",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.8411618573029404, 1), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.8862800598144531, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.8411618573029404, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7119798916567479, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.6242182880949466, 1), 'no'), (('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.5174174080005228, 1), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.8862800598144531, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 589
    },
    {
        "nl": "How many United Airlines flights go to City 'Aberdeen ' ?",
        "true_sql": "select count ( * ) where airports.city = value and airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None], 'and', [False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9214344406678503, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9974178075790405, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.38255035662905235",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9214344406678503, 1), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.9974178075790405, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999980926513672, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9214344406678503, 1), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.9974178075790405, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999980926513672, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 590
    },
    {
        "nl": "Count the number of United Airlines flights that arrive in Aberdeen .",
        "true_sql": "select count ( * ) where airports.city = value and airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None], 'and', [False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.24980798550218292, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9997979998588562, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-5.871101468411522",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.8328267931938171, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9997979998588562, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.8328267931938171, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.630440911156812, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.24980798550218292, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.0019411384128034108, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9997979998588562, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 591
    },
    {
        "nl": "Which city has most number of arriving flights ?",
        "true_sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.city",
            "group_by",
            "airports.city",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.03648369386792182, 1), ('GROUP_COL', ('airports', 'city', 40), 0.9978070855140686, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9993501916624475, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9985594153404236, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999407529830933, 7)]",
        "logprob": "-3.3173035584616626",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9635085463523865, 1), 'no'), (('GROUP_COL', ('airports', 'city', 40), 0.9978070855140686, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9993501916624475, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9985594153404236, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999407529830933, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9635085463523865, 1), 'no'), (('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.03648369386792182, 1), 'yes'), (('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 4.123354756302435e-06, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'destairport', 48), ('none_agg', 0), False, 3.25155883729167e-06, 1), 'no'), (('GROUP_COL', ('airports', 'city', 40), 0.9978070855140686, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9993501916624475, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9985594153404236, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999407529830933, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 592
    },
    {
        "nl": "Which city has the most frequent destination airport ?",
        "true_sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.city",
            "group_by",
            "airports.city",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.9443731307983398, 1), ('GROUP_COL', ('airports', 'city', 40), 0.9974623918533325, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.5745313261582494, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9969643950462341, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999351501464844, 7)]",
        "logprob": "-2.2808647205619748",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.9443731307983398, 1), 'yes'), (('GROUP_COL', ('airports', 'city', 40), 0.9974623918533325, 3), 'yes'), (('ORDER_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9715236513594906, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9969643950462341, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999351501464844, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.9443731307983398, 1), 'yes'), (('GROUP_COL', ('airports', 'city', 40), 0.9974623918533325, 3), 'yes'), (('ORDER_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9715236513594906, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.5745313261582494, 5), 'yes'), (('ORDER_AGG_v2', ('airports', '*', 50), ('sum', 4), False, 0.08898593956991144, 5), 'no'), (('ORDER_AGG_v2', ('airports', '*', 50), ('avg', 5), False, 0.07602639413963158, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9969643950462341, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999351501464844, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 593
    },
    {
        "nl": "Which city has most number of departing flights ?",
        "true_sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 12, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.city",
            "group_by",
            "airports.city",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.031059166416525837, 1), ('GROUP_COL', ('airports', 'city', 40), 0.9976738095283508, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9984395219580045, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9989297986030579, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999454021453857, 7)]",
        "logprob": "-3.481669175118901",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9689334034919739, 1), 'no'), (('GROUP_COL', ('airports', 'city', 40), 0.9976738095283508, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9984395219580045, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9989297986030579, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999454021453857, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9689334034919739, 1), 'no'), (('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.031059166416525837, 1), 'yes'), (('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 5.691690603271129e-06, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'destairport', 48), ('none_agg', 0), False, 7.927056913104027e-07, 1), 'no'), (('GROUP_COL', ('airports', 'city', 40), 0.9976738095283508, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9984395219580045, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9989297986030579, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999454021453857, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 594
    },
    {
        "nl": "Which city is the most frequent source airport ?",
        "true_sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 12, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 5, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 5, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.city",
            "group_by",
            "airports.city",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 10, 40, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.8299590945243835, 1), ('GROUP_COL', ('airports', 'city', 40), 0.9997023940086365, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.0979475063685671, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9985052347183228, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999911904335022, 7)]",
        "logprob": "-9.482977405398563",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.8299590945243835, 1), 'yes'), (('GROUP_COL', ('airports', 'city', 40), 0.9997023940086365, 3), 'yes'), (('ORDER_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999470697108619, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9985052347183228, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999911904335022, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'city', 40), ('none_agg', 0), False, 0.8299590945243835, 1), 'yes'), (('GROUP_COL', ('airports', 'city', 40), 0.9997023940086365, 3), 'yes'), (('ORDER_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.9999470697108619, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.0979475063685671, 5), 'yes'), (('ORDER_AGG_v2', ('airports', '*', 50), ('sum', 4), False, 0.0826145039087166, 5), 'no'), (('ORDER_AGG_v2', ('airports', '*', 50), ('avg', 5), False, 0.0709483182882223, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9985052347183228, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999911904335022, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 595
    },
    {
        "nl": "What is the code of airport that has the highest number of flights ?",
        "true_sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportcode",
            "group_by",
            "airports.airportcode",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9996527433395386, 1), ('GROUP_COL', ('airports', 'airportcode', 41), 0.9702420234680176, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999412422552146, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993003606796265, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999662637710571, 7)]",
        "logprob": "-0.04694926667104547",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9996527433395386, 1), 'yes'), (('GROUP_COL', ('airports', 'airportcode', 41), 0.9702420234680176, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999412422552146, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993003606796265, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999662637710571, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9996527433395386, 1), 'yes'), (('GROUP_COL', ('airports', 'airportcode', 41), 0.9702420234680176, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999412422552146, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993003606796265, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999662637710571, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 596
    },
    {
        "nl": "What is the airport code of the airport with the most flights ?",
        "true_sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportcode",
            "group_by",
            "airports.airportcode",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9999288320541382, 1), ('GROUP_COL', ('airports', 'airportcode', 41), 0.9966568946838379, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999368610020237, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9995496869087219, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999507665634155, 7)]",
        "logprob": "-0.007166029144727592",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9999288320541382, 1), 'yes'), (('GROUP_COL', ('airports', 'airportcode', 41), 0.9966568946838379, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999368610020237, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9995496869087219, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999507665634155, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9999288320541382, 1), 'yes'), (('GROUP_COL', ('airports', 'airportcode', 41), 0.9966568946838379, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999368610020237, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9995496869087219, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999507665634155, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 597
    },
    {
        "nl": "What is the code of airport that has fewest number of flights ?",
        "true_sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportcode",
            "group_by",
            "airports.airportcode",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 41, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9997832179069519, 1), ('GROUP_COL', ('airports', 'airportcode', 41), 0.9511129856109619, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999423896956885, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.7858749032020569, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999527931213379, 7)]",
        "logprob": "-0.2936180011451922",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9997832179069519, 1), 'yes'), (('GROUP_COL', ('airports', 'airportcode', 41), 0.9511129856109619, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999423896956885, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.7858749032020569, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999527931213379, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9997832179069519, 1), 'yes'), (('GROUP_COL', ('airports', 'airportcode', 41), 0.9511129856109619, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9999423896956885, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.7858749032020569, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999527931213379, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 598
    },
    {
        "nl": "Give the code of the airport with the least flights .",
        "true_sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportcode",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9999977350234985, 1), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.43761766685302145, 3), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.8799771070480347, 4), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9996904134750366, 5)]",
        "logprob": "-3.965640296413137",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9999977350234985, 1), 'yes'), (('ORDER_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.6471784710884094, 3), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.8799771070480347, 4), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9996904134750366, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportcode', 41), ('none_agg', 0), False, 0.9999977350234985, 1), 'yes'), (('ORDER_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.6471784710884094, 3), 'no'), (('ORDER_AGG_v2', ('airports', '*', 50), ('none_agg', 0), False, 0.19490832090377808, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.43761766685302145, 3), 'yes'), (('ORDER_AGG_v2', ('flights', '*', 51), ('none_agg', 0), False, 0.03353322297334671, 3), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.8799771070480347, 4), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9996904134750366, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 599
    },
    {
        "nl": "Which airline has most number of flights ?",
        "true_sql": "select airlines.airline group_by airlines.airline order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "flights.*",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 51, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.14825288951396942, 1), ('GROUP_COL', ('flights', '*', 51), 0.0002432871115161106, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.1044022817432406, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993340373039246, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999264478683472, 7)]",
        "logprob": "-19.2689652220699",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.5227527618408203, 1), 'no'), (('GROUP_COL', ('flights', 'airline', 45), 0.9828920364379883, 3), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.8490945172402984, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993340373039246, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999264478683472, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.5227527618408203, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.3289717733860016, 1), 'no'), (('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.14825288951396942, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 1.6286043319269083e-05, 1), 'no'), (('GROUP_COL', ('flights', 'airline', 45), 0.9828920364379883, 3), 'no'), (('GROUP_COL', ('flights', 'flightno', 46), 0.01586882956326008, 3), 'no'), (('GROUP_COL', ('airlines', 'uid', 36), 0.0006511769024655223, 3), 'no'), (('GROUP_COL', ('airlines', 'abbreviation', 38), 0.0003258771903347224, 3), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.8490945172402984, 5), 'no'), (('ORDER_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.8323206224466603, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.1044022817432406, 5), 'yes'), (('ORDER_AGG_v2', ('airlines', '*', 49), ('avg', 5), False, 0.07786374363260322, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993340373039246, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999264478683472, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 600
    },
    {
        "nl": "What airline serves the most flights ?",
        "true_sql": "select airlines.airline group_by airlines.airline order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "airlines.abbreviation",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 38, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7972469925880432, 1), ('GROUP_COL', ('airlines', 'abbreviation', 38), 0.00022315046226140112, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.06630770415506661, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996398687362671, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999549388885498, 7)]",
        "logprob": "-19.488528454820596",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7972469925880432, 1), 'yes'), (('GROUP_COL', ('flights', 'airline', 45), 0.9909441471099854, 3), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9885360885136943, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996398687362671, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999549388885498, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7972469925880432, 1), 'yes'), (('GROUP_COL', ('flights', 'airline', 45), 0.9909441471099854, 3), 'no'), (('GROUP_COL', ('flights', 'flightno', 46), 0.005636647809296846, 3), 'no'), (('GROUP_COL', ('flights', '*', 51), 0.0017802282236516476, 3), 'no'), (('GROUP_COL', ('airlines', 'uid', 36), 0.0013182456605136395, 3), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9885360885136943, 5), 'no'), (('ORDER_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.460349211157361, 5), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('sum', 4), False, 0.08084137155475733, 5), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('avg', 5), False, 0.07605265311180459, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996398687362671, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999549388885498, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 601
    },
    {
        "nl": "Find the abbreviation and country of the airline that has fewest number of flights ?",
        "true_sql": "select airlines.abbreviation , airlines.country group_by airlines.airline order_by count ( * ) limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.abbreviation",
            ",",
            "airlines.country",
            "group_by",
            "airports.country",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 10, 43, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9995317459106445, 1), ('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.8238568305969238, 3), ('GROUP_COL', ('airports', 'country', 43), 0.00029028154676780105, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.2671229825725454, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.8588554859161377, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998751878738403, 9)]",
        "logprob": "-13.77752290477261",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9995317459106445, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.8238568305969238, 3), 'yes'), (('GROUP_COL', ('flights', 'airline', 45), 0.9176672101020813, 5), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9976894824959259, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.8588554859161377, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998751878738403, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.9995317459106445, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.8238568305969238, 3), 'yes'), (('GROUP_COL', ('flights', 'airline', 45), 0.9176672101020813, 5), 'no'), (('GROUP_COL', ('airlines', 'country', 39), 0.08022204786539078, 5), 'no'), (('GROUP_COL', ('airlines', 'uid', 36), 0.0009420886053703725, 5), 'no'), (('GROUP_COL', ('flights', 'flightno', 46), 0.0007802089676260948, 5), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9976894824959259, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.2671229825725454, 7), 'yes'), (('ORDER_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.2447203583264096, 7), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('avg', 5), False, 0.10839877206877953, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.8588554859161377, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998751878738403, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 602
    },
    {
        "nl": "What is the abbreviation of the airilne has the fewest flights and what country is it in ?",
        "true_sql": "select airlines.abbreviation , airlines.country group_by airlines.airline order_by count ( * ) limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.abbreviation",
            ",",
            "airlines.country",
            "order_by",
            "flights.sourceairport",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 11, [47], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.998956561088562, 1), ('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.8765841722488403, 3), ('ORDER_AGG_v2', ('flights', 'sourceairport', 47), ('none_agg', 0), False, 0.02417078800499439, 5), ('ORDER_DESC_ASC', (('flights', 'sourceairport', 47), ('none_agg', 0), False), 'asc', 0.11410573124885559, 6), ('ORDER_LIMIT', (('flights', 'sourceairport', 47), ('none_agg', 0), False), 'limit_value', 0.99955815076828, 7)]",
        "logprob": "-11.230303628800247",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.998956561088562, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.8765841722488403, 3), 'yes'), (('WHERE_COL', ('airlines', 'country', 39), 0.500231146812439, 5), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('none_agg', 0), False, 0.8335877060890198, 5), 'no'), (('ORDER_DESC_ASC', (('flights', 'sourceairport', 47), ('none_agg', 0), False), 'desc', 0.8168759942054749, 6), 'no'), (('ORDER_LIMIT', (('flights', 'sourceairport', 47), ('none_agg', 0), False), 'limit_value', 0.99955815076828, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.998956561088562, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'country', 39), ('none_agg', 0), False, 0.8765841722488403, 3), 'yes'), (('WHERE_COL', ('airlines', 'country', 39), 0.500231146812439, 5), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.1491672843694687, 5), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.12770286202430725, 5), 'no'), (('WHERE_COL', ('airports', 'countryabbrev', 44), 0.06340999901294708, 5), 'no'), (('ORDER_AGG_v2', ('flights', '*', 51), ('none_agg', 0), False, 0.8335877060890198, 5), 'no'), (('ORDER_AGG_v2', ('airports', 'countryabbrev', 44), ('none_agg', 0), False, 0.06696650385856627, 5), 'no'), (('ORDER_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.03813686594367027, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 0.02673105895519257, 5), 'no'), (('ORDER_DESC_ASC', (('flights', 'sourceairport', 47), ('none_agg', 0), False), 'desc', 0.8168759942054749, 6), 'no'), (('ORDER_LIMIT', (('flights', 'sourceairport', 47), ('none_agg', 0), False), 'limit_value', 0.99955815076828, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 603
    },
    {
        "nl": "What are airlines that have some flight departing from airport 'AHD ' ?",
        "true_sql": "select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.34625783562660223, 1), ('WHERE_COL', ('airlines', 'airline', 37), 1.235368017660221e-06, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999947547912598, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-14.67880967420218",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.64578777551651, 1), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9999004602432251, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999947547912598, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.64578777551651, 1), 'no'), (('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.34625783562660223, 1), 'yes'), (('SELECT_AGG_v2', ('airlines', 'abbreviation', 38), ('none_agg', 0), False, 0.007823479361832142, 1), 'no'), (('SELECT_AGG_v2', ('airlines', 'uid', 36), ('none_agg', 0), False, 0.00012981925101485093, 1), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9999004602432251, 3), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 5.501138366525993e-05, 3), 'no'), (('WHERE_COL', ('airports', 'airportcode', 41), 3.05763678625226e-05, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 1.2700213119387627e-05, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999947547912598, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('>', 1), 1.7257984836760443e-06, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('!=', 5), 1.0440280675538816e-06, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('in', 8), 9.438323900212708e-07, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 604
    },
    {
        "nl": "Which airlines have a flight with source airport AHD ?",
        "true_sql": "select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "flights.sourceairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7306225895881653, 1), ('WHERE_COL', ('flights', 'sourceairport', 47), 0.8534852862358093, 3), ('WHERE_OP', (('flights', 'sourceairport', 47),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('flights', 'sourceairport', 47),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.4733664913401392",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7306225895881653, 1), 'yes'), (('WHERE_COL', ('flights', 'sourceairport', 47), 0.8534852862358093, 3), 'yes'), (('WHERE_OP', (('flights', 'sourceairport', 47),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('flights', 'sourceairport', 47),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7306225895881653, 1), 'yes'), (('WHERE_COL', ('flights', 'sourceairport', 47), 0.8534852862358093, 3), 'yes'), (('WHERE_OP', (('flights', 'sourceairport', 47),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('flights', 'sourceairport', 47),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 605
    },
    {
        "nl": "What are airlines that have flights arriving at airport 'AHD ' ?",
        "true_sql": "select airlines.airline where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9931024312973022, 1), ('WHERE_COL', ('airports', 'city', 40), 1.7298255272635288e-07, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999972581863403, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-15.577916563675716",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9931024312973022, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9999874830245972, 3), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999972581863403, 4), 'no'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9931024312973022, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9999874830245972, 3), 'no'), (('WHERE_COL', ('airports', 'airportcode', 41), 9.986336408474017e-06, 3), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 1.2645015203816001e-06, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 1.0826153129528393e-06, 3), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999972581863403, 4), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('>', 1), 7.112992648217187e-07, 4), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('!=', 5), 6.165687409520615e-07, 4), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('in', 8), 3.9435192888959136e-07, 4), 'no'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 606
    },
    {
        "nl": "Which airlines have a flight with destination airport AHD ?",
        "true_sql": "select airlines.airline where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"AHD\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "flights.destairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.6022311449050903, 1), ('WHERE_COL', ('flights', 'destairport', 48), 0.9057072401046753, 3), ('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999982118606567, 4), ('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.6065205732100335",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.6022311449050903, 1), 'yes'), (('WHERE_COL', ('flights', 'destairport', 48), 0.9057072401046753, 3), 'yes'), (('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.6022311449050903, 1), 'yes'), (('WHERE_COL', ('flights', 'destairport', 48), 0.9057072401046753, 3), 'yes'), (('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999982118606567, 4), 'yes'), (('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 607
    },
    {
        "nl": "Find all airlines that have flights from both airports 'APG ' and 'CVO ' .",
        "true_sql": "select airlines.airline where flights.sourceairport = value intersect select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"CVO\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.abbreviation",
            "=",
            "value",
            "intersect",
            "select",
            "airlines.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 38, [7], 3, 23, 2, [37], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.996802806854248, 1), ('WHERE_COL', ('airlines', 'abbreviation', 38), 4.66707133455202e-05, 3), ('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9998160004615784, 4), ('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.999998927116394, 5), ('IUEN_v2', ('intersect', 1), 0.998202919960022, 6), ('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9288832545280457, 8), ('WHERE_COL', ('airports', 'airportname', 42), 0.9966764450073242, 10), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999969005584717, 11), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999994039535522, 12)]",
        "logprob": "-10.055047303332762",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.996802806854248, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9993300437927246, 3), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9998160004615784, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.999998927116394, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.996802806854248, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9993300437927246, 3), 'no'), (('WHERE_COL', ('airports', 'airportcode', 41), 0.0003441973531153053, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.00021356377692427486, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 6.382939318427816e-05, 3), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('=', 0), 0.9998160004615784, 4), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('in', 8), 9.77262607193552e-05, 4), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('>', 1), 3.060202288907021e-05, 4), 'no'), (('WHERE_OP', (('airlines', 'abbreviation', 38),), ('!=', 5), 1.7928479792317376e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'abbreviation', 38),), ('=', 0), 'terminal', 0.999998927116394, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 608
    },
    {
        "nl": "Which airlines have departing flights from both APG and CVO airports ?",
        "true_sql": "select airlines.airline where flights.sourceairport = value intersect select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"CVO\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.uid",
            "=",
            "value",
            "intersect",
            "select",
            "flights.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [7], 3, 23, 2, [45], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7129677534103394, 1), ('WHERE_COL', ('airlines', 'uid', 36), 0.0003460541774984449, 3), ('WHERE_OP', (('airlines', 'uid', 36),), ('=', 0), 0.9999042749404907, 4), ('WHERE_ROOT_TERM', (('airlines', 'uid', 36),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('IUEN_v2', ('intersect', 1), 0.9962027668952942, 6), ('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.9431310296058655, 8), ('WHERE_COL', ('airports', 'airportname', 42), 0.5831212997436523, 10), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999982118606567, 11), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999995231628418, 12)]",
        "logprob": "-8.90961147093989",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7129677534103394, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9513869285583496, 3), 'no'), (('WHERE_OP', (('airlines', 'uid', 36),), ('=', 0), 0.9999042749404907, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'uid', 36),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.7129677534103394, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9513869285583496, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.0463453009724617, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.0013060085475444794, 3), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.0005248350207693875, 3), 'no'), (('WHERE_OP', (('airlines', 'uid', 36),), ('=', 0), 0.9999042749404907, 4), 'no'), (('WHERE_OP', (('airlines', 'uid', 36),), ('>', 1), 6.266747368499637e-05, 4), 'no'), (('WHERE_OP', (('airlines', 'uid', 36),), ('in', 8), 1.634113141335547e-05, 4), 'no'), (('WHERE_OP', (('airlines', 'uid', 36),), ('!=', 5), 2.829663344527944e-06, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'uid', 36),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 609
    },
    {
        "nl": "Find all airlines that have flights from airport 'CVO ' but not from 'APG ' .",
        "true_sql": "select airlines.airline where flights.sourceairport = value except select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]]}, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"CVO\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "airlines.airline",
            "=",
            "value",
            "except",
            "select",
            "flights.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 37, [7], 3, 28, 2, [45], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.6609651446342468, 1), ('WHERE_COL', ('airlines', 'airline', 37), 1.6590921632086975e-06, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9995669722557068, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999979734420776, 5), ('IUEN_v2', ('except', 3), 0.8160061240196228, 6), ('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.9159573912620544, 8), ('WHERE_COL', ('airports', 'airportname', 42), 0.9998472929000854, 10), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999971389770508, 11), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999992847442627, 12)]",
        "logprob": "-14.01672536970616",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.6609651446342468, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9986374974250793, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9995669722557068, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999979734420776, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.6609651446342468, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.9986374974250793, 3), 'no'), (('WHERE_COL', ('airports', 'airportcode', 41), 0.0011182399466633797, 3), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.00021527062926907092, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 2.7367073926143348e-05, 3), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9995669722557068, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('!=', 5), 0.00022052899294067174, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('in', 8), 0.00010306249896530062, 4), 'no'), (('WHERE_OP', (('airlines', 'airline', 37),), ('like', 6), 2.1963076505926438e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999979734420776, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 610
    },
    {
        "nl": "Which airlines have departures from CVO but not from APG airports ?",
        "true_sql": "select airlines.airline where flights.sourceairport = value except select airlines.airline where flights.sourceairport = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]]}, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"CVO\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "where",
            "flights.flightno",
            "=",
            "value",
            "except",
            "select",
            "flights.airline",
            "where",
            "airports.airportname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 46, [7], 3, 28, 2, [45], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9345619082450867, 1), ('WHERE_COL', ('flights', 'flightno', 46), 0.010121685452759266, 3), ('WHERE_OP', (('flights', 'flightno', 46),), ('=', 0), 0.9991675615310669, 4), ('WHERE_ROOT_TERM', (('flights', 'flightno', 46),), ('=', 0), 'terminal', 0.999998927116394, 5), ('IUEN_v2', ('except', 3), 0.9072213768959045, 6), ('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.9816077947616577, 8), ('WHERE_COL', ('airports', 'airportname', 42), 0.9662067294120789, 10), ('WHERE_OP', (('airports', 'airportname', 42),), ('=', 0), 0.9999830722808838, 11), ('WHERE_ROOT_TERM', (('airports', 'airportname', 42),), ('=', 0), 'terminal', 0.9999995231628418, 12)]",
        "logprob": "-4.812894812706816",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9345619082450867, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.42193424701690674, 3), 'no'), (('WHERE_OP', (('flights', 'flightno', 46),), ('=', 0), 0.9991675615310669, 4), 'no'), (('WHERE_ROOT_TERM', (('flights', 'flightno', 46),), ('=', 0), 'terminal', 0.999998927116394, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9345619082450867, 1), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.42193424701690674, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.32441776990890503, 3), 'no'), (('WHERE_COL', ('airlines', 'uid', 36), 0.22720980644226074, 3), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.0159295704215765, 3), 'no'), (('WHERE_OP', (('flights', 'flightno', 46),), ('=', 0), 0.9991675615310669, 4), 'no'), (('WHERE_OP', (('flights', 'flightno', 46),), ('!=', 5), 0.0007030735141597688, 4), 'no'), (('WHERE_OP', (('flights', 'flightno', 46),), ('in', 8), 5.058900569565594e-05, 4), 'no'), (('WHERE_OP', (('flights', 'flightno', 46),), ('like', 6), 1.0553417268965859e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('flights', 'flightno', 46),), ('=', 0), 'terminal', 0.999998927116394, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 611
    },
    {
        "nl": "Find all airlines that have at least 10 flights .",
        "true_sql": "select airlines.airline group_by airlines.airline having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "airlines.abbreviation",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 38, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9961382746696472, 1), ('GROUP_COL', ('airlines', 'abbreviation', 38), 0.015670716762542725, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.07800485423039477, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9992151260375977, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.00019555324979592115, 7)]",
        "logprob": "-22.904658534199942",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9961382746696472, 1), 'yes'), (('GROUP_COL', ('flights', 'flightno', 46), 0.9052811861038208, 3), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9779747524743905, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994906105324124, 6), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.00019555324979592115, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9961382746696472, 1), 'yes'), (('GROUP_COL', ('flights', 'flightno', 46), 0.9052811861038208, 3), 'no'), (('GROUP_COL', ('flights', 'airline', 45), 0.03168882429599762, 3), 'no'), (('GROUP_COL', ('airlines', 'uid', 36), 0.023815318942070007, 3), 'no'), (('GROUP_COL', ('flights', '*', 51), 0.016049498692154884, 3), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9779747524743905, 5), 'no'), (('HAV_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.5399259646570934, 5), 'no'), (('HAV_AGG_v2', ('airlines', '*', 49), ('avg', 5), False, 0.0863864082591567, 5), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('avg', 5), False, 0.0803038081133638, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9994906105324124, 6), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9992151260375977, 6), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('=', 0), 4.4593572965823114e-05, 6), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('between', 9), 3.461899541434832e-05, 6), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.00019555324979592115, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 612
    },
    {
        "nl": "Which airlines have at least 10 flights ?",
        "true_sql": "select airlines.airline group_by airlines.airline having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "airlines.abbreviation",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 38, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9986257553100586, 1), ('GROUP_COL', ('airlines', 'abbreviation', 38), 0.004976661875844002, 3), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.09560683495262164, 5), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9985200762748718, 6), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 7.29211897123605e-05, 7)]",
        "logprob": "-24.222552721436053",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9986257553100586, 1), 'yes'), (('GROUP_COL', ('flights', 'flightno', 46), 0.8957735300064087, 3), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9055774323190972, 5), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9992022866048638, 6), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 7.29211897123605e-05, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9986257553100586, 1), 'yes'), (('GROUP_COL', ('flights', 'flightno', 46), 0.8957735300064087, 3), 'no'), (('GROUP_COL', ('airlines', 'uid', 36), 0.06582579761743546, 3), 'no'), (('GROUP_COL', ('flights', '*', 51), 0.017981702461838722, 3), 'no'), (('GROUP_COL', ('flights', 'airline', 45), 0.012211435474455357, 3), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9055774323190972, 5), 'no'), (('HAV_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.7563262470314022, 5), 'no'), (('HAV_AGG_v2', ('airlines', '*', 49), ('avg', 5), False, 0.09686434855583662, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.09560683495262164, 5), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9992022866048638, 6), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9985200762748718, 6), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('=', 0), 4.6406315959757194e-05, 6), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('between', 9), 3.701743480633013e-05, 6), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 7.29211897123605e-05, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 613
    },
    {
        "nl": "Find all airlines that have fewer than 200 flights .",
        "true_sql": "select airlines.airline group_by airlines.airline having count ( * ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 4, [0, [3, 0, False], None], 200.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "airlines.airline",
            "having",
            "avg",
            "(",
            "airlines.uid",
            ")",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 37, 18, [17, 5, 36, 4], [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9984155893325806, 1), ('GROUP_COL', ('airlines', 'airline', 37), 0.04271562397480011, 3), ('HAV_AGG_v2', ('airlines', 'uid', 36), ('avg', 5), False, 0.07342218105099961, 5), ('HAV_OP_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('<', 2), 0.8969226479530334, 6), ('HAV_ROOT_TERM_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('<', 2), 'terminal', 0.9997537732124329, 7)]",
        "logprob": "-15.332042022725604",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9984155893325806, 1), 'yes'), (('WHERE_COL', ('airlines', 'uid', 36), 0.8293488621711731, 3), 'no'), (('GROUP_COL', ('flights', 'flightno', 46), 0.7908245325088501, 3), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9939781644828097, 5), 'no'), (('HAV_OP_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('<', 2), 0.8969226479530334, 6), 'no'), (('HAV_ROOT_TERM_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('<', 2), 'terminal', 0.9997537732124329, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9984155893325806, 1), 'yes'), (('WHERE_COL', ('airlines', 'uid', 36), 0.8293488621711731, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.053267545998096466, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.037671007215976715, 3), 'no'), (('WHERE_COL', ('airlines', 'abbreviation', 38), 0.03454598784446716, 3), 'no'), (('GROUP_COL', ('flights', 'flightno', 46), 0.7908245325088501, 3), 'no'), (('GROUP_COL', ('flights', 'airline', 45), 0.0731399729847908, 3), 'no'), (('GROUP_COL', ('airlines', 'abbreviation', 38), 0.05444006249308586, 3), 'no'), (('GROUP_COL', ('airlines', 'airline', 37), 0.04271562397480011, 3), 'yes'), (('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9939781644828097, 5), 'no'), (('HAV_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.3916977217587177, 5), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('avg', 5), False, 0.11749786855668327, 5), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('sum', 4), False, 0.07907776696764364, 5), 'no'), (('HAV_OP_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('<', 2), 0.8969226479530334, 6), 'no'), (('HAV_OP_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('>', 1), 0.0824737623333931, 6), 'no'), (('HAV_OP_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('between', 9), 0.005962730851024389, 6), 'no'), (('HAV_OP_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('<=', 4), 0.01408705522220566, 6), 'no'), (('HAV_ROOT_TERM_v2', (('airlines', 'uid', 36), ('avg', 5), False), ('<', 2), 'terminal', 0.9997537732124329, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 614
    },
    {
        "nl": "Which airlines have less than 200 flights ?",
        "true_sql": "select airlines.airline group_by airlines.airline having count ( * ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 2, False]], 'having': [[False, 4, [0, [3, 0, False], None], 200.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airlines.airline",
            "group_by",
            "airlines.airline",
            "having",
            "sum",
            "(",
            "flights.*",
            ")",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 37, 18, [24, 5, 51, 4], [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9982032775878906, 1), ('GROUP_COL', ('airlines', 'airline', 37), 0.08035416156053543, 3), ('HAV_AGG_v2', ('flights', '*', 51), ('sum', 4), False, 0.06219854616756341, 5), ('HAV_OP_v2', (('flights', '*', 51), ('sum', 4), False), ('<', 2), 0.9813815355300903, 6), ('HAV_ROOT_TERM_v2', (('flights', '*', 51), ('sum', 4), False), ('<', 2), 'terminal', 0.9996471405029297, 7)]",
        "logprob": "-18.152005834570065",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9982032775878906, 1), 'yes'), (('WHERE_COL', ('airlines', 'uid', 36), 0.6588572263717651, 3), 'no'), (('GROUP_COL', ('flights', 'flightno', 46), 0.7838597297668457, 3), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9100732401666897, 5), 'no'), (('HAV_OP_v2', (('flights', '*', 51), ('sum', 4), False), ('<', 2), 0.9813815355300903, 6), 'no'), (('HAV_ROOT_TERM_v2', (('flights', '*', 51), ('sum', 4), False), ('<', 2), 'terminal', 0.9996471405029297, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airlines', 'airline', 37), ('none_agg', 0), False, 0.9982032775878906, 1), 'yes'), (('WHERE_COL', ('airlines', 'uid', 36), 0.6588572263717651, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.16718026995658875, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.0807722732424736, 3), 'no'), (('WHERE_COL', ('flights', 'airline', 45), 0.040114883333444595, 3), 'no'), (('GROUP_COL', ('flights', 'flightno', 46), 0.7838597297668457, 3), 'no'), (('GROUP_COL', ('airlines', 'airline', 37), 0.08035416156053543, 3), 'yes'), (('GROUP_COL', ('airlines', 'uid', 36), 0.05809292569756508, 3), 'no'), (('GROUP_COL', ('airlines', 'abbreviation', 38), 0.046648092567920685, 3), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9100732401666897, 5), 'no'), (('HAV_AGG_v2', ('airlines', '*', 49), ('count', 3), False, 0.7484159268460276, 5), 'no'), (('HAV_AGG_v2', ('airlines', '*', 49), ('avg', 5), False, 0.10005159134714584, 5), 'no'), (('HAV_AGG_v2', ('flights', '*', 51), ('avg', 5), False, 0.09877619808453023, 5), 'no'), (('HAV_OP_v2', (('flights', '*', 51), ('sum', 4), False), ('<', 2), 0.9813815355300903, 6), 'no'), (('HAV_OP_v2', (('flights', '*', 51), ('sum', 4), False), ('>', 1), 0.011158828623592854, 6), 'no'), (('HAV_OP_v2', (('flights', '*', 51), ('sum', 4), False), ('between', 9), 0.0025523416697978973, 6), 'no'), (('HAV_OP_v2', (('flights', '*', 51), ('sum', 4), False), ('<=', 4), 0.018248682793599095, 6), 'no'), (('HAV_ROOT_TERM_v2', (('flights', '*', 51), ('sum', 4), False), ('<', 2), 'terminal', 0.9996471405029297, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 615
    },
    {
        "nl": "What are flight numbers of Airline `` United Airlines `` ?",
        "true_sql": "select flights.flightno where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9999339580535889, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999980926513672, 5)]",
        "logprob": "-0.00014114836803672117",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airlines', 'airline', 37), 0.9999339580535889, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999980926513672, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999980926513672, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('airlines', 'airline', 37), 0.9999339580535889, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999980926513672, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999980926513672, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 616
    },
    {
        "nl": "Which flight numbers correspond to United Airlines flights ?",
        "true_sql": "select flights.flightno where airlines.airline = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"United Airlines\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airlines.airline",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airlines', 'airline', 37), 0.9966527819633484, 3), ('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999977350234985, 5)]",
        "logprob": "-0.0035490632462555015",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airlines', 'airline', 37), 0.9966527819633484, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999980926513672, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('airlines', 'airline', 37), 0.9966527819633484, 3), 'yes'), (('WHERE_OP', (('airlines', 'airline', 37),), ('=', 0), 0.9999980926513672, 4), 'yes'), (('WHERE_ROOT_TERM', (('airlines', 'airline', 37),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 617
    },
    {
        "nl": "What are flight numbers of flights departing from Airport `` APG `` ?",
        "true_sql": "select flights.flightno where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 3.8891298004273267e-07, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999970197677612, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-14.760337733747981",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airports', 'airportname', 42), 0.9999850988388062, 3), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999970197677612, 4), 'no'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'exit')]",
        "feedback_records": "[(('WHERE_COL', ('airports', 'airportname', 42), 0.9999850988388062, 3), 'no'), (('WHERE_COL', ('airports', 'airportcode', 41), 1.1588655979721807e-05, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 1.7906451148519409e-06, 3), 'no'), (('WHERE_COL', ('flights', 'destairport', 48), 1.1062334124289919e-06, 3), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999970197677612, 4), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('>', 1), 7.767940246594662e-07, 4), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('!=', 5), 5.0379480853735e-07, 4), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('in', 8), 4.03363429768433e-07, 4), 'no'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 618
    },
    {
        "nl": "Give the flight numbers of flights leaving from APG .",
        "true_sql": "select flights.flightno where flights.sourceairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "flights.destairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('flights', 'destairport', 48), 0.026427773758769035, 3), ('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.999997615814209, 4), ('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-3.633383893607714",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('flights', 'flightno', 46), 0.8605080842971802, 3), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.999997615814209, 4), 'no'), (('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'exit')]",
        "feedback_records": "[(('WHERE_COL', ('flights', 'flightno', 46), 0.8605080842971802, 3), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.046144336462020874, 3), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.033475544303655624, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.028021391481161118, 3), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.999997615814209, 4), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('>', 1), 9.231624176209152e-07, 4), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('!=', 5), 4.072066985827405e-07, 4), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('in', 8), 2.591040413335577e-07, 4), 'no'), (('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 619
    },
    {
        "nl": "What are flight numbers of flights arriving at Airport `` APG `` ?",
        "true_sql": "select flights.flightno where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "flights.destairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('flights', 'destairport', 48), 1.0, 3), ('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999960660934448, 4), ('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-11.52466320956855",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airports', 'airportname', 42), 0.9999828338623047, 3), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999960660934448, 4), 'yes'), (('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('airports', 'airportname', 42), 0.9999828338623047, 3), 'no'), (('WHERE_COL', ('flights', 'destairport', 48), 9.886468433251139e-06, 3), 'yes'), (('WHERE_COL', ('airports', 'airportcode', 41), 4.788459136761958e-06, 3), 'no'), (('WHERE_COL', ('airports', 'city', 40), 2.0622067040676484e-06, 3), 'no'), (('WHERE_OP', (('flights', 'destairport', 48),), ('=', 0), 0.9999960660934448, 4), 'yes'), (('WHERE_ROOT_TERM', (('flights', 'destairport', 48),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 620
    },
    {
        "nl": "Give the flight numbers of flights landing at APG .",
        "true_sql": "select flights.flightno where flights.destairport = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"APG\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "flights.sourceairport",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('flights', 'sourceairport', 47), 1.7213562841789098e-07, 3), ('WHERE_OP', (('flights', 'sourceairport', 47),), ('=', 0), 0.9999959468841553, 4), ('WHERE_ROOT_TERM', (('flights', 'sourceairport', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-15.57508553882428",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airports', 'city', 40), 0.7491300106048584, 3), 'no'), (('WHERE_OP', (('flights', 'sourceairport', 47),), ('=', 0), 0.9999959468841553, 4), 'no'), (('WHERE_ROOT_TERM', (('flights', 'sourceairport', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'exit')]",
        "feedback_records": "[(('WHERE_COL', ('airports', 'city', 40), 0.7491300106048584, 3), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.2508443295955658, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 1.4985070265538525e-05, 3), 'no'), (('WHERE_COL', ('airports', 'airportcode', 41), 1.022641754389042e-05, 3), 'no'), (('WHERE_OP', (('flights', 'sourceairport', 47),), ('=', 0), 0.9999959468841553, 4), 'no'), (('WHERE_OP', (('flights', 'sourceairport', 47),), ('>', 1), 2.3257673547050217e-06, 4), 'no'), (('WHERE_OP', (('flights', 'sourceairport', 47),), ('in', 8), 4.6725017455173656e-07, 4), 'no'), (('WHERE_OP', (('flights', 'sourceairport', 47),), ('!=', 5), 3.2337459288100945e-07, 4), 'no'), (('WHERE_ROOT_TERM', (('flights', 'sourceairport', 47),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 621
    },
    {
        "nl": "What are flight numbers of flights departing from City `` Aberdeen `` ?",
        "true_sql": "select flights.flightno where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9999573230743408, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-0.003269371447023373",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airports', 'city', 40), 0.9999573230743408, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('airports', 'city', 40), 0.9999573230743408, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 622
    },
    {
        "nl": "Give the flight numbers of flights leaving from Aberdeen .",
        "true_sql": "select flights.flightno where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9998065829277039, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999985694885254, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-0.007782339021081105",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airports', 'city', 40), 0.9998065829277039, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999985694885254, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('airports', 'city', 40), 0.9998065829277039, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999985694885254, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 623
    },
    {
        "nl": "What are flight numbers of flights arriving at City `` Aberdeen `` ?",
        "true_sql": "select flights.flightno where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9993689656257629, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999979734420776, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999978542327881, 5)]",
        "logprob": "-0.007737649084824262",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airports', 'city', 40), 0.9993689656257629, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('airports', 'city', 40), 0.9993689656257629, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999979734420776, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 624
    },
    {
        "nl": "Give the flight numbers of flights arriving in Aberdeen .",
        "true_sql": "select flights.flightno where airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "flights.flightno",
            "where",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9999020099639893, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999988079071045, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-0.019206814439101893",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('airports', 'city', 40), 0.9999020099639893, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999988079071045, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('airports', 'city', 40), 0.9999020099639893, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999988079071045, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 625
    },
    {
        "nl": "Find the number of flights landing in the city of Aberdeen or Abilene .",
        "true_sql": "select count ( * ) where airports.city = value or airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None], 'or', [False, 2, [0, [0, 5, False], None], '\"Abilene\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "or",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 25, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3962159216911232, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9987336993217468, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999960660934448, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999982118606567, 5), ('WHERE_COL', ('airports', 'city', 40), 0.9980432987213135, 7), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999740123748779, 8), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 9)]",
        "logprob": "-3.7523847386014655",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9747904672722525, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9987336993217468, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999960660934448, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.9980432987213135, 7), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999740123748779, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9747904672722525, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.04999757930636405, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3962159216911232, 1), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('count', 3), False, 0.34465481902898937, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9987336993217468, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999960660934448, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes'), (('WHERE_COL', ('airports', 'city', 40), 0.9980432987213135, 7), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999740123748779, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999988079071045, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 626
    },
    {
        "nl": "How many flights land in Aberdeen or Abilene ?",
        "true_sql": "select count ( * ) where airports.city = value or airports.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Aberdeen\"', None], 'or', [False, 2, [0, [0, 5, False], None], '\"Abilene\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "airports.city",
            "=",
            "value",
            "or",
            "airports.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 40, [7], 3, 25, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.5862494935883835, 1), ('WHERE_COL', ('airports', 'city', 40), 0.9128338694572449, 3), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999995231628418, 4), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('WHERE_COL', ('airports', 'city', 40), 0.3455764949321747, 7), ('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999644756317139, 8), ('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.999998927116394, 9)]",
        "logprob": "-3.295583426946555",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9478671920809632, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9128338694572449, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999995231628418, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.39308685064315796, 7), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999644756317139, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.999998927116394, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('flights', '*', 51), ('count', 3), False, 0.9478671920809632, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.5862494935883835, 1), 'yes'), (('SELECT_AGG_v2', ('airports', '*', 50), ('count', 3), False, 0.5172167769649971, 1), 'no'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.0015265537658706307, 1), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.9128338694572449, 3), 'yes'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.999995231628418, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('airports', 'airportname', 42), 0.39308685064315796, 7), 'no'), (('WHERE_COL', ('airports', 'city', 40), 0.3455764949321747, 7), 'yes'), (('WHERE_COL', ('airports', 'countryabbrev', 44), 0.2607235014438629, 7), 'no'), (('WHERE_COL', ('airports', 'country', 43), 0.0003843739104922861, 7), 'no'), (('WHERE_OP', (('airports', 'city', 40),), ('=', 0), 0.9999644756317139, 8), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'city', 40),), ('=', 0), 'terminal', 0.999998927116394, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 627
    },
    {
        "nl": "Find the name of airports which do not have any flight in and out .",
        "true_sql": "select airports.airportname where airports.airportcode not in ( select flights.sourceairport union select flights.destairport )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 6, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "airports.airportcode",
            "not",
            "in",
            "(",
            "select",
            "flights.sourceairport",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 41, [22, 20], 5, 2, [47], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('airports', 'airportcode', 41), 0.9927398562431335, 3), ('WHERE_OP', (('airports', 'airportcode', 41),), ('not in', 7), 0.9994108698526121, 4), ('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('not in', 7), 'root', 0.9999833106994629, 5), ('SELECT_AGG_v2', ('flights', 'sourceairport', 47), ('none_agg', 0), False, 0.0005291604320518671, 7), ('O', '##END_NESTED##', 0.999441921710968, 8)]",
        "logprob": "-7.875736561243455",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('airports', 'airportcode', 41), 0.9927398562431335, 3), 'yes'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('not in', 7), 0.9994108698526121, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('not in', 7), 'root', 0.9999833106994629, 5), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9976683259010315, 7), 'no')]",
        "feedback_records": "[(('WHERE_COL', ('airports', 'airportcode', 41), 0.9927398562431335, 3), 'yes'), (('WHERE_OP', (('airports', 'airportcode', 41),), ('not in', 7), 0.9994108698526121, 4), 'yes'), (('WHERE_ROOT_TERM', (('airports', 'airportcode', 41),), ('not in', 7), 'root', 0.9999833106994629, 5), 'yes'), (('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.9976683259010315, 7), 'no'), (('SELECT_AGG_v2', ('flights', 'airline', 45), ('none_agg', 0), False, 0.0009099275339394806, 7), 'no'), (('SELECT_AGG_v2', ('flights', 'destairport', 48), ('none_agg', 0), False, 0.000624937529210001, 7), 'no'), (('SELECT_AGG_v2', ('flights', 'sourceairport', 47), ('none_agg', 0), False, 0.0005291604320518671, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 628
    },
    {
        "nl": "Which airports do not have departing or arriving flights ?",
        "true_sql": "select airports.airportname where airports.airportcode not in ( select flights.sourceairport union select flights.destairport )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 6, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'airlines.uid': 1, 'airlines.airline': 2, 'airlines.abbreviation': 3, 'airlines.country': 4, 'airports.city': 5, 'airports.airportcode': 6, 'airports.airportname': 7, 'airports.country': 8, 'airports.countryabbrev': 9, 'flights.airline': 10, 'flights.flightno': 11, 'flights.sourceairport': 12, 'flights.destairport': 13, 'airlines.*': 14, 'airports.*': 15, 'flights.*': 16}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "airports.airportname",
            "where",
            "flights.airline",
            "not",
            "in",
            "(",
            "select",
            "flights.flightno",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 45, [22, 20], 5, 2, [46], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9984164237976074, 1), ('WHERE_COL', ('flights', 'airline', 45), 8.162340964190662e-05, 3), ('WHERE_OP', (('flights', 'airline', 45),), ('not in', 7), 0.782892678165696, 4), ('WHERE_ROOT_TERM', (('flights', 'airline', 45),), ('not in', 7), 'root', 0.9999920129776001, 5), ('SELECT_AGG_v2', ('flights', 'flightno', 46), ('none_agg', 0), False, 0.3821359872817993, 7), ('O', '##END_NESTED##', 0.9666115641593933, 8)]",
        "logprob": "-10.917780155744765",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9984164237976074, 1), 'yes'), (('WHERE_COL', ('flights', 'destairport', 48), 0.4694897532463074, 3), 'no'), (('WHERE_OP', (('flights', 'airline', 45),), ('not in', 7), 0.782892678165696, 4), 'no'), (('WHERE_ROOT_TERM', (('flights', 'airline', 45),), ('not in', 7), 'root', 0.9999920129776001, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('airports', 'airportname', 42), ('none_agg', 0), False, 0.9984164237976074, 1), 'yes'), (('WHERE_COL', ('flights', 'destairport', 48), 0.4694897532463074, 3), 'no'), (('WHERE_COL', ('airports', 'airportname', 42), 0.3900125026702881, 3), 'no'), (('WHERE_COL', ('flights', 'flightno', 46), 0.13998134434223175, 3), 'no'), (('WHERE_COL', ('airlines', 'airline', 37), 0.000181013805558905, 3), 'no'), (('WHERE_OP', (('flights', 'airline', 45),), ('not in', 7), 0.782892678165696, 4), 'no'), (('WHERE_OP', (('flights', 'airline', 45),), ('=', 0), 0.3011394739151001, 4), 'no'), (('WHERE_OP', (('flights', 'airline', 45),), ('!=', 5), 0.042581409215927124, 4), 'no'), (('WHERE_OP', (('flights', 'airline', 45),), ('<', 2), 0.020662972703576088, 4), 'no'), (('WHERE_ROOT_TERM', (('flights', 'airline', 45),), ('not in', 7), 'root', 0.9999920129776001, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 629
    },
    {
        "nl": "How many singers do we have ?",
        "true_sql": "select count ( singer.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 58, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9999295279144192, 1)]",
        "logprob": "-0.00033327879917229063",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9999295279144192, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9999295279144192, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 630
    },
    {
        "nl": "What is the total number of singers ?",
        "true_sql": "select count ( singer.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 58, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9948025282008128, 1)]",
        "logprob": "-0.02181469863413806",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9948025282008128, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9948025282008128, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 631
    },
    {
        "nl": "Show name , country , age for all singers ordered by age from the oldest to the youngest .",
        "true_sql": "select singer.name , singer.country , singer.age order_by singer.age desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.country",
            ",",
            "singer.country",
            ",",
            "order_by",
            "singer.age",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [45], 8, 11, [48], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.5063179731369019, 1), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.992334246635437, 3), ('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9999998807907104, 6), ('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9820162653923035, 7)]",
        "logprob": "-1.2596645589754394",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.5063179731369019, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.992334246635437, 3), 'yes'), (('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9999998807907104, 6), 'yes'), (('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9820162653923035, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.5063179731369019, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.992334246635437, 3), 'yes'), (('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9999998807907104, 6), 'yes'), (('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9820162653923035, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 632
    },
    {
        "nl": "What are the names , countries , and ages for every singer in descending order of age ?",
        "true_sql": "select singer.name , singer.country , singer.age order_by singer.age desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "singer.country",
            ",",
            "singer.age",
            "order_by",
            "singer.age",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 8, [48], 11, [48], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.99964439868927, 1), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9960401058197021, 3), ('SELECT_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9925931096076965, 5), ('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9999984502792358, 7), ('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9997920393943787, 8)]",
        "logprob": "-0.016682171286703875",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.99964439868927, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9960401058197021, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9925931096076965, 5), 'yes'), (('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9999984502792358, 7), 'yes'), (('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9997920393943787, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.99964439868927, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9960401058197021, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9925931096076965, 5), 'yes'), (('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9999984502792358, 7), 'yes'), (('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9997920393943787, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 633
    },
    {
        "nl": "What is the average , minimum , and maximum age of all singers from France ?",
        "true_sql": "select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) where singer.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]], [2, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"France\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "singer.age",
            ")",
            ",",
            "max",
            "(",
            "singer.age",
            ")",
            ",",
            "avg",
            "(",
            "singer.age",
            ")",
            "where",
            "singer.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 48, 4], 8, [19, 5, 48, 4], 8, [17, 5, 48, 4], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9952509446841613, 1), ('SELECT_AGG_v2', ('singer', 'age', 48), ('max', 1), False, 0.9248959416047533, 3), ('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9316933471841006, 5), ('WHERE_COL', ('singer', 'country', 45), 1.0, 7), ('WHERE_OP', (('singer', 'country', 45),), ('=', 0), 0.9999946355819702, 8), ('WHERE_ROOT_TERM', (('singer', 'country', 45),), ('=', 0), 'terminal', 0.9999955892562866, 9)]",
        "logprob": "-3.4933157089924927",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9952509446841613, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('max', 1), False, 0.9248959416047533, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9316933471841006, 5), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.6582497954368591, 7), 'no'), (('WHERE_OP', (('singer', 'country', 45),), ('=', 0), 0.9999946355819702, 8), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'country', 45),), ('=', 0), 'terminal', 0.9999955892562866, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9952509446841613, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('max', 1), False, 0.9248959416047533, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9316933471841006, 5), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.6582497954368591, 7), 'no'), (('WHERE_COL', ('singer', 'country', 45), 0.05895547568798065, 7), 'yes'), (('WHERE_COL', ('singer', 'name', 44), 4.773802402269212e-07, 7), 'no'), (('WHERE_COL', ('stadium', 'average', 42), 4.2495861407587654e-07, 7), 'no'), (('WHERE_OP', (('singer', 'country', 45),), ('=', 0), 0.9999946355819702, 8), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'country', 45),), ('=', 0), 'terminal', 0.9999955892562866, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 634
    },
    {
        "nl": "What is the average , minimum , and maximum age for all French singers ?",
        "true_sql": "select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) where singer.country = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]], [2, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"France\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "singer.age",
            ")",
            ",",
            "max",
            "(",
            "singer.age",
            ")",
            ",",
            "avg",
            "(",
            "singer.age",
            ")",
            "where",
            "singer.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 48, 4], 8, [19, 5, 48, 4], 8, [17, 5, 48, 4], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.929576582073131, 1), ('SELECT_AGG_v2', ('singer', 'age', 48), ('max', 1), False, 0.9445984977147297, 3), ('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.8955219191032145, 5), ('WHERE_COL', ('singer', 'country', 45), 1.0, 7), ('WHERE_OP', (('singer', 'country', 45),), ('=', 0), 0.9999942779541016, 8), ('WHERE_ROOT_TERM', (('singer', 'country', 45),), ('=', 0), 'terminal', 0.9999961853027344, 9)]",
        "logprob": "-16.851393204890908",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.929576582073131, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('max', 1), False, 0.9445984977147297, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.8955219191032145, 5), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.7272163033485413, 7), 'no'), (('WHERE_OP', (('singer', 'country', 45),), ('=', 0), 0.9999942779541016, 8), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'country', 45),), ('=', 0), 'terminal', 0.9999961853027344, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.929576582073131, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('max', 1), False, 0.9445984977147297, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.8955219191032145, 5), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.7272163033485413, 7), 'no'), (('WHERE_COL', ('singer', 'name', 44), 0.0013767421478405595, 7), 'no'), (('WHERE_COL', ('singer', 'singer_id', 43), 2.754920558345475e-07, 7), 'no'), (('WHERE_COL', ('singer', 'country', 45), 1.3462734216318495e-07, 7), 'yes'), (('WHERE_OP', (('singer', 'country', 45),), ('=', 0), 0.9999942779541016, 8), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'country', 45),), ('=', 0), 'terminal', 0.9999961853027344, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 635
    },
    {
        "nl": "Show the name and the release year of the song by the youngest singer .",
        "true_sql": "select singer.song_name , singer.song_release_year order_by singer.age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.song_name",
            ",",
            "singer.song_release_year",
            "order_by",
            "singer.age",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 11, [48], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.6867230534553528, 1), ('SELECT_AGG_v2', ('singer', 'song_release_year', 47), ('none_agg', 0), False, 0.9999936819076538, 3), ('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9927095174789429, 5), ('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'asc', 0.00558793218806386, 6), ('ORDER_LIMIT', (('singer', 'age', 48), ('none_agg', 0), False), 'limit_value', 0.9987189769744873, 7)]",
        "logprob": "-5.571716785195339",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.6867230534553528, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'song_release_year', 47), ('none_agg', 0), False, 0.9999936819076538, 3), 'yes'), (('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9927095174789429, 5), 'yes'), (('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9707444906234741, 6), 'no'), (('ORDER_LIMIT', (('singer', 'age', 48), ('none_agg', 0), False), 'limit_value', 0.9987189769744873, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.6867230534553528, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'song_release_year', 47), ('none_agg', 0), False, 0.9999936819076538, 3), 'yes'), (('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.9927095174789429, 5), 'yes'), (('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.9707444906234741, 6), 'no'), (('ORDER_LIMIT', (('singer', 'age', 48), ('none_agg', 0), False), 'limit_value', 0.9987189769744873, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 636
    },
    {
        "nl": "What are the names and release years for all the songs of the youngest singer ?",
        "true_sql": "select singer.song_name , singer.song_release_year order_by singer.age limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.song_name",
            ",",
            "singer.song_release_year",
            "order_by",
            "singer.age",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 11, [48], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.8036458492279053, 1), ('SELECT_AGG_v2', ('singer', 'song_release_year', 47), ('none_agg', 0), False, 0.9999339580535889, 3), ('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.998487114906311, 5), ('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'asc', 0.0020253558177500963, 6), ('ORDER_LIMIT', (('singer', 'age', 48), ('none_agg', 0), False), 'limit_value', 0.9996045231819153, 7)]",
        "logprob": "-6.424207237901339",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.8036458492279053, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'song_release_year', 47), ('none_agg', 0), False, 0.9999339580535889, 3), 'yes'), (('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.998487114906311, 5), 'yes'), (('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.968142032623291, 6), 'no'), (('ORDER_LIMIT', (('singer', 'age', 48), ('none_agg', 0), False), 'limit_value', 0.9996045231819153, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.8036458492279053, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'song_release_year', 47), ('none_agg', 0), False, 0.9999339580535889, 3), 'yes'), (('ORDER_AGG_v2', ('singer', 'age', 48), ('none_agg', 0), False, 0.998487114906311, 5), 'yes'), (('ORDER_DESC_ASC', (('singer', 'age', 48), ('none_agg', 0), False), 'desc', 0.968142032623291, 6), 'no'), (('ORDER_LIMIT', (('singer', 'age', 48), ('none_agg', 0), False), 'limit_value', 0.9996045231819153, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 637
    },
    {
        "nl": "What are all distinct countries where singers above age 20 are from ?",
        "true_sql": "select distinct singer.country where singer.age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 20.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "singer.country",
            "where",
            "singer.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [45], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999979734420776, 2), ('WHERE_COL', ('singer', 'age', 48), 0.9999970197677612, 4), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9994035959243774, 5), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999357461929321, 6)]",
        "logprob": "-0.0008480039654938236",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999979734420776, 2), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.9999970197677612, 4), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9994035959243774, 5), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999357461929321, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999979734420776, 2), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.9999970197677612, 4), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9994035959243774, 5), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999357461929321, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 638
    },
    {
        "nl": "What are the different countries with singers above age 20 ?",
        "true_sql": "select distinct singer.country where singer.age > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 20.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "singer.country",
            "where",
            "singer.age",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [45], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999996423721313, 2), ('WHERE_COL', ('singer', 'age', 48), 0.9999997615814209, 4), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9996970891952515, 5), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999603033065796, 6)]",
        "logprob": "-0.0006580472332855158",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999996423721313, 2), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.9999997615814209, 4), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9996970891952515, 5), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999603033065796, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999996423721313, 2), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.9999997615814209, 4), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9996970891952515, 5), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999603033065796, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 639
    },
    {
        "nl": "Show all countries and the number of singers in each country .",
        "true_sql": "select singer.country , count ( singer.* ) group_by singer.country",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.country",
            ",",
            "count",
            "(",
            "singer.*",
            ")",
            "group_by",
            "singer.country",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [9, 5, 58, 4], 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999996423721313, 1), ('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.8699219402699939, 3), ('GROUP_COL', ('singer', 'country', 45), 1.0, 5)]",
        "logprob": "-0.5574789458090064",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.8699219402699939, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.8699219402699939, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 640
    },
    {
        "nl": "How many singers are from each country ?",
        "true_sql": "select singer.country , count ( singer.* ) group_by singer.country",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'singer.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "singer.*",
            ")",
            ",",
            "singer.country",
            "group_by",
            "singer.country",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 58, 4], 8, [45], 10, 45, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9987592372648564, 1), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999998807907104, 3), ('GROUP_COL', ('singer', 'country', 45), 1.0, 5)]",
        "logprob": "-0.005119679502843346",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9987592372648564, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999998807907104, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.9987592372648564, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999998807907104, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 641
    },
    {
        "nl": "List all song names by singers above the average age .",
        "true_sql": "select singer.song_name where singer.age > ( select avg ( singer.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.song_name",
            "where",
            "singer.age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "singer.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 48, [14], 5, 2, [17, 5, 48, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.5816525816917419, 1), ('WHERE_COL', ('singer', 'age', 48), 0.9997900128364563, 3), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9995942711830139, 4), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'root', 0.5132670998573303, 5), ('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9990741452363853, 7), ('O', '##END_NESTED##', 0.999929666519165, 8)]",
        "logprob": "-1.2167045017367737",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.5816525816917419, 1), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.9997900128364563, 3), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9995942711830139, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'root', 0.5132670998573303, 5), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9990741452363853, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.5816525816917419, 1), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.9997900128364563, 3), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9995942711830139, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'root', 0.5132670998573303, 5), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9990741452363853, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 642
    },
    {
        "nl": "What are all the song names by singers who are older than average ?",
        "true_sql": "select singer.song_name where singer.age > ( select avg ( singer.age ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 13, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.song_name",
            "where",
            "singer.age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "singer.age",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 48, [14], 5, 2, [17, 5, 48, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.9930024743080139, 1), ('WHERE_COL', ('singer', 'age', 48), 0.9996203184127808, 3), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.7301011085510254, 4), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'root', 0.9990807771682739, 5), ('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9980974331178587, 7), ('O', '##END_NESTED##', 0.9999493360519409, 8)]",
        "logprob": "-0.3306362224630628",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.9930024743080139, 1), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.9996203184127808, 3), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.7301011085510254, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'root', 0.9990807771682739, 5), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9980974331178587, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.9930024743080139, 1), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.9996203184127808, 3), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.7301011085510254, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'root', 0.9990807771682739, 5), 'yes'), (('SELECT_AGG_v2', ('singer', 'age', 48), ('avg', 5), False, 0.9980974331178587, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 643
    },
    {
        "nl": "Show location and name for all stadiums with a capacity between 5000 and 10000 .",
        "true_sql": "select stadium.location , stadium.name where stadium.capacity between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 1, [0, [0, 4, False], None], 5000.0, 10000.0]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.location",
            ",",
            "stadium.name",
            "where",
            "stadium.capacity",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 39, [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.999998927116394, 1), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999889135360718, 3), ('WHERE_COL', ('stadium', 'capacity', 39), 0.9999980926513672, 5), ('WHERE_OP', (('stadium', 'capacity', 39),), ('between', 9), 0.9890069961547852, 6), ('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('between', 9), 'terminal', 0.9999244213104248, 7)]",
        "logprob": "-0.01246166980281029",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.999998927116394, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999889135360718, 3), 'yes'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.9999980926513672, 5), 'yes'), (('WHERE_OP', (('stadium', 'capacity', 39),), ('between', 9), 0.9890069961547852, 6), 'yes'), (('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('between', 9), 'terminal', 0.9999244213104248, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.999998927116394, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999889135360718, 3), 'yes'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.9999980926513672, 5), 'yes'), (('WHERE_OP', (('stadium', 'capacity', 39),), ('between', 9), 0.9890069961547852, 6), 'yes'), (('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('between', 9), 'terminal', 0.9999244213104248, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 644
    },
    {
        "nl": "What are the locations and names of all stations with capacity between 5000 and 10000 ?",
        "true_sql": "select stadium.location , stadium.name where stadium.capacity between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 1, [0, [0, 4, False], None], 5000.0, 10000.0]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.location",
            ",",
            "stadium.name",
            "where",
            "stadium.capacity",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 39, [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.999779999256134, 1), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9792752861976624, 3), ('WHERE_COL', ('stadium', 'capacity', 39), 0.999990701675415, 5), ('WHERE_OP', (('stadium', 'capacity', 39),), ('between', 9), 0.9824803471565247, 6), ('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('between', 9), 'terminal', 0.9998455047607422, 7)]",
        "logprob": "-0.03970757583421955",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.999779999256134, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9792752861976624, 3), 'yes'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.999990701675415, 5), 'yes'), (('WHERE_OP', (('stadium', 'capacity', 39),), ('between', 9), 0.9824803471565247, 6), 'yes'), (('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('between', 9), 'terminal', 0.9998455047607422, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.999779999256134, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9792752861976624, 3), 'yes'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.999990701675415, 5), 'yes'), (('WHERE_OP', (('stadium', 'capacity', 39),), ('between', 9), 0.9824803471565247, 6), 'yes'), (('WHERE_ROOT_TERM', (('stadium', 'capacity', 39),), ('between', 9), 'terminal', 0.9998455047607422, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 645
    },
    {
        "nl": "What is the average and the maximum capacity of all stadiums ?",
        "true_sql": "select avg ( stadium.capacity ) , max ( stadium.capacity )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 4, False], None]], [1, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "stadium.capacity",
            ")",
            ",",
            "max",
            "(",
            "stadium.capacity",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 39, 4], 8, [19, 5, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.8843474019916794, 1), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.7868032886919842, 3)]",
        "logprob": "-1.4511447761431988",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.8843474019916794, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.7868032886919842, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.8843474019916794, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.7868032886919842, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 646
    },
    {
        "nl": "What is the average and maximum capacities for all stations ?",
        "true_sql": "select avg ( stadium.capacity ) , max ( stadium.capacity )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 4, False], None]], [1, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "stadium.capacity",
            ")",
            ",",
            "max",
            "(",
            "stadium.capacity",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 39, 4], 8, [19, 5, 39, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.8871211683279328, 1), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.7395111679152846, 3)]",
        "logprob": "-1.6863490121087377",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.8871211683279328, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.7395111679152846, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.8871211683279328, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.7395111679152846, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 647
    },
    {
        "nl": "What is the name and capacity for the stadium with highest average attendance ?",
        "true_sql": "select stadium.name , stadium.capacity order_by stadium.average desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.capacity",
            "order_by",
            "stadium.average",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 11, [42], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999933242797852, 1), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.0761449784040451, 3), ('ORDER_AGG_v2', ('stadium', 'average', 42), ('none_agg', 0), False, 0.27272385358810425, 5), ('ORDER_DESC_ASC', (('stadium', 'average', 42), ('none_agg', 0), False), 'desc', 0.999900221824646, 6), ('ORDER_LIMIT', (('stadium', 'average', 42), ('none_agg', 0), False), 'limit_value', 0.9996311664581299, 7)]",
        "logprob": "-4.230176487614941",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999933242797852, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'highest', 40), ('none_agg', 0), False, 0.6928164958953857, 3), 'no'), (('ORDER_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.7262613773345947, 5), 'no'), (('ORDER_DESC_ASC', (('stadium', 'average', 42), ('none_agg', 0), False), 'desc', 0.999900221824646, 6), 'yes'), (('ORDER_LIMIT', (('stadium', 'average', 42), ('none_agg', 0), False), 'limit_value', 0.9996311664581299, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999933242797852, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'highest', 40), ('none_agg', 0), False, 0.6928164958953857, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'average', 42), ('avg', 5), False, 0.5807846311466618, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.0761449784040451, 3), 'yes'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.46920029755817777, 3), 'no'), (('ORDER_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.7262613773345947, 5), 'no'), (('ORDER_AGG_v2', ('stadium', 'average', 42), ('none_agg', 0), False, 0.27272385358810425, 5), 'yes'), (('ORDER_AGG_v2', ('stadium', 'highest', 40), ('none_agg', 0), False, 0.0010133252944797275, 5), 'no'), (('ORDER_AGG_v2', ('stadium', 'lowest', 41), ('none_agg', 0), False, 1.4428326267079685e-06, 5), 'no'), (('ORDER_DESC_ASC', (('stadium', 'average', 42), ('none_agg', 0), False), 'desc', 0.999900221824646, 6), 'yes'), (('ORDER_LIMIT', (('stadium', 'average', 42), ('none_agg', 0), False), 'limit_value', 0.9996311664581299, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 648
    },
    {
        "nl": "What is the name and capacity for the stadium with the highest average attendance ?",
        "true_sql": "select stadium.name , stadium.capacity order_by stadium.average desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.capacity",
            "order_by",
            "stadium.average",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 11, [42], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999818801879883, 1), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.11072830855846404, 3), ('ORDER_AGG_v2', ('stadium', 'average', 42), ('none_agg', 0), False, 0.30808165669441223, 5), ('ORDER_DESC_ASC', (('stadium', 'average', 42), ('none_agg', 0), False), 'desc', 0.9999203681945801, 6), ('ORDER_LIMIT', (('stadium', 'average', 42), ('none_agg', 0), False), 'limit_value', 0.9995494484901428, 7)]",
        "logprob": "-3.556046491126093",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999818801879883, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'highest', 40), ('none_agg', 0), False, 0.4421312212944031, 3), 'no'), (('ORDER_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.6906011700630188, 5), 'no'), (('ORDER_DESC_ASC', (('stadium', 'average', 42), ('none_agg', 0), False), 'desc', 0.9999203681945801, 6), 'yes'), (('ORDER_LIMIT', (('stadium', 'average', 42), ('none_agg', 0), False), 'limit_value', 0.9995494484901428, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999818801879883, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'highest', 40), ('none_agg', 0), False, 0.4421312212944031, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.3026963174343109, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.11072830855846404, 3), 'yes'), (('SELECT_AGG_v2', ('stadium', 'average', 42), ('avg', 5), False, 0.5131958322575616, 3), 'no'), (('ORDER_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 0.6906011700630188, 5), 'no'), (('ORDER_AGG_v2', ('stadium', 'average', 42), ('none_agg', 0), False, 0.30808165669441223, 5), 'yes'), (('ORDER_AGG_v2', ('stadium', 'highest', 40), ('none_agg', 0), False, 0.0013138825306668878, 5), 'no'), (('ORDER_AGG_v2', ('stadium', 'lowest', 41), ('none_agg', 0), False, 3.319598590678651e-06, 5), 'no'), (('ORDER_DESC_ASC', (('stadium', 'average', 42), ('none_agg', 0), False), 'desc', 0.9999203681945801, 6), 'yes'), (('ORDER_LIMIT', (('stadium', 'average', 42), ('none_agg', 0), False), 'limit_value', 0.9995494484901428, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 649
    },
    {
        "nl": "How many concerts are there in year 2014 or 2015 ?",
        "true_sql": "select count ( concert.* ) where concert.year = value or concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None], 'or', [False, 2, [0, [0, 19, False], None], 2015.0, None]], 'extracted_clause_asterisk': {'select': 'concert.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "concert.*",
            ")",
            "where",
            "concert.year",
            "=",
            "value",
            "or",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 6, 54, [7], 3, 25, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.999960361092983, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9999861717224121, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9841302037239075, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999986886978149, 5), ('WHERE_COL', ('concert', 'year', 54), 1.0, 7), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9905417561531067, 8), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999938011169434, 9)]",
        "logprob": "-0.026532589056307204",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.999960361092983, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9999861717224121, 3), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9841302037239075, 4), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9905417561531067, 8), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999938011169434, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.999960361092983, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9999861717224121, 3), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9841302037239075, 4), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9905417561531067, 8), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999938011169434, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 650
    },
    {
        "nl": "How many concerts occurred in 2014 or 2015 ?",
        "true_sql": "select count ( concert.* ) where concert.year = value or concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None], 'or', [False, 2, [0, [0, 19, False], None], 2015.0, None]], 'extracted_clause_asterisk': {'select': 'concert.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "concert.*",
            ")",
            "where",
            "concert.year",
            "=",
            "value",
            "or",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 6, 54, [7], 3, 25, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9873624702731284, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9994146823883057, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9942715167999268, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999978542327881, 5), ('WHERE_COL', ('concert', 'year', 54), 0.9999964237213135, 7), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9695056676864624, 8), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999957084655762, 9)]",
        "logprob": "-0.1121394205130962",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9873624702731284, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9994146823883057, 3), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9942715167999268, 4), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9999964237213135, 7), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9695056676864624, 8), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999957084655762, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9873624702731284, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9994146823883057, 3), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9942715167999268, 4), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9999964237213135, 7), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9695056676864624, 8), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999957084655762, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 651
    },
    {
        "nl": "Show the stadium name and the number of concerts in each stadium .",
        "true_sql": "select stadium.name , count ( * ) group_by concert.stadium_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "concert.concert_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "concert.stadium_id",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [51], 8, [9, 5, 35, 4], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999876022338867, 1), ('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.00013676557864528152, 3), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.06876494035157762, 5), ('GROUP_COL', ('concert', 'stadium_id', 53), 0.9764879941940308, 7)]",
        "logprob": "-19.635211865656267",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999876022338867, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9837160916387178, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.10541060972563891, 5), 'no'), (('GROUP_COL', ('concert', 'stadium_id', 53), 0.9764879941940308, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999876022338867, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9837160916387178, 3), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.4906233541097122, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('sum', 4), False, 0.22471474055911347, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.17539552204471212, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.10541060972563891, 5), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.06876494035157762, 5), 'yes'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('min', 2), False, 0.05724502715600384, 5), 'no'), (('SELECT_AGG_v2', ('stadium', '*', 57), ('none_agg', 0), False, 0.8502422295226328, 5), 'no'), (('GROUP_COL', ('concert', 'stadium_id', 53), 0.9764879941940308, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 652
    },
    {
        "nl": "For each stadium , how many concerts play there ?",
        "true_sql": "select stadium.name , count ( * ) group_by concert.stadium_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "max",
            "(",
            "stadium.capacity",
            ")",
            "group_by",
            "concert.stadium_id",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [19, 5, 39, 4], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.09535928070545198, 1), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.061933038071696644, 3), ('GROUP_COL', ('concert', 'stadium_id', 53), 0.9972242116928101, 5)]",
        "logprob": "-13.479841417698058",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.8192211985588074, 1), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.35855529156256893, 3), 'no'), (('GROUP_COL', ('concert', 'stadium_id', 53), 0.9972242116928101, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.8192211985588074, 1), 'no'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.09535928070545198, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.4405510961411584, 1), 'no'), (('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.030002607032656663, 1), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.35855529156256893, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('sum', 4), False, 0.11359669536580161, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('count', 3), False, 0.10139716922977654, 3), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('avg', 5), False, 0.10004925066128735, 3), 'no'), (('GROUP_COL', ('concert', 'stadium_id', 53), 0.9972242116928101, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 653
    },
    {
        "nl": "Show the stadium name and capacity with most number of concerts in year 2014 or after .",
        "true_sql": "select stadium.name , stadium.capacity where concert.year > = value group_by stadium.stadium_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 5, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.name",
            "where",
            "concert.year",
            ">",
            "(",
            "select",
            "max",
            "(",
            "stadium.capacity",
            ")",
            "where",
            "concert.year",
            "=",
            "value",
            "group_by",
            "concert.stadium_id",
            "order_by",
            "count",
            "(",
            "stadium.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [38], 6, 54, [14], 5, 2, [19, 5, 39, 4], 6, 54, [7], 3, 10, 53, 11, [9, 5, 57, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9979214072227478, 1), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.7359592318534851, 3), ('WHERE_COL', ('concert', 'year', 54), 0.0026453116443008184, 5), ('WHERE_OP', (('concert', 'year', 54),), ('>', 1), 0.9521360397338867, 6), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('>', 1), 'root', 2.514854031687719e-06, 7), ('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.9823325913290726, 9), ('WHERE_COL', ('concert', 'year', 54), 0.6116740703582764, 11), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.998434841632843, 12), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999974966049194, 13), ('GROUP_COL', ('concert', 'stadium_id', 53), 0.9942010045051575, 15), ('ORDER_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.99574139585528, 17), ('ORDER_DESC_ASC', (('stadium', '*', 57), ('count', 3), False), 'desc', 0.9894075989723206, 18), ('ORDER_LIMIT', (('stadium', '*', 57), ('count', 3), False), 'limit_value', 0.8584132194519043, 19)]",
        "logprob": "-20.08389723014494",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9979214072227478, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.7359592318534851, 3), 'yes'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.9970182180404663, 5), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('>', 1), 0.9521360397338867, 6), 'no'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('>', 1), 'terminal', 0.9999690055847168, 7), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.9823325913290726, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9979214072227478, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.7359592318534851, 3), 'yes'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.9970182180404663, 5), 'no'), (('WHERE_COL', ('concert', 'year', 54), 0.0026453116443008184, 5), 'yes'), (('WHERE_COL', ('stadium', 'highest', 40), 0.0003288953739684075, 5), 'no'), (('WHERE_COL', ('stadium', '*', 57), 2.525234549466404e-06, 5), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('>', 1), 0.9521360397338867, 6), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.04365013912320137, 6), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('<', 2), 0.002898561768233776, 6), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('between', 9), 0.0007073315791785717, 6), 'no'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('>', 1), 'terminal', 0.9999690055847168, 7), 'no'), (('SELECT_AGG_v2', ('stadium', 'capacity', 39), ('max', 1), False, 0.9823325913290726, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 654
    },
    {
        "nl": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "true_sql": "select stadium.name , stadium.capacity where concert.year > = value group_by stadium.stadium_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 5, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.name",
            "where",
            "concert.year",
            ">",
            "=",
            "value",
            "group_by",
            "concert.year",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [38], 6, 54, [14, 7], 3, 10, 54, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9998897314071655, 1), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.6527595520019531, 3), ('WHERE_COL', ('concert', 'year', 54), 0.0016855723224580288, 5), ('WHERE_OP', (('concert', 'year', 54),), ('>=', 3), 0.1538535395691575, 6), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('>=', 3), 'terminal', 0.999971866607666, 7), ('GROUP_COL', ('concert', 'year', 54), 1.282209382225119e-06, 9), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.40630633153387974, 11), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9963529109954834, 12), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9995649456977844, 13)]",
        "logprob": "-27.76482133696757",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9998897314071655, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.6527595520019531, 3), 'yes'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.9949454665184021, 5), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('>', 1), 0.9983595013618469, 6), 'no'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('>=', 3), 'terminal', 0.999971866607666, 7), 'yes'), (('GROUP_COL', ('concert', 'stadium_id', 53), 0.9952667951583862, 9), 'no'), (('ORDER_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9903415336772668, 11), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9963529109954834, 12), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9995649456977844, 13), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9998897314071655, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.6527595520019531, 3), 'yes'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.9949454665184021, 5), 'no'), (('WHERE_COL', ('stadium', 'highest', 40), 0.0033593932166695595, 5), 'no'), (('WHERE_COL', ('concert', 'year', 54), 0.0016855723224580288, 5), 'yes'), (('WHERE_COL', ('stadium', 'average', 42), 4.644784439733485e-06, 5), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('>', 1), 0.9983595013618469, 6), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('>=', 3), 0.1538535395691575, 6), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.0016101981746032834, 6), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('<', 2), 6.9235993578331545e-06, 6), 'no'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('>=', 3), 'terminal', 0.999971866607666, 7), 'yes'), (('GROUP_COL', ('concert', 'stadium_id', 53), 0.9952667951583862, 9), 'no'), (('GROUP_COL', ('stadium', 'name', 38), 0.00457384716719389, 9), 'no'), (('GROUP_COL', ('concert', 'theme', 52), 8.417704520979896e-05, 9), 'no'), (('GROUP_COL', ('concert', 'concert_name', 51), 7.292450754903257e-05, 9), 'no'), (('ORDER_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9903415336772668, 11), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.40630633153387974, 11), 'yes'), (('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.31934221700089654, 11), 'no'), (('ORDER_AGG_v2', ('stadium', '*', 57), ('sum', 4), False, 0.09296827695806897, 11), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9963529109954834, 12), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9995649456977844, 13), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 655
    },
    {
        "nl": "Which year has most number of concerts ?",
        "true_sql": "select concert.year group_by concert.year order_by count ( concert.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'concert.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "concert.year",
            "group_by",
            "concert.year",
            "order_by",
            "count",
            "(",
            "concert.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [54], 10, 54, 11, [9, 5, 59, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', 'year', 54), ('none_agg', 0), False, 0.996921718120575, 1), ('GROUP_COL', ('concert', 'year', 54), 1.0, 3), ('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9998889837395393, 5), ('ORDER_DESC_ASC', (('concert', '*', 59), ('count', 3), False), 'desc', 0.9981314539909363, 6), ('ORDER_LIMIT', (('concert', '*', 59), ('count', 3), False), 'limit_value', 0.9998977184295654, 7)]",
        "logprob": "-0.006889136029210864",
        "q_counter": 4,
        "questioned_indices": [
            0,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('concert', 'year', 54), ('none_agg', 0), False, 0.996921718120575, 1), 'yes'), (('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9998889837395393, 5), 'yes'), (('ORDER_DESC_ASC', (('concert', '*', 59), ('count', 3), False), 'desc', 0.9981314539909363, 6), 'yes'), (('ORDER_LIMIT', (('concert', '*', 59), ('count', 3), False), 'limit_value', 0.9998977184295654, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('concert', 'year', 54), ('none_agg', 0), False, 0.996921718120575, 1), 'yes'), (('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9998889837395393, 5), 'yes'), (('ORDER_DESC_ASC', (('concert', '*', 59), ('count', 3), False), 'desc', 0.9981314539909363, 6), 'yes'), (('ORDER_LIMIT', (('concert', '*', 59), ('count', 3), False), 'limit_value', 0.9998977184295654, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 656
    },
    {
        "nl": "What is the year that had the most concerts ?",
        "true_sql": "select concert.year group_by concert.year order_by count ( concert.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'concert.*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "concert.year",
            "group_by",
            "concert.year",
            "order_by",
            "count",
            "(",
            "concert.*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [54], 10, 54, 11, [9, 5, 59, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', 'year', 54), ('none_agg', 0), False, 0.9999911785125732, 1), ('GROUP_COL', ('concert', 'year', 54), 1.0, 3), ('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9999529836483216, 5), ('ORDER_DESC_ASC', (('concert', '*', 59), ('count', 3), False), 'desc', 0.9996386766433716, 6), ('ORDER_LIMIT', (('concert', '*', 59), ('count', 3), False), 'limit_value', 0.9998841285705566, 7)]",
        "logprob": "-0.08075598185067903",
        "q_counter": 4,
        "questioned_indices": [
            0,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('concert', 'year', 54), ('none_agg', 0), False, 0.9999911785125732, 1), 'yes'), (('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9999529836483216, 5), 'yes'), (('ORDER_DESC_ASC', (('concert', '*', 59), ('count', 3), False), 'desc', 0.9996386766433716, 6), 'yes'), (('ORDER_LIMIT', (('concert', '*', 59), ('count', 3), False), 'limit_value', 0.9998841285705566, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('concert', 'year', 54), ('none_agg', 0), False, 0.9999911785125732, 1), 'yes'), (('ORDER_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9999529836483216, 5), 'yes'), (('ORDER_DESC_ASC', (('concert', '*', 59), ('count', 3), False), 'desc', 0.9996386766433716, 6), 'yes'), (('ORDER_LIMIT', (('concert', '*', 59), ('count', 3), False), 'limit_value', 0.9998841285705566, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 657
    },
    {
        "nl": "Show the stadium names without any concert .",
        "true_sql": "select stadium.name where stadium.stadium_id not in ( select concert.stadium_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 18, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            "where",
            "stadium.stadium_id",
            "not",
            "in",
            "(",
            "select",
            "concert.stadium_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 36, [22, 20], 5, 2, [53], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('stadium', 'stadium_id', 36), 0.9901212453842163, 3), ('WHERE_OP', (('stadium', 'stadium_id', 36),), ('not in', 7), 0.9996540238331799, 4), ('WHERE_ROOT_TERM', (('stadium', 'stadium_id', 36),), ('not in', 7), 'root', 0.9999891519546509, 5), ('SELECT_AGG_v2', ('concert', 'stadium_id', 53), ('none_agg', 0), False, 1.0, 7), ('O', '##END_NESTED##', 0.999884843826294, 8)]",
        "logprob": "-0.011549485215364384",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('stadium', 'stadium_id', 36), 0.9901212453842163, 3), 'yes'), (('WHERE_OP', (('stadium', 'stadium_id', 36),), ('not in', 7), 0.9996540238331799, 4), 'yes'), (('WHERE_ROOT_TERM', (('stadium', 'stadium_id', 36),), ('not in', 7), 'root', 0.9999891519546509, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('stadium', 'stadium_id', 36), 0.9901212453842163, 3), 'yes'), (('WHERE_OP', (('stadium', 'stadium_id', 36),), ('not in', 7), 0.9996540238331799, 4), 'yes'), (('WHERE_ROOT_TERM', (('stadium', 'stadium_id', 36),), ('not in', 7), 'root', 0.9999891519546509, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 658
    },
    {
        "nl": "What are the names of the stadiums without any concerts ?",
        "true_sql": "select stadium.name where stadium.stadium_id not in ( select concert.stadium_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 18, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            "where",
            "stadium.stadium_id",
            "not",
            "in",
            "(",
            "select",
            "concert.stadium_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 6, 36, [22, 20], 5, 2, [53], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999979734420776, 1), ('WHERE_COL', ('stadium', 'stadium_id', 36), 0.9917532205581665, 3), ('WHERE_OP', (('stadium', 'stadium_id', 36),), ('not in', 7), 0.9997415499028683, 4), ('WHERE_ROOT_TERM', (('stadium', 'stadium_id', 36),), ('not in', 7), 'root', 0.9999924898147583, 5), ('SELECT_AGG_v2', ('concert', 'stadium_id', 53), ('none_agg', 0), False, 0.9999843835830688, 7), ('O', '##END_NESTED##', 0.9999125003814697, 8)]",
        "logprob": "-0.010026527809967812",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999979734420776, 1), 'yes'), (('WHERE_COL', ('stadium', 'stadium_id', 36), 0.9917532205581665, 3), 'yes'), (('WHERE_OP', (('stadium', 'stadium_id', 36),), ('not in', 7), 0.9997415499028683, 4), 'yes'), (('WHERE_ROOT_TERM', (('stadium', 'stadium_id', 36),), ('not in', 7), 'root', 0.9999924898147583, 5), 'yes'), (('SELECT_AGG_v2', ('concert', 'stadium_id', 53), ('none_agg', 0), False, 0.9999843835830688, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999979734420776, 1), 'yes'), (('WHERE_COL', ('stadium', 'stadium_id', 36), 0.9917532205581665, 3), 'yes'), (('WHERE_OP', (('stadium', 'stadium_id', 36),), ('not in', 7), 0.9997415499028683, 4), 'yes'), (('WHERE_ROOT_TERM', (('stadium', 'stadium_id', 36),), ('not in', 7), 'root', 0.9999924898147583, 5), 'yes'), (('SELECT_AGG_v2', ('concert', 'stadium_id', 53), ('none_agg', 0), False, 0.9999843835830688, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 659
    },
    {
        "nl": "Show countries where a singer above age 40 and a singer below 30 are from .",
        "true_sql": "select singer.country where singer.age > value intersect select singer.country where singer.age < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 13, False], None], 30.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 40.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.country",
            "where",
            "singer.age",
            ">",
            "value",
            "intersect",
            "select",
            "singer.country",
            "where",
            "singer.age",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 48, [14], 3, 23, 2, [45], 6, 48, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('singer', 'age', 48), 0.9999990463256836, 3), ('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9963853359222412, 4), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999922513961792, 5), ('IUEN_v2', ('intersect', 1), 0.9855759143829346, 6), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999994039535522, 8), ('WHERE_COL', ('singer', 'age', 48), 0.999964714050293, 10), ('WHERE_OP', (('singer', 'age', 48),), ('<', 2), 0.08491583168506622, 11), ('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('<', 2), 'terminal', 0.9999241828918457, 12)]",
        "logprob": "-2.4847822084236895",
        "q_counter": 8,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('WHERE_COL', ('singer', 'age', 48), 0.9999990463256836, 3), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9963853359222412, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999922513961792, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9855759143829346, 6), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999994039535522, 8), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.999964714050293, 10), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9069375395774841, 11), 'no'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('<', 2), 'terminal', 0.9999241828918457, 12), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('singer', 'age', 48), 0.9999990463256836, 3), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9963853359222412, 4), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('>', 1), 'terminal', 0.9999922513961792, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9855759143829346, 6), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9999994039535522, 8), 'yes'), (('WHERE_COL', ('singer', 'age', 48), 0.999964714050293, 10), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('>', 1), 0.9069375395774841, 11), 'no'), (('WHERE_OP', (('singer', 'age', 48),), ('<', 2), 0.08491583168506622, 11), 'yes'), (('WHERE_OP', (('singer', 'age', 48),), ('=', 0), 0.00740254670381546, 11), 'no'), (('WHERE_OP', (('singer', 'age', 48),), ('between', 9), 0.00021546553762163967, 11), 'no'), (('WHERE_ROOT_TERM', (('singer', 'age', 48),), ('<', 2), 'terminal', 0.9999241828918457, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 660
    },
    {
        "nl": "Show names for all stadiums except for stadiums having a concert in year 2014 .",
        "true_sql": "select stadium.name except select stadium.name where concert.year = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            "except",
            "select",
            "stadium.name",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 28, 2, [38], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999991655349731, 1), ('IUEN_v2', ('except', 3), 0.001061776070855558, 2), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.99982088804245, 4), ('WHERE_COL', ('concert', 'year', 54), 0.99956876039505, 6), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9999797344207764, 7), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999991655349731, 8)]",
        "logprob": "-6.849033214096578",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9984450936317444, 3), 'no'), (('IUEN_v2', ('except', 3), 0.001061776070855558, 2), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.99982088804245, 4), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.99956876039505, 6), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9999797344207764, 7), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999991655349731, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9984450936317444, 3), 'no'), (('WHERE_COL', ('concert', 'concert_name', 51), 0.001552744535729289, 3), 'no'), (('WHERE_COL', ('stadium', 'location', 37), 1.997776507778326e-06, 3), 'no'), (('WHERE_COL', ('stadium', 'capacity', 39), 1.151753465933325e-07, 3), 'no'), (('IUEN_v2', ('except', 3), 0.001061776070855558, 2), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.99982088804245, 4), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.99956876039505, 6), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9999797344207764, 7), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999991655349731, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 661
    },
    {
        "nl": "What are the names of all stadiums that did not have a concert in 2014 ?",
        "true_sql": "select stadium.name except select stadium.name where concert.year = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            "except",
            "select",
            "stadium.name",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 28, 2, [38], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999686479568481, 1), ('IUEN_v2', ('except', 3), 1.9554703612811863e-05, 2), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9983624815940857, 4), ('WHERE_COL', ('concert', 'year', 54), 0.9997993111610413, 6), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.29305189847946167, 7), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999951124191284, 8)]",
        "logprob": "-12.07223612560585",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999686479568481, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9991124272346497, 3), 'no'), (('IUEN_v2', ('except', 3), 1.9554703612811863e-05, 2), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9983624815940857, 4), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9997993111610413, 6), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('!=', 5), 0.6846228241920471, 7), 'no'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999951124191284, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9999686479568481, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9991124272346497, 3), 'no'), (('WHERE_COL', ('concert', 'concert_name', 51), 0.0008602137095294893, 3), 'no'), (('WHERE_COL', ('stadium', 'location', 37), 2.129835047526285e-05, 3), 'no'), (('WHERE_COL', ('stadium', 'capacity', 39), 3.806570930464659e-06, 3), 'no'), (('IUEN_v2', ('except', 3), 1.9554703612811863e-05, 2), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9983624815940857, 4), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9997993111610413, 6), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('!=', 5), 0.6846228241920471, 7), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.29305189847946167, 7), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('not in', 7), 0.14598014665466794, 7), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('in', 8), 0.00019853412231896073, 7), 'no'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999951124191284, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 662
    },
    {
        "nl": "Show the name and theme for all concerts and the number of singers in each concert .",
        "true_sql": "select concert.concert_name , concert.theme , count ( * ) group_by concert.concert_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]], [0, [0, [0, 17, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "concert.theme",
            ",",
            "concert.concert_name",
            ",",
            "(",
            "concert.*",
            ")",
            "group_by",
            "singer_in_concert.concert_id",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 8, [51], 8, [5, 59, 4], 10, 55, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.9830265641212463, 1), ('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.0018463417654857037, 3), ('SELECT_AGG_v2', ('concert', '*', 59), ('none_agg', 0), False, 0.9943618179493476, 5), ('GROUP_COL', ('singer_in_concert', 'concert_id', 55), 2.8131527801135946e-14, 7)]",
        "logprob": "-48.40847776423757",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.9830265641212463, 1), 'yes'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9975834443664783, 3), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('max', 1), False, 0.10139157475615894, 5), 'no'), (('GROUP_COL', ('concert', 'theme', 52), 0.9999997615814209, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.9830265641212463, 1), 'yes'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9975834443664783, 3), 'no'), (('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.002970825647935271, 3), 'yes'), (('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.0018463417654857037, 3), 'yes'), (('SELECT_AGG_v2', ('singer_in_concert', '*', 60), ('count', 3), False, 0.1807557717265917, 3), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('max', 1), False, 0.10139157475615894, 5), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('avg', 5), False, 0.08846131265720224, 5), 'no'), (('SELECT_AGG_v2', ('singer_in_concert', 'concert_id', 55), ('none_agg', 0), False, 4.3472795368870686e-05, 5), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('sum', 4), False, 0.07426263974375681, 5), 'no'), (('GROUP_COL', ('concert', 'theme', 52), 0.9999997615814209, 7), 'no'), (('GROUP_COL', ('concert', 'concert_name', 51), 2.824405100909644e-07, 7), 'no'), (('GROUP_COL', ('singer', 'name', 44), 2.6940413875436997e-12, 7), 'no'), (('GROUP_COL', ('singer', 'song_name', 46), 2.6988386026861877e-13, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 663
    },
    {
        "nl": "What are the names , themes , and number of singers for each and every concert ?",
        "true_sql": "select concert.concert_name , concert.theme , count ( * ) group_by concert.concert_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 20, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]], [0, [0, [0, 17, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "concert.theme",
            ",",
            "concert.concert_name",
            ",",
            "concert.concert_name",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 8, [51], 8, [51], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.9611207246780396, 1), ('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.9994825124740601, 3), ('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.028442827984690663, 5)]",
        "logprob": "-3.6244584372092072",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.9611207246780396, 1), 'yes'), (('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.9994825124740601, 3), 'yes'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9720778792555057, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.9611207246780396, 1), 'yes'), (('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.9994825124740601, 3), 'yes'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.9720778792555057, 5), 'no'), (('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.028442827984690663, 5), 'yes'), (('SELECT_AGG_v2', ('singer_in_concert', '*', 60), ('none_agg', 0), False, 0.014668698422610758, 5), 'no'), (('SELECT_AGG_v2', ('concert', 'theme', 52), ('none_agg', 0), False, 0.014454769901931286, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 664
    },
    {
        "nl": "List singer names and number of concerts for each singer .",
        "true_sql": "select singer.name , count ( * ) group_by singer.singer_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "stadium.name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [9, 5, 35, 4], 10, 38, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9977436065673828, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.2657446635275718, 3), ('GROUP_COL', ('stadium', 'name', 38), 1.0217355338681955e-05, 5)]",
        "logprob": "-16.794658516819933",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9977436065673828, 1), 'yes'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.970706612708266, 3), 'no'), (('GROUP_COL', ('concert', 'concert_name', 51), 0.9803560972213745, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9977436065673828, 1), 'yes'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.970706612708266, 3), 'no'), (('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.512721906049388, 3), 'no'), (('SELECT_AGG_v2', ('singer_in_concert', '*', 60), ('count', 3), False, 0.41577643968255884, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.2657446635275718, 3), 'yes'), (('GROUP_COL', ('concert', 'concert_name', 51), 0.9803560972213745, 5), 'no'), (('GROUP_COL', ('singer', 'name', 44), 0.018553411588072777, 5), 'no'), (('GROUP_COL', ('singer_in_concert', 'singer_id', 56), 0.0010536725167185068, 5), 'no'), (('GROUP_COL', ('concert', 'theme', 52), 2.3588483600178733e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 665
    },
    {
        "nl": "What are the names of the singers and number of concerts for each person ?",
        "true_sql": "select singer.name , count ( * ) group_by singer.singer_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "stadium.name",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [9, 5, 35, 4], 10, 38, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9999815225601196, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.43846730805357503, 3), ('GROUP_COL', ('stadium', 'name', 38), 1.45124784012296e-06, 5)]",
        "logprob": "-16.7411024337062",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9999815225601196, 1), 'yes'), (('SELECT_AGG_v2', ('singer_in_concert', '*', 60), ('count', 3), False, 0.9008002709223267, 3), 'no'), (('GROUP_COL', ('concert', 'concert_name', 51), 0.9366843700408936, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9999815225601196, 1), 'yes'), (('SELECT_AGG_v2', ('singer_in_concert', '*', 60), ('count', 3), False, 0.9008002709223267, 3), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.5873043947929352, 3), 'no'), (('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.10352444648742676, 3), 'no'), (('SELECT_AGG_v2', ('singer', '*', 58), ('count', 3), False, 0.5016355926224354, 3), 'no'), (('GROUP_COL', ('concert', 'concert_name', 51), 0.9366843700408936, 5), 'no'), (('GROUP_COL', ('singer', 'name', 44), 0.03657892718911171, 5), 'no'), (('GROUP_COL', ('concert', 'theme', 52), 0.02644120343029499, 5), 'no'), (('GROUP_COL', ('singer_in_concert', 'singer_id', 56), 0.0002926575834862888, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 666
    },
    {
        "nl": "List all singer names in concerts in year 2014 .",
        "true_sql": "select singer.name where concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9999991655349731, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9999994039535522, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.999987006187439, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.00011384764033548996",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9999994039535522, 3), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.999987006187439, 4), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9999991655349731, 1), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9999994039535522, 3), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.999987006187439, 4), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 667
    },
    {
        "nl": "What are the names of the singers who performed in a concert in 2014 ?",
        "true_sql": "select singer.name where concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('concert', 'year', 54), 0.9984884262084961, 3), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9999793767929077, 4), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.0015806678804287497",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('concert', 'year', 54), 0.9984884262084961, 3), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9999793767929077, 4), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('concert', 'year', 54), 0.9984884262084961, 3), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9999793767929077, 4), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 668
    },
    {
        "nl": "what is the name and nation of the singer who have a song having 'Hey ' in its name ?",
        "true_sql": "select singer.name , singer.country where singer.song_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 11, False], None], '\"%Hey%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "singer.name",
            "where",
            "singer.song_name",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [44], 6, 46, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9256467819213867, 1), ('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.44633838534355164, 3), ('WHERE_COL', ('singer', 'song_name', 46), 0.8210790753364563, 5), ('WHERE_OP', (('singer', 'song_name', 46),), ('like', 6), 3.41450868290849e-05, 6), ('WHERE_ROOT_TERM', (('singer', 'song_name', 46),), ('like', 6), 'terminal', 0.9999966621398926, 7)]",
        "logprob": "-11.366025278085909",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9256467819213867, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.539997398853302, 3), 'no'), (('WHERE_COL', ('singer', 'song_name', 46), 0.8210790753364563, 5), 'yes'), (('WHERE_OP', (('singer', 'song_name', 46),), ('=', 0), 0.999945878982544, 6), 'no'), (('WHERE_ROOT_TERM', (('singer', 'song_name', 46),), ('like', 6), 'terminal', 0.9999966621398926, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9256467819213867, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'song_name', 46), ('none_agg', 0), False, 0.539997398853302, 3), 'no'), (('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.44633838534355164, 3), 'yes'), (('SELECT_AGG_v2', ('singer', 'is_male', 49), ('none_agg', 0), False, 0.013388625346124169, 3), 'no'), (('SELECT_AGG_v2', ('singer', 'singer_id', 43), ('none_agg', 0), False, 0.00016872608102858056, 3), 'no'), (('WHERE_COL', ('singer', 'song_name', 46), 0.8210790753364563, 5), 'yes'), (('WHERE_OP', (('singer', 'song_name', 46),), ('=', 0), 0.999945878982544, 6), 'no'), (('WHERE_OP', (('singer', 'song_name', 46),), ('like', 6), 3.41450868290849e-05, 6), 'yes'), (('WHERE_OP', (('singer', 'song_name', 46),), ('!=', 5), 1.4296914741862565e-05, 6), 'no'), (('WHERE_OP', (('singer', 'song_name', 46),), ('>', 1), 2.1744388050137786e-06, 6), 'no'), (('WHERE_ROOT_TERM', (('singer', 'song_name', 46),), ('like', 6), 'terminal', 0.9999966621398926, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 669
    },
    {
        "nl": "What is the name and country of origin of every singer who has a song with the word 'Hey ' in its title ?",
        "true_sql": "select singer.name , singer.country where singer.song_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 11, False], None], '\"%Hey%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "singer.name",
            ",",
            "singer.country",
            "where",
            "singer.song_name",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 6, 46, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9760820269584656, 1), ('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9992908239364624, 3), ('WHERE_COL', ('singer', 'song_name', 46), 1.0, 5), ('WHERE_OP', (('singer', 'song_name', 46),), ('like', 6), 0.9997667670249939, 6), ('WHERE_ROOT_TERM', (('singer', 'song_name', 46),), ('like', 6), 'terminal', 0.9999818801879883, 7)]",
        "logprob": "-3.7358393626009776",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9760820269584656, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9992908239364624, 3), 'yes'), (('WHERE_COL', ('singer', 'country', 45), 0.9620943069458008, 5), 'no'), (('WHERE_OP', (('singer', 'song_name', 46),), ('like', 6), 0.9997667670249939, 6), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'song_name', 46),), ('like', 6), 'terminal', 0.9999818801879883, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('singer', 'name', 44), ('none_agg', 0), False, 0.9760820269584656, 1), 'yes'), (('SELECT_AGG_v2', ('singer', 'country', 45), ('none_agg', 0), False, 0.9992908239364624, 3), 'yes'), (('WHERE_COL', ('singer', 'country', 45), 0.9620943069458008, 5), 'no'), (('WHERE_COL', ('singer', 'song_name', 46), 0.02447197027504444, 5), 'yes'), (('WHERE_COL', ('singer', 'name', 44), 0.013385295867919922, 5), 'no'), (('WHERE_COL', ('singer', 'is_male', 49), 4.711252768174745e-05, 5), 'no'), (('WHERE_OP', (('singer', 'song_name', 46),), ('like', 6), 0.9997667670249939, 6), 'yes'), (('WHERE_ROOT_TERM', (('singer', 'song_name', 46),), ('like', 6), 'terminal', 0.9999818801879883, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 670
    },
    {
        "nl": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015 .",
        "true_sql": "select stadium.name , stadium.location where concert.year = value intersect select stadium.name , stadium.location where concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2015.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.location",
            "where",
            "concert.year",
            "=",
            "value",
            "intersect",
            "select",
            "stadium.name",
            ",",
            "stadium.location",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [37], 6, 54, [7], 3, 23, 2, [38], 8, [37], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9989204406738281, 1), ('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9999672174453735, 3), ('WHERE_COL', ('concert', 'year', 54), 0.03775770217180252, 5), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.8670567274093628, 6), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999983310699463, 7), ('IUEN_v2', ('intersect', 1), 0.43527767062187195, 8), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9961620569229126, 10), ('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.8409318327903748, 12), ('WHERE_COL', ('concert', 'year', 54), 0.9823351502418518, 14), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9448789358139038, 15), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999988079071045, 16)]",
        "logprob": "-4.520536306795537",
        "q_counter": 12,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            5,
            6,
            7,
            8,
            9,
            10
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9989204406738281, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9999672174453735, 3), 'yes'), (('WHERE_COL', ('stadium', 'location', 37), 0.9505580067634583, 5), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.8670567274093628, 6), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999983310699463, 7), 'yes'), (('GROUP_COL', ('concert', 'stadium_id', 53), 0.9456822276115417, 9), 'no'), (('IUEN_v2', ('intersect', 1), 0.43527767062187195, 8), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9961620569229126, 10), 'yes'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.8409318327903748, 12), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9823351502418518, 14), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9448789358139038, 15), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999988079071045, 16), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9989204406738281, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9999672174453735, 3), 'yes'), (('WHERE_COL', ('stadium', 'location', 37), 0.9505580067634583, 5), 'no'), (('WHERE_COL', ('concert', 'year', 54), 0.03775770217180252, 5), 'yes'), (('WHERE_COL', ('stadium', 'highest', 40), 0.005872705020010471, 5), 'no'), (('WHERE_COL', ('stadium', 'capacity', 39), 0.0031862149480730295, 5), 'no'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.8670567274093628, 6), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999983310699463, 7), 'yes'), (('GROUP_COL', ('concert', 'stadium_id', 53), 0.9456822276115417, 9), 'no'), (('GROUP_COL', ('concert', 'year', 54), 0.044246856123209, 9), 'no'), (('GROUP_COL', ('stadium', 'name', 38), 0.009244179353117943, 9), 'no'), (('GROUP_COL', ('concert', 'concert_name', 51), 0.0004488979175221175, 9), 'no'), (('IUEN_v2', ('intersect', 1), 0.43527767062187195, 8), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9961620569229126, 10), 'yes'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.8409318327903748, 12), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9823351502418518, 14), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9448789358139038, 15), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999988079071045, 16), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 671
    },
    {
        "nl": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015 ?",
        "true_sql": "select stadium.name , stadium.location where concert.year = value intersect select stadium.name , stadium.location where concert.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2015.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            ",",
            "stadium.location",
            "where",
            "concert.year",
            "=",
            "value",
            "intersect",
            "select",
            "stadium.name",
            ",",
            "stadium.location",
            "where",
            "concert.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [37], 6, 54, [7], 3, 23, 2, [38], 8, [37], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9510685205459595, 1), ('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9994138479232788, 3), ('WHERE_COL', ('concert', 'year', 54), 0.9785142540931702, 5), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.8518051505088806, 6), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999988079071045, 7), ('IUEN_v2', ('intersect', 1), 0.9944477081298828, 8), ('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.938758909702301, 10), ('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.7801559567451477, 12), ('WHERE_COL', ('concert', 'year', 54), 0.9999330043792725, 14), ('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9501730799674988, 15), ('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999991655349731, 16)]",
        "logprob": "-0.6637410903330168",
        "q_counter": 11,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9510685205459595, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9994138479232788, 3), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9785142540931702, 5), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.8518051505088806, 6), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999988079071045, 7), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9944477081298828, 8), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.938758909702301, 10), 'yes'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.7801559567451477, 12), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9999330043792725, 14), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9501730799674988, 15), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999991655349731, 16), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.9510685205459595, 1), 'yes'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.9994138479232788, 3), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9785142540931702, 5), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.8518051505088806, 6), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999988079071045, 7), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9944477081298828, 8), 'yes'), (('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.938758909702301, 10), 'yes'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.7801559567451477, 12), 'yes'), (('WHERE_COL', ('concert', 'year', 54), 0.9999330043792725, 14), 'yes'), (('WHERE_OP', (('concert', 'year', 54),), ('=', 0), 0.9501730799674988, 15), 'yes'), (('WHERE_ROOT_TERM', (('concert', 'year', 54),), ('=', 0), 'terminal', 0.9999991655349731, 16), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 672
    },
    {
        "nl": "Find the number of concerts happened in the stadium with the highest capacity .",
        "true_sql": "select count ( * ) order_by stadium.capacity desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": "['select', 'count', '(', 'stadium.*', ')', 'desc', 'limit_value', '_EOS']",
        "dec_seq": "None",
        "tag_seq": "None",
        "logprob": "-1.1854326184595871",
        "questioned_indices": [],
        "q_counter": 0,
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": true,
        "idx": 673
    },
    {
        "nl": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "true_sql": "select count ( * ) order_by stadium.capacity desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'stadium.stadium_id': 1, 'stadium.location': 2, 'stadium.name': 3, 'stadium.capacity': 4, 'stadium.highest': 5, 'stadium.lowest': 6, 'stadium.average': 7, 'singer.singer_id': 8, 'singer.name': 9, 'singer.country': 10, 'singer.song_name': 11, 'singer.song_release_year': 12, 'singer.age': 13, 'singer.is_male': 14, 'concert.concert_id': 15, 'concert.concert_name': 16, 'concert.theme': 17, 'concert.stadium_id': 18, 'concert.year': 19, 'singer_in_concert.concert_id': 20, 'singer_in_concert.singer_id': 21, 'stadium.*': 22, 'singer.*': 23, 'concert.*': 24, 'singer_in_concert.*': 25}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "stadium.name",
            "order_by",
            "stadium.capacity",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 11, [39], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('stadium', 'name', 38), ('none_agg', 0), False, 0.00932039599865675, 1), ('ORDER_AGG_v2', ('stadium', 'capacity', 39), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'desc', 0.9995660185813904, 4), ('ORDER_LIMIT', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'limit_value', 0.9999604225158691, 5)]",
        "logprob": "-4.751373235739023",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9582769156347669, 1), 'no'), (('ORDER_DESC_ASC', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'desc', 0.9995660185813904, 4), 'yes'), (('ORDER_LIMIT', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'limit_value', 0.9999604225158691, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('stadium', '*', 57), ('count', 3), False, 0.9582769156347669, 1), 'no'), (('SELECT_AGG_v2', ('concert', 'concert_name', 51), ('none_agg', 0), False, 0.0982891097664833, 1), 'no'), (('SELECT_AGG_v2', ('stadium', 'location', 37), ('none_agg', 0), False, 0.026415733620524403, 1), 'no'), (('SELECT_AGG_v2', ('concert', '*', 59), ('count', 3), False, 0.34357296623843453, 1), 'no'), (('ORDER_DESC_ASC', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'desc', 0.9995660185813904, 4), 'yes'), (('ORDER_LIMIT', (('stadium', 'capacity', 39), ('none_agg', 0), False), 'limit_value', 0.9999604225158691, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 674
    },
    {
        "nl": "How many states are there ?",
        "true_sql": "select count ( area_code_state.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'area_code_state.*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "area_code_state.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 45, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', '*', 45), ('count', 3), False, 0.8991308852282857, 1)]",
        "logprob": "-0.42546081073106057",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('area_code_state', '*', 45), ('count', 3), False, 0.8991308852282857, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('area_code_state', '*', 45), ('count', 3), False, 0.8991308852282857, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 675
    },
    {
        "nl": "List the contestant numbers and names , ordered by contestant name descending .",
        "true_sql": "select contestants.contestant_number , contestants.contestant_name order_by contestants.contestant_name desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "order_by",
            "contestants.contestant_name",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 11, [39], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.98223477602005, 1), ('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9994907379150391, 3), ('ORDER_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.03831559419631958, 5), ('ORDER_DESC_ASC', (('contestants', 'contestant_name', 39), ('none_agg', 0), False), 'desc', 0.0744347870349884, 6)]",
        "logprob": "-5.879073305123186",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.98223477602005, 1), 'yes'), (('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9994907379150391, 3), 'yes'), (('ORDER_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.9616774916648865, 5), 'no'), (('ORDER_DESC_ASC', (('contestants', 'contestant_name', 39), ('none_agg', 0), False), 'asc', 0.9055641889572144, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.98223477602005, 1), 'yes'), (('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9994907379150391, 3), 'yes'), (('ORDER_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.9616774916648865, 5), 'no'), (('ORDER_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.03831559419631958, 5), 'yes'), (('ORDER_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 5.71348846278852e-06, 5), 'no'), (('ORDER_AGG_v2', ('contestants', '*', 46), ('none_agg', 0), False, 1.0872764732994262e-06, 5), 'no'), (('ORDER_DESC_ASC', (('contestants', 'contestant_name', 39), ('none_agg', 0), False), 'asc', 0.9055641889572144, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 676
    },
    {
        "nl": "List the vote ids , phone numbers and states of all votes .",
        "true_sql": "select votes.vote_id , votes.phone_number , votes.state",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "votes.vote_id",
            ",",
            "votes.phone_number",
            ",",
            "votes.phone_number",
            "_EOS"
        ],
        "dec_seq": "[2, [40], 8, [41], 8, [41], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.9999957084655762, 3), ('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.5437419414520264, 5)]",
        "logprob": "-0.6102631211126809",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.9999957084655762, 3), 'yes'), (('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.5437419414520264, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.9999957084655762, 3), 'yes'), (('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.5437419414520264, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 677
    },
    {
        "nl": "What are the maximum and minimum values of area codes ?",
        "true_sql": "select max ( area_code_state.area_code ) , min ( area_code_state.area_code )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 1, False], None]], [2, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "area_code_state.area_code",
            ")",
            ",",
            "min",
            "(",
            "area_code_state.area_code",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 36, 4], 8, [26, 5, 36, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('max', 1), False, 0.995235224884355, 1), ('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('min', 2), False, 0.9921611463400275, 3)]",
        "logprob": "-0.05087182644445888",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('max', 1), False, 0.995235224884355, 1), 'yes'), (('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('min', 2), False, 0.9921611463400275, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('max', 1), False, 0.995235224884355, 1), 'yes'), (('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('min', 2), False, 0.9921611463400275, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 678
    },
    {
        "nl": "What is last date created of votes from the state 'CA ' ?",
        "true_sql": "select max ( votes.created ) where votes.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"CA\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "area_code_state.state",
            "where",
            "votes.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', 'state', 37), ('none_agg', 0), False, 0.0024213530123233795, 1), ('WHERE_COL', ('votes', 'state', 42), 0.5666038393974304, 3), ('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999895095825195, 4), ('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999978542327881, 5)]",
        "logprob": "-6.758016030499984",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.6589183807373047, 1), 'no'), (('WHERE_COL', ('votes', 'state', 42), 0.5666038393974304, 3), 'yes'), (('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999895095825195, 4), 'yes'), (('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.6589183807373047, 1), 'no'), (('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.2849699854850769, 1), 'no'), (('SELECT_AGG_v2', ('votes', '*', 47), ('none_agg', 0), False, 0.03540532290935516, 1), 'no'), (('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('none_agg', 0), False, 0.015738250687718388, 1), 'no'), (('WHERE_COL', ('votes', 'state', 42), 0.5666038393974304, 3), 'yes'), (('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999895095825195, 4), 'yes'), (('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 679
    },
    {
        "nl": "What are the names of the contestants whose names are not 'Jessie Alloway '",
        "true_sql": "select contestants.contestant_name where contestants.contestant_name != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"Jessie Alloway\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "contestants.contestant_name",
            "where",
            "contestants.contestant_name",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9999994039535522, 1), ('WHERE_COL', ('contestants', 'contestant_name', 39), 1.0, 3), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('!=', 5), 0.9989989399909973, 4), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('!=', 5), 'terminal', 0.9999796152114868, 5)]",
        "logprob": "-1.5395391694083749",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9999994039535522, 1), 'yes'), (('WHERE_COL', ('contestants', 'contestant_number', 38), 0.7833338379859924, 3), 'no'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('!=', 5), 0.9989989399909973, 4), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('!=', 5), 'terminal', 0.9999796152114868, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9999994039535522, 1), 'yes'), (('WHERE_COL', ('contestants', 'contestant_number', 38), 0.7833338379859924, 3), 'no'), (('WHERE_COL', ('contestants', 'contestant_name', 39), 0.21493704617023468, 3), 'yes'), (('WHERE_COL', ('contestants', '*', 46), 2.68656003754586e-06, 3), 'no'), (('WHERE_COL', ('votes', 'contestant_number', 43), 2.0581958324328298e-06, 3), 'no'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('!=', 5), 0.9989989399909973, 4), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('!=', 5), 'terminal', 0.9999796152114868, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 680
    },
    {
        "nl": "What are the distinct states and create time of all votes ?",
        "true_sql": "select distinct votes.state , votes.created",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 7, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "votes.state",
            ",",
            "votes.created",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [42], 8, [44], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.9999997615814209, 2), ('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.9999451637268066, 4)]",
        "logprob": "-0.0005768560823865154",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.9999997615814209, 2), 'yes'), (('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.9999451637268066, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.9999997615814209, 2), 'yes'), (('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.9999451637268066, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 681
    },
    {
        "nl": "What are the contestant numbers and names of the contestants who had at least two votes ?",
        "true_sql": "select contestants.contestant_number , contestants.contestant_name group_by contestants.contestant_number having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "group_by",
            "contestants.contestant_number",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 10, 38, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.5745070576667786, 1), ('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9998001456260681, 3), ('GROUP_COL', ('contestants', 'contestant_number', 38), 0.00015673725283704698, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9989757342198495, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9974483484101401, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999895095825195, 9)]",
        "logprob": "-9.33204531206541",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.5745070576667786, 1), 'yes'), (('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9998001456260681, 3), 'yes'), (('GROUP_COL', ('votes', 'contestant_number', 43), 0.9997939467430115, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9989757342198495, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9974483484101401, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999895095825195, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.5745070576667786, 1), 'yes'), (('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9998001456260681, 3), 'yes'), (('GROUP_COL', ('votes', 'contestant_number', 43), 0.9997939467430115, 5), 'no'), (('GROUP_COL', ('contestants', 'contestant_number', 38), 0.00015673725283704698, 5), 'yes'), (('GROUP_COL', ('votes', 'vote_id', 40), 4.141531098866835e-05, 5), 'no'), (('GROUP_COL', ('votes', '*', 47), 2.911921228587744e-06, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9989757342198495, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9974483484101401, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999895095825195, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 682
    },
    {
        "nl": "Of all the contestants who got voted , what is the contestant number and name of the contestant who got least votes ?",
        "true_sql": "select contestants.contestant_number , contestants.contestant_name group_by contestants.contestant_number order_by count ( * ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "order_by",
            "*",
            "_EOS"
        ],
        "dec_seq": "[2, [38], 8, [39], 11, [35], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.006307792849838733, 1), ('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9964501857757568, 3), ('ORDER_AGG_v2', (None, '*', 35), ('none_agg', 0), False, 1.1220797205169214e-05, 5)]",
        "logprob": "-22.13859939770501",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 0.9935606718063354, 1), 'no'), (('ORDER_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.9955264925956726, 5), 'no'), (('ORDER_LIMIT', ((None, '*', 35), ('none_agg', 0), False), 'limit_value', 0.5056669116020203, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 0.9935606718063354, 1), 'no'), (('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.006307792849838733, 1), 'yes'), (('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.00013131946616340429, 1), 'yes'), (('SELECT_AGG_v2', ('contestants', '*', 46), ('none_agg', 0), False, 2.239861345287865e-07, 1), 'no'), (('ORDER_AGG_v2', ('contestants', 'contestant_number', 38), ('none_agg', 0), False, 0.9955264925956726, 5), 'no'), (('ORDER_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.0043067317456006995, 5), 'no'), (('ORDER_AGG_v2', ('contestants', '*', 46), ('none_agg', 0), False, 0.00013570568989962345, 5), 'no'), (('ORDER_AGG_v2', ('votes', '*', 47), ('none_agg', 0), False, 1.5797984815435487e-05, 5), 'no'), (('ORDER_LIMIT', ((None, '*', 35), ('none_agg', 0), False), 'limit_value', 0.5056669116020203, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 683
    },
    {
        "nl": "What are the number of votes from state 'NY ' or 'CA ' ?",
        "true_sql": "select count ( votes.* ) where votes.state = value or votes.state = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"NY\"', None], 'or', [False, 2, [0, [0, 7, False], None], '\"CA\"', None]], 'extracted_clause_asterisk': {'select': 'votes.*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "votes.*",
            ")",
            "where",
            "votes.state",
            "=",
            "value",
            "or",
            "votes.state",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 47, 4], 6, 42, [7], 3, 25, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', '*', 47), ('count', 3), False, 0.9988509211899629, 1), ('WHERE_COL', ('votes', 'state', 42), 0.8979023694992065, 3), ('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999942779541016, 4), ('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999978542327881, 5), ('WHERE_COL', ('votes', 'state', 42), 0.9176487326622009, 7), ('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999685287475586, 8), ('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999982118606567, 9)]",
        "logprob": "-0.2031062910615655",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('votes', '*', 47), ('count', 3), False, 0.9988509211899629, 1), 'yes'), (('WHERE_COL', ('votes', 'state', 42), 0.8979023694992065, 3), 'yes'), (('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999942779541016, 4), 'yes'), (('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes'), (('WHERE_COL', ('votes', 'state', 42), 0.9176487326622009, 7), 'yes'), (('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999685287475586, 8), 'yes'), (('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999982118606567, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('votes', '*', 47), ('count', 3), False, 0.9988509211899629, 1), 'yes'), (('WHERE_COL', ('votes', 'state', 42), 0.8979023694992065, 3), 'yes'), (('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999942779541016, 4), 'yes'), (('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes'), (('WHERE_COL', ('votes', 'state', 42), 0.9176487326622009, 7), 'yes'), (('WHERE_OP', (('votes', 'state', 42),), ('=', 0), 0.9999685287475586, 8), 'yes'), (('WHERE_ROOT_TERM', (('votes', 'state', 42),), ('=', 0), 'terminal', 0.9999982118606567, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 684
    },
    {
        "nl": "How many contestants did not get voted ?",
        "true_sql": "select count ( contestants.* ) where contestants.contestant_number not in ( select votes.contestant_number )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 3, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'contestants.*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "contestants.*",
            ")",
            "where",
            "contestants.contestant_number",
            "not",
            "in",
            "(",
            "select",
            "votes.contestant_number",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 6, 38, [22, 20], 5, 2, [43], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', '*', 46), ('count', 3), False, 0.7897696575830251, 1), ('WHERE_COL', ('contestants', 'contestant_number', 38), 0.99973064661026, 3), ('WHERE_OP', (('contestants', 'contestant_number', 38),), ('not in', 7), 0.9946131345058412, 4), ('WHERE_ROOT_TERM', (('contestants', 'contestant_number', 38),), ('not in', 7), 'root', 0.9999794960021973, 5), ('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 0.05201946198940278, 7), ('O', '##END_NESTED##', 0.9987395405769348, 8)]",
        "logprob": "-3.921406833914927",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('count', 3), True, 0.7874963642277483, 1), 'no'), (('WHERE_COL', ('contestants', 'contestant_number', 38), 0.99973064661026, 3), 'yes'), (('WHERE_OP', (('contestants', 'contestant_number', 38),), ('not in', 7), 0.9946131345058412, 4), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_number', 38),), ('not in', 7), 'root', 0.9999794960021973, 5), 'yes'), (('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('none_agg', 0), False, 0.9479693174362183, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('count', 3), True, 0.7874963642277483, 1), 'no'), (('SELECT_AGG_v2', ('contestants', '*', 46), ('count', 3), False, 0.7897696575830251, 1), 'yes'), (('SELECT_AGG_v2', ('contestants', 'contestant_number', 38), ('count', 3), True, 0.7727079828349103, 1), 'no'), (('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('count', 3), True, 0.4245447537289908, 1), 'no'), (('WHERE_COL', ('contestants', 'contestant_number', 38), 0.99973064661026, 3), 'yes'), (('WHERE_OP', (('contestants', 'contestant_number', 38),), ('not in', 7), 0.9946131345058412, 4), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_number', 38),), ('not in', 7), 'root', 0.9999794960021973, 5), 'yes'), (('SELECT_AGG_v2', ('votes', 'vote_id', 40), ('none_agg', 0), False, 0.9479693174362183, 7), 'no'), (('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 0.05201946198940278, 7), 'yes'), (('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 7.856478987378073e-06, 7), 'no'), (('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 2.426731498417213e-06, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 685
    },
    {
        "nl": "What is the area code in which the most voters voted ?",
        "true_sql": "select area_code_state.area_code group_by area_code_state.area_code order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 2, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 2]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "area_code_state.area_code",
            "group_by",
            "area_code_state.area_code",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 10, 36, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('none_agg', 0), False, 1.0, 1), ('GROUP_COL', ('area_code_state', 'area_code', 36), 0.9471936225891113, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.984175094628362, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9987208247184753, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999622106552124, 7)]",
        "logprob": "-0.25504003046034657",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('GROUP_COL', ('area_code_state', 'area_code', 36), 0.9471936225891113, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.984175094628362, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9987208247184753, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999622106552124, 7), 'yes')]",
        "feedback_records": "[(('GROUP_COL', ('area_code_state', 'area_code', 36), 0.9471936225891113, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.984175094628362, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9987208247184753, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999622106552124, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 686
    },
    {
        "nl": "What are the create dates , states , and phone numbers of the votes that were for the contestant named 'Tabatha Gehling ' ?",
        "true_sql": "select votes.created , votes.state , votes.phone_number where contestants.contestant_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Tabatha Gehling\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "votes.state",
            ",",
            "votes.phone_number",
            ",",
            "votes.created",
            "where",
            "contestants.contestant_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [41], 8, [44], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.7915566563606262, 1), ('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.802552342414856, 3), ('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.005723214242607354, 5), ('WHERE_COL', ('contestants', 'contestant_name', 39), 0.8717665076255798, 7), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999948740005493, 8), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.9999991655349731, 9)]",
        "logprob": "-5.800562444960516",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.7915566563606262, 1), 'yes'), (('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.802552342414856, 3), 'yes'), (('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 0.503216564655304, 5), 'no'), (('WHERE_COL', ('contestants', 'contestant_name', 39), 0.8717665076255798, 7), 'yes'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999948740005493, 8), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.9999991655349731, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.7915566563606262, 1), 'yes'), (('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.802552342414856, 3), 'yes'), (('SELECT_AGG_v2', ('votes', 'contestant_number', 43), ('none_agg', 0), False, 0.503216564655304, 5), 'no'), (('SELECT_AGG_v2', ('votes', 'phone_number', 41), ('none_agg', 0), False, 0.46594902873039246, 5), 'yes'), (('SELECT_AGG_v2', ('votes', 'state', 42), ('none_agg', 0), False, 0.014719801954925059, 5), 'yes'), (('SELECT_AGG_v2', ('votes', 'created', 44), ('none_agg', 0), False, 0.005723214242607354, 5), 'yes'), (('WHERE_COL', ('contestants', 'contestant_name', 39), 0.8717665076255798, 7), 'yes'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999948740005493, 8), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.9999991655349731, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 687
    },
    {
        "nl": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling ' and the contestant 'Kelly Clauss ' .",
        "true_sql": "select area_code_state.area_code where contestants.contestant_name = value intersect select area_code_state.area_code where contestants.contestant_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Kelly Clauss\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Tabatha Gehling\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "area_code_state.area_code",
            "where",
            "contestants.contestant_name",
            "=",
            "value",
            "intersect",
            "select",
            "area_code_state.area_code",
            "where",
            "contestants.contestant_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 6, 39, [7], 3, 23, 2, [36], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('contestants', 'contestant_name', 39), 0.9998836517333984, 3), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999856948852539, 4), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.999997615814209, 5), ('IUEN_v2', ('intersect', 1), 0.976598858833313, 6), ('SELECT_AGG_v2', ('area_code_state', 'area_code', 36), ('none_agg', 0), False, 1.0, 8), ('WHERE_COL', ('contestants', 'contestant_name', 39), 0.9970617890357971, 10), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999967813491821, 11), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.9999985694885254, 12)]",
        "logprob": "-0.02705244119965879",
        "q_counter": 7,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('WHERE_COL', ('contestants', 'contestant_name', 39), 0.9998836517333984, 3), 'yes'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999856948852539, 4), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.999997615814209, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.976598858833313, 6), 'yes'), (('WHERE_COL', ('contestants', 'contestant_name', 39), 0.9970617890357971, 10), 'yes'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999967813491821, 11), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.9999985694885254, 12), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('contestants', 'contestant_name', 39), 0.9998836517333984, 3), 'yes'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999856948852539, 4), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.999997615814209, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.976598858833313, 6), 'yes'), (('WHERE_COL', ('contestants', 'contestant_name', 39), 0.9970617890357971, 10), 'yes'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('=', 0), 0.9999967813491821, 11), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('=', 0), 'terminal', 0.9999985694885254, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 688
    },
    {
        "nl": "Return the names the contestants whose names contain the substring 'Al ' .",
        "true_sql": "select contestants.contestant_name where contestants.contestant_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 4, False], None], '\"%Al%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'area_code_state.area_code': 1, 'area_code_state.state': 2, 'contestants.contestant_number': 3, 'contestants.contestant_name': 4, 'votes.vote_id': 5, 'votes.phone_number': 6, 'votes.state': 7, 'votes.contestant_number': 8, 'votes.created': 9, 'area_code_state.*': 10, 'contestants.*': 11, 'votes.*': 12}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "contestants.contestant_name",
            "where",
            "contestants.contestant_name",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 39, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9999988079071045, 1), ('WHERE_COL', ('contestants', 'contestant_name', 39), 0.999946117401123, 3), ('WHERE_OP', (('contestants', 'contestant_name', 39),), ('like', 6), 0.9996176958084106, 4), ('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('like', 6), 'terminal', 0.999993085861206, 5)]",
        "logprob": "-0.0010009278111999531",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9999988079071045, 1), 'yes'), (('WHERE_COL', ('contestants', 'contestant_name', 39), 0.999946117401123, 3), 'yes'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('like', 6), 0.9996176958084106, 4), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('like', 6), 'terminal', 0.999993085861206, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('contestants', 'contestant_name', 39), ('none_agg', 0), False, 0.9999988079071045, 1), 'yes'), (('WHERE_COL', ('contestants', 'contestant_name', 39), 0.999946117401123, 3), 'yes'), (('WHERE_OP', (('contestants', 'contestant_name', 39),), ('like', 6), 0.9996176958084106, 4), 'yes'), (('WHERE_ROOT_TERM', (('contestants', 'contestant_name', 39),), ('like', 6), 'terminal', 0.999993085861206, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 689
    },
    {
        "nl": "How many continents are there ?",
        "true_sql": "select count ( continents.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'continents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "continents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9873015219599661, 1)]",
        "logprob": "-0.05118724213481507",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9873015219599661, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9873015219599661, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 690
    },
    {
        "nl": "What is the number of continents ?",
        "true_sql": "select count ( continents.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'continents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "continents.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9993696262353312, 1)]",
        "logprob": "-0.0028890451560489422",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9993696262353312, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9993696262353312, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 691
    },
    {
        "nl": "How many countries does each continent have ? List the continent id , continent name and the number of countries .",
        "true_sql": "select continents.contid , continents.continent , count ( * ) group_by continents.contid",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            ",",
            "continents.continent",
            "group_by",
            "continents.contid",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [9, 5, 35, 4], 8, [37], 10, 36, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.4597741961479187, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.36184276590722797, 3), ('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.01201680861413479, 5), ('GROUP_COL', ('continents', 'contid', 36), 9.978188245440833e-06, 7)]",
        "logprob": "-21.00260136625978",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.4597741961479187, 1), 'yes'), (('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9688231875035874, 3), 'no'), (('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 0.2735971212387085, 5), 'no'), (('GROUP_COL', ('countries', 'countryid', 38), 0.5571690797805786, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.4597741961479187, 1), 'yes'), (('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.9688231875035874, 3), 'no'), (('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.5647507607626305, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.36184276590722797, 3), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 5.982965740258802e-05, 3), 'no'), (('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 0.2735971212387085, 5), 'no'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('min', 2), False, 0.6957763430368258, 5), 'no'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.14195533096790314, 5), 'no'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('min', 2), False, 0.477430617167169, 5), 'no'), (('GROUP_COL', ('countries', 'countryid', 38), 0.5571690797805786, 7), 'no'), (('GROUP_COL', ('continents', 'continent', 37), 0.25585854053497314, 7), 'no'), (('GROUP_COL', ('countries', 'continent', 40), 0.18522395193576813, 7), 'no'), (('GROUP_COL', ('countries', 'countryname', 39), 0.001738443854264915, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 692
    },
    {
        "nl": "For each continent , list its id , name , and how many countries it has ?",
        "true_sql": "select continents.contid , continents.continent , count ( * ) group_by continents.contid",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "continents.continent",
            ",",
            "sum",
            "(",
            "countries.countryname",
            ")",
            ",",
            "continents.continent",
            "group_by",
            "continents.contid",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [24, 5, 39, 4], 8, [37], 10, 36, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.99644935131073, 1), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('sum', 4), False, 0.13814499051563714, 3), ('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.00079587078653276, 5), ('GROUP_COL', ('continents', 'contid', 36), 2.771286062852596e-06, 7)]",
        "logprob": "-27.86686918485853",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.99644935131073, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.8528306484222412, 3), 'no'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('min', 2), False, 0.4165179376084499, 5), 'no'), (('GROUP_COL', ('continents', 'continent', 37), 0.6273984909057617, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.99644935131073, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.8528306484222412, 3), 'no'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.10073598474264144, 3), 'no'), (('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.4219053686630626, 3), 'no'), (('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.3419773047761771, 3), 'no'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('min', 2), False, 0.4165179376084499, 5), 'no'), (('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 0.009403482079505919, 5), 'no'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('max', 1), False, 0.24079590222091346, 5), 'no'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('sum', 4), False, 0.23015431516377516, 5), 'no'), (('GROUP_COL', ('continents', 'continent', 37), 0.6273984909057617, 7), 'no'), (('GROUP_COL', ('countries', 'continent', 40), 0.3707321286201477, 7), 'no'), (('GROUP_COL', ('countries', 'countryid', 38), 0.0009980413597077131, 7), 'no'), (('GROUP_COL', ('countries', 'countryname', 39), 0.0008685848442837596, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 693
    },
    {
        "nl": "How many countries are listed ?",
        "true_sql": "select count ( countries.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'countries.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "countries.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.999851583241916, 1)]",
        "logprob": "-0.0006884869680477499",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.999851583241916, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.999851583241916, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 694
    },
    {
        "nl": "How many countries exist ?",
        "true_sql": "select count ( countries.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'countries.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "countries.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 60, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.319690042353986, 1)]",
        "logprob": "-4.56206711560022",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.997375988104839, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.997375988104839, 1), 'no'), (('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.319690042353986, 1), 'yes'), (('SELECT_AGG_v2', ('continents', '*', 59), ('sum', 4), False, 0.04013350496895167, 1), 'no'), (('SELECT_AGG_v2', ('countries', '*', 60), ('sum', 4), False, 0.03233658278573678, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 695
    },
    {
        "nl": "How many models does each car maker produce ? List maker full name , id and the number .",
        "true_sql": "select car_makers.fullname , car_makers.id , count ( * ) group_by car_makers.id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_makers.id",
            ",",
            "car_makers.fullname",
            ",",
            "avg",
            "(",
            "car_names.make",
            ")",
            "group_by",
            "car_makers.id",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [43], 8, [17, 5, 50, 4], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.06260681897401811, 1), ('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.023035142570734024, 3), ('SELECT_AGG_v2', ('car_names', 'make', 50), ('avg', 5), False, 0.11209923673850918, 5), ('GROUP_COL', ('car_makers', 'id', 41), 0.06308384984731674, 7)]",
        "logprob": "-18.061909078979816",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.5307084918022156, 1), 'no'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.8859899699588281, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.003741657128557561, 5), 'no'), (('GROUP_COL', ('model_list', 'maker', 46), 0.411005437374115, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.5307084918022156, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.1838257610797882, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.12426701188087466, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.06260681897401811, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.8859899699588281, 3), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.7479567185896562, 3), 'no'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.023035142570734024, 3), 'yes'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.02236900664865971, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.003741657128557561, 5), 'no'), (('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('count', 3), True, 0.22432987206313298, 5), 'no'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('avg', 5), False, 0.1427706063406148, 5), 'no'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), True, 0.17594532120985923, 5), 'no'), (('GROUP_COL', ('model_list', 'maker', 46), 0.411005437374115, 7), 'no'), (('GROUP_COL', ('car_makers', 'fullname', 43), 0.3223711848258972, 7), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.16535764932632446, 7), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.06308384984731674, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 696
    },
    {
        "nl": "What is the full name of each car maker , along with its id and how many models it produces ?",
        "true_sql": "select car_makers.fullname , car_makers.id , count ( * ) group_by car_makers.id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.fullname",
            ",",
            "model_list.modelid",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [43], 8, [45], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.580786943435669, 1), ('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.7152971625328064, 3), ('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 0.04979709535837174, 5)]",
        "logprob": "-3.985456537060637",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.580786943435669, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.7152971625328064, 3), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.5260577201843262, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.580786943435669, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.7152971625328064, 3), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.5260577201843262, 5), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.6306817903412674, 5), 'no'), (('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('none_agg', 0), False, 0.11809919774532317, 5), 'no'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.10068675875663756, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 697
    },
    {
        "nl": "Which model of the car has the minimum horsepower ?",
        "true_sql": "select car_names.model order_by cars_data.horsepower asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.model",
            "order_by",
            "cars_data.horsepower",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 11, [55], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.002113650785759091, 1), ('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'asc', 0.21204930543899536, 4), ('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9994075298309326, 5)]",
        "logprob": "-8.509967100740838",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9978863596916199, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999942779541016, 3), 'no'), (('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.6302440166473389, 4), 'no'), (('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9994075298309326, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9978863596916199, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.002113650785759091, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 6.553486642246748e-10, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.003868739685219596, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999942779541016, 3), 'no'), (('WHERE_COL', ('model_list', 'modelid', 45), 5.6464036788383964e-06, 3), 'no'), (('WHERE_COL', ('car_makers', 'id', 41), 8.915178995039241e-08, 3), 'no'), (('WHERE_COL', ('model_list', 'model', 47), 1.542844429991419e-08, 3), 'no'), (('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.6302440166473389, 4), 'no'), (('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9994075298309326, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 698
    },
    {
        "nl": "What is the model of the car with the smallest amount of horsepower ?",
        "true_sql": "select car_names.model order_by cars_data.horsepower asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.model",
            "order_by",
            "cars_data.horsepower",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 11, [55], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.009923854842782019, 1), ('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 1.0, 3), ('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'asc', 0.8753955364227295, 4), ('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999704360961914, 5)]",
        "logprob": "-4.755854942030035",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9900761246681213, 1), 'no'), (('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'asc', 0.8753955364227295, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999704360961914, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9900761246681213, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.009923854842782019, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 1.093616641689721e-09, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('none_agg', 0), False, 1.0983948472986763e-10, 1), 'no'), (('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'asc', 0.8753955364227295, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999704360961914, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 699
    },
    {
        "nl": "Find the model of the car whose weight is below the average weight .",
        "true_sql": "select car_names.model where cars_data.weight < ( select avg ( cars_data.weight ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 21, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 21, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.model",
            "where",
            "cars_data.weight",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 6, 56, [21], 5, 2, [17, 5, 56, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.0044477800838649256, 1), ('WHERE_COL', ('cars_data', 'weight', 56), 1.0, 3), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.19982053339481354, 4), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'root', 0.9960491061210632, 5), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9996675990385814, 7), ('O', '##END_NESTED##', 0.999957799911499, 8)]",
        "logprob": "-7.0312086192180505",
        "q_counter": 4,
        "questioned_indices": [
            0,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9955522418022156, 1), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.7984128594398499, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'root', 0.9960491061210632, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9996675990385814, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9955522418022156, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.0044477800838649256, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 7.989970463029298e-09, 1), 'no'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('none_agg', 0), False, 4.686996971092763e-11, 1), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.7984128594398499, 4), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.19982053339481354, 4), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('not in', 7), 0.028201637886030972, 4), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.0001769819500623271, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'root', 0.9960491061210632, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9996675990385814, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 700
    },
    {
        "nl": "What is the model for the car with a weight smaller than the average ?",
        "true_sql": "select car_names.model where cars_data.weight < ( select avg ( cars_data.weight ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 21, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 21, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.model",
            "where",
            "cars_data.weight",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 6, 56, [21], 5, 2, [17, 5, 56, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.04527963325381279, 1), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9999905824661255, 3), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.9991633892059326, 4), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'root', 0.9997158646583557, 5), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9985211985865103, 7), ('O', '##END_NESTED##', 0.9999555349349976, 8)]",
        "logprob": "-3.102510418145508",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9547203183174133, 1), 'no'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9999905824661255, 3), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.9991633892059326, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'root', 0.9997158646583557, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9985211985865103, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9547203183174133, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.04527963325381279, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('none_agg', 0), False, 2.2217687245529275e-08, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 1.4440899143153262e-08, 1), 'no'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9999905824661255, 3), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.9991633892059326, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'root', 0.9997158646583557, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9985211985865103, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 701
    },
    {
        "nl": "Find the name of the makers that produced some cars in the year of 1970 ?",
        "true_sql": "select distinct car_makers.maker where cars_data.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], '\"1970\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_makers.maker",
            "where",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9998576641082764, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9997960925102234, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9371281266212463, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999796152114868, 5)]",
        "logprob": "-9.923173229569532",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9998576641082764, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9997960925102234, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9371281266212463, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999796152114868, 5), 'yes'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.9996962547302246, 7), 'no'), (('IUEN_v2', ('union', 2), 0.00037763730506412685, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9998576641082764, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9997960925102234, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9371281266212463, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999796152114868, 5), 'yes'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.9996962547302246, 7), 'no'), (('GROUP_COL', ('car_names', 'make', 50), 0.00020868786668870598, 7), 'no'), (('GROUP_COL', ('model_list', 'maker', 46), 9.468254575040191e-05, 7), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 1.88664046163467e-07, 7), 'no'), (('IUEN_v2', ('union', 2), 0.00037763730506412685, 6), 'no'), (('IUEN_v2', ('intersect', 1), 0.0002487660385668278, 6), 'no'), (('IUEN_v2', ('except', 3), 7.908426050562412e-05, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 702
    },
    {
        "nl": "What is the name of the different car makers who produced a car in 1970 ?",
        "true_sql": "select distinct car_makers.maker where cars_data.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], '\"1970\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_makers.maker",
            "where",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 6, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.798041582107544, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9379417896270752, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9996658563613892, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999954700469971, 5)]",
        "logprob": "-0.2902948842004569",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.798041582107544, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9379417896270752, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9996658563613892, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999954700469971, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.798041582107544, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9379417896270752, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9996658563613892, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999954700469971, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 703
    },
    {
        "nl": "Find the make and production time of the cars that were produced in the earliest year ?",
        "true_sql": "select car_names.make , cars_data.year where cars_data.year = ( select min ( cars_data.year ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 23, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.make",
            ",",
            "cars_data.year",
            "where",
            "cars_data.year",
            "=",
            "(",
            "select",
            "min",
            "(",
            "cars_data.year",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [58], 6, 58, [7], 5, 2, [26, 5, 58, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.9247690439224243, 1), ('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.6996057033538818, 3), ('WHERE_COL', ('cars_data', 'year', 58), 0.9150600433349609, 5), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9995808005332947, 6), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'root', 0.9999871253967285, 7), ('SELECT_AGG_v2', ('cars_data', 'year', 58), ('min', 2), False, 0.28450566300766933, 9), ('O', '##END_NESTED##', 0.9999618530273438, 10)]",
        "logprob": "-5.876591810006825",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.9247690439224243, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.6996057033538818, 3), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9150600433349609, 5), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9995808005332947, 6), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'root', 0.9999871253967285, 7), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('max', 1), False, 0.9907575440117844, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.9247690439224243, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.6996057033538818, 3), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9150600433349609, 5), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9995808005332947, 6), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'root', 0.9999871253967285, 7), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('max', 1), False, 0.9907575440117844, 9), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('max', 1), False, 0.36766523497633335, 9), 'no'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('max', 1), False, 0.29038402097699845, 9), 'no'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('min', 2), False, 0.28450566300766933, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 704
    },
    {
        "nl": "What is the maker of the carr produced in the earliest year and what year was it ?",
        "true_sql": "select car_names.make , cars_data.year where cars_data.year = ( select min ( cars_data.year ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 23, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.year",
            ",",
            "car_names.make",
            "where",
            "cars_data.year",
            "=",
            "(",
            "select",
            "min",
            "(",
            "car_makers.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [58], 8, [50], 6, 58, [7], 5, 2, [26, 5, 61, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 1.2950196470740151e-10, 1), ('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.05024608597159385, 3), ('WHERE_COL', ('cars_data', 'year', 58), 0.4100704789161682, 5), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9999023675918579, 6), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'root', 0.0833897739648819, 7), ('SELECT_AGG_v2', ('car_makers', '*', 61), ('min', 2), False, 0.2619588464777442, 9)]",
        "logprob": "-48.71578315511052",
        "q_counter": 8,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6,
            6,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9999898672103882, 1), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 0.4413967430591583, 5), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9999023675918579, 6), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9163445830345154, 7), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('max', 1), False, 0.954728701639005, 9), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9974390268325806, 11), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.9991218447685242, 11), 'no'), (('IUEN_v2', ('except', 3), 5.538192453968804e-06, 10), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9999898672103882, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 1.0174683666264164e-05, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 1.2950196470740151e-10, 1), 'yes'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 2.81614644798145e-11, 1), 'yes'), (('WHERE_COL', ('car_names', 'make', 50), 0.4413967430591583, 5), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.4100704789161682, 5), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.08298662304878235, 5), 'no'), (('WHERE_COL', ('model_list', 'model', 47), 0.035459257662296295, 5), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9999023675918579, 6), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9163445830345154, 7), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('max', 1), False, 0.954728701639005, 9), 'no'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('max', 1), False, 0.5759171822132774, 9), 'no'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('max', 1), False, 0.3242447344847244, 9), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.005099084228277208, 9), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9974390268325806, 11), 'no'), (('WHERE_COL', ('model_list', 'maker', 46), 0.002462203847244382, 11), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 9.255476470571011e-05, 11), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 4.994866685592569e-06, 11), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.9991218447685242, 11), 'no'), (('GROUP_COL', ('model_list', 'maker', 46), 0.0008725625812076032, 11), 'no'), (('GROUP_COL', ('cars_data', 'year', 58), 5.6415528888464905e-06, 11), 'no'), (('GROUP_COL', ('car_names', 'make', 50), 1.0214148415954583e-09, 11), 'no'), (('IUEN_v2', ('except', 3), 5.538192453968804e-06, 10), 'no'), (('IUEN_v2', ('union', 2), 1.7209276848006994e-07, 10), 'no'), (('IUEN_v2', ('intersect', 1), 5.754951626357752e-09, 10), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 705
    },
    {
        "nl": "Which distinct car models are the produced after 1980 ?",
        "true_sql": "select distinct model_list.model where cars_data.year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "model_list.model",
            "where",
            "cars_data.year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [47], 6, 58, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9667050242424011, 2), ('WHERE_COL', ('cars_data', 'year', 58), 0.999998927116394, 4), ('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.994792640209198, 5), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9965225458145142, 6)]",
        "logprob": "-0.042822848582645005",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9667050242424011, 2), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.999998927116394, 4), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.994792640209198, 5), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9965225458145142, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9667050242424011, 2), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.999998927116394, 4), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.994792640209198, 5), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9965225458145142, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 706
    },
    {
        "nl": "What are the different models for the cards produced after 1980 ?",
        "true_sql": "select distinct model_list.model where cars_data.year > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "model_list.model",
            "where",
            "cars_data.year",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [47], 6, 58, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9812629818916321, 2), ('WHERE_COL', ('cars_data', 'year', 58), 0.9610347151756287, 4), ('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.9883373379707336, 5), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9998812675476074, 6)]",
        "logprob": "-0.07067398631572026",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9812629818916321, 2), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9610347151756287, 4), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.9883373379707336, 5), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9998812675476074, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9812629818916321, 2), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9610347151756287, 4), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.9883373379707336, 5), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('>', 1), 'terminal', 0.9998812675476074, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 707
    },
    {
        "nl": "How many car makers are there in each continents ? List the continent name and the count .",
        "true_sql": "select continents.continent , count ( * ) group_by continents.continent",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "continents.continent",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [9, 5, 35, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.001645424286834896, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4525906033922884, 3), ('GROUP_COL', ('continents', 'continent', 37), 4.1379695176146924e-05, 5)]",
        "logprob": "-19.674949621131653",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9983273148536682, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9285169732005897, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.999957799911499, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9983273148536682, 1), 'no'), (('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.001645424286834896, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 1.8471353541826816e-05, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 6.6980837800656395e-06, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9285169732005897, 3), 'no'), (('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.6792977214120202, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4525906033922884, 3), 'yes'), (('SELECT_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.19833581843157805, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.999957799911499, 5), 'no'), (('GROUP_COL', ('continents', 'continent', 37), 4.1379695176146924e-05, 5), 'yes'), (('GROUP_COL', ('countries', 'continent', 40), 6.894218245179218e-07, 5), 'no'), (('GROUP_COL', ('car_makers', 'fullname', 43), 1.1631797036670832e-07, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 708
    },
    {
        "nl": "What is the name of each continent and how many car makers are there in each one ?",
        "true_sql": "select continents.continent , count ( * ) group_by continents.continent",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 2, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "continents.continent",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [9, 5, 35, 4], 10, 37, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.9945034980773926, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.23866757685784973, 3), ('GROUP_COL', ('continents', 'continent', 37), 0.2460828423500061, 5)]",
        "logprob": "-7.138710207515156",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.9945034980773926, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9893880490017186, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.7339211702346802, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.9945034980773926, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9893880490017186, 3), 'no'), (('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.4280686816566632, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.23866757685784973, 3), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('sum', 4), False, 0.21840254209078033, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.7339211702346802, 5), 'no'), (('GROUP_COL', ('continents', 'continent', 37), 0.2460828423500061, 5), 'yes'), (('GROUP_COL', ('countries', 'continent', 40), 0.019995320588350296, 5), 'no'), (('GROUP_COL', ('car_makers', 'fullname', 43), 5.642192490995512e-07, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 709
    },
    {
        "nl": "Which of the countries has the most car makers ? List the country name .",
        "true_sql": "select countries.countryname group_by car_makers.country order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            "group_by",
            "car_makers.country",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 10, 44, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.999238133430481, 1), ('GROUP_COL', ('car_makers', 'country', 44), 0.9976334571838379, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7490752807062847, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9926193356513977, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999500513076782, 7)]",
        "logprob": "-1.1738577682254798",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.999238133430481, 1), 'yes'), (('GROUP_COL', ('car_makers', 'country', 44), 0.9976334571838379, 3), 'yes'), (('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8963814479451165, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9926193356513977, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999500513076782, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.999238133430481, 1), 'yes'), (('GROUP_COL', ('car_makers', 'country', 44), 0.9976334571838379, 3), 'yes'), (('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8963814479451165, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7490752807062847, 5), 'yes'), (('ORDER_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.44082450054841416, 5), 'no'), (('ORDER_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.18471751156056815, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9926193356513977, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999500513076782, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 710
    },
    {
        "nl": "What is the name of the country with the most car makers ?",
        "true_sql": "select countries.countryname group_by car_makers.country order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            "group_by",
            "car_makers.country",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 10, 44, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9962969422340393, 1), ('GROUP_COL', ('car_makers', 'country', 44), 0.9999958276748657, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7616986280422501, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9986304044723511, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999423027038574, 7)]",
        "logprob": "-1.094374822279416",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9962969422340393, 1), 'yes'), (('GROUP_COL', ('car_makers', 'country', 44), 0.9999958276748657, 3), 'yes'), (('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9022941577931243, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9986304044723511, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999423027038574, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9962969422340393, 1), 'yes'), (('GROUP_COL', ('car_makers', 'country', 44), 0.9999958276748657, 3), 'yes'), (('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9022941577931243, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7616986280422501, 5), 'yes'), (('ORDER_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.13221133302662808, 5), 'no'), (('ORDER_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.10446735516651807, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9986304044723511, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999423027038574, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 711
    },
    {
        "nl": "How many car models are produced by each maker ? List the count and the maker full name .",
        "true_sql": "select count ( * ) , car_makers.fullname , car_makers.id group_by car_makers.id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "model_list.maker",
            ",",
            "count",
            "(",
            "distinct",
            "model_list.maker",
            ")",
            "group_by",
            "car_makers.maker",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [9, 5, 15, 46, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.0459662489593029, 1), ('SELECT_AGG_v2', ('model_list', 'maker', 46), ('count', 3), True, 0.3587116530459464, 3), ('GROUP_COL', ('car_makers', 'maker', 42), 0.5439712405204773, 5)]",
        "logprob": "-8.815270264364896",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.5566408634185791, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8910830785819092, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.5439712405204773, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.5566408634185791, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.11257656663656233, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.10509204119443895, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('count', 3), False, 0.5628850008878888, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8910830785819092, 3), 'no'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.7401716971410409, 3), 'no'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('count', 3), True, 0.5367346668207321, 3), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.3718838291898177, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.5439712405204773, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 712
    },
    {
        "nl": "What is the number of car models that are produced by each maker and what is the id and full name of each maker ?",
        "true_sql": "select count ( * ) , car_makers.fullname , car_makers.id group_by car_makers.id",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "car_names.model",
            ")",
            ",",
            "car_makers.fullname",
            "group_by",
            "cars_data.id",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 49, 4], 8, [43], 10, 51, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('count', 3), True, 0.4804359624981794, 1), ('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.2162617743015289, 3), ('GROUP_COL', ('cars_data', 'id', 51), 0.03859737515449524, 5)]",
        "logprob": "-8.55430666002298",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('count', 3), True, 0.8550428177032502, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.37342458963394165, 3), 'no'), (('GROUP_COL', ('model_list', 'maker', 46), 0.4359723627567291, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('count', 3), True, 0.8550428177032502, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.7458967941157223, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('count', 3), False, 0.5327827126737061, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.5516282494591453, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.37342458963394165, 3), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.23073256015777588, 3), 'no'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.2162617743015289, 3), 'yes'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.08277982473373414, 3), 'no'), (('GROUP_COL', ('model_list', 'maker', 46), 0.4359723627567291, 5), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.3403804898262024, 5), 'no'), (('GROUP_COL', ('car_makers', 'fullname', 43), 0.09559084475040436, 5), 'no'), (('GROUP_COL', ('car_names', 'model', 49), 0.05820736289024353, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 713
    },
    {
        "nl": "What is the accelerate of the car make amc hornet sportabout ( sw ) ?",
        "true_sql": "select cars_data.accelerate where car_names.make = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 22, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"amc hornet sportabout (sw)\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.accelerate",
            "where",
            "car_names.make",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [57], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('car_names', 'make', 50), 0.9999983310699463, 3), ('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9999837875366211, 4), ('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9999974966049194, 5)]",
        "logprob": "-0.6473835688823011",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('car_names', 'make', 50), 0.9999983310699463, 3), 'yes'), (('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9999837875366211, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9999974966049194, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('car_names', 'make', 50), 0.9999983310699463, 3), 'yes'), (('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9999837875366211, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9999974966049194, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 714
    },
    {
        "nl": "How much does the car accelerate that makes amc hornet sportabout ( sw ) ?",
        "true_sql": "select cars_data.accelerate where car_names.make = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 22, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"amc hornet sportabout (sw)\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.accelerate",
            "where",
            "car_names.make",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [57], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.3175634741783142, 1), ('WHERE_COL', ('car_names', 'make', 50), 0.999061644077301, 3), ('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9999899864196777, 4), ('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9999954700469971, 5)]",
        "logprob": "-1.2304534716278313",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('sum', 4), False, 0.8269840900363674, 1), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 0.999061644077301, 3), 'yes'), (('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9999899864196777, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9999954700469971, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('sum', 4), False, 0.8269840900363674, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.3175634741783142, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.5825754981346528, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('count', 3), False, 0.4731155836238149, 1), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 0.999061644077301, 3), 'yes'), (('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9999899864196777, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9999954700469971, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 715
    },
    {
        "nl": "How many car makers are there in france ?",
        "true_sql": "select count ( * ) where countries.countryname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"france\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.id",
            ")",
            "where",
            "countries.countryname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 41, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), False, 0.06758361520060621, 1), ('WHERE_COL', ('countries', 'countryname', 39), 1.0, 3), ('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999964237213135, 4), ('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-13.226725629548838",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9911563923341695, 1), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.7848231196403503, 3), 'no'), (('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999964237213135, 4), 'yes'), (('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9911563923341695, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), False, 0.4318586976263121, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 4.297047416912396e-05, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('sum', 4), False, 0.07778136498250114, 1), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.7848231196403503, 3), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.0863722488284111, 3), 'yes'), (('WHERE_COL', ('continents', 'continent', 37), 0.0542425736784935, 3), 'no'), (('WHERE_COL', ('car_makers', 'country', 44), 0.020653782412409782, 3), 'no'), (('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999964237213135, 4), 'yes'), (('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 716
    },
    {
        "nl": "What is the number of makers of care in France ?",
        "true_sql": "select count ( * ) where countries.countryname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"france\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.id",
            ")",
            "where",
            "countries.countryname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 41, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), False, 0.27062189274530457, 1), ('WHERE_COL', ('countries', 'countryname', 39), 1.0, 3), ('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999977350234985, 4), ('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-7.82123222659092",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('count', 3), False, 0.9569157405454074, 1), 'no'), (('WHERE_COL', ('continents', 'continent', 37), 0.8428919911384583, 3), 'no'), (('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('count', 3), False, 0.9569157405454074, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), False, 0.5799897581766378, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.4075989692281133, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('count', 3), True, 0.38156817586682445, 1), 'no'), (('WHERE_COL', ('continents', 'continent', 37), 0.8428919911384583, 3), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.07688013464212418, 3), 'yes'), (('WHERE_COL', ('countries', 'continent', 40), 0.05924343690276146, 3), 'no'), (('WHERE_COL', ('countries', 'countryid', 38), 0.01328643225133419, 3), 'no'), (('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999977350234985, 4), 'yes'), (('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 717
    },
    {
        "nl": "How many car models are produced in the usa ?",
        "true_sql": "select count ( * ) where countries.countryname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"usa\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "model_list.modelid",
            ")",
            "where",
            "countries.countryname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('count', 3), True, 0.4729889522810869, 1), ('WHERE_COL', ('countries', 'countryname', 39), 0.9435778260231018, 3), ('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.999984622001648, 4), ('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-3.803088970648792",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('count', 3), True, 0.7766163052745105, 1), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.9435778260231018, 3), 'yes'), (('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.999984622001648, 4), 'yes'), (('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('count', 3), True, 0.7766163052745105, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8245783073194924, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), True, 0.6858736007978915, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('count', 3), False, 0.429583708167326, 1), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.9435778260231018, 3), 'yes'), (('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.999984622001648, 4), 'yes'), (('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 718
    },
    {
        "nl": "What is the count of the car models produced in the United States ?",
        "true_sql": "select count ( * ) where countries.countryname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"usa\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.id",
            ")",
            "where",
            "countries.countryname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 41, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), False, 0.3550889169677486, 1), ('WHERE_COL', ('countries', 'countryname', 39), 1.0, 3), ('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999009370803833, 4), ('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-6.062804831488375",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8705151791753053, 1), 'no'), (('WHERE_COL', ('car_makers', 'country', 44), 0.755487859249115, 3), 'no'), (('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999009370803833, 4), 'yes'), (('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8705151791753053, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('count', 3), True, 0.7418922034505182, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('count', 3), True, 0.5573420375539293, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('count', 3), True, 0.4968097556508767, 1), 'no'), (('WHERE_COL', ('car_makers', 'country', 44), 0.755487859249115, 3), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.14787565171718597, 3), 'yes'), (('WHERE_COL', ('car_names', 'make', 50), 0.038035206496715546, 3), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.019549570977687836, 3), 'no'), (('WHERE_OP', (('countries', 'countryname', 39),), ('=', 0), 0.9999009370803833, 4), 'yes'), (('WHERE_ROOT_TERM', (('countries', 'countryname', 39),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 719
    },
    {
        "nl": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders ?",
        "true_sql": "select avg ( cars_data.mpg ) where cars_data.cylinders = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.mpg",
            ")",
            ",",
            "avg",
            "(",
            "cars_data.mpg",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 52, 4], 8, [17, 5, 52, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('avg', 5), False, 0.6101012235091446, 1), ('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('avg', 5), False, 0.27677787731689335, 3)]",
        "logprob": "-10.251779809189529",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('avg', 5), False, 0.8654923219564582, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.976982593536377, 3), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9983047246932983, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('avg', 5), False, 0.8654923219564582, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.7395984605604394, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('avg', 5), False, 0.6101012235091446, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('sum', 4), False, 0.13276278056708948, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.976982593536377, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('avg', 5), False, 0.27677787731689335, 3), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.0016916987951844926, 3), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.0015602476196363573, 3), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9983047246932983, 5), 'no'), (('GROUP_COL', ('model_list', 'model', 47), 0.000838127569295466, 5), 'no'), (('GROUP_COL', ('cars_data', 'year', 58), 0.00045786445843987167, 5), 'no'), (('GROUP_COL', ('car_names', 'model', 49), 0.0003427343617659062, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 720
    },
    {
        "nl": "What is the average miles per gallon of all the cards with 4 cylinders ?",
        "true_sql": "select avg ( cars_data.mpg ) where cars_data.cylinders = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "cars_data.cylinders",
            ")",
            ",",
            "model_list.model",
            "group_by",
            "cars_data.cylinders",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 53, 4], 8, [47], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('sum', 4), False, 0.07516310405168418, 1), ('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.0002591424854472278, 3), ('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9985536932945251, 5)]",
        "logprob": "-18.855923833352936",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9861731146194868, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9923015832901001, 3), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9985536932945251, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9861731146194868, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('avg', 5), False, 0.4793458889026008, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('sum', 4), False, 0.175303464374489, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.12997582546044634, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9923015832901001, 3), 'no'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 0.0014131579082459216, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.0008053394267335536, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.12960275259368056, 3), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9985536932945251, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 721
    },
    {
        "nl": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "true_sql": "select cars_data.weight where cars_data.cylinders = value and cars_data.year = value order_by cars_data.weight asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 21, False], None]]], 'select': [False, [[0, [0, [0, 21, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None], 'and', [False, 2, [0, [0, 23, False], None], 1974.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.weight",
            "where",
            "cars_data.cylinders",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 6, 53, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('none_agg', 0), False, 0.7913117408752441, 1), ('WHERE_COL', ('cars_data', 'cylinders', 53), 1.0, 3), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.8267233371734619, 4), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.9936457872390747, 5)]",
        "logprob": "-4.393147973383908",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('none_agg', 0), False, 0.7913117408752441, 1), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.926749050617218, 3), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.8267233371734619, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.9936457872390747, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('none_agg', 0), False, 0.7913117408752441, 1), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.926749050617218, 3), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.05421805754303932, 3), 'yes'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.018277324736118317, 3), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.0006047117058187723, 3), 'yes'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.8267233371734619, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.9936457872390747, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 722
    },
    {
        "nl": "What is the minimu weight of the car with 8 cylinders produced in 1974 ?",
        "true_sql": "select cars_data.weight where cars_data.cylinders = value and cars_data.year = value order_by cars_data.weight asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 21, False], None]]], 'select': [False, [[0, [0, [0, 21, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None], 'and', [False, 2, [0, [0, 23, False], None], 1974.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.weight",
            "where",
            "cars_data.year",
            "=",
            "value",
            "and",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [56], 6, 58, [7], 3, 16, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('none_agg', 0), False, 0.9991242289543152, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.969509482383728, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9991037249565125, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999990463256836, 5), ('WHERE_COL', ('cars_data', 'year', 58), 0.9808847904205322, 7), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9993502497673035, 8), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9763703346252441, 9)]",
        "logprob": "-0.2822329471257006",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('none_agg', 0), False, 0.9991242289543152, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.969509482383728, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9991037249565125, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9808847904205322, 7), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9993502497673035, 8), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9763703346252441, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('none_agg', 0), False, 0.9991242289543152, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.969509482383728, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9991037249565125, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9808847904205322, 7), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9993502497673035, 8), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9763703346252441, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 723
    },
    {
        "nl": "What are all the makers and models ?",
        "true_sql": "select model_list.maker , model_list.model",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "model_list.maker",
            ",",
            "model_list.model",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.8735295534133911, 1), ('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9999998807907104, 3)]",
        "logprob": "-0.1353491009465578",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.8735295534133911, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9999998807907104, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.8735295534133911, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9999998807907104, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 724
    },
    {
        "nl": "What are the makers and models ?",
        "true_sql": "select model_list.maker , model_list.model",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "model_list.maker",
            ",",
            "model_list.model",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [47], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.7513675093650818, 1), ('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9999996423721313, 3)]",
        "logprob": "-0.28606574163666165",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.7513675093650818, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9999996423721313, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.7513675093650818, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9999996423721313, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 725
    },
    {
        "nl": "What are the countries having at least one car maker ? List name and id .",
        "true_sql": "select countries.countryname , countries.countryid group_by countries.countryid having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryid",
            "group_by",
            "car_names.makeid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [38], 10, 48, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9996521472930908, 1), ('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.9382160902023315, 3), ('GROUP_COL', ('car_names', 'makeid', 48), 0.0032467476557940245, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9957993804486661, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999746084213257, 9)]",
        "logprob": "-9.603856992233531",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9996521472930908, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.9382160902023315, 3), 'yes'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.47698530554771423, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9899058525451201, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9957993804486661, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999746084213257, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9996521472930908, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.9382160902023315, 3), 'yes'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.47698530554771423, 5), 'no'), (('GROUP_COL', ('car_makers', 'country', 44), 0.44252219796180725, 5), 'no'), (('GROUP_COL', ('cars_data', 'id', 51), 0.04992957413196564, 5), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.02631545253098011, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9899058525451201, 7), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3889078014535849, 7), 'yes'), (('HAV_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.3520971007349716, 7), 'no'), (('HAV_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.1854680949606744, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9957993804486661, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999746084213257, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 726
    },
    {
        "nl": "What are the names and ids of all countries with at least one car maker ?",
        "true_sql": "select countries.countryname , countries.countryid group_by countries.countryid having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryid",
            "group_by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [38], 10, 38, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9996743202209473, 1), ('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.9341118931770325, 3), ('GROUP_COL', ('countries', 'countryid', 38), 0.032960884273052216, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9914335844114818, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.999984622001648, 9)]",
        "logprob": "-7.537519355433004",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9996743202209473, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.9341118931770325, 3), 'yes'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.456747442483902, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9946693507833665, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9914335844114818, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.999984622001648, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9996743202209473, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.9341118931770325, 3), 'yes'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.456747442483902, 5), 'no'), (('GROUP_COL', ('car_makers', 'country', 44), 0.4247426688671112, 5), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.07058483362197876, 5), 'no'), (('GROUP_COL', ('countries', 'countryid', 38), 0.032960884273052216, 5), 'yes'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9946693507833665, 7), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.36504544900058633, 7), 'yes'), (('HAV_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.20653077634629743, 7), 'no'), (('HAV_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.16584985686352613, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9914335844114818, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.999984622001648, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 727
    },
    {
        "nl": "What is the number of the cars with horsepower more than 150 ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.horsepower > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 20, False], None], 150.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.horsepower",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 55, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.8724945756895912, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999996423721313, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9999397993087769, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9998270869255066, 5)]",
        "logprob": "-0.5482559453532085",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.8724945756895912, 1), 'yes'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999996423721313, 3), 'yes'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9999397993087769, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9998270869255066, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.8724945756895912, 1), 'yes'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999996423721313, 3), 'yes'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9999397993087769, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9998270869255066, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 728
    },
    {
        "nl": "What is the number of cars with a horsepower greater than 150 ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.horsepower > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 20, False], None], 150.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.horsepower",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 55, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.6491229358950513, 1), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999858140945435, 3), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9999672174453735, 4), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9998190999031067, 5)]",
        "logprob": "-1.7378538468893099",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('count', 3), True, 0.7558682991650661, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999858140945435, 3), 'yes'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9999672174453735, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9998190999031067, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('count', 3), True, 0.7558682991650661, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.7474836346924258, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.6491229358950513, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('count', 3), True, 0.6867486417409074, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9999858140945435, 3), 'yes'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9999672174453735, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.9998190999031067, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 729
    },
    {
        "nl": "What is the average weight of cars each year ?",
        "true_sql": "select avg ( cars_data.weight ) , cars_data.year group_by cars_data.year",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 21, False], None]], [0, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ",",
            "cars_data.year",
            "group_by",
            "cars_data.year",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 56, 4], 8, [58], 10, 58, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9997036185962199, 1), ('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9551424980163574, 3), ('GROUP_COL', ('cars_data', 'year', 58), 0.9999103546142578, 5)]",
        "logprob": "-0.04789156497812992",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9997036185962199, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9551424980163574, 3), 'yes'), (('GROUP_COL', ('cars_data', 'year', 58), 0.9999103546142578, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9997036185962199, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9551424980163574, 3), 'yes'), (('GROUP_COL', ('cars_data', 'year', 58), 0.9999103546142578, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 730
    },
    {
        "nl": "What is the average weight and year for each year ?",
        "true_sql": "select avg ( cars_data.weight ) , cars_data.year group_by cars_data.year",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 21, False], None]], [0, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ",",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ",",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            ",",
            "avg",
            "(",
            "cars_data.weight",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 56, 4], 8, [17, 5, 56, 4], 8, [17, 5, 56, 4], 8, [17, 5, 56, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9988784941717425, 1), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.7673200631604309, 3), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.8627653397161504, 5), ('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.8190042120466043, 7)]",
        "logprob": "-4.089131251480664",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9988784941717425, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.7673200631604309, 3), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.8627653397161504, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.8190042120466043, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.9988784941717425, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.7673200631604309, 3), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.8627653397161504, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'weight', 56), ('avg', 5), False, 0.8190042120466043, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 731
    },
    {
        "nl": "Which countries in europe have at least 3 car manufacturers ?",
        "true_sql": "select countries.countryname where continents.continent = value group_by countries.countryname having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"europe\"', None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            "where",
            "car_names.make",
            "=",
            "value",
            "group_by",
            "countries.continent",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 50, [7], 3, 10, 40, 18, [9, 5, 61, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.056137818843126304, 1), ('WHERE_COL', ('car_names', 'make', 50), 0.0327150784432888, 3), ('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9849423170089722, 4), ('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9998596906661987, 5), ('GROUP_COL', ('countries', 'continent', 40), 0.951330840587616, 7), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9993634377638392, 9), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 0.9996290436771005, 10), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>=', 3), 'terminal', 0.9999880790710449, 11)]",
        "logprob": "-6.372295382789865",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 0.9416592121124268, 1), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.4336528778076172, 3), 'no'), (('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9849423170089722, 4), 'no'), (('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9998596906661987, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 0.9416592121124268, 1), 'no'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.056137818843126304, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('max', 1), False, 0.12948989575098557, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('max', 1), False, 0.12707546508181186, 1), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.4336528778076172, 3), 'no'), (('WHERE_COL', ('car_makers', 'country', 44), 0.26794761419296265, 3), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.15003789961338043, 3), 'no'), (('WHERE_COL', ('countries', 'continent', 40), 0.054063163697719574, 3), 'no'), (('WHERE_OP', (('car_names', 'make', 50),), ('=', 0), 0.9849423170089722, 4), 'no'), (('WHERE_OP', (('car_names', 'make', 50),), ('>', 1), 0.014940932393074036, 4), 'no'), (('WHERE_OP', (('car_names', 'make', 50),), ('not in', 7), 0.010043288344739127, 4), 'no'), (('WHERE_OP', (('car_names', 'make', 50),), ('>=', 3), 0.006931283837668375, 4), 'no'), (('WHERE_ROOT_TERM', (('car_names', 'make', 50),), ('=', 0), 'terminal', 0.9998596906661987, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 732
    },
    {
        "nl": "What are the names of all European countries with at least 3 manufacturers ?",
        "true_sql": "select countries.countryname where continents.continent = value group_by countries.countryname having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 5, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"europe\"', None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            "where",
            "countries.countryid",
            "=",
            "value",
            "group_by",
            "countries.continent",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 38, [7], 3, 10, 40, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9984631538391113, 1), ('WHERE_COL', ('countries', 'countryid', 38), 0.0908767357468605, 3), ('WHERE_OP', (('countries', 'countryid', 38),), ('=', 0), 0.9898682832717896, 4), ('WHERE_ROOT_TERM', (('countries', 'countryid', 38),), ('=', 0), 'terminal', 0.9999778270721436, 5), ('GROUP_COL', ('countries', 'continent', 40), 0.46711331605911255, 7), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8401813326728891, 9), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9997687335358545, 10), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999874830245972, 11)]",
        "logprob": "-3.8697233860705222",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9984631538391113, 1), 'yes'), (('WHERE_COL', ('countries', 'countryname', 39), 0.30231523513793945, 3), 'no'), (('WHERE_OP', (('countries', 'countryid', 38),), ('=', 0), 0.9898682832717896, 4), 'no'), (('WHERE_ROOT_TERM', (('countries', 'countryid', 38),), ('=', 0), 'terminal', 0.9999778270721436, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9984631538391113, 1), 'yes'), (('WHERE_COL', ('countries', 'countryname', 39), 0.30231523513793945, 3), 'no'), (('WHERE_COL', ('countries', 'continent', 40), 0.2690473794937134, 3), 'no'), (('WHERE_COL', ('car_makers', 'country', 44), 0.13725000619888306, 3), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 0.12105768918991089, 3), 'no'), (('WHERE_OP', (('countries', 'countryid', 38),), ('=', 0), 0.9898682832717896, 4), 'no'), (('WHERE_OP', (('countries', 'countryid', 38),), ('>', 1), 0.009917107410728931, 4), 'no'), (('WHERE_OP', (('countries', 'countryid', 38),), ('not in', 7), 0.012629786473691187, 4), 'no'), (('WHERE_OP', (('countries', 'countryid', 38),), ('>=', 3), 0.008695564233224942, 4), 'no'), (('WHERE_ROOT_TERM', (('countries', 'countryid', 38),), ('=', 0), 'terminal', 0.9999778270721436, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 733
    },
    {
        "nl": "What is the maximum horsepower and the make of the car models with 3 cylinders ?",
        "true_sql": "select cars_data.horsepower , car_names.make where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 3.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.make",
            ",",
            "car_names.make",
            ",",
            "cars_data.horsepower",
            "where",
            "cars_data.cylinders",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [50], 8, [55], 6, 53, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.0003233598545193672, 1), ('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.016765857115387913, 3), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.016323095187544826, 5), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.16819529235363007, 7), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.9769370555877686, 8), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.021470513194799423, 9)]",
        "logprob": "-26.886458161053636",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9977654538379084, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.016765857115387913, 3), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.46124224579082956, 5), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.8529005646705627, 7), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.7199326753616333, 7), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.9769370555877686, 8), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'root', 0.9784276485443115, 9), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.5598464608192444, 11), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9977654538379084, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('max', 1), False, 0.2644605838591439, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.22071390544047792, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.0003604268713388591, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.016765857115387913, 3), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.46124224579082956, 5), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.37847346425690465, 5), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.016323095187544826, 5), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('none_agg', 0), False, 0.9098864952904934, 5), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.8529005646705627, 7), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.13583706319332123, 7), 'no'), (('GROUP_COL', ('car_names', 'make', 50), 0.00971329677850008, 7), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.0006849559722468257, 7), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.7199326753616333, 7), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.16819529235363007, 7), 'yes'), (('WHERE_COL', ('car_names', 'make', 50), 0.054701756685972214, 7), 'no'), (('WHERE_COL', ('car_names', 'makeid', 48), 0.016562771052122116, 7), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.9769370555877686, 8), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'root', 0.9784276485443115, 9), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.5598464608192444, 11), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.38211286067962646, 11), 'no'), (('GROUP_COL', ('car_names', 'make', 50), 0.05769426375627518, 11), 'no'), (('GROUP_COL', ('cars_data', 'id', 51), 0.00010375498095527291, 11), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 734
    },
    {
        "nl": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it ?",
        "true_sql": "select cars_data.horsepower , car_names.make where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 3.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.horsepower",
            ")",
            ",",
            "car_names.make",
            "where",
            "cars_data.cylinders",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 55, 4], 8, [50], 6, 53, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.11179578866397337, 1), ('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.0008432691683992741, 3), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.03334284946322441, 5), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.2904326319694519, 6), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.7786986231803894, 7)]",
        "logprob": "-37.02749946887112",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9955266442263802, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.2711827754974365, 3), 'no'), (('GROUP_COL', ('model_list', 'model', 47), 0.9932118654251099, 5), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 0.9234002232551575, 5), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.6156280040740967, 6), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.7786986231803894, 7), 'yes'), (('GROUP_COL', ('model_list', 'model', 47), 0.9977485537528992, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9955266442263802, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('max', 1), False, 0.31287539728396824, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('sum', 4), False, 0.258147353159754, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('max', 1), False, 0.23414690885199396, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.2711827754974365, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.3535304369143241, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.002234742743894458, 3), 'no'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('max', 1), False, 0.21603839574212652, 3), 'no'), (('GROUP_COL', ('model_list', 'model', 47), 0.9932118654251099, 5), 'no'), (('GROUP_COL', ('model_list', 'modelid', 45), 0.0022638640366494656, 5), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.002232120605185628, 5), 'no'), (('GROUP_COL', ('car_names', 'make', 50), 0.0019563320092856884, 5), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 0.9234002232551575, 5), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.03334284946322441, 5), 'yes'), (('WHERE_COL', ('model_list', 'model', 47), 0.025648463517427444, 5), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.01473003625869751, 5), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.6156280040740967, 6), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.2904326319694519, 6), 'yes'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>=', 3), 0.4979945839709713, 6), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('not in', 7), 0.12391676963162723, 6), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.7786986231803894, 7), 'yes'), (('GROUP_COL', ('model_list', 'model', 47), 0.9977485537528992, 9), 'no'), (('GROUP_COL', ('model_list', 'modelid', 45), 0.0011030222522094846, 9), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.0008517351816408336, 9), 'no'), (('GROUP_COL', ('car_names', 'make', 50), 0.00013942860823590308, 9), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 735
    },
    {
        "nl": "Which model saves the most gasoline ? That is to say , have the maximum miles per gallon .",
        "true_sql": "select car_names.model order_by cars_data.mpg desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.model",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.1695730984210968, 1)]",
        "logprob": "-15.188290384438751",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8301447033882141, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9421551823616028, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0004116498166695237, 2), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8301447033882141, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.1695730984210968, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('max', 1), False, 0.12065470814121998, 1), 'no'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('none_agg', 0), False, 3.984278009738774e-05, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9421551823616028, 3), 'no'), (('WHERE_COL', ('model_list', 'model', 47), 0.04302439093589783, 3), 'no'), (('WHERE_COL', ('model_list', 'modelid', 45), 0.011341942474246025, 3), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.0008771576685830951, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0004116498166695237, 2), 'no'), (('IUEN_v2', ('union', 2), 2.6046560378745198e-05, 2), 'no'), (('IUEN_v2', ('intersect', 1), 1.0833328190074099e-07, 2), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 736
    },
    {
        "nl": "What is the car wmodel with the highest mpg ?",
        "true_sql": "select car_names.model order_by cars_data.mpg desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "cars_data.mpg",
            ")",
            "order_by",
            "cars_data.mpg",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 52, 4], 11, [52], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('sum', 4), False, 0.126300302158309, 1), ('ORDER_AGG_v2', ('cars_data', 'mpg', 52), ('none_agg', 0), False, 0.9999511241912842, 3), ('ORDER_DESC_ASC', (('cars_data', 'mpg', 52), ('none_agg', 0), False), 'desc', 0.9995797276496887, 4), ('ORDER_LIMIT', (('cars_data', 'mpg', 52), ('none_agg', 0), False), 'limit_value', 0.9999586343765259, 5)]",
        "logprob": "-14.053838678166649",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('max', 1), False, 0.9961316072105728, 1), 'no'), (('WHERE_COL', ('cars_data', 'mpg', 52), 0.9978461265563965, 3), 'no'), (('ORDER_AGG_v2', ('cars_data', 'mpg', 52), ('none_agg', 0), False, 0.9999511241912842, 3), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'mpg', 52), ('none_agg', 0), False), 'desc', 0.9995797276496887, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'mpg', 52), ('none_agg', 0), False), 'limit_value', 0.9999586343765259, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('max', 1), False, 0.9961316072105728, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('none_agg', 0), False, 0.00243052002042532, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', '*', 64), ('none_agg', 0), False, 0.001311387168243527, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.000347825523931533, 1), 'no'), (('WHERE_COL', ('cars_data', 'mpg', 52), 0.9978461265563965, 3), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 0.0009879504796117544, 3), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.0008693209965713322, 3), 'no'), (('WHERE_COL', ('car_names', 'model', 49), 9.327862062491477e-05, 3), 'no'), (('ORDER_AGG_v2', ('cars_data', 'mpg', 52), ('none_agg', 0), False, 0.9999511241912842, 3), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'mpg', 52), ('none_agg', 0), False), 'desc', 0.9995797276496887, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'mpg', 52), ('none_agg', 0), False), 'limit_value', 0.9999586343765259, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 737
    },
    {
        "nl": "What is the average horsepower of the cars before 1980 ?",
        "true_sql": "select avg ( cars_data.horsepower ) where cars_data.year < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.horsepower",
            ")",
            "where",
            "cars_data.year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 55, 4], 6, 58, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9999258787681659, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.999875545501709, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.1109471470117569, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9684262871742249, 5)]",
        "logprob": "-2.231762163733135",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9999258787681659, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.999875545501709, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.8799476623535156, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9684262871742249, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9999258787681659, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.999875545501709, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.8799476623535156, 4), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.1109471470117569, 4), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('not in', 7), 0.09048355063648694, 4), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<=', 4), 0.05369069146085828, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9684262871742249, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 738
    },
    {
        "nl": "What is the average horsepower for all cards produced before 1980 ?",
        "true_sql": "select avg ( cars_data.horsepower ) where cars_data.year < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 20, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.horsepower",
            ")",
            "where",
            "cars_data.year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 55, 4], 6, 58, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9998240593591564, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9987673759460449, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.13795214891433716, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.971794068813324, 5)]",
        "logprob": "-2.012086323084291",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9998240593591564, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9987673759460449, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.8467849493026733, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.971794068813324, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.9998240593591564, 1), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9987673759460449, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.8467849493026733, 4), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.13795214891433716, 4), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('not in', 7), 0.1172835858747353, 4), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<=', 4), 0.05942833749854724, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.971794068813324, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 739
    },
    {
        "nl": "What is the average edispl of the cars of model volvo ?",
        "true_sql": "select avg ( cars_data.edispl ) where car_names.model = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 19, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 14, False], None], '\"volvo\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.edispl",
            ")",
            "where",
            "car_names.model",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 54, 4], 6, 49, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'edispl', 54), ('avg', 5), False, 0.9999289489291852, 1), ('WHERE_COL', ('car_names', 'model', 49), 1.0, 3), ('WHERE_OP', (('car_names', 'model', 49),), ('=', 0), 0.9999889135360718, 4), ('WHERE_ROOT_TERM', (('car_names', 'model', 49),), ('=', 0), 'terminal', 0.9999964237213135, 5)]",
        "logprob": "-1.1414542729699102",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'edispl', 54), ('avg', 5), False, 0.9999289489291852, 1), 'yes'), (('WHERE_COL', ('model_list', 'model', 47), 0.44543299078941345, 3), 'no'), (('WHERE_OP', (('car_names', 'model', 49),), ('=', 0), 0.9999889135360718, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_names', 'model', 49),), ('=', 0), 'terminal', 0.9999964237213135, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'edispl', 54), ('avg', 5), False, 0.9999289489291852, 1), 'yes'), (('WHERE_COL', ('model_list', 'model', 47), 0.44543299078941345, 3), 'no'), (('WHERE_COL', ('car_names', 'model', 49), 0.3194844126701355, 3), 'yes'), (('WHERE_COL', ('cars_data', 'edispl', 54), 0.23506449162960052, 3), 'no'), (('WHERE_COL', ('car_makers', 'fullname', 43), 1.333889758825535e-05, 3), 'no'), (('WHERE_OP', (('car_names', 'model', 49),), ('=', 0), 0.9999889135360718, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_names', 'model', 49),), ('=', 0), 'terminal', 0.9999964237213135, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 740
    },
    {
        "nl": "What is the average edispl for all volvos ?",
        "true_sql": "select avg ( cars_data.edispl ) where car_names.model = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 19, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 14, False], None], '\"volvo\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "cars_data.edispl",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'edispl', 54), ('avg', 5), False, 0.9969910977282271, 1)]",
        "logprob": "-0.013524326152365696",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'edispl', 54), ('avg', 5), False, 0.9969910977282271, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'edispl', 54), ('avg', 5), False, 0.9969910977282271, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 741
    },
    {
        "nl": "What is the maximum accelerate for different number of cylinders ?",
        "true_sql": "select max ( cars_data.accelerate ) , cars_data.cylinders group_by cars_data.cylinders",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 22, False], None]], [0, [0, [0, 18, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.accelerate",
            ")",
            ",",
            "max",
            "(",
            "cars_data.accelerate",
            ")",
            "group_by",
            "cars_data.cylinders",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 57, 4], 8, [19, 5, 57, 4], 10, 53, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.885382229293166, 1), ('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.9792798859192501, 3), ('GROUP_COL', ('cars_data', 'cylinders', 53), 0.05457925423979759, 5)]",
        "logprob": "-3.7551539309591395",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.885382229293166, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.9792798859192501, 3), 'yes'), (('GROUP_COL', ('car_makers', 'id', 41), 0.344559907913208, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.885382229293166, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.9792798859192501, 3), 'yes'), (('GROUP_COL', ('car_makers', 'id', 41), 0.344559907913208, 5), 'no'), (('GROUP_COL', ('cars_data', 'id', 51), 0.2767246663570404, 5), 'no'), (('GROUP_COL', ('model_list', 'modelid', 45), 0.2520217299461365, 5), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.05457925423979759, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 742
    },
    {
        "nl": "What is the maximum accelerate for all the different cylinders ?",
        "true_sql": "select max ( cars_data.accelerate ) , cars_data.cylinders group_by cars_data.cylinders",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 22, False], None]], [0, [0, [0, 18, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "cars_data.accelerate",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 57, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.8228942283303011, 1)]",
        "logprob": "-0.7799610937928738",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('min', 2), False, 0.8524349624291583, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('min', 2), False, 0.8524349624291583, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.8228942283303011, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('sum', 4), False, 0.24148787415291442, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('avg', 5), False, 0.23277314691923484, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 743
    },
    {
        "nl": "Which model has the most version ( make ) of cars ?",
        "true_sql": "select car_names.model group_by car_names.model order_by count ( car_names.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [[0, 14, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'car_names.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.model",
            "group_by",
            "car_names.model",
            "order_by",
            "count",
            "(",
            "car_makers.id",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 10, 49, 11, [9, 5, 41, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.011920045129954817, 1), ('GROUP_COL', ('car_names', 'model', 49), 0.0008873330079950392, 3), ('ORDER_AGG_v2', ('car_makers', 'id', 41), ('count', 3), False, 0.1554120833137419, 5), ('ORDER_DESC_ASC', (('car_makers', 'id', 41), ('count', 3), False), 'asc', 0.0007638765964657068, 6), ('ORDER_LIMIT', (('car_makers', 'id', 41), ('count', 3), False), 'limit_value', 0.9999524354934692, 7)]",
        "logprob": "-26.085678670908177",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9832589626312256, 1), 'no'), (('GROUP_COL', ('model_list', 'modelid', 45), 0.726142406463623, 3), 'no'), (('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9962725088616129, 5), 'no'), (('ORDER_DESC_ASC', (('car_makers', 'id', 41), ('count', 3), False), 'desc', 0.9990407824516296, 6), 'no'), (('ORDER_LIMIT', (('car_makers', 'id', 41), ('count', 3), False), 'limit_value', 0.9999524354934692, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9832589626312256, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.011920045129954817, 1), 'yes'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.004736712202429771, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 4.4005602831020924e-05, 1), 'no'), (('GROUP_COL', ('model_list', 'modelid', 45), 0.726142406463623, 3), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.23210054636001587, 3), 'no'), (('GROUP_COL', ('model_list', 'model', 47), 0.040727436542510986, 3), 'no'), (('GROUP_COL', ('car_names', 'model', 49), 0.0008873330079950392, 3), 'yes'), (('ORDER_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9962725088616129, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.3074728935069837, 5), 'no'), (('ORDER_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.2359478117130878, 5), 'no'), (('ORDER_AGG_v2', ('model_list', 'modelid', 45), ('count', 3), False, 0.2072858741440292, 5), 'no'), (('ORDER_DESC_ASC', (('car_makers', 'id', 41), ('count', 3), False), 'desc', 0.9990407824516296, 6), 'no'), (('ORDER_LIMIT', (('car_makers', 'id', 41), ('count', 3), False), 'limit_value', 0.9999524354934692, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 744
    },
    {
        "nl": "What model has the most different versions ?",
        "true_sql": "select car_names.model group_by car_names.model order_by count ( car_names.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [[0, 14, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'car_names.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "model_list.model",
            ")",
            "group_by",
            "car_names.model",
            "order_by",
            "sum",
            "(",
            "model_list.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 47, 4], 10, 49, 11, [24, 5, 62, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('max', 1), False, 0.09043844192568531, 1), ('GROUP_COL', ('car_names', 'model', 49), 3.298434947396345e-08, 3), ('ORDER_AGG_v2', ('model_list', '*', 62), ('sum', 4), False, 0.09013010939796547, 5), ('ORDER_DESC_ASC', (('model_list', '*', 62), ('sum', 4), False), 'asc', 0.00022189694573171437, 6), ('ORDER_LIMIT', (('model_list', '*', 62), ('sum', 4), False), 'limit_value', 0.9963958859443665, 7)]",
        "logprob": "-44.88949423989167",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8195945620536804, 1), 'no'), (('GROUP_COL', ('model_list', 'model', 47), 0.9993739724159241, 3), 'no'), (('ORDER_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.9980833812732566, 5), 'no'), (('ORDER_DESC_ASC', (('model_list', '*', 62), ('sum', 4), False), 'desc', 0.9984506368637085, 6), 'no'), (('ORDER_LIMIT', (('model_list', '*', 62), ('sum', 4), False), 'limit_value', 0.9963958859443665, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8195945620536804, 1), 'no'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.13921056189939993, 1), 'no'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('none_agg', 0), False, 0.0001254515955224633, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('count', 3), False, 0.0912732531508252, 1), 'no'), (('GROUP_COL', ('model_list', 'model', 47), 0.9993739724159241, 3), 'no'), (('GROUP_COL', ('model_list', 'modelid', 45), 0.0006260572117753327, 3), 'no'), (('GROUP_COL', ('car_names', 'model', 49), 3.298434947396345e-08, 3), 'yes'), (('GROUP_COL', ('model_list', '*', 62), 2.2488202966464144e-10, 3), 'no'), (('ORDER_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.9980833812732566, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.23323567900982078, 5), 'no'), (('ORDER_AGG_v2', ('model_list', 'model', 47), ('count', 3), False, 0.22753163157978928, 5), 'no'), (('ORDER_AGG_v2', ('model_list', 'modelid', 45), ('count', 3), False, 0.20762353853793555, 5), 'no'), (('ORDER_DESC_ASC', (('model_list', '*', 62), ('sum', 4), False), 'desc', 0.9984506368637085, 6), 'no'), (('ORDER_LIMIT', (('model_list', '*', 62), ('sum', 4), False), 'limit_value', 0.9963958859443665, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 745
    },
    {
        "nl": "How many cars have more than 4 cylinders ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.cylinders > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.cylinders",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 53, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.6329021568537769, 1), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.8141975402832031, 3), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9993721842765808, 4), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.999822199344635, 5)]",
        "logprob": "-2.317904565545742",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9507295102555036, 1), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.8141975402832031, 3), 'yes'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9993721842765808, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.999822199344635, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9507295102555036, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.6329021568537769, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), False, 0.3255980419932808, 1), 'no'), (('SELECT_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.2591391508302652, 1), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.8141975402832031, 3), 'yes'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9993721842765808, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.999822199344635, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 746
    },
    {
        "nl": "What is the number of cars with more than 4 cylinders ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.cylinders > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.cylinders",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 53, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.41081854349943203, 1), ('WHERE_COL', ('cars_data', 'cylinders', 53), 1.0, 3), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9998283386230469, 4), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9997997879981995, 5)]",
        "logprob": "-5.333874702994318",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9875433932523056, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.8275848031044006, 3), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9998283386230469, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9997997879981995, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9875433932523056, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.41081854349943203, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), False, 0.3537982962962249, 1), 'no'), (('SELECT_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.23985731167343746, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.8275848031044006, 3), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.17240414023399353, 3), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 9.417937690159306e-06, 3), 'no'), (('WHERE_COL', ('car_makers', 'id', 41), 6.717258429489448e-07, 3), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9998283386230469, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9997997879981995, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 747
    },
    {
        "nl": "how many cars were produced in 1980 ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.22532655015805997, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9999833106994629, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9987429976463318, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-5.965132288041099",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), True, 0.9383150110283258, 1), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9999833106994629, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9987429976463318, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), True, 0.9383150110283258, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.7051911124103917, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), False, 0.32288582409622885, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.3526415604447246, 1), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9999833106994629, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9987429976463318, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 748
    },
    {
        "nl": "In 1980 , how many cars were made ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.year = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "car_makers.id",
            ")",
            "where",
            "cars_data.year",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 41, 4], 6, 58, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'id', 41), ('sum', 4), False, 0.275705800605923, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9907094240188599, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9202396869659424, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-5.5839385485798685",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9545536816581796, 1), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9907094240188599, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9202396869659424, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9545536816581796, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('sum', 4), False, 0.37116593632979794, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('none_agg', 0), False, 0.010376711376011372, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', '*', 64), ('none_agg', 0), False, 0.007715841755270956, 1), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9907094240188599, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('=', 0), 0.9202396869659424, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 749
    },
    {
        "nl": "How many car models were produced by the maker with full name American Motor Company ?",
        "true_sql": "select count ( * ) where car_makers.fullname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 8, False], None], '\"American Motor Company\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.id",
            ")",
            "where",
            "car_makers.fullname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 41, 4], 6, 43, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'id', 41), ('count', 3), False, 0.34265471753008603, 1), ('WHERE_COL', ('car_makers', 'fullname', 43), 0.9668937921524048, 3), ('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.999984860420227, 4), ('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-4.324314862566768",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.9604014329130834, 1), 'no'), (('WHERE_COL', ('car_makers', 'fullname', 43), 0.9668937921524048, 3), 'yes'), (('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.999984860420227, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.9604014329130834, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('count', 3), False, 0.5164344063804199, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.45621164294722233, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('count', 3), True, 0.4903195499566746, 1), 'no'), (('WHERE_COL', ('car_makers', 'fullname', 43), 0.9668937921524048, 3), 'yes'), (('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.999984860420227, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 750
    },
    {
        "nl": "What is the number of car models created by the car maker American Motor Company ?",
        "true_sql": "select count ( * ) where car_makers.fullname = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 8, False], None], '\"American Motor Company\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "car_makers.*",
            ")",
            "where",
            "car_makers.fullname",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 61, 4], 6, 43, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.17924649796236092, 1), ('WHERE_COL', ('car_makers', 'fullname', 43), 1.0, 3), ('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.9999973773956299, 4), ('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-27.506358345779674",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.9853324806978524, 1), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9808316826820374, 3), 'no'), (('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.9999973773956299, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('count', 3), True, 0.9853324806978524, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('count', 3), True, 0.5629924094695873, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('count', 3), True, 0.38214505419067757, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('count', 3), True, 0.2727275574097671, 1), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9808316826820374, 3), 'no'), (('WHERE_COL', ('model_list', 'maker', 46), 0.01916838251054287, 3), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 3.0935425332501154e-09, 3), 'no'), (('WHERE_COL', ('car_makers', 'fullname', 43), 1.1069017924469904e-09, 3), 'yes'), (('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.9999973773956299, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 751
    },
    {
        "nl": "Which makers designed more than 3 car models ? List full name and the id .",
        "true_sql": "select car_makers.fullname , car_makers.id group_by car_makers.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            ",",
            "model_list.*",
            "group_by",
            "model_list.modelid",
            "having",
            "count",
            "(",
            "car_makers.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [41], 8, [62], 10, 45, 18, [9, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.00034741251147352164, 1), ('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.04035540670156478, 3), ('SELECT_AGG_v2', ('model_list', '*', 62), ('none_agg', 0), False, 0.002178163034841419, 5), ('GROUP_COL', ('model_list', 'modelid', 45), 0.00016141653759405017, 7), ('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9919281828582202, 9), ('HAV_OP_v2', (('car_makers', '*', 61), ('count', 3), False), ('>', 1), 0.9999364614486694, 10), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('count', 3), False), ('>', 1), 'terminal', 0.9369441270828247, 11)]",
        "logprob": "-26.179973147669774",
        "q_counter": 4,
        "questioned_indices": [
            0,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.7772756218910217, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9816820988613523, 5), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.6239755153656006, 7), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9919281828582202, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.7772756218910217, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.2223757058382034, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.00034741251147352164, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 1.278811282645621e-06, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9816820988613523, 5), 'no'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.4326042894546647, 5), 'no'), (('SELECT_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.27628603001725477, 5), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('min', 2), False, 0.22964756742382467, 5), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.6239755153656006, 7), 'no'), (('GROUP_COL', ('model_list', 'maker', 46), 0.36675891280174255, 7), 'no'), (('GROUP_COL', ('cars_data', 'id', 51), 0.008403036743402481, 7), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.00042825675336644053, 7), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9919281828582202, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 752
    },
    {
        "nl": "What are the names and ids of all makers with more than 3 models ?",
        "true_sql": "select car_makers.fullname , car_makers.id group_by car_makers.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            "group_by",
            "cars_data.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [41], 10, 51, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.0012617990141734477, 1), ('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.20019620656967163, 3), ('GROUP_COL', ('cars_data', 'id', 51), 0.0024903418961912394, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999409914016724, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9691663980484009, 9)]",
        "logprob": "-24.700212119426855",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.770757257938385, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.20019620656967163, 3), 'yes'), (('GROUP_COL', ('model_list', 'maker', 46), 0.5574817657470703, 5), 'no'), (('HAV_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.99990815993829, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999409914016724, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9691663980484009, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.770757257938385, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.22667290270328525, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.0012617990141734477, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 0.0006941307801753285, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.20019620656967163, 3), 'yes'), (('GROUP_COL', ('model_list', 'maker', 46), 0.5574817657470703, 5), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.4217285215854645, 5), 'no'), (('GROUP_COL', ('model_list', 'modelid', 45), 0.008610311895608902, 5), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.007090488914400339, 5), 'no'), (('HAV_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.99990815993829, 7), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.11587363452142471, 7), 'no'), (('HAV_AGG_v2', ('model_list', '*', 62), ('avg', 5), False, 0.09294095907777383, 7), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.07466446898320624, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9999409914016724, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.9691663980484009, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 753
    },
    {
        "nl": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500 ?",
        "true_sql": "select distinct model_list.model where car_makers.fullname = value or cars_data.weight > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 12, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 8, False], None], '\"General Motors\"', None], 'or', [False, 3, [0, [0, 21, False], None], 3500.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "model_list.model",
            "where",
            "car_makers.fullname",
            "=",
            "value",
            "or",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 43, [7], 3, 25, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.0679691359400749, 1), ('WHERE_COL', ('car_makers', 'fullname', 43), 0.9920741319656372, 3), ('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.9999696016311646, 4), ('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999983310699463, 5), ('WHERE_COL', ('cars_data', 'weight', 56), 0.8515543937683105, 7), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.98540198802948, 8), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9970220923423767, 9)]",
        "logprob": "-2.8762658350158565",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.8485223054885864, 1), 'no'), (('WHERE_COL', ('car_makers', 'fullname', 43), 0.9920741319656372, 3), 'yes'), (('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.9999696016311646, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.8515543937683105, 7), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.98540198802948, 8), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9970220923423767, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.8485223054885864, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.0679691359400749, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.000100257049780339, 1), 'no'), (('SELECT_AGG_v2', ('model_list', '*', 62), ('none_agg', 0), False, 5.5118165619205683e-05, 1), 'no'), (('WHERE_COL', ('car_makers', 'fullname', 43), 0.9920741319656372, 3), 'yes'), (('WHERE_OP', (('car_makers', 'fullname', 43),), ('=', 0), 0.9999696016311646, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_makers', 'fullname', 43),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.8515543937683105, 7), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.98540198802948, 8), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9970220923423767, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 754
    },
    {
        "nl": "What are the different models created by either the car maker General Motors or weighed more than 3500 ?",
        "true_sql": "select distinct model_list.model where car_makers.fullname = value or cars_data.weight > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 12, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 8, False], None], '\"General Motors\"', None], 'or', [False, 3, [0, [0, 21, False], None], 3500.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "model_list.model",
            "where",
            "cars_data.weight",
            ">",
            "value",
            "or",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [47], 6, 56, [14], 3, 25, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8863614201545715, 2), ('WHERE_COL', ('cars_data', 'weight', 56), 0.00196288269944489, 4), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.0006359653198160231, 5), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9975621700286865, 6), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9569521546363831, 8), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.992337167263031, 9), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9974217414855957, 10)]",
        "logprob": "-13.773002257935934",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8863614201545715, 2), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9387539625167847, 4), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.9993047714233398, 5), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9975621700286865, 6), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9569521546363831, 8), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.992337167263031, 9), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9974217414855957, 10), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.8863614201545715, 2), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9387539625167847, 4), 'no'), (('WHERE_COL', ('model_list', 'maker', 46), 0.05928000062704086, 4), 'no'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.00196288269944489, 4), 'yes'), (('WHERE_COL', ('car_names', 'make', 50), 3.0918945412850007e-06, 4), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.9993047714233398, 5), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.0006359653198160231, 5), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('in', 8), 3.0313321985886432e-05, 5), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('like', 6), 3.981239842687501e-06, 5), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9975621700286865, 6), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9569521546363831, 8), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.992337167263031, 9), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9974217414855957, 10), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 755
    },
    {
        "nl": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "true_sql": "select distinct cars_data.year where cars_data.weight > value and cars_data.weight < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 21, False], None], 3000.0, None], 'and', [False, 4, [0, [0, 21, False], None], 4000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "cars_data.year",
            "where",
            "cars_data.weight",
            "<",
            "value",
            "and",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [58], 6, 56, [21], 3, 16, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9999290704727173, 2), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9999810457229614, 4), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.6206843256950378, 5), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9998431205749512, 6), ('WHERE_COL', ('cars_data', 'weight', 56), 0.7302894592285156, 8), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.5836961269378662, 9), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9998205304145813, 10)]",
        "logprob": "-1.9477262299994607",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9999290704727173, 2), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9999810457229614, 4), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.6206843256950378, 5), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9998431205749512, 6), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.7302894592285156, 8), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.5836961269378662, 9), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9998205304145813, 10), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9999290704727173, 2), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9999810457229614, 4), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.6206843256950378, 5), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9998431205749512, 6), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.7302894592285156, 8), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.5836961269378662, 9), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9998205304145813, 10), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 756
    },
    {
        "nl": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "true_sql": "select distinct cars_data.year where cars_data.weight > value and cars_data.weight < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 21, False], None], 3000.0, None], 'and', [False, 4, [0, [0, 21, False], None], 4000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "cars_data.year",
            "where",
            "cars_data.weight",
            "<",
            "value",
            "and",
            "cars_data.weight",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [58], 6, 56, [21], 3, 16, 56, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9999998807907104, 2), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9999321699142456, 4), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.8928811550140381, 5), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9979267120361328, 6), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9993757605552673, 8), ('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9978118538856506, 9), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9899724721908569, 10)]",
        "logprob": "-0.4248252325875022",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9999998807907104, 2), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9999321699142456, 4), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.8928811550140381, 5), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9979267120361328, 6), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9993757605552673, 8), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9978118538856506, 9), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9899724721908569, 10), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'year', 58), ('none_agg', 0), False, 0.9999998807907104, 2), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9999321699142456, 4), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.8928811550140381, 5), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9979267120361328, 6), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9993757605552673, 8), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9978118538856506, 9), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('>', 1), 'terminal', 0.9899724721908569, 10), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 757
    },
    {
        "nl": "What is the horsepower of the car with the largest accelerate ?",
        "true_sql": "select cars_data.horsepower order_by cars_data.accelerate desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 22, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.horsepower",
            "order_by",
            "cars_data.accelerate",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 11, [57], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9019162654876709, 1), ('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.9814291000366211, 3), ('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9971801042556763, 4), ('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9999735355377197, 5)]",
        "logprob": "-0.12527341054689803",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9019162654876709, 1), 'yes'), (('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.9814291000366211, 3), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9971801042556763, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9999735355377197, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9019162654876709, 1), 'yes'), (('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.9814291000366211, 3), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9971801042556763, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9999735355377197, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 758
    },
    {
        "nl": "What is the horsepower of the car with the greatest accelerate ?",
        "true_sql": "select cars_data.horsepower order_by cars_data.accelerate desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 22, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.horsepower",
            "order_by",
            "cars_data.accelerate",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 11, [57], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.35732582211494446, 1), ('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.9764070510864258, 3), ('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9981114864349365, 4), ('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9999691247940063, 5)]",
        "logprob": "-1.0554790642489613",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.8903204366396372, 1), 'no'), (('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.9764070510864258, 3), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9981114864349365, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9999691247940063, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.8903204366396372, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.35732582211494446, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('sum', 4), False, 0.3214315516223185, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.102702545431429, 1), 'no'), (('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.9764070510864258, 3), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9981114864349365, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9999691247940063, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 759
    },
    {
        "nl": "For model volvo , how many cylinders does the car with the least accelerate have ?",
        "true_sql": "select cars_data.cylinders where car_names.model = value order_by cars_data.accelerate asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 22, False], None]]], 'select': [False, [[0, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 14, False], None], '\"volvo\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.cylinders",
            "where",
            "car_names.model",
            "=",
            "value",
            "order_by",
            "cars_data.accelerate",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 6, 49, [7], 3, 11, [57], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.5177730917930603, 1), ('WHERE_COL', ('car_names', 'model', 49), 1.7077394659281708e-05, 3), ('WHERE_OP', (('car_names', 'model', 49),), ('=', 0), 0.9999486207962036, 4), ('WHERE_ROOT_TERM', (('car_names', 'model', 49),), ('=', 0), 'terminal', 0.997424840927124, 5), ('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.776597261428833, 7), ('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'asc', 0.06320654600858688, 8), ('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9996641874313354, 9)]",
        "logprob": "-15.172980888210386",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.5177730917930603, 1), 'yes'), (('WHERE_COL', ('cars_data', 'accelerate', 57), 0.9964060187339783, 3), 'no'), (('WHERE_OP', (('car_names', 'model', 49),), ('=', 0), 0.9999486207962036, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_names', 'model', 49),), ('=', 0), 'terminal', 0.997424840927124, 5), 'yes'), (('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.776597261428833, 7), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9188705086708069, 8), 'no'), (('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9996641874313354, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.5177730917930603, 1), 'yes'), (('WHERE_COL', ('cars_data', 'accelerate', 57), 0.9964060187339783, 3), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.003510757116600871, 3), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 5.174834586796351e-05, 3), 'no'), (('WHERE_COL', ('car_names', 'model', 49), 1.7077394659281708e-05, 3), 'yes'), (('WHERE_OP', (('car_names', 'model', 49),), ('=', 0), 0.9999486207962036, 4), 'yes'), (('WHERE_ROOT_TERM', (('car_names', 'model', 49),), ('=', 0), 'terminal', 0.997424840927124, 5), 'yes'), (('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.776597261428833, 7), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9188705086708069, 8), 'no'), (('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9996641874313354, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 760
    },
    {
        "nl": "For a volvo model , how many cylinders does the version with least accelerate have ?",
        "true_sql": "select cars_data.cylinders where car_names.model = value order_by cars_data.accelerate asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 22, False], None]]], 'select': [False, [[0, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 14, False], None], '\"volvo\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "cars_data.cylinders",
            "where",
            "model_list.model",
            "=",
            "value",
            "order_by",
            "cars_data.accelerate",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 6, 47, [7], 3, 11, [57], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.6654067039489746, 1), ('WHERE_COL', ('model_list', 'model', 47), 7.112321327440441e-06, 3), ('WHERE_OP', (('model_list', 'model', 47),), ('=', 0), 0.999910831451416, 4), ('WHERE_ROOT_TERM', (('model_list', 'model', 47),), ('=', 0), 'terminal', 0.998551070690155, 5), ('ORDER_AGG_v2', ('cars_data', 'accelerate', 57), ('none_agg', 0), False, 0.9490295648574829, 7), ('ORDER_DESC_ASC', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'desc', 0.9356058835983276, 8), ('ORDER_LIMIT', (('cars_data', 'accelerate', 57), ('none_agg', 0), False), 'limit_value', 0.9997673630714417, 9)]",
        "logprob": "-13.355392424872093",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.6654067039489746, 1), 'yes'), (('WHERE_COL', ('cars_data', 'accelerate', 57), 0.9975993037223816, 3), 'no'), (('WHERE_OP', (('model_list', 'model', 47),), ('=', 0), 0.999910831451416, 4), 'no'), (('WHERE_ROOT_TERM', (('model_list', 'model', 47),), ('=', 0), 'terminal', 0.998551070690155, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.6654067039489746, 1), 'yes'), (('WHERE_COL', ('cars_data', 'accelerate', 57), 0.9975993037223816, 3), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.0023667393252253532, 3), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 1.2529216292023193e-05, 3), 'no'), (('WHERE_COL', ('model_list', 'modelid', 45), 7.873891263443511e-06, 3), 'no'), (('WHERE_OP', (('model_list', 'model', 47),), ('=', 0), 0.999910831451416, 4), 'no'), (('WHERE_OP', (('model_list', 'model', 47),), ('>', 1), 6.493810360552743e-05, 4), 'no'), (('WHERE_OP', (('model_list', 'model', 47),), ('in', 8), 6.214406312210485e-06, 4), 'no'), (('WHERE_OP', (('model_list', 'model', 47),), ('not in', 7), 0.0021543943005429625, 4), 'no'), (('WHERE_ROOT_TERM', (('model_list', 'model', 47),), ('=', 0), 'terminal', 0.998551070690155, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 761
    },
    {
        "nl": "How many cars have a larger accelerate than the car with the largest horsepower ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.accelerate > ( select cars_data.accelerate order_by cars_data.horsepower desc limit_value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 22, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 22, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.accelerate",
            ">",
            "(",
            "select",
            "sum",
            "(",
            "cars_data.horsepower",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 57, [14], 5, 2, [24, 5, 55, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.6592499111296696, 1), ('WHERE_COL', ('cars_data', 'accelerate', 57), 0.008899332024157047, 3), ('WHERE_OP', (('cars_data', 'accelerate', 57),), ('>', 1), 0.994156002998352, 4), ('WHERE_ROOT_TERM', (('cars_data', 'accelerate', 57),), ('>', 1), 'root', 0.9293860793113708, 5), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('sum', 4), False, 0.07444935632259994, 7), ('O', '##END_NESTED##', 0.9999760389328003, 8)]",
        "logprob": "-16.989331608237606",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.7441949342318439, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9910961389541626, 3), 'no'), (('WHERE_OP', (('cars_data', 'accelerate', 57),), ('>', 1), 0.994156002998352, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'accelerate', 57),), ('>', 1), 'root', 0.9293860793113708, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9989158943093488, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.7441949342318439, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.6592499111296696, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('count', 3), False, 0.6460697270245717, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('count', 3), True, 0.6763041945235282, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9910961389541626, 3), 'no'), (('WHERE_COL', ('cars_data', 'accelerate', 57), 0.008899332024157047, 3), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 4.481217274587834e-06, 3), 'no'), (('WHERE_COL', ('cars_data', '*', 64), 3.853981578316734e-09, 3), 'no'), (('WHERE_OP', (('cars_data', 'accelerate', 57),), ('>', 1), 0.994156002998352, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'accelerate', 57),), ('>', 1), 'root', 0.9293860793113708, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9989158943093488, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.2248407557367394, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.18805291249332548, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.11030404246364145, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 762
    },
    {
        "nl": "What is the number of cars with a greater accelerate than the one with the most horsepower ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.accelerate > ( select cars_data.accelerate order_by cars_data.horsepower desc limit_value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 22, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 22, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.accelerate",
            ">",
            "(",
            "select",
            "min",
            "(",
            "cars_data.accelerate",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 57, [14], 5, 2, [26, 5, 57, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.6200357202337357, 1), ('WHERE_COL', ('cars_data', 'accelerate', 57), 0.13601107895374298, 3), ('WHERE_OP', (('cars_data', 'accelerate', 57),), ('>', 1), 0.9996159076690674, 4), ('WHERE_ROOT_TERM', (('cars_data', 'accelerate', 57),), ('>', 1), 'root', 0.5783143043518066, 5), ('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('min', 2), False, 0.22687172781725992, 7), ('O', '##END_NESTED##', 0.9999321699142456, 8)]",
        "logprob": "-10.398687826056724",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9406849863853608, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.8639888763427734, 3), 'no'), (('WHERE_OP', (('cars_data', 'accelerate', 57),), ('>', 1), 0.9996159076690674, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'accelerate', 57),), ('>', 1), 'root', 0.5783143043518066, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.8924390827704667, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9406849863853608, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.6200357202337357, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4492458434821224, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('count', 3), False, 0.324421824591101, 1), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.8639888763427734, 3), 'no'), (('WHERE_COL', ('cars_data', 'accelerate', 57), 0.13601107895374298, 3), 'yes'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 8.498671988377282e-09, 3), 'no'), (('WHERE_COL', ('cars_data', 'weight', 56), 3.3799130161327184e-09, 3), 'no'), (('WHERE_OP', (('cars_data', 'accelerate', 57),), ('>', 1), 0.9996159076690674, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'accelerate', 57),), ('>', 1), 'root', 0.5783143043518066, 5), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.8924390827704667, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.7706043011181243, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'accelerate', 57), ('max', 1), False, 0.2627710007697799, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.23602286395872143, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 763
    },
    {
        "nl": "How many countries has more than 2 car makers ?",
        "true_sql": "select count ( * ) ( select countries.countryid , count ( * ) group_by countries.countryid having count ( * ) > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['sql', {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': []}]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*', 'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "countries.continent",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 8, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.03634139820901264, 1), ('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 1.8593340200823158e-06, 3)]",
        "logprob": "-41.19828467063438",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9999613155441666, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9997923970222473, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.9982728958129883, 5), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9997125267982483, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9999613155441666, 1), 'no'), (('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.07172606622879207, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('sum', 4), False, 0.045583996509571574, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.03634139820901264, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9997923970222473, 3), 'no'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.00011523561261128638, 3), 'no'), (('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 8.542286377632996e-05, 3), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('none_agg', 0), False, 3.4271029107912935e-06, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.9982728958129883, 5), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.0010750842047855258, 5), 'no'), (('GROUP_COL', ('model_list', 'maker', 46), 0.0006334201316349208, 5), 'no'), (('GROUP_COL', ('car_makers', '*', 61), 1.3811029930366203e-05, 5), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9997125267982483, 5), 'no'), (('WHERE_COL', ('countries', 'continent', 40), 9.606624371372163e-05, 5), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 8.089874609140679e-05, 5), 'no'), (('WHERE_COL', ('car_makers', 'id', 41), 3.770531839109026e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 764
    },
    {
        "nl": "What is the number of countries with more than 2 car makers ?",
        "true_sql": "select count ( * ) ( select countries.countryid , count ( * ) group_by countries.countryid having count ( * ) > value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['sql', {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'union': None, 'where': []}]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*', 'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "model_list.maker",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 8, [46], 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.25025542580900423, 1), ('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 8.267231896752498e-05, 3)]",
        "logprob": "-28.871253991068105",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9984766235359269, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9425066709518433, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.9238671064376831, 5), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9955103397369385, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9984766235359269, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.25025542580900423, 1), 'yes'), (('SELECT_AGG_v2', ('countries', '*', 60), ('count', 3), False, 0.1778605606005803, 1), 'no'), (('SELECT_AGG_v2', ('continents', '*', 59), ('count', 3), False, 0.17244002810668305, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.9425066709518433, 3), 'no'), (('SELECT_AGG_v2', ('countries', 'continent', 40), ('none_agg', 0), False, 0.05105648934841155, 3), 'no'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.00548173440620303, 3), 'no'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.0007958875503391025, 3), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.9238671064376831, 5), 'no'), (('GROUP_COL', ('countries', 'continent', 40), 0.05722353979945183, 5), 'no'), (('GROUP_COL', ('countries', 'countryid', 38), 0.01831568032503128, 5), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.00019446021178737283, 5), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9955103397369385, 5), 'no'), (('WHERE_COL', ('model_list', 'maker', 46), 0.004294816870242357, 5), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.0001134314588853158, 5), 'no'), (('WHERE_COL', ('countries', 'continent', 40), 3.042189564439468e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 765
    },
    {
        "nl": "How many cars has over 6 cylinders ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.cylinders > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 18, False], None], 6.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.cylinders",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 53, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.8607140475126354, 1), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.9832133054733276, 3), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9987202882766724, 4), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9968520998954773, 5)]",
        "logprob": "-0.9638817851315976",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.8607140475126354, 1), 'yes'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.9832133054733276, 3), 'yes'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9987202882766724, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9968520998954773, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.8607140475126354, 1), 'yes'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.9832133054733276, 3), 'yes'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9987202882766724, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9968520998954773, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 766
    },
    {
        "nl": "What is the number of carsw ith over 6 cylinders ?",
        "true_sql": "select count ( cars_data.* ) where cars_data.cylinders > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 18, False], None], 6.0, None]], 'extracted_clause_asterisk': {'select': 'cars_data.*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "cars_data.*",
            ")",
            "where",
            "cars_data.cylinders",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 53, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.9778770295622506, 1), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.6173533797264099, 3), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9994157552719116, 4), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9995959401130676, 5)]",
        "logprob": "-1.3412529903250956",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.9778770295622506, 1), 'yes'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.6173533797264099, 3), 'yes'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9994157552719116, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9995959401130676, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', '*', 64), ('count', 3), False, 0.9778770295622506, 1), 'yes'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.6173533797264099, 3), 'yes'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('>', 1), 0.9994157552719116, 4), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('>', 1), 'terminal', 0.9995959401130676, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 767
    },
    {
        "nl": "For the cars with 4 cylinders , which model has the largest horsepower ?",
        "true_sql": "select car_names.model where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.model",
            "order_by",
            "cars_data.horsepower",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 11, [55], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.0009470351506024602, 1), ('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9999901056289673, 3), ('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.9967760443687439, 4), ('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999709129333496, 5)]",
        "logprob": "-7.051342586668047",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9962809681892395, 1), 'no'), (('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9999901056289673, 3), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.9967760443687439, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999709129333496, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9962809681892395, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.002766938880085946, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.0009470351506024602, 1), 'yes'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 4.076835011801451e-06, 1), 'no'), (('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9999901056289673, 3), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.9967760443687439, 4), 'yes'), (('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9999709129333496, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 768
    },
    {
        "nl": "For all of the 4 cylinder cars , which model has the most horsepower ?",
        "true_sql": "select car_names.model where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]], 'table_units': [['table_unit', 4], ['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'select': [False, [[0, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.model",
            ",",
            "avg",
            "(",
            "cars_data.horsepower",
            ")",
            "where",
            "cars_data.cylinders",
            "=",
            "value",
            "order_by",
            "cars_data.horsepower",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [17, 5, 55, 4], 6, 53, [7], 3, 11, [55], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.04998679459095001, 1), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('avg', 5), False, 0.29851336648160803, 3), ('WHERE_COL', ('cars_data', 'cylinders', 53), 0.01762358285486698, 5), ('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.8328619599342346, 6), ('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.9699670672416687, 7), ('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9959169030189514, 9), ('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.9941856265068054, 10), ('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9997336268424988, 11)]",
        "logprob": "-21.553294420714288",
        "q_counter": 10,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4,
            5,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9272907972335815, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8460336019997611, 3), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9953327775001526, 5), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9583229422569275, 5), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.8328619599342346, 6), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.9699670672416687, 7), 'yes'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9958707690238953, 9), 'no'), (('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9959169030189514, 9), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.9941856265068054, 10), 'yes'), (('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9997336268424988, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.9272907972335815, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.04998679459095001, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.016172638162970546, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.27826761205695477, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.8460336019997611, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('count', 3), False, 0.6556853581697172, 3), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('sum', 4), False, 0.4956328702773741, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.32541379568301343, 3), 'no'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9953327775001526, 5), 'no'), (('GROUP_COL', ('car_names', 'model', 49), 0.0031120912171900272, 5), 'no'), (('GROUP_COL', ('model_list', 'model', 47), 0.001553808688186109, 5), 'no'), (('GROUP_COL', ('cars_data', 'id', 51), 1.0679592605811195e-06, 5), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9583229422569275, 5), 'no'), (('WHERE_COL', ('model_list', 'model', 47), 0.018890276551246643, 5), 'no'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.01762358285486698, 5), 'yes'), (('WHERE_COL', ('car_names', 'model', 49), 0.005050208885222673, 5), 'no'), (('WHERE_OP', (('cars_data', 'cylinders', 53),), ('=', 0), 0.8328619599342346, 6), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'cylinders', 53),), ('=', 0), 'terminal', 0.9699670672416687, 7), 'yes'), (('GROUP_COL', ('cars_data', 'cylinders', 53), 0.9958707690238953, 9), 'no'), (('GROUP_COL', ('car_names', 'model', 49), 0.002692711539566517, 9), 'no'), (('GROUP_COL', ('model_list', 'model', 47), 0.0014345769304782152, 9), 'no'), (('GROUP_COL', ('cars_data', 'id', 51), 1.6082295815067482e-06, 9), 'no'), (('ORDER_AGG_v2', ('cars_data', 'horsepower', 55), ('none_agg', 0), False, 0.9959169030189514, 9), 'yes'), (('ORDER_DESC_ASC', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'desc', 0.9941856265068054, 10), 'yes'), (('ORDER_LIMIT', (('cars_data', 'horsepower', 55), ('none_agg', 0), False), 'limit_value', 0.9997336268424988, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 769
    },
    {
        "nl": "Among the cars with more than lowest horsepower , which ones do not have more than 3 cylinders ? List the car makeid and make name .",
        "true_sql": "select car_names.makeid , car_names.make where cars_data.horsepower > ( select min ( cars_data.horsepower ) ) and cars_data.cylinders < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 20, False], None]]]], 'union': None, 'where': []}, None], 'and', [False, 6, [0, [0, 18, False], None], 3.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.makeid",
            ",",
            "car_names.make",
            "where",
            "cars_data.horsepower",
            ">",
            "(",
            "select",
            "min",
            "(",
            "cars_data.horsepower",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [48], 8, [50], 6, 55, [14], 5, 2, [26, 5, 55, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('none_agg', 0), False, 0.01410665828734636, 1), ('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.4807465970516205, 3), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.4400092661380768, 5), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9977491497993469, 6), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'root', 0.4200335741043091, 7), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.9786984983373213, 9), ('O', '##END_NESTED##', 0.9905419945716858, 10)]",
        "logprob": "-6.7816609832618715",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.8333166837692261, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.4807465970516205, 3), 'yes'), (('WHERE_COL', ('car_names', 'make', 50), 0.5420522689819336, 5), 'no'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9977491497993469, 6), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.5793954133987427, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.9786984983373213, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.8333166837692261, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('none_agg', 0), False, 0.056436859071254716, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 0.03534120693802834, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.020929727703332904, 1), 'no'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.4807465970516205, 3), 'yes'), (('WHERE_COL', ('car_names', 'make', 50), 0.5420522689819336, 5), 'no'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.4400092661380768, 5), 'yes'), (('WHERE_COL', ('cars_data', 'cylinders', 53), 0.012060731649398804, 5), 'yes'), (('WHERE_COL', ('car_names', 'makeid', 48), 0.005318002309650183, 5), 'no'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.9977491497993469, 6), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.5793954133987427, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.9786984983373213, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 770
    },
    {
        "nl": "Among the cars that do not have the minimum horsepower , what are the make ids and names of al those with less than 4 cylinders ?",
        "true_sql": "select car_names.makeid , car_names.make where cars_data.horsepower > ( select min ( cars_data.horsepower ) ) and cars_data.cylinders < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 13, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 20, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 20, False], None]]]], 'union': None, 'where': []}, None], 'and', [False, 6, [0, [0, 18, False], None], 3.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_names.makeid",
            ",",
            "car_names.make",
            "where",
            "cars_data.horsepower",
            ">",
            "(",
            "select",
            "min",
            "(",
            "cars_data.horsepower",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [48], 8, [50], 6, 55, [14], 5, 2, [26, 5, 55, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('none_agg', 0), False, 0.9979532957077026, 1), ('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.853042721748352, 3), ('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9501070380210876, 5), ('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.003607395803555846, 6), ('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'root', 0.02203998528420925, 7), ('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.9959723409616512, 9), ('O', '##END_NESTED##', 0.9982660412788391, 10)]",
        "logprob": "-9.676885752323443",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('none_agg', 0), False, 0.9979532957077026, 1), 'yes'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.853042721748352, 3), 'yes'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9501070380210876, 5), 'yes'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('<', 2), 0.9906824827194214, 6), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.976574718952179, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.9959723409616512, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_names', 'makeid', 48), ('none_agg', 0), False, 0.9979532957077026, 1), 'yes'), (('SELECT_AGG_v2', ('car_names', 'make', 50), ('none_agg', 0), False, 0.853042721748352, 3), 'yes'), (('WHERE_COL', ('cars_data', 'horsepower', 55), 0.9501070380210876, 5), 'yes'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('<', 2), 0.9906824827194214, 6), 'no'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('<=', 4), 0.08039173949355001, 6), 'no'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('>', 1), 0.003607395803555846, 6), 'yes'), (('WHERE_OP', (('cars_data', 'horsepower', 55),), ('between', 9), 0.0012023563031107187, 6), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'horsepower', 55),), ('>', 1), 'terminal', 0.976574718952179, 7), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.9959723409616512, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 771
    },
    {
        "nl": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "true_sql": "select cars_data.mpg where cars_data.cylinders = value or cars_data.year < value order_by cars_data.mpg desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 8.0, None], 'or', [False, 4, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "cars_data.horsepower",
            ")",
            "where",
            "cars_data.year",
            "<",
            "value",
            "or",
            "cars_data.year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 55, 4], 6, 58, [21], 3, 25, 58, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('min', 2), False, 0.15670061590312243, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.7455185055732727, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.33903130888938904, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9294339418411255, 5), ('WHERE_COL', ('cars_data', 'year', 58), 0.9999719858169556, 7), ('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.839289665222168, 8), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9864203929901123, 9)]",
        "logprob": "-9.770841971959582",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9576854250915912, 1), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.7455185055732727, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.6378583908081055, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9294339418411255, 5), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9999719858169556, 7), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.839289665222168, 8), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9864203929901123, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.9576854250915912, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('max', 1), False, 0.6237587739905237, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', '*', 61), ('max', 1), False, 0.2627319764891328, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('sum', 4), False, 0.16343208601377412, 1), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.7455185055732727, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.6378583908081055, 4), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.33903130888938904, 4), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<=', 4), 0.15265639504534576, 4), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('between', 9), 0.01952475868165493, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9294339418411255, 5), 'yes'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9999719858169556, 7), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.839289665222168, 8), 'yes'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.9864203929901123, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 772
    },
    {
        "nl": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "true_sql": "select cars_data.mpg where cars_data.cylinders = value or cars_data.year < value order_by cars_data.mpg desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 17, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 18, False], None], 8.0, None], 'or', [False, 4, [0, [0, 23, False], None], 1980.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "cars_data.mpg",
            ")",
            "where",
            "cars_data.year",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 52, 4], 6, 58, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('sum', 4), False, 0.178094048072121, 1), ('WHERE_COL', ('cars_data', 'year', 58), 0.9270387887954712, 3), ('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.15755628049373627, 4), ('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.7214275002479553, 5)]",
        "logprob": "-9.159710685473366",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('max', 1), False, 0.9790256635421307, 1), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9270387887954712, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.834526538848877, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.7214275002479553, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('cars_data', 'mpg', 52), ('max', 1), False, 0.9790256635421307, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'horsepower', 55), ('max', 1), False, 0.4845637685888057, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('max', 1), False, 0.38015078746547576, 1), 'no'), (('SELECT_AGG_v2', ('cars_data', 'cylinders', 53), ('none_agg', 0), False, 0.0011503077112138267, 1), 'no'), (('WHERE_COL', ('cars_data', 'year', 58), 0.9270387887954712, 3), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('>', 1), 0.834526538848877, 4), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<', 2), 0.15755628049373627, 4), 'yes'), (('WHERE_OP', (('cars_data', 'year', 58),), ('<=', 4), 0.2081193327601652, 4), 'no'), (('WHERE_OP', (('cars_data', 'year', 58),), ('not in', 7), 0.074710629403845, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'year', 58),), ('<', 2), 'terminal', 0.7214275002479553, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 773
    },
    {
        "nl": "Which models are lighter than 3500 but not built by the 'Ford Motor Company ' ?",
        "true_sql": "select distinct model_list.model where cars_data.weight < value and car_makers.fullname != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 21, False], None], 3500.0, None], 'and', [False, 7, [0, [0, 8, False], None], '\"Ford Motor Company\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "model_list.model",
            "where",
            "cars_data.weight",
            "<",
            "value",
            "and",
            "cars_data.weight",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 56, [21], 3, 16, 56, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9795312881469727, 1), ('WHERE_COL', ('cars_data', 'weight', 56), 0.48351454734802246, 3), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.2988959848880768, 4), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9998785257339478, 5), ('WHERE_COL', ('cars_data', 'weight', 56), 0.9126061201095581, 7), ('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.0556008517742157, 8), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9839283227920532, 9)]",
        "logprob": "-5.77825766659374",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9795312881469727, 1), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.48351454734802246, 3), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.6925939321517944, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9998785257339478, 5), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9126061201095581, 7), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9383449554443359, 8), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9839283227920532, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.9795312881469727, 1), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.48351454734802246, 3), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.6925939321517944, 4), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.2988959848880768, 4), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('between', 9), 0.0029506487771868706, 4), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('like', 6), 0.0011916900984942913, 4), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9998785257339478, 5), 'yes'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.9126061201095581, 7), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.9383449554443359, 8), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('<', 2), 0.0556008517742157, 8), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.005290468689054251, 8), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>=', 3), 0.06928604819818787, 8), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('<', 2), 'terminal', 0.9839283227920532, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 774
    },
    {
        "nl": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company ?",
        "true_sql": "select distinct model_list.model where cars_data.weight < value and car_makers.fullname != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 21, False], None], 3500.0, None], 'and', [False, 7, [0, [0, 8, False], None], '\"Ford Motor Company\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "model_list.model",
            "where",
            "cars_data.weight",
            "=",
            "(",
            "select",
            "distinct",
            "car_names.model",
            "where",
            "cars_data.weight",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [47], 6, 56, [7], 5, 2, 15, [49], 6, 56, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.17334873974323273, 2), ('WHERE_COL', ('cars_data', 'weight', 56), 0.49864867329597473, 4), ('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.5477142930030823, 5), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('=', 0), 'root', 2.960196297863149e-06, 6), ('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.6505054235458374, 9), ('WHERE_COL', ('cars_data', 'weight', 56), 0.3967558443546295, 11), ('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.997829258441925, 12), ('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('=', 0), 'terminal', 0.9999912977218628, 13), ('O', '##END_NESTED##', 0.966632068157196, 14)]",
        "logprob": "-17.531349350638017",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.8262122273445129, 2), 'no'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.49864867329597473, 4), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.5477142930030823, 5), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('=', 0), 'terminal', 0.9999963045120239, 6), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.6505054235458374, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.8262122273445129, 2), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.17334873974323273, 2), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.00019684829749166952, 2), 'no'), (('SELECT_AGG_v2', ('car_makers', 'fullname', 43), ('none_agg', 0), False, 6.833325460320341e-05, 2), 'no'), (('WHERE_COL', ('cars_data', 'weight', 56), 0.49864867329597473, 4), 'yes'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('=', 0), 0.5477142930030823, 5), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('>', 1), 0.3587811291217804, 5), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('!=', 5), 0.04150219261646271, 5), 'no'), (('WHERE_OP', (('cars_data', 'weight', 56),), ('not in', 7), 0.11332510845844718, 5), 'no'), (('WHERE_ROOT_TERM', (('cars_data', 'weight', 56),), ('=', 0), 'terminal', 0.9999963045120239, 6), 'no'), (('SELECT_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.6505054235458374, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 775
    },
    {
        "nl": "What are the name of the countries where there is not a single car maker ?",
        "true_sql": "select countries.countryname except select countries.countryname",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            "except",
            "select",
            "countries.countryname",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 28, 2, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9999995231628418, 1), ('IUEN_v2', ('except', 3), 0.14008072018623352, 2), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.4786032736301422, 4)]",
        "logprob": "-5.515851036067057",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('WHERE_COL', ('countries', 'countryid', 38), 0.7568261623382568, 3), 'no'), (('IUEN_v2', ('except', 3), 0.14008072018623352, 2), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.5199531316757202, 4), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9920487999916077, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9999995231628418, 1), 'yes'), (('WHERE_COL', ('countries', 'countryid', 38), 0.7568261623382568, 3), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.24153010547161102, 3), 'no'), (('WHERE_COL', ('countries', 'continent', 40), 0.0009372031199745834, 3), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.0004443911893758923, 3), 'no'), (('IUEN_v2', ('except', 3), 0.14008072018623352, 2), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.5199531316757202, 4), 'no'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.4786032736301422, 4), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.0008901390829123558, 4), 'no'), (('SELECT_AGG_v2', ('continents', 'continent', 37), ('none_agg', 0), False, 0.0004599924141075461, 4), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9920487999916077, 6), 'no'), (('WHERE_COL', ('countries', 'countryid', 38), 0.007528267800807953, 6), 'no'), (('WHERE_COL', ('car_names', 'make', 50), 0.00013584044063463807, 6), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 7.912885484984145e-05, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 776
    },
    {
        "nl": "What are the names of the countries with no car makers ?",
        "true_sql": "select countries.countryname except select countries.countryname",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            "except",
            "select",
            "countries.countryname",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 28, 2, [39], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9263839721679688, 1), ('IUEN_v2', ('except', 3), 0.3745746612548828, 2), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.5877261757850647, 4)]",
        "logprob": "-4.453700663060168",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9263839721679688, 1), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.5408210754394531, 3), 'no'), (('IUEN_v2', ('except', 3), 0.3745746612548828, 2), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.5877261757850647, 4), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9971389770507812, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9263839721679688, 1), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.5408210754394531, 3), 'no'), (('WHERE_COL', ('countries', 'countryid', 38), 0.45357486605644226, 3), 'no'), (('WHERE_COL', ('car_makers', 'id', 41), 0.005341263487935066, 3), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 0.00024106839555315673, 3), 'no'), (('IUEN_v2', ('except', 3), 0.3745746612548828, 2), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.5877261757850647, 4), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.9971389770507812, 6), 'no'), (('WHERE_COL', ('countries', 'countryid', 38), 0.002703463425859809, 6), 'no'), (('WHERE_COL', ('car_makers', 'id', 41), 0.00013766565825790167, 6), 'no'), (('WHERE_COL', ('countries', 'countryname', 39), 1.0924260095634963e-05, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 777
    },
    {
        "nl": "Which are the car makers which produce at least 2 models and more than 3 car makes ? List the id and the maker .",
        "true_sql": "select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > = value intersect select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_makers.maker",
            ",",
            "car_makers.maker",
            "group_by",
            "car_makers.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [42], 10, 41, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.02929141372442245, 1), ('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.03815295547246933, 3), ('GROUP_COL', ('car_makers', 'id', 41), 0.002777625108137727, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 1.0, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9486521475164691, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999872446060181, 9)]",
        "logprob": "-23.476556649470876",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.9704702496528625, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.03815295547246933, 3), 'yes'), (('GROUP_COL', ('model_list', 'maker', 46), 0.5062956213951111, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9997788692695234, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9486521475164691, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999872446060181, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('model_list', 'maker', 46), ('none_agg', 0), False, 0.9704702496528625, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.02929141372442245, 1), 'yes'), (('SELECT_AGG_v2', ('model_list', 'modelid', 45), ('none_agg', 0), False, 8.464122947771109e-05, 1), 'no'), (('SELECT_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 6.785745790693912e-05, 1), 'no'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.03815295547246933, 3), 'yes'), (('GROUP_COL', ('model_list', 'maker', 46), 0.5062956213951111, 5), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.45206335186958313, 5), 'no'), (('GROUP_COL', ('cars_data', 'id', 51), 0.031061872839927673, 5), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.006377139128744602, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9997788692695234, 7), 'no'), (('HAV_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.16164489787582262, 7), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('avg', 5), False, 0.09556085776127415, 7), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.06957354881380222, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9486521475164691, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999872446060181, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 778
    },
    {
        "nl": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars ?",
        "true_sql": "select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > = value intersect select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': []}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "car_makers.maker",
            ",",
            "car_makers.maker",
            "group_by",
            "car_makers.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [42], 10, 41, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.6170806288719177, 1), ('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.6250389814376831, 3), ('GROUP_COL', ('car_makers', 'id', 41), 0.21768589317798615, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.05568189048206116, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9056136339431025, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999854564666748, 9)]",
        "logprob": "-14.26051201165194",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.6170806288719177, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.6250389814376831, 3), 'yes'), (('GROUP_COL', ('cars_data', 'id', 51), 0.33363625407218933, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9999487376971131, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9056136339431025, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999854564666748, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.6170806288719177, 1), 'yes'), (('SELECT_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.6250389814376831, 3), 'yes'), (('GROUP_COL', ('cars_data', 'id', 51), 0.33363625407218933, 5), 'no'), (('GROUP_COL', ('car_makers', 'maker', 42), 0.3081613779067993, 5), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.21768589317798615, 5), 'yes'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.12859217822551727, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.9999487376971131, 7), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('avg', 5), False, 0.09973288343614484, 7), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('sum', 4), False, 0.06399259620181802, 7), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('max', 1), False, 0.06135408010090644, 7), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9056136339431025, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999854564666748, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 779
    },
    {
        "nl": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat ' model ?",
        "true_sql": "select countries.countryid , countries.countryname group_by countries.countryid having count ( * ) > value union select countries.countryid , countries.countryname where model_list.model = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"fiat\"', None]]}, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryname",
            "union",
            "select",
            "countries.countryid",
            "where",
            "model_list.model",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [39], 31, 2, [38], 6, 47, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.8827337026596069, 1), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9603562355041504, 3), ('IUEN_v2', ('union', 2), 8.748489044307917e-09, 4), ('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.052974380552768714, 6), ('WHERE_COL', ('model_list', 'model', 47), 0.02772437036037445, 8), ('WHERE_OP', (('model_list', 'model', 47),), ('=', 0), 0.4373205900192261, 9), ('WHERE_ROOT_TERM', (('model_list', 'model', 47),), ('=', 0), 'terminal', 0.9999985694885254, 10)]",
        "logprob": "-26.66225110952016",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.8827337026596069, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9603562355041504, 3), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.8389826416969299, 5), 'no'), (('ORDER_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.40860721468925476, 5), 'no'), (('IUEN_v2', ('except', 3), 3.371695243004069e-07, 4), 'no'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.38565731048583984, 6), 'no'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.6390686631202698, 8), 'no'), (('WHERE_OP', (('model_list', 'model', 47),), ('>', 1), 0.562492311000824, 9), 'no'), (('WHERE_ROOT_TERM', (('model_list', 'model', 47),), ('=', 0), 'terminal', 0.9999985694885254, 10), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.8827337026596069, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9603562355041504, 3), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.8389826416969299, 5), 'no'), (('WHERE_COL', ('model_list', 'maker', 46), 0.07670586556196213, 5), 'no'), (('WHERE_COL', ('car_names', 'model', 49), 0.03859463706612587, 5), 'no'), (('WHERE_COL', ('model_list', 'model', 47), 0.03683913126587868, 5), 'no'), (('ORDER_AGG_v2', ('car_makers', 'maker', 42), ('none_agg', 0), False, 0.40860721468925476, 5), 'no'), (('ORDER_AGG_v2', ('model_list', 'model', 47), ('none_agg', 0), False, 0.24992002546787265, 5), 'no'), (('ORDER_AGG_v2', ('car_names', 'model', 49), ('none_agg', 0), False, 0.2002017945051193, 5), 'no'), (('ORDER_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.04730089008808137, 5), 'no'), (('IUEN_v2', ('except', 3), 3.371695243004069e-07, 4), 'no'), (('IUEN_v2', ('union', 2), 8.748489044307917e-09, 4), 'yes'), (('IUEN_v2', ('intersect', 1), 1.6128404167758958e-10, 4), 'no'), (('SELECT_AGG_v2', ('cars_data', 'id', 51), ('none_agg', 0), False, 0.38565731048583984, 6), 'no'), (('SELECT_AGG_v2', ('car_makers', 'id', 41), ('none_agg', 0), False, 0.1810484379529953, 6), 'no'), (('SELECT_AGG_v2', ('car_makers', 'country', 44), ('none_agg', 0), False, 0.17665538191795346, 6), 'no'), (('SELECT_AGG_v2', ('countries', 'countryid', 38), ('none_agg', 0), False, 0.052974380552768714, 6), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.6390686631202698, 8), 'no'), (('WHERE_COL', ('model_list', 'maker', 46), 0.28888657689094543, 8), 'no'), (('WHERE_COL', ('car_names', 'model', 49), 0.03248003497719765, 8), 'no'), (('WHERE_COL', ('model_list', 'model', 47), 0.02772437036037445, 8), 'yes'), (('WHERE_OP', (('model_list', 'model', 47),), ('>', 1), 0.562492311000824, 9), 'no'), (('WHERE_OP', (('model_list', 'model', 47),), ('=', 0), 0.4373205900192261, 9), 'yes'), (('WHERE_OP', (('model_list', 'model', 47),), ('not in', 7), 0.008567859286915213, 9), 'no'), (('WHERE_OP', (('model_list', 'model', 47),), ('<', 2), 6.12347575952299e-05, 9), 'no'), (('WHERE_ROOT_TERM', (('model_list', 'model', 47),), ('=', 0), 'terminal', 0.9999985694885254, 10), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 780
    },
    {
        "nl": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats ?",
        "true_sql": "select countries.countryid , countries.countryname group_by countries.countryid having count ( * ) > value union select countries.countryid , countries.countryname where model_list.model = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"fiat\"', None]]}, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'continents.contid': 1, 'continents.continent': 2, 'countries.countryid': 3, 'countries.countryname': 4, 'countries.continent': 5, 'car_makers.id': 6, 'car_makers.maker': 7, 'car_makers.fullname': 8, 'car_makers.country': 9, 'model_list.modelid': 10, 'model_list.maker': 11, 'model_list.model': 12, 'car_names.makeid': 13, 'car_names.model': 14, 'car_names.make': 15, 'cars_data.id': 16, 'cars_data.mpg': 17, 'cars_data.cylinders': 18, 'cars_data.edispl': 19, 'cars_data.horsepower': 20, 'cars_data.weight': 21, 'cars_data.accelerate': 22, 'cars_data.year': 23, 'continents.*': 24, 'countries.*': 25, 'car_makers.*': 26, 'model_list.*': 27, 'car_names.*': 28, 'cars_data.*': 29}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryname",
            "group_by",
            "model_list.maker",
            "having",
            "sum",
            "(",
            "car_makers.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 8, [39], 10, 46, 18, [24, 5, 61, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.942523181438446, 1), ('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9944455027580261, 3), ('GROUP_COL', ('model_list', 'maker', 46), 0.00041874792077578604, 5), ('HAV_AGG_v2', ('car_makers', '*', 61), ('sum', 4), False, 0.08239884215323098, 7), ('HAV_OP_v2', (('car_makers', '*', 61), ('sum', 4), False), ('>', 1), 0.9990799427032471, 8), ('HAV_ROOT_TERM_v2', (('car_makers', '*', 61), ('sum', 4), False), ('>', 1), 'terminal', 0.9759564399719238, 9)]",
        "logprob": "-22.6588284616105",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.942523181438446, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9944455027580261, 3), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.8731172680854797, 5), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.6977176070213318, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.999612460293425, 7), 'no'), (('HAV_OP_v2', (('car_makers', '*', 61), ('sum', 4), False), ('>', 1), 0.9990799427032471, 8), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.942523181438446, 1), 'yes'), (('SELECT_AGG_v2', ('countries', 'countryname', 39), ('none_agg', 0), False, 0.9944455027580261, 3), 'yes'), (('WHERE_COL', ('car_makers', 'maker', 42), 0.8731172680854797, 5), 'no'), (('WHERE_COL', ('car_names', 'model', 49), 0.031570639461278915, 5), 'no'), (('WHERE_COL', ('model_list', 'maker', 46), 0.026256129145622253, 5), 'no'), (('WHERE_COL', ('countries', 'continent', 40), 0.0225972943007946, 5), 'no'), (('GROUP_COL', ('car_makers', 'id', 41), 0.6977176070213318, 5), 'no'), (('GROUP_COL', ('car_makers', 'country', 44), 0.2564704120159149, 5), 'no'), (('GROUP_COL', ('cars_data', 'id', 51), 0.041184913367033005, 5), 'no'), (('GROUP_COL', ('car_names', 'makeid', 48), 0.0038139522075653076, 5), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('count', 3), False, 0.999612460293425, 7), 'no'), (('HAV_AGG_v2', ('car_names', '*', 63), ('count', 3), False, 0.18109154780116285, 7), 'no'), (('HAV_AGG_v2', ('car_makers', '*', 61), ('avg', 5), False, 0.11839955829685501, 7), 'no'), (('HAV_AGG_v2', ('model_list', '*', 62), ('count', 3), False, 0.08991123493771135, 7), 'no'), (('HAV_OP_v2', (('car_makers', '*', 61), ('sum', 4), False), ('>', 1), 0.9990799427032471, 8), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 781
    },
    {
        "nl": "What are the names of all the countries that became independent after 1950 ?",
        "true_sql": "select country.name where country.indepyear > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 1950.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.indepyear",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999268054962158, 1), ('WHERE_COL', ('country', 'indepyear', 48), 0.07187509536743164, 3), ('WHERE_OP', (('country', 'indepyear', 48),), ('>', 1), 0.12445292621850967, 4), ('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('>', 1), 'terminal', 0.9999700784683228, 5)]",
        "logprob": "-4.818297451799202",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999268054962158, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.5204207301139832, 3), 'no'), (('WHERE_OP', (('country', 'indepyear', 48),), ('=', 0), 0.869600236415863, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('>', 1), 'terminal', 0.9999700784683228, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999268054962158, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.5204207301139832, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.2805296778678894, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.12179791182279587, 3), 'no'), (('WHERE_COL', ('country', 'indepyear', 48), 0.07187509536743164, 3), 'yes'), (('WHERE_OP', (('country', 'indepyear', 48),), ('=', 0), 0.869600236415863, 4), 'no'), (('WHERE_OP', (('country', 'indepyear', 48),), ('>', 1), 0.12445292621850967, 4), 'yes'), (('WHERE_OP', (('country', 'indepyear', 48),), ('in', 8), 0.0033153609838336706, 4), 'no'), (('WHERE_OP', (('country', 'indepyear', 48),), ('not in', 7), 0.03550544768561873, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('>', 1), 'terminal', 0.9999700784683228, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 782
    },
    {
        "nl": "Give the names of the nations that were founded after 1950 .",
        "true_sql": "select country.name where country.indepyear > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 13, False], None], 1950.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.indepyear",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 48, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9998515844345093, 1), ('WHERE_COL', ('country', 'indepyear', 48), 1.0, 3), ('WHERE_OP', (('country', 'indepyear', 48),), ('>', 1), 0.9985865354537964, 4), ('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('>', 1), 'terminal', 0.9999958276748657, 5)]",
        "logprob": "-2.3237196978833845",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9998515844345093, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.6663854122161865, 3), 'no'), (('WHERE_OP', (('country', 'indepyear', 48),), ('>', 1), 0.9985865354537964, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('>', 1), 'terminal', 0.9999958276748657, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9998515844345093, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.6663854122161865, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 0.19051773846149445, 3), 'no'), (('WHERE_COL', ('country', 'indepyear', 48), 0.10389136523008347, 3), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.036422934383153915, 3), 'no'), (('WHERE_OP', (('country', 'indepyear', 48),), ('>', 1), 0.9985865354537964, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('>', 1), 'terminal', 0.9999958276748657, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 783
    },
    {
        "nl": "How many countries have a republic as their form of government ?",
        "true_sql": "select count ( country.* ) where country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {'select': 'country.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9984290807849666, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9998375177383423, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.999988317489624, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999996423721313, 5)]",
        "logprob": "-0.007424129851076127",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9984290807849666, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9998375177383423, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.999988317489624, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999996423721313, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9984290807849666, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9998375177383423, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.999988317489624, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999996423721313, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 784
    },
    {
        "nl": "How many countries have governments that are republics ?",
        "true_sql": "select count ( country.* ) where country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {'select': 'country.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9993360241122116, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.7756474018096924, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9973347187042236, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-0.8806242791034087",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9993360241122116, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.7756474018096924, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9973347187042236, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9993360241122116, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.7756474018096924, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9973347187042236, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 785
    },
    {
        "nl": "What is the total surface area of the countries in the Caribbean region ?",
        "true_sql": "select sum ( country.surfacearea ) where country.region = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Caribbean\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.999932119647491, 1), ('WHERE_COL', ('country', 'region', 46), 0.9990047812461853, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999963045120239, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999980926513672, 5)]",
        "logprob": "-0.0016876333816121985",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.999932119647491, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9990047812461853, 3), 'yes'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999963045120239, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999980926513672, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.999932119647491, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9990047812461853, 3), 'yes'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999963045120239, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999980926513672, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 786
    },
    {
        "nl": "How much surface area do the countires in the Carribean cover together ?",
        "true_sql": "select sum ( country.surfacearea ) where country.region = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Caribbean\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9797448066196036, 1), ('WHERE_COL', ('country', 'region', 46), 1.0, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999871253967285, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999988079071045, 5)]",
        "logprob": "-5.287520363195468",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9797448066196036, 1), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9676253199577332, 3), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999871253967285, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9797448066196036, 1), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9676253199577332, 3), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.011472280137240887, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.005509809125214815, 3), 'yes'), (('WHERE_COL', ('city', 'name', 37), 0.004450072068721056, 3), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999871253967285, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 787
    },
    {
        "nl": "Which continent is Anguilla in ?",
        "true_sql": "select country.continent where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Anguilla\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.continent",
            "where",
            "country.name",
            "=",
            "value",
            "and",
            "country.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 44, [7], 3, 16, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('country', 'name', 44), 3.5781151382252574e-05, 3), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999911785125732, 4), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('WHERE_COL', ('country', 'name', 44), 0.004189081955701113, 7), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999725818634033, 8), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.999911904335022, 9)]",
        "logprob": "-15.765436158434351",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9999630451202393, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999911785125732, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('WHERE_COL', ('city', 'name', 37), 0.2238444685935974, 7), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999725818634033, 8), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.999911904335022, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9999630451202393, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 3.5781151382252574e-05, 3), 'yes'), (('WHERE_COL', ('country', 'localname', 53), 8.684837098371645e-07, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 1.2649813641019136e-07, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999911785125732, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('WHERE_COL', ('city', 'name', 37), 0.2238444685935974, 7), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.16003592312335968, 7), 'no'), (('WHERE_COL', ('city', 'district', 39), 0.051908064633607864, 7), 'no'), (('WHERE_COL', ('country', 'name', 44), 0.004189081955701113, 7), 'yes'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999725818634033, 8), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.999911904335022, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 788
    },
    {
        "nl": "What is the continent name which Anguilla belongs to ?",
        "true_sql": "select country.continent where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Anguilla\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.continent",
            "where",
            "country.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9999977350234985, 1), ('WHERE_COL', ('country', 'name', 44), 1.0, 3), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999947547912598, 4), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-10.834081244265944",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9999977350234985, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.999976634979248, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999947547912598, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9999977350234985, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.999976634979248, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 1.9735109162866138e-05, 3), 'yes'), (('WHERE_COL', ('country', 'localname', 53), 3.5875445973942988e-06, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 6.676443575770463e-08, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999947547912598, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 789
    },
    {
        "nl": "Which region is the city Kabul located in ?",
        "true_sql": "select country.region where city.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kabul\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.region",
            "where",
            "city.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.99396812915802, 1), ('WHERE_COL', ('city', 'name', 37), 1.0, 3), ('WHERE_OP', (('city', 'name', 37),), ('=', 0), 0.999998927116394, 4), ('WHERE_ROOT_TERM', (('city', 'name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-9.344298809240424",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.99396812915802, 1), 'yes'), (('WHERE_COL', ('city', 'district', 39), 0.9998811483383179, 3), 'no'), (('WHERE_OP', (('city', 'name', 37),), ('=', 0), 0.999998927116394, 4), 'yes'), (('WHERE_ROOT_TERM', (('city', 'name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.99396812915802, 1), 'yes'), (('WHERE_COL', ('city', 'district', 39), 0.9998811483383179, 3), 'no'), (('WHERE_COL', ('city', 'name', 37), 8.839146175887436e-05, 3), 'yes'), (('WHERE_COL', ('country', 'localname', 53), 2.2502677893498912e-05, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 5.071286068414338e-06, 3), 'no'), (('WHERE_OP', (('city', 'name', 37),), ('=', 0), 0.999998927116394, 4), 'yes'), (('WHERE_ROOT_TERM', (('city', 'name', 37),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 790
    },
    {
        "nl": "What region is Kabul in ?",
        "true_sql": "select country.region where city.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 3, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 2, False], None], '\"Kabul\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.region",
            "where",
            "city.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999569654464722, 1), ('WHERE_COL', ('city', 'name', 37), 1.0, 3), ('WHERE_OP', (('city', 'name', 37),), ('=', 0), 0.9999980926513672, 4), ('WHERE_ROOT_TERM', (('city', 'name', 37),), ('=', 0), 'terminal', 0.9999991655349731, 5)]",
        "logprob": "-6.0281568967274595",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999569654464722, 1), 'yes'), (('WHERE_COL', ('city', 'district', 39), 0.9864446520805359, 3), 'no'), (('WHERE_OP', (('city', 'name', 37),), ('=', 0), 0.9999980926513672, 4), 'yes'), (('WHERE_ROOT_TERM', (('city', 'name', 37),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999569654464722, 1), 'yes'), (('WHERE_COL', ('city', 'district', 39), 0.9864446520805359, 3), 'no'), (('WHERE_COL', ('country', 'localname', 53), 0.006507694721221924, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.004118019249290228, 3), 'no'), (('WHERE_COL', ('city', 'name', 37), 0.0026111097540706396, 3), 'yes'), (('WHERE_OP', (('city', 'name', 37),), ('=', 0), 0.9999980926513672, 4), 'yes'), (('WHERE_ROOT_TERM', (('city', 'name', 37),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 791
    },
    {
        "nl": "Which language is the most popular in Aruba ?",
        "true_sql": "select countrylanguage.language where country.name = value order_by countrylanguage.percentage desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 26, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Aruba\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.population",
            "=",
            "value",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 49, [7], 3, 10, 59, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9991045594215393, 1), ('WHERE_COL', ('country', 'population', 49), 0.00014919735258445144, 3), ('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.9935380816459656, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999005794525146, 5), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9999972581863403, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9820464484151262, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.999697208404541, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999846339225769, 11)]",
        "logprob": "-8.945228909043548",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9991045594215393, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9766163229942322, 3), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.9935380816459656, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999005794525146, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9991045594215393, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9766163229942322, 3), 'no'), (('WHERE_COL', ('city', 'district', 39), 0.02246951125562191, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.0005380756338126957, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.00015726478886790574, 3), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.9935380816459656, 4), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.005878254771232605, 4), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('in', 8), 0.00015668096602894366, 4), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('between', 9), 1.0827959158632439e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999005794525146, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 792
    },
    {
        "nl": "What language is predominantly spoken in Aruba ?",
        "true_sql": "select countrylanguage.language where country.name = value order_by countrylanguage.percentage desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 26, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Aruba\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.99982088804245, 1), ('WHERE_COL', ('country', 'name', 44), 1.0, 3), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999971389770508, 4), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-13.987945192996532",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.99982088804245, 1), 'yes'), (('WHERE_COL', ('city', 'district', 39), 0.6928921937942505, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999971389770508, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.99982088804245, 1), 'yes'), (('WHERE_COL', ('city', 'district', 39), 0.6928921937942505, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.30706584453582764, 3), 'no'), (('WHERE_COL', ('city', 'name', 37), 3.9889600884635e-05, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 1.251082153430616e-06, 3), 'yes'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999971389770508, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 793
    },
    {
        "nl": "What are the population and life expectancies in Brazil ?",
        "true_sql": "select country.population , country.lifeexpectancy where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Brazil\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.population",
            ",",
            "country.lifeexpectancy",
            "where",
            "sqlite_sequence.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [50], 6, 41, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.999974250793457, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9993023872375488, 3), ('WHERE_COL', ('sqlite_sequence', 'name', 41), 4.688506123784464e-06, 5), ('WHERE_OP', (('sqlite_sequence', 'name', 41),), ('=', 0), 0.9999955892562866, 6), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'name', 41),), ('=', 0), 'terminal', 0.9999992847442627, 7)]",
        "logprob": "-12.271297069345229",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.999974250793457, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9993023872375488, 3), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9886179566383362, 5), 'no'), (('WHERE_OP', (('sqlite_sequence', 'name', 41),), ('=', 0), 0.9999955892562866, 6), 'no'), (('WHERE_ROOT_TERM', (('sqlite_sequence', 'name', 41),), ('=', 0), 'terminal', 0.9999992847442627, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.999974250793457, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9993023872375488, 3), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9886179566383362, 5), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.011018862947821617, 5), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.0001512686867499724, 5), 'no'), (('WHERE_COL', ('country', 'region', 46), 6.7171531554777175e-06, 5), 'no'), (('WHERE_OP', (('sqlite_sequence', 'name', 41),), ('=', 0), 0.9999955892562866, 6), 'no'), (('WHERE_OP', (('sqlite_sequence', 'name', 41),), ('!=', 5), 1.6956802255663206e-06, 6), 'no'), (('WHERE_OP', (('sqlite_sequence', 'name', 41),), ('>', 1), 1.2204164931972628e-06, 6), 'no'), (('WHERE_OP', (('sqlite_sequence', 'name', 41),), ('like', 6), 5.277511263557244e-07, 6), 'no'), (('WHERE_ROOT_TERM', (('sqlite_sequence', 'name', 41),), ('=', 0), 'terminal', 0.9999992847442627, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 794
    },
    {
        "nl": "Give me Brazil \u2019 s population and life expectancies .",
        "true_sql": "select country.population , country.lifeexpectancy where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Brazil\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.population",
            ",",
            "country.lifeexpectancy",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [50], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999837875366211, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.5507259964942932, 3), ('WHERE_COL', ('country', 'region', 46), 0.00011134010856039822, 5), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999704360961914, 6), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999994039535522, 7)]",
        "logprob": "-9.701682811515994",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999837875366211, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.5507259964942932, 3), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.6191092133522034, 5), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999704360961914, 6), 'no'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999994039535522, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999837875366211, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.5507259964942932, 3), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.6191092133522034, 5), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.2402595728635788, 5), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.14026182889938354, 5), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.00011898389493580908, 5), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999704360961914, 6), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('>', 1), 1.9153581888531335e-05, 6), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('!=', 5), 4.643262855097419e-06, 6), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('like', 6), 1.83590066171746e-06, 6), 'no'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999994039535522, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 795
    },
    {
        "nl": "What are the region and population of Angola ?",
        "true_sql": "select country.population , country.region where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Angola\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.region",
            ",",
            "country.population",
            "where",
            "country.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [49], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999516010284424, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.6780341863632202, 3), ('WHERE_COL', ('country', 'name', 44), 1.0, 5), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999959468841553, 6), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999992847442627, 7)]",
        "logprob": "-8.344429074686113",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999516010284424, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.6780341863632202, 3), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.9940939545631409, 5), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999959468841553, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999992847442627, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999516010284424, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.6780341863632202, 3), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.9940939545631409, 5), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.005047137383371592, 5), 'no'), (('WHERE_COL', ('country', 'name', 44), 0.00035140683758072555, 5), 'yes'), (('WHERE_COL', ('country', 'headofstate', 55), 0.00025133322924375534, 5), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999959468841553, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999992847442627, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 796
    },
    {
        "nl": "What region does Angola belong to and what is its population ?",
        "true_sql": "select country.population , country.region where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Angola\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.region",
            ",",
            "country.region",
            "where",
            "country.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [46], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999960660934448, 1), ('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.3252692222595215, 3), ('WHERE_COL', ('country', 'name', 44), 1.0, 5), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999918937683105, 6), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999996423721313, 7)]",
        "logprob": "-9.107614139543779",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999960660934448, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.3252692222595215, 3), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.9918708801269531, 5), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999918937683105, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999996423721313, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999960660934448, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.3252692222595215, 3), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.9918708801269531, 5), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.00761153269559145, 5), 'no'), (('WHERE_COL', ('country', 'name', 44), 0.00034741367562673986, 5), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.00011419301881687716, 5), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999918937683105, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999996423721313, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 797
    },
    {
        "nl": "What is the average expected life expectancy for countries in the region of Central Africa ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.region = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Central Africa\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9998512523217986, 1), ('WHERE_COL', ('country', 'region', 46), 0.9975563287734985, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999581575393677, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999959468841553, 5)]",
        "logprob": "-0.11608718146516682",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9998512523217986, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9975563287734985, 3), 'yes'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999581575393677, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999959468841553, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9998512523217986, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9975563287734985, 3), 'yes'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999581575393677, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999959468841553, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 798
    },
    {
        "nl": "How long is the people \u2019 s average life expectancy in Central Africa ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.region = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Central Africa\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.region",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9931063156945279, 1), ('WHERE_COL', ('country', 'region', 46), 0.9881277680397034, 3), ('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999768733978271, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999967813491821, 5)]",
        "logprob": "-0.05940949694390855",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9931063156945279, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9881277680397034, 3), 'yes'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999768733978271, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999967813491821, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9931063156945279, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9881277680397034, 3), 'yes'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.9999768733978271, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('=', 0), 'terminal', 0.9999967813491821, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 799
    },
    {
        "nl": "What is the name of country that has the shortest life expectancy in Asia ?",
        "true_sql": "select country.name where country.continent = value order_by country.lifeexpectancy limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.continent",
            "=",
            "value",
            "order_by",
            "country.lifeexpectancy",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 45, [7], 3, 11, [50], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9997377991676331, 1), ('WHERE_COL', ('country', 'continent', 45), 4.294410700822482e-06, 3), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9989822506904602, 4), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.15257620811462402, 5), ('ORDER_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 1.0, 7), ('ORDER_DESC_ASC', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'asc', 0.0415060892701149, 8), ('ORDER_LIMIT', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'limit_value', 0.9998613595962524, 9)]",
        "logprob": "-17.6786453119833",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9997377991676331, 1), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9997168183326721, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9989822506904602, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'root', 0.8473315834999084, 5), 'no'), (('ORDER_DESC_ASC', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'desc', 0.7999798655509949, 8), 'no'), (('ORDER_LIMIT', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'limit_value', 0.9998613595962524, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9997377991676331, 1), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9997168183326721, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.0002784875687211752, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 4.294410700822482e-06, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 3.943740978229471e-07, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9989822506904602, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'root', 0.8473315834999084, 5), 'no'), (('ORDER_DESC_ASC', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'desc', 0.7999798655509949, 8), 'no'), (('ORDER_LIMIT', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'limit_value', 0.9998613595962524, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 800
    },
    {
        "nl": "Give the name of the country in Asia with the lowest life expectancy .",
        "true_sql": "select country.name where country.continent = value order_by country.lifeexpectancy limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.continent",
            "=",
            "value",
            "order_by",
            "country.lifeexpectancy",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 45, [7], 3, 11, [50], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.99983811378479, 1), ('WHERE_COL', ('country', 'continent', 45), 5.56445797883498e-07, 3), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9989035129547119, 4), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.001990724354982376, 5), ('ORDER_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9999998807907104, 7), ('ORDER_DESC_ASC', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'asc', 0.19643163681030273, 8), ('ORDER_LIMIT', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'limit_value', 0.9998877048492432, 9)]",
        "logprob": "-22.57773948262532",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.99983811378479, 1), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.999168872833252, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9989035129547119, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'root', 0.9979552030563354, 5), 'no'), (('ORDER_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9999998807907104, 7), 'yes'), (('ORDER_DESC_ASC', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'desc', 0.5826691389083862, 8), 'no'), (('ORDER_LIMIT', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'limit_value', 0.9998877048492432, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.99983811378479, 1), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.999168872833252, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.0008299471810460091, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 5.56445797883498e-07, 3), 'yes'), (('WHERE_COL', ('country', 'localname', 53), 2.934019960321166e-07, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9989035129547119, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'root', 0.9979552030563354, 5), 'no'), (('ORDER_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9999998807907104, 7), 'yes'), (('ORDER_DESC_ASC', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'desc', 0.5826691389083862, 8), 'no'), (('ORDER_LIMIT', (('country', 'lifeexpectancy', 50), ('none_agg', 0), False), 'limit_value', 0.9998877048492432, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 801
    },
    {
        "nl": "What is the total population and maximum GNP in Asia ?",
        "true_sql": "select sum ( country.population ) , max ( country.gnp ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [1, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.population",
            ")",
            ",",
            "max",
            "(",
            "country.gnp",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 49, 4], 8, [19, 5, 51, 4], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.9992325325804664, 1), ('SELECT_AGG_v2', ('country', 'gnp', 51), ('max', 1), False, 0.5564121605285586, 3), ('WHERE_COL', ('country', 'continent', 45), 1.0, 5), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9994633793830872, 6), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999979734420776, 7)]",
        "logprob": "-10.437929602753739",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.9992325325804664, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('sum', 4), False, 0.9466724261811447, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.999548614025116, 5), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9994633793830872, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999979734420776, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.9992325325804664, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('sum', 4), False, 0.9466724261811447, 3), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('max', 1), False, 0.5564121605285586, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.5375528229082318, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.3214010497623368, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.999548614025116, 5), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.0003234851756133139, 5), 'yes'), (('WHERE_COL', ('country', 'gnp', 51), 9.717251668917015e-05, 5), 'no'), (('WHERE_COL', ('country', 'name', 44), 1.1333450856909622e-05, 5), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9994633793830872, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999979734420776, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 802
    },
    {
        "nl": "How many people live in Asia , and what is the largest GNP among them ?",
        "true_sql": "select sum ( country.population ) , max ( country.gnp ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [1, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "max",
            "(",
            "country.gnp",
            ")",
            ",",
            "max",
            "(",
            "country.gnp",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [19, 5, 51, 4], 8, [19, 5, 51, 4], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'gnp', 51), ('max', 1), False, 0.134381193881295, 1), ('SELECT_AGG_v2', ('country', 'gnp', 51), ('max', 1), False, 0.6318749795435676, 3), ('WHERE_COL', ('country', 'continent', 45), 0.0013702139258384705, 5), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9960407018661499, 6), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999686479568481, 7)]",
        "logprob": "-24.29427579836681",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9950494514470887, 1), 'no'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.3104957938194275, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.9981195330619812, 5), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9960407018661499, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999686479568481, 7), 'yes'), (('GROUP_COL', ('country', 'headofstate', 55), 0.7717271447181702, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9950494514470887, 1), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('none_agg', 0), False, 0.009988625533878803, 1), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('sum', 4), False, 0.2646588955873834, 1), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.22577370021421195, 1), 'no'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.3104957938194275, 3), 'no'), (('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.28001430630683904, 3), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.16576696932315826, 3), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('max', 1), False, 0.6318749795435676, 3), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9981195330619812, 5), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.0013702139258384705, 5), 'yes'), (('WHERE_COL', ('country', 'name', 44), 0.00024506633053533733, 5), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.0002094456722261384, 5), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9960407018661499, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999686479568481, 7), 'yes'), (('GROUP_COL', ('country', 'headofstate', 55), 0.7717271447181702, 9), 'no'), (('GROUP_COL', ('country', 'continent', 45), 0.21450738608837128, 9), 'no'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.007143130525946617, 9), 'no'), (('GROUP_COL', ('country', 'localname', 53), 0.003374858293682337, 9), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 803
    },
    {
        "nl": "What is the average life expectancy in African countries that are republics ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.continent = value and country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None], 'and', [False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996605513731109, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.6307538747787476, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999663829803467, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999967813491821, 5)]",
        "logprob": "-1.0220088945063626",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996605513731109, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.6307538747787476, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999663829803467, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999967813491821, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996605513731109, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.6307538747787476, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999663829803467, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999967813491821, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 804
    },
    {
        "nl": "Give the average life expectancy for countries in Africa which are republics ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.continent = value and country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None], 'and', [False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            ",",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 8, [17, 5, 50, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9984194088849225, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.6625341917369516, 3), ('WHERE_COL', ('country', 'governmentform', 54), 0.5399345755577087, 5), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997087121009827, 6), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999940395355225, 7)]",
        "logprob": "-2.991043755411317",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9984194088849225, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.41446584463119507, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.5399345755577087, 5), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997087121009827, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999940395355225, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9984194088849225, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.41446584463119507, 3), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.35110172629356384, 3), 'no'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.6625341917369516, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('min', 2), False, 0.3828156719074674, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.5399345755577087, 5), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997087121009827, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999940395355225, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 805
    },
    {
        "nl": "What is the total surface area of the continents Asia and Europe ?",
        "true_sql": "select sum ( country.surfacearea ) where country.continent = value or country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None], 'or', [False, 2, [0, [0, 10, False], None], '\"Europe\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            ",",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 8, [24, 5, 47, 4], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9998848150196954, 1), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.2935929986489648, 3), ('WHERE_COL', ('country', 'continent', 45), 1.0, 5), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9983963370323181, 6), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999982118606567, 7)]",
        "logprob": "-8.294510963510733",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9998848150196954, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9919353723526001, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.9488586783409119, 5), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9983963370323181, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999982118606567, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9998848150196954, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9919353723526001, 3), 'no'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.2935929986489648, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('max', 1), False, 0.12155562433716667, 3), 'no'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.11694764503719142, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.9488586783409119, 5), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.050706155598163605, 5), 'yes'), (('WHERE_COL', ('country', 'name', 44), 0.0004350449307821691, 5), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 9.831499170331881e-08, 5), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9983963370323181, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999982118606567, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 806
    },
    {
        "nl": "Give the total surface area covered by countries in Asia or Europe .",
        "true_sql": "select sum ( country.surfacearea ) where country.continent = value or country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None], 'or', [False, 2, [0, [0, 10, False], None], '\"Europe\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            "or",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 47, 4], 6, 45, [7], 3, 25, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9962940207882766, 1), ('WHERE_COL', ('country', 'continent', 45), 1.0, 3), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9995798468589783, 4), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999978542327881, 5), ('WHERE_COL', ('country', 'continent', 45), 0.826164960861206, 7), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998304843902588, 8), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999845027923584, 9)]",
        "logprob": "-3.9216420593675787",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9962940207882766, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9755884408950806, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9995798468589783, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.826164960861206, 7), 'yes'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998304843902588, 8), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999845027923584, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('sum', 4), False, 0.9962940207882766, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9755884408950806, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.024410897865891457, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 4.781051075042342e-07, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 1.5735948011297296e-07, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9995798468589783, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999978542327881, 5), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.826164960861206, 7), 'yes'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998304843902588, 8), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999845027923584, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 807
    },
    {
        "nl": "How many people live in Gelderland district ?",
        "true_sql": "select sum ( city.population ) where city.district = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Gelderland\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "city.population",
            ")",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 40, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'population', 40), ('sum', 4), False, 0.42605512307500765, 1), ('WHERE_COL', ('city', 'district', 39), 1.0, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999988079071045, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-3.4131708195078727",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'population', 40), ('count', 3), False, 0.8930741558410196, 1), 'no'), (('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999988079071045, 4), 'yes'), (('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'population', 40), ('count', 3), False, 0.8930741558410196, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.7070910145779611, 1), 'no'), (('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.43715239378596055, 1), 'no'), (('SELECT_AGG_v2', ('city', 'population', 40), ('sum', 4), False, 0.42605512307500765, 1), 'yes'), (('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999988079071045, 4), 'yes'), (('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 808
    },
    {
        "nl": "What is the total population of Gelderland district ?",
        "true_sql": "select sum ( city.population ) where city.district = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Gelderland\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "city.population",
            ")",
            "where",
            "city.district",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 40, 4], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'population', 40), ('sum', 4), False, 0.9681781838203865, 1), ('WHERE_COL', ('city', 'district', 39), 1.0, 3), ('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999988079071045, 4), ('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999986886978149, 5)]",
        "logprob": "-0.1300455102550279",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'population', 40), ('sum', 4), False, 0.9681781838203865, 1), 'yes'), (('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999988079071045, 4), 'yes'), (('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'population', 40), ('sum', 4), False, 0.9681781838203865, 1), 'yes'), (('WHERE_OP', (('city', 'district', 39),), ('=', 0), 0.9999988079071045, 4), 'yes'), (('WHERE_ROOT_TERM', (('city', 'district', 39),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 809
    },
    {
        "nl": "What is the average GNP and total population in all nations whose government is US territory ?",
        "true_sql": "select avg ( country.gnp ) , sum ( country.population ) where country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 16, False], None]], [4, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"US Territory\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.gnp",
            ")",
            ",",
            "sum",
            "(",
            "country.population",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 51, 4], 8, [24, 5, 49, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'gnp', 51), ('avg', 5), False, 0.3585108039578357, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.34209593492978996, 3), ('WHERE_COL', ('country', 'governmentform', 54), 0.9949883818626404, 5), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999923706054688, 6), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999977350234985, 7)]",
        "logprob": "-8.405211444751597",
        "q_counter": 4,
        "questioned_indices": [
            0,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.9945117949292949, 1), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9949883818626404, 5), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999923706054688, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999977350234985, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.9945117949292949, 1), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('avg', 5), False, 0.3585108039578357, 1), 'yes'), (('SELECT_AGG_v2', ('countrylanguage', 'percentage', 61), ('avg', 5), False, 0.22208989137302138, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.20118544021674015, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9949883818626404, 5), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999923706054688, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999977350234985, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 810
    },
    {
        "nl": "Give the mean GNP and total population of nations which are considered US territory .",
        "true_sql": "select avg ( country.gnp ) , sum ( country.population ) where country.governmentform = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 16, False], None]], [4, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"US Territory\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.gnp",
            ")",
            ",",
            "sum",
            "(",
            "country.population",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 51, 4], 8, [24, 5, 49, 4], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'gnp', 51), ('avg', 5), False, 0.27840103280394135, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.29773687979901925, 3), ('WHERE_COL', ('country', 'governmentform', 54), 1.0, 5), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997764229774475, 6), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999979734420776, 7)]",
        "logprob": "-12.478475415489612",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.8010788418973636, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.8114975757710647, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.5796068906784058, 5), 'no'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997764229774475, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999979734420776, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.8010788418973636, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.7383947313818237, 1), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('none_agg', 0), False, 0.21073338389396665, 1), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('max', 1), False, 0.3632083684465785, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.8114975757710647, 3), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.29773687979901925, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('min', 2), False, 0.216854957414516, 3), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.0010518141789361835, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.5796068906784058, 5), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.33941107988357544, 5), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.08070743083953857, 5), 'yes'), (('WHERE_COL', ('country', 'localname', 53), 0.00017684200429357588, 5), 'no'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997764229774475, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999979734420776, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 811
    },
    {
        "nl": "How many unique languages are spoken in the world ?",
        "true_sql": "select count ( distinct countrylanguage.language )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.9999358722615388, 1)]",
        "logprob": "-0.00033507340172999787",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.9999358722615388, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.9999358722615388, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 812
    },
    {
        "nl": "What is the number of distinct languages used around the world ?",
        "true_sql": "select count ( distinct countrylanguage.language )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 59, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.9999554624334426, 1)]",
        "logprob": "-0.0008893544946945924",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.9999554624334426, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.9999554624334426, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 813
    },
    {
        "nl": "How many type of governments are in Africa ?",
        "true_sql": "select count ( distinct country.governmentform ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 19, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "country.governmentform",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'governmentform', 54), ('count', 3), True, 0.2773036080102285, 1)]",
        "logprob": "-6.486366749856112",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.9193839999743617, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.9193839999743617, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.7294788210498491, 1), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('count', 3), True, 0.2773036080102285, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.143131915887853, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 814
    },
    {
        "nl": "How many different forms of governments are there in Africa ?",
        "true_sql": "select count ( distinct country.governmentform ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 19, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "country.governmentform",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'governmentform', 54), ('count', 3), True, 0.5667883460670773, 1)]",
        "logprob": "-2.8618147472511417",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.857118121316042, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.857118121316042, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.7953288688123735, 1), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('count', 3), True, 0.5667883460670773, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.19093362847531525, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 815
    },
    {
        "nl": "What is the total number of languages used in Aruba ?",
        "true_sql": "select count ( countrylanguage.language ) where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Aruba\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            "where",
            "country.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), False, 0.27874871064260975, 1), ('WHERE_COL', ('country', 'name', 44), 1.0, 3), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-15.3820253107805",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9924996480439287, 1), 'no'), (('WHERE_COL', ('city', 'district', 39), 0.66213458776474, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9924996480439287, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.41015489841538216, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.3172855624236172, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), False, 0.27874871064260975, 1), 'yes'), (('WHERE_COL', ('city', 'district', 39), 0.66213458776474, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.33781200647354126, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 3.462208769633435e-05, 3), 'yes'), (('WHERE_COL', ('city', 'name', 37), 1.0038542313850485e-05, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 816
    },
    {
        "nl": "How many languages are spoken in Aruba ?",
        "true_sql": "select count ( countrylanguage.language ) where country.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Aruba\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            "where",
            "country.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 59, 4], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), False, 0.6177619177202253, 1), ('WHERE_COL', ('country', 'name', 44), 1.0, 3), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999996423721313, 5)]",
        "logprob": "-14.366813666181876",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9129712048491543, 1), 'no'), (('WHERE_COL', ('city', 'district', 39), 0.9610415697097778, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999996423721313, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9129712048491543, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), False, 0.6177619177202253, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.609564488355427, 1), 'no'), (('SELECT_AGG_v2', ('city', 'population', 40), ('count', 3), False, 0.33958327317287545, 1), 'no'), (('WHERE_COL', ('city', 'district', 39), 0.9610415697097778, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.038909342139959335, 3), 'no'), (('WHERE_COL', ('city', 'name', 37), 4.481601354200393e-05, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 3.956958607886918e-06, 3), 'yes'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999996423721313, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 817
    },
    {
        "nl": "How many official languages does Afghanistan have ?",
        "true_sql": "select count ( * ) where country.name = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Afghanistan\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.gnp",
            ")",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.10588526724214362, 1), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 5.6876404414651915e-05, 3), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9999940395355225, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-18.911207737456103",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.998033555951543, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.8740803599357605, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9999940395355225, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.998033555951543, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.2887501172945225, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), False, 0.12444253056129354, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.12393132468691397, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.8740803599357605, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.12339133769273758, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.001963170012459159, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.0004949333961121738, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9999940395355225, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 818
    },
    {
        "nl": "How many official languages are spoken in Afghanistan ?",
        "true_sql": "select count ( * ) where country.name = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Afghanistan\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "country.governmentform",
            ")",
            "where",
            "country.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 54, 4], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'governmentform', 54), ('count', 3), True, 0.39191221703750373, 1), ('WHERE_COL', ('country', 'name', 44), 1.0363806950408616e-06, 3), ('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999984502792358, 4), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-18.463610222856122",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.9257396530183011, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.9968023300170898, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999984502792358, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.9257396530183011, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.6803819061775292, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.4662297130360252, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), False, 0.3733501431663248, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.9968023300170898, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.002585400827229023, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.0005913322675041854, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 1.989915472222492e-05, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('=', 0), 0.9999984502792358, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 819
    },
    {
        "nl": "What is name of the country that speaks the largest number of languages ?",
        "true_sql": "select country.name group_by country.name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "group_by",
            "country.name",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 44, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9992024302482605, 1), ('GROUP_COL', ('country', 'name', 44), 4.886884198640473e-05, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4607430568553148, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9976599216461182, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999438524246216, 7)]",
        "logprob": "-13.029480815944925",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9992024302482605, 1), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.999754011631012, 3), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9882553180743774, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9976599216461182, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999438524246216, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9992024302482605, 1), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.999754011631012, 3), 'no'), (('GROUP_COL', ('countrylanguage', 'countrycode', 58), 0.00011117379472125322, 3), 'no'), (('GROUP_COL', ('country', 'region', 46), 5.4192219977267087e-05, 3), 'no'), (('GROUP_COL', ('country', 'name', 44), 4.886884198640473e-05, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9882553180743774, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4607430568553148, 5), 'yes'), (('ORDER_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.16619508589938903, 5), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.09892579695070779, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9976599216461182, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999438524246216, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 820
    },
    {
        "nl": "Give the name of the nation that uses the greatest amount of languages .",
        "true_sql": "select country.name group_by country.name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 9, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "group_by",
            "country.region",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 10, 46, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.01790919713675976, 1), ('GROUP_COL', ('country', 'region', 46), 7.722912442886809e-08, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9988216343852065, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993658661842346, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999948263168335, 7)]",
        "logprob": "-20.409607813025385",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.6386994123458862, 1), 'no'), (('GROUP_COL', ('country', 'headofstate', 55), 0.8306962251663208, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9988216343852065, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993658661842346, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999948263168335, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.6386994123458862, 1), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.31157660484313965, 1), 'no'), (('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.027558637782931328, 1), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.01790919713675976, 1), 'yes'), (('GROUP_COL', ('country', 'headofstate', 55), 0.8306962251663208, 3), 'no'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.11586779356002808, 3), 'no'), (('GROUP_COL', ('country', 'governmentform', 54), 0.0534355603158474, 3), 'no'), (('GROUP_COL', ('country', 'code2', 57), 2.3087206102445634e-07, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9988216343852065, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993658661842346, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999948263168335, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 821
    },
    {
        "nl": "Which continent has the most diverse languages ?",
        "true_sql": "select country.continent group_by country.continent order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.continent",
            "group_by",
            "country.continent",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 45, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.996515154838562, 1), ('GROUP_COL', ('country', 'continent', 45), 0.9998965263366699, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.13822642257254714, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9990719556808472, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998681545257568, 7)]",
        "logprob": "-7.920478290503777",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.996515154838562, 1), 'yes'), (('GROUP_COL', ('country', 'continent', 45), 0.9998965263366699, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998320192339346, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9990719556808472, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998681545257568, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.996515154838562, 1), 'yes'), (('GROUP_COL', ('country', 'continent', 45), 0.9998965263366699, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998320192339346, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.13822642257254714, 5), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('sum', 4), False, 0.08045957162217343, 5), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.07999284937590272, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9990719556808472, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998681545257568, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 822
    },
    {
        "nl": "Which continent speaks the most languages ?",
        "true_sql": "select country.continent group_by country.continent order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 10, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.continent",
            "group_by",
            "country.continent",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 10, 45, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9998650550842285, 1), ('GROUP_COL', ('country', 'continent', 45), 0.9999961853027344, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.08481074167179248, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9984307885169983, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998955726623535, 7)]",
        "logprob": "-9.871403513355736",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9998650550842285, 1), 'yes'), (('GROUP_COL', ('country', 'continent', 45), 0.9999961853027344, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9999303630557271, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9984307885169983, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998955726623535, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9998650550842285, 1), 'yes'), (('GROUP_COL', ('country', 'continent', 45), 0.9999961853027344, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9999303630557271, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.08481074167179248, 5), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('avg', 5), False, 0.0824716379076652, 5), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('sum', 4), False, 0.08124155913204031, 5), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9984307885169983, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998955726623535, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 823
    },
    {
        "nl": "How many countries speak both English and Dutch ?",
        "true_sql": "select count ( * ) ( select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['sql', {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Dutch\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.09698219200852272, 1)]",
        "logprob": "-24.745554751116615",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9993289536457252, 1), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.8300010561943054, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9993289536457252, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.22492364233738021, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.09698219200852272, 1), 'yes'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 6.95697235642001e-06, 1), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.8300010561943054, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.1586909294128418, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.007227594498544931, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 0.004069583024829626, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 824
    },
    {
        "nl": "What is the number of nations that use English and Dutch ?",
        "true_sql": "select count ( * ) ( select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['sql', {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Dutch\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.053583570417273456, 1)]",
        "logprob": "-25.937844698154656",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9940546226746818, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.5765874981880188, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9940546226746818, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.39163072442852276, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.053583570417273456, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('count', 3), True, 0.09049996875048885, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.5765874981880188, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.41971921920776367, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.002946670865640044, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 0.0006914158584550023, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 825
    },
    {
        "nl": "What are the names of nations speak both English and French ?",
        "true_sql": "select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"French\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 59, [7], 3, 23, 2, [44], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9996019005775452, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 1.0, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9997374415397644, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('IUEN_v2', ('intersect', 1), 0.9991996884346008, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9871472120285034, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.988646388053894, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999959468841553, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999994039535522, 12)]",
        "logprob": "-2.6112106939891864",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9996019005775452, 1), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.4419323205947876, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9997374415397644, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9991996884346008, 6), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9871472120285034, 8), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.988646388053894, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999959468841553, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999994039535522, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9996019005775452, 1), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.4419323205947876, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.37217769026756287, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 0.11027664691209793, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.07539848238229752, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9997374415397644, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9991996884346008, 6), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9871472120285034, 8), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.988646388053894, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999959468841553, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999994039535522, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 826
    },
    {
        "nl": "Give the names of nations that speak both English and French .",
        "true_sql": "select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"French\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 59, [7], 3, 23, 2, [44], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999107122421265, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.5309212803840637, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998101592063904, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999988079071045, 5), ('IUEN_v2', ('intersect', 1), 0.9984079003334045, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9838990569114685, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9982557892799377, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.999996542930603, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999996423721313, 12)]",
        "logprob": "-0.6534107328313337",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999107122421265, 1), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.5309212803840637, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998101592063904, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9984079003334045, 6), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9838990569114685, 8), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9982557892799377, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.999996542930603, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999996423721313, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999107122421265, 1), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.5309212803840637, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998101592063904, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9984079003334045, 6), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9838990569114685, 8), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9982557892799377, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.999996542930603, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999996423721313, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 827
    },
    {
        "nl": "What are the names of nations where both English and French are official languages ?",
        "true_sql": "select country.name where countrylanguage.language = value and countrylanguage.isofficial = value intersect select country.name where countrylanguage.language = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"French\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 60, [7], 3, 23, 2, [44], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9983413219451904, 1), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.004806772340089083, 3), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9984257221221924, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('IUEN_v2', ('intersect', 1), 0.9966854453086853, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.986997127532959, 8), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 1.0, 10), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9999768733978271, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999996423721313, 12)]",
        "logprob": "-7.418800259126587",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9983413219451904, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.710734486579895, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9984257221221924, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9966854453086853, 6), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.986997127532959, 8), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.436807781457901, 10), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9999768733978271, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999996423721313, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9983413219451904, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.710734486579895, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.2747184932231903, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.004806772340089083, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 0.004405401647090912, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9984257221221924, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9966854453086853, 6), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.986997127532959, 8), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.436807781457901, 10), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.42133456468582153, 10), 'no'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.12737509608268738, 10), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.013061730191111565, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9999768733978271, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999996423721313, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 828
    },
    {
        "nl": "Give the names of countries with English and French as official languages .",
        "true_sql": "select country.name where countrylanguage.language = value and countrylanguage.isofficial = value intersect select country.name where countrylanguage.language = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"French\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "intersect",
            "select",
            "country.name",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 59, [7], 3, 23, 2, [44], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9994168281555176, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 1.0, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9993682503700256, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999991655349731, 5), ('IUEN_v2', ('intersect', 1), 0.7883309721946716, 6), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9671381115913391, 8), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.6558706164360046, 10), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.999984622001648, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999997615814209, 12)]",
        "logprob": "-4.738100645982307",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9994168281555176, 1), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.606971800327301, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9993682503700256, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.7883309721946716, 6), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9671381115913391, 8), 'yes'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.6558706164360046, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.999984622001648, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999997615814209, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9994168281555176, 1), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.606971800327301, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.3229202926158905, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.03396207466721535, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.0175569299608469, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9993682503700256, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999991655349731, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.7883309721946716, 6), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9671381115913391, 8), 'yes'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.6558706164360046, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.999984622001648, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999997615814209, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 829
    },
    {
        "nl": "What is the number of distinct continents where Chinese is spoken ?",
        "true_sql": "select count ( distinct country.continent ) where countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 10, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Chinese\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "country.continent",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), True, 0.9998901207300986, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9955553412437439, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999985694885254, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999992847442627, 5)]",
        "logprob": "-0.005110211563588565",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), True, 0.9998901207300986, 1), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9955553412437439, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999985694885254, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), True, 0.9998901207300986, 1), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9955553412437439, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999985694885254, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 830
    },
    {
        "nl": "How many continents speak Chinese ?",
        "true_sql": "select count ( distinct country.continent ) where countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 10, True], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Chinese\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "country.continent",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 45, 4], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), True, 0.21707901756281206, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9896919131278992, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999978542327881, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-7.647990847422413",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), False, 0.9679858854212032, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9896919131278992, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999978542327881, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), False, 0.9679858854212032, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.5414719112499389, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.43407986233708895, 1), 'no'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('count', 3), True, 0.21707901756281206, 1), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9896919131278992, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999978542327881, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 831
    },
    {
        "nl": "What are the regions that use English or Dutch ?",
        "true_sql": "select distinct country.region where countrylanguage.language = value or countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'or', [False, 2, [0, [0, 24, False], None], '\"Dutch\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.region",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "or",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 59, [7], 3, 25, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 1.0, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998949766159058, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.024516424164175987, 7), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999837875366211, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999982118606567, 9)]",
        "logprob": "-6.964943575895414",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9614437222480774, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998949766159058, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.024516424164175987, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999837875366211, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999982118606567, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9614437222480774, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.03855520859360695, 3), 'yes'), (('WHERE_COL', ('country', 'localname', 53), 5.339254585123854e-07, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 2.805219594392838e-07, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998949766159058, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.024516424164175987, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999837875366211, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999982118606567, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 832
    },
    {
        "nl": "Which regions speak Dutch or English ?",
        "true_sql": "select distinct country.region where countrylanguage.language = value or countrylanguage.language = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'or', [False, 2, [0, [0, 24, False], None], '\"Dutch\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.region",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "or",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 6, 59, [7], 3, 25, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 1.0, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999773502349854, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999986886978149, 5), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.07257647067308426, 7), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999818801879883, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999997615814209, 9)]",
        "logprob": "-5.704198870922283",
        "q_counter": 6,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9540502429008484, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999773502349854, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.07257647067308426, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999818801879883, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999997615814209, 9), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9540502429008484, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.04594769328832626, 3), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'name', 41), 1.162846842817089e-06, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 5.188935574551579e-07, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999773502349854, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999986886978149, 5), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.07257647067308426, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999818801879883, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999997615814209, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 833
    },
    {
        "nl": "What are the countries where either English or Dutch is the official language ?",
        "true_sql": "select * where countrylanguage.language = value and countrylanguage.isofficial = value union select * where countrylanguage.language = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Dutch\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.code2",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "or",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [57], 6, 60, [7], 3, 25, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 8.662266918690879e-05, 1), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 1.0, 3), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998226761817932, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999982118606567, 5), ('WHERE_COL', ('countrylanguage', 'language', 59), 1.0, 7), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999160766601562, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999963045120239, 9)]",
        "logprob": "-24.341778469483334",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9977286458015442, 1), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.4310734272003174, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998226761817932, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999160766601562, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999963045120239, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9977286458015442, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.0013958981726318602, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.0003337209054734555, 1), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.00032024650136008837, 1), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.4310734272003174, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.2734222114086151, 3), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.229638934135437, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.06529758125543594, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998226761817932, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999160766601562, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999963045120239, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 834
    },
    {
        "nl": "Which countries have either English or Dutch as an official language ?",
        "true_sql": "select * where countrylanguage.language = value and countrylanguage.isofficial = value union select * where countrylanguage.language = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Dutch\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.population",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "or",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 6, 59, [7], 3, 25, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 7.286025720532046e-06, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9676021933555603, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999262094497681, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999977350234985, 5), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9942840933799744, 7), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998887777328491, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999939203262329, 9)]",
        "logprob": "-11.87807848764622",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9996694326400757, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9676021933555603, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999262094497681, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9942840933799744, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998887777328491, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999939203262329, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9996694326400757, 1), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.0002945609448943288, 1), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 1.825724757509305e-05, 1), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 7.35103230908863e-06, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9676021933555603, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999262094497681, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'yes'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9942840933799744, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998887777328491, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999939203262329, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 835
    },
    {
        "nl": "Which language is the most popular on the Asian continent ?",
        "true_sql": "select countrylanguage.language where country.continent = value group_by countrylanguage.language order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.continent",
            "=",
            "value",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 45, [7], 3, 10, 59, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9974402189254761, 1), ('WHERE_COL', ('country', 'continent', 45), 1.0, 3), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998784065246582, 4), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999897480010986, 5), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9997592568397522, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8641995154004668, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993259906768799, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998748302459717, 11)]",
        "logprob": "-7.406020805082904",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9974402189254761, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9987867474555969, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998784065246582, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999897480010986, 5), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9997592568397522, 7), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8641995154004668, 9), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993259906768799, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998748302459717, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9974402189254761, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9987867474555969, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.001168767805211246, 3), 'yes'), (('WHERE_COL', ('country', 'localname', 53), 1.5443500160472468e-05, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 8.88435351953376e-06, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998784065246582, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999897480010986, 5), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9997592568397522, 7), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8641995154004668, 9), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993259906768799, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998748302459717, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 836
    },
    {
        "nl": "What is the language that is used by the largest number of Asian nations ?",
        "true_sql": "select countrylanguage.language where country.continent = value group_by countrylanguage.language order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.continent",
            "=",
            "value",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 45, [7], 3, 10, 59, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9959515333175659, 1), ('WHERE_COL', ('country', 'continent', 45), 0.0006651980802416801, 3), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998310804367065, 4), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999405145645142, 5), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9586168527603149, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.23285457510121013, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9955974221229553, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9997368454933167, 11)]",
        "logprob": "-13.19784504983334",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9959515333175659, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.754618763923645, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998310804367065, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999405145645142, 5), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9586168527603149, 7), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9981080052322823, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9955974221229553, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9997368454933167, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9959515333175659, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.754618763923645, 3), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.24404442310333252, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.0006651980802416801, 3), 'yes'), (('WHERE_COL', ('country', 'headofstate', 55), 0.00035073605249635875, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998310804367065, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999405145645142, 5), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9586168527603149, 7), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9981080052322823, 9), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.23285457510121013, 9), 'yes'), (('ORDER_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.23218825698201187, 9), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.19097154063495037, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9955974221229553, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9997368454933167, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 837
    },
    {
        "nl": "Which languages are spoken by only one country in republic governments ?",
        "true_sql": "select countrylanguage.language where country.governmentform = value group_by countrylanguage.language having count ( * ) = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [[False, 2, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999871253967285, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9979574680328369, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997135996818542, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-4.152268719574259",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999871253967285, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9979574680328369, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997135996818542, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes'), (('IUEN_v2', ('except', 3), 0.47494494915008545, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999871253967285, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9979574680328369, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9997135996818542, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes'), (('IUEN_v2', ('except', 3), 0.47494494915008545, 6), 'no'), (('IUEN_v2', ('union', 2), 0.028924481943249702, 6), 'no'), (('IUEN_v2', ('intersect', 1), 0.020605459809303284, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 838
    },
    {
        "nl": "What languages are only used by a single country with a republic government ?",
        "true_sql": "select countrylanguage.language where country.governmentform = value group_by countrylanguage.language having count ( * ) = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [[False, 2, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.governmentform",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 54, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.999835729598999, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9992679953575134, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999868869781494, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999984502792358, 5)]",
        "logprob": "-0.01101283217588319",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.999835729598999, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9992679953575134, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999868869781494, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.999835729598999, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9992679953575134, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.9999868869781494, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999984502792358, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 839
    },
    {
        "nl": "Find the city with the largest population that uses English .",
        "true_sql": "select city.name , city.population where countrylanguage.language = value order_by city.population desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "order_by",
            "city.population",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 59, [7], 3, 11, [40], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9967852830886841, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 1.0, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999761581420898, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9943616390228271, 5), ('ORDER_AGG_v2', ('city', 'population', 40), ('none_agg', 0), False, 1.0, 7), ('ORDER_DESC_ASC', (('city', 'population', 40), ('none_agg', 0), False), 'desc', 0.9995208978652954, 8), ('ORDER_LIMIT', (('city', 'population', 40), ('none_agg', 0), False), 'limit_value', 0.999962329864502, 9)]",
        "logprob": "-14.768505919536318",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9967852830886841, 1), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9993365406990051, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999761581420898, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9943616390228271, 5), 'yes'), (('ORDER_DESC_ASC', (('city', 'population', 40), ('none_agg', 0), False), 'desc', 0.9995208978652954, 8), 'yes'), (('ORDER_LIMIT', (('city', 'population', 40), ('none_agg', 0), False), 'limit_value', 0.999962329864502, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9967852830886841, 1), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9993365406990051, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.0006630243733525276, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 4.040118142256688e-07, 3), 'yes'), (('WHERE_COL', ('city', 'name', 37), 5.1914572196665176e-08, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999761581420898, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9943616390228271, 5), 'yes'), (('ORDER_DESC_ASC', (('city', 'population', 40), ('none_agg', 0), False), 'desc', 0.9995208978652954, 8), 'yes'), (('ORDER_LIMIT', (('city', 'population', 40), ('none_agg', 0), False), 'limit_value', 0.999962329864502, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 840
    },
    {
        "nl": "What is the most populace city that speaks English ?",
        "true_sql": "select city.name , city.population where countrylanguage.language = value order_by city.population desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "order_by",
            "city.population",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 59, [7], 3, 11, [40], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9969115853309631, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 1.0, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999854564666748, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999987006187439, 5), ('ORDER_AGG_v2', ('city', 'population', 40), ('none_agg', 0), False, 0.9999808073043823, 7), ('ORDER_DESC_ASC', (('city', 'population', 40), ('none_agg', 0), False), 'desc', 0.9997580647468567, 8), ('ORDER_LIMIT', (('city', 'population', 40), ('none_agg', 0), False), 'limit_value', 0.9999191761016846, 9)]",
        "logprob": "-10.487229531696814",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9969115853309631, 1), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9941815733909607, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999854564666748, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999987006187439, 5), 'yes'), (('ORDER_AGG_v2', ('city', 'population', 40), ('none_agg', 0), False, 0.9999808073043823, 7), 'yes'), (('ORDER_DESC_ASC', (('city', 'population', 40), ('none_agg', 0), False), 'desc', 0.9997580647468567, 8), 'yes'), (('ORDER_LIMIT', (('city', 'population', 40), ('none_agg', 0), False), 'limit_value', 0.9999191761016846, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9969115853309631, 1), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9941815733909607, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.005778356920927763, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 3.4647284337552264e-05, 3), 'yes'), (('WHERE_COL', ('city', 'name', 37), 4.703102604253218e-06, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999854564666748, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999987006187439, 5), 'yes'), (('ORDER_AGG_v2', ('city', 'population', 40), ('none_agg', 0), False, 0.9999808073043823, 7), 'yes'), (('ORDER_DESC_ASC', (('city', 'population', 40), ('none_agg', 0), False), 'desc', 0.9997580647468567, 8), 'yes'), (('ORDER_LIMIT', (('city', 'population', 40), ('none_agg', 0), False), 'limit_value', 0.9999191761016846, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 841
    },
    {
        "nl": "Find the name , population and expected life length of asian country with the largest area ?",
        "true_sql": "select country.name , country.population , country.lifeexpectancy where country.continent = value order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.population",
            ",",
            "country.lifeexpectancy",
            "where",
            "country.headofstate",
            "=",
            "(",
            "select",
            "max",
            "(",
            "country.lifeexpectancy",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [49], 8, [50], 6, 55, [7], 5, 2, [19, 5, 50, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9985846281051636, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9330490231513977, 3), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9855878353118896, 5), ('WHERE_COL', ('country', 'headofstate', 55), 0.0003333310887683183, 7), ('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999724626541138, 8), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'root', 0.7223666906356812, 9), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('max', 1), False, 0.9995737446003654, 11), ('O', '##END_NESTED##', 0.5184227228164673, 12)]",
        "logprob": "-9.149320819932372",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9985846281051636, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9330490231513977, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9855878353118896, 5), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9527844786643982, 7), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999724626541138, 8), 'no'), (('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'root', 0.7223666906356812, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9985846281051636, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9330490231513977, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9855878353118896, 5), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9527844786643982, 7), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.03108140267431736, 7), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.01180968713015318, 7), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.0039058104157447815, 7), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999724626541138, 8), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('>', 1), 2.054150536423549e-05, 8), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('!=', 5), 1.3159275340512977e-06, 8), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('in', 8), 6.331381428026361e-07, 8), 'no'), (('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'root', 0.7223666906356812, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 842
    },
    {
        "nl": "What are the name , population , and life expectancy of the largest Asian country by land ?",
        "true_sql": "select country.name , country.population , country.lifeexpectancy where country.continent = value order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.population",
            ",",
            "country.lifeexpectancy",
            "where",
            "country.surfacearea",
            "=",
            "(",
            "select",
            "max",
            "(",
            "country.lifeexpectancy",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [49], 8, [50], 6, 47, [7], 5, 2, [19, 5, 50, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9972430467605591, 1), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9899223446846008, 3), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9964420199394226, 5), ('WHERE_COL', ('country', 'surfacearea', 47), 0.010544298216700554, 7), ('WHERE_OP', (('country', 'surfacearea', 47),), ('=', 0), 0.9878420829772949, 8), ('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('=', 0), 'root', 0.985622227191925, 9), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('max', 1), False, 0.9963943340516176, 11), ('O', '##END_NESTED##', 0.6414257287979126, 12)]",
        "logprob": "-5.222132217361738",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9972430467605591, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9899223446846008, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9964420199394226, 5), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.5829954743385315, 7), 'no'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('=', 0), 0.9878420829772949, 8), 'no'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('=', 0), 'root', 0.985622227191925, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9972430467605591, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9899223446846008, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.9964420199394226, 5), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.5829954743385315, 7), 'no'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.20865142345428467, 7), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.11636370420455933, 7), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.07780281454324722, 7), 'no'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('=', 0), 0.9878420829772949, 8), 'no'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.011857474222779274, 8), 'no'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>=', 3), 0.03797883247167076, 8), 'no'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('not in', 7), 0.007867837052784987, 8), 'no'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('=', 0), 'root', 0.985622227191925, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 843
    },
    {
        "nl": "What is average life expectancy in the countries where English is not the official language ?",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.name not in ( select country.name where countrylanguage.language = value and countrylanguage.isofficial = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "sqlite_sequence.seq",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 42, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9994703945627311, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.0020534484647214413, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 0.6291175484657288, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 'terminal', 0.9998223185539246, 5)]",
        "logprob": "-6.695240739696126",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9994703945627311, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.7057211995124817, 3), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 0.6291175484657288, 4), 'no'), (('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 'terminal', 0.9998223185539246, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9994703945627311, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.7057211995124817, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.16837328672409058, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.1012221947312355, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.02225279062986374, 3), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 0.6291175484657288, 4), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('not in', 7), 0.4903820798804677, 4), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.11884282529354095, 4), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('in', 8), 0.006508016958832741, 4), 'no'), (('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 'terminal', 0.9998223185539246, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 844
    },
    {
        "nl": "Give the mean life expectancy of countries in which English is not the official language .",
        "true_sql": "select avg ( country.lifeexpectancy ) where country.name not in ( select country.name where countrylanguage.language = value and countrylanguage.isofficial = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 15, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "where",
            "country.region",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 6, 46, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9318229057079966, 1), ('WHERE_COL', ('country', 'region', 46), 0.002687042346224189, 3), ('WHERE_OP', (('country', 'region', 46),), ('!=', 5), 0.7576996088027954, 4), ('WHERE_ROOT_TERM', (('country', 'region', 46),), ('!=', 5), 'terminal', 0.999948263168335, 5)]",
        "logprob": "-6.532802806293815",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9318229057079966, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.6352303624153137, 3), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('!=', 5), 0.7576996088027954, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('!=', 5), 'terminal', 0.999948263168335, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9318229057079966, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.6352303624153137, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.3443649709224701, 3), 'no'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.008834494277834892, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.008688690140843391, 3), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('!=', 5), 0.7576996088027954, 4), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('not in', 7), 0.3789254390722887, 4), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('=', 0), 0.08575742691755295, 4), 'no'), (('WHERE_OP', (('country', 'region', 46),), ('in', 8), 0.008285350166261196, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'region', 46),), ('!=', 5), 'terminal', 0.999948263168335, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 845
    },
    {
        "nl": "What is the total number of people living in the nations that do not use English ?",
        "true_sql": "select sum ( country.population ) where country.name not in ( select country.name where countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.population",
            ")",
            "where",
            "countrylanguage.language",
            "not",
            "in",
            "(",
            "select",
            "countrylanguage.language",
            "where",
            "countrylanguage.language",
            "!=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 49, 4], 6, 59, [22, 20], 5, 2, [59], 6, 59, [29], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.620007569353217, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.0035458565689623356, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('not in', 7), 0.7712155646398484, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('not in', 7), 'root', 0.9997959733009338, 5), ('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9009432792663574, 7), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9591865539550781, 9), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.7364562749862671, 10), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999957084655762, 11), ('O', '##END_NESTED##', 0.987472653388977, 12)]",
        "logprob": "-8.551695358149107",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.8372441780509166, 1), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.45203787088394165, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('not in', 7), 0.7712155646398484, 4), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('not in', 7), 'root', 0.9997959733009338, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.8372441780509166, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.7728067094073054, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.620007569353217, 1), 'yes'), (('SELECT_AGG_v2', ('countrylanguage', 'percentage', 61), ('sum', 4), False, 0.16134891696337297, 1), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.45203787088394165, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.44179221987724304, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.0777483806014061, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.022535063326358795, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('not in', 7), 0.7712155646398484, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.4017549157142639, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.0019352918025106192, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('<', 2), 0.00040055092540569603, 4), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('not in', 7), 'root', 0.9997959733009338, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 846
    },
    {
        "nl": "How many people live in countries that do not speak English ?",
        "true_sql": "select sum ( country.population ) where country.name not in ( select country.name where countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.population",
            ")",
            "where",
            "country.headofstate",
            "not",
            "in",
            "(",
            "select",
            "countrylanguage.language",
            "where",
            "countrylanguage.language",
            "!=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 49, 4], 6, 55, [22, 20], 5, 2, [59], 6, 59, [29], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.12421794492096744, 1), ('WHERE_COL', ('country', 'headofstate', 55), 0.0006983977509662509, 3), ('WHERE_OP', (('country', 'headofstate', 55),), ('not in', 7), 0.7508726060915719, 4), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('not in', 7), 'root', 0.9998040795326233, 5), ('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9753925204277039, 7), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9999909400939941, 9), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.8644921183586121, 10), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999966621398926, 11), ('O', '##END_NESTED##', 0.9866358637809753, 12)]",
        "logprob": "-16.37811559390557",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9580816917517133, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.48043569922447205, 3), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('not in', 7), 0.7508726060915719, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('not in', 7), 'root', 0.9998040795326233, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9580816917517133, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.6290611216884536, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.12421794492096744, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.1231714374031462, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.48043569922447205, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.4220699667930603, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.06127798557281494, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.03538011759519577, 3), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('not in', 7), 0.7508726060915719, 4), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('!=', 5), 0.43368270993232727, 4), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('<', 2), 0.0007188708987087011, 4), 'no'), (('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.0006853113300167024, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('not in', 7), 'root', 0.9998040795326233, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 847
    },
    {
        "nl": "What is the official language spoken in the country whose head of state is Beatrix ?",
        "true_sql": "select countrylanguage.language where country.headofstate = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Beatrix\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.headofstate",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999880790710449, 1), ('WHERE_COL', ('country', 'headofstate', 55), 0.9999657869338989, 3), ('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999947547912598, 4), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.999998927116394, 5)]",
        "logprob": "-0.0012848063033442418",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999880790710449, 1), 'yes'), (('WHERE_COL', ('country', 'headofstate', 55), 0.9999657869338989, 3), 'yes'), (('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999947547912598, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999880790710449, 1), 'yes'), (('WHERE_COL', ('country', 'headofstate', 55), 0.9999657869338989, 3), 'yes'), (('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999947547912598, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 848
    },
    {
        "nl": "What is the official language used in the country the name of whose head of state is Beatrix .",
        "true_sql": "select countrylanguage.language where country.headofstate = value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Beatrix\"', None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "where",
            "country.headofstate",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9766071438789368, 1), ('WHERE_COL', ('country', 'headofstate', 55), 0.9996817111968994, 3), ('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999895095825195, 4), ('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.9999983310699463, 5)]",
        "logprob": "-0.02490364774335708",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9766071438789368, 1), 'yes'), (('WHERE_COL', ('country', 'headofstate', 55), 0.9996817111968994, 3), 'yes'), (('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999895095825195, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9766071438789368, 1), 'yes'), (('WHERE_COL', ('country', 'headofstate', 55), 0.9996817111968994, 3), 'yes'), (('WHERE_OP', (('country', 'headofstate', 55),), ('=', 0), 0.9999895095825195, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'headofstate', 55),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 849
    },
    {
        "nl": "What is the total number of unique official languages spoken in the countries that are founded before 1930 ?",
        "true_sql": "select count ( distinct countrylanguage.language ) where country.indepyear < value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, True], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 13, False], None], 1930.0, None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "where",
            "countrylanguage.isofficial",
            "<",
            "(",
            "select",
            "min",
            "(",
            "country.population",
            ")",
            "where",
            "country.governmentform",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 59, 4], 6, 60, [21], 5, 2, [26, 5, 49, 4], 6, 54, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.18305779145468085, 1), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.020498031750321388, 3), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('<', 2), 0.9200928807258606, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('<', 2), 'root', 3.814337105723098e-06, 5), ('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.8996649495695439, 7), ('WHERE_COL', ('country', 'governmentform', 54), 0.6898002028465271, 9), ('WHERE_OP', (('country', 'governmentform', 54),), ('=', 0), 0.984031617641449, 10), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('=', 0), 'terminal', 0.9999996423721313, 11), ('O', '##END_NESTED##', 0.9934859871864319, 12)]",
        "logprob": "-25.868960812453025",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9924786319059711, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.7722663283348083, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('<', 2), 0.9200928807258606, 4), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('<', 2), 'terminal', 0.9998435974121094, 5), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.8996649495695439, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9924786319059711, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.4095932903228572, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.17704531204779517, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('count', 3), True, 0.18305779145468085, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.7722663283348083, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.18483519554138184, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.020498031750321388, 3), 'yes'), (('WHERE_COL', ('country', 'indepyear', 48), 0.017868779599666595, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('<', 2), 0.9200928807258606, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('>', 1), 0.07307574898004532, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('not in', 7), 0.07509008080204828, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('between', 9), 0.00047190042096190155, 4), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('<', 2), 'terminal', 0.9998435974121094, 5), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.8996649495695439, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 850
    },
    {
        "nl": "For the countries founded before 1930 , what is the total number of distinct official languages ?",
        "true_sql": "select count ( distinct countrylanguage.language ) where country.indepyear < value and countrylanguage.isofficial = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, True], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 13, False], None], 1930.0, None], 'and', [False, 2, [0, [0, 25, False], None], '\"T\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "country.headofstate",
            "where",
            "country.indepyear",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [55], 6, 48, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.00211428664624691, 2), ('WHERE_COL', ('country', 'indepyear', 48), 1.0, 4), ('WHERE_OP', (('country', 'indepyear', 48),), ('<', 2), 0.9464112520217896, 5), ('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('<', 2), 'terminal', 0.9996121525764465, 6)]",
        "logprob": "-9.169829333371384",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9252482652664185, 2), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.6154838800430298, 4), 'no'), (('WHERE_OP', (('country', 'indepyear', 48),), ('<', 2), 0.9464112520217896, 5), 'yes'), (('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('<', 2), 'terminal', 0.9996121525764465, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9252482652664185, 2), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.04064063355326653, 2), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.026436638087034222, 2), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.0035470570437610145, 2), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.6154838800430298, 4), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.297885537147522, 4), 'no'), (('WHERE_COL', ('country', 'indepyear', 48), 0.06491168588399887, 4), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.018943777307868004, 4), 'no'), (('WHERE_OP', (('country', 'indepyear', 48),), ('<', 2), 0.9464112520217896, 5), 'yes'), (('WHERE_ROOT_TERM', (('country', 'indepyear', 48),), ('<', 2), 'terminal', 0.9996121525764465, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 851
    },
    {
        "nl": "What are the countries that have greater surface area than any country in Europe ?",
        "true_sql": "select country.name where country.surfacearea > ( select min ( country.surfacearea ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 12, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.surfacearea",
            ">",
            "(",
            "select",
            "min",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 47, [14], 5, 2, [26, 5, 47, 4], 6, 45, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.0016079297056421633, 1), ('WHERE_COL', ('country', 'surfacearea', 47), 0.9999575614929199, 3), ('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9983711838722229, 4), ('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'root', 0.9304755330085754, 5), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.9301968556354228, 7), ('WHERE_COL', ('country', 'continent', 45), 1.0, 9), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9527043104171753, 10), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.999922513961792, 11), ('O', '##END_NESTED##', 0.9985790252685547, 12)]",
        "logprob": "-7.870276802230506",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9981878399848938, 1), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.9999575614929199, 3), 'yes'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9983711838722229, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'root', 0.9304755330085754, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.9301968556354228, 7), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.6198408603668213, 9), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9527043104171753, 10), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.999922513961792, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9981878399848938, 1), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.0016079297056421633, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'region', 46), ('none_agg', 0), False, 7.26398502592929e-05, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('none_agg', 0), False, 3.518487937981261e-05, 1), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.9999575614929199, 3), 'yes'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9983711838722229, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'root', 0.9304755330085754, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.9301968556354228, 7), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.6198408603668213, 9), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.3622948229312897, 9), 'yes'), (('WHERE_COL', ('country', 'name', 44), 0.009334678761661053, 9), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.00631913635879755, 9), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9527043104171753, 10), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.999922513961792, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 852
    },
    {
        "nl": "Which countries have greater area than that of any country in Europe ?",
        "true_sql": "select country.name where country.surfacearea > ( select min ( country.surfacearea ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 12, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.surfacearea",
            ">",
            "(",
            "select",
            "min",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 47, [14], 5, 2, [26, 5, 47, 4], 6, 45, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.6546623706817627, 1), ('WHERE_COL', ('country', 'surfacearea', 47), 0.9336415529251099, 3), ('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9978062510490417, 4), ('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'root', 0.9787999391555786, 5), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.891915100174153, 7), ('WHERE_COL', ('country', 'continent', 45), 0.7573258876800537, 9), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9965483546257019, 10), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999696016311646, 11), ('O', '##END_NESTED##', 0.9988623857498169, 12)]",
        "logprob": "-1.2806291045377034",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.6546623706817627, 1), 'yes'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.9336415529251099, 3), 'yes'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9978062510490417, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'root', 0.9787999391555786, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.891915100174153, 7), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.7573258876800537, 9), 'yes'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9965483546257019, 10), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999696016311646, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.6546623706817627, 1), 'yes'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.9336415529251099, 3), 'yes'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9978062510490417, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'root', 0.9787999391555786, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('min', 2), False, 0.891915100174153, 7), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.7573258876800537, 9), 'yes'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9965483546257019, 10), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999696016311646, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 853
    },
    {
        "nl": "What are the African countries that have a population less than any country in Asia ?",
        "true_sql": "select country.name where country.continent = value and country.population < ( select max ( country.population ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None], 'and', [False, 4, [0, [0, 14, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.population",
            "<",
            "(",
            "select",
            "max",
            "(",
            "country.population",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 49, [21], 5, 2, [19, 5, 49, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.32270193099975586, 1), ('WHERE_COL', ('country', 'population', 49), 0.9741989374160767, 3), ('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9984738230705261, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'root', 0.9978112578392029, 5), ('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.3542171628478456, 7), ('O', '##END_NESTED##', 0.9288634657859802, 8)]",
        "logprob": "-5.386937769089594",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.3683249354362488, 1), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.9741989374160767, 3), 'yes'), (('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9984738230705261, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'root', 0.9978112578392029, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9950933259514663, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.3683249354362488, 1), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.32270193099975586, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.1515907347202301, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('none_agg', 0), False, 0.07822222262620925, 1), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.9741989374160767, 3), 'yes'), (('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9984738230705261, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'root', 0.9978112578392029, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9950933259514663, 7), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.3542171628478456, 7), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.20484404585868307, 7), 'no'), (('SELECT_AGG_v2', ('city', 'population', 40), ('min', 2), False, 0.1631003718826535, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 854
    },
    {
        "nl": "Which African countries have a smaller population than that of any country in Asia ?",
        "true_sql": "select country.name where country.continent = value and country.population < ( select min ( country.population ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None], 'and', [False, 4, [0, [0, 14, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "country.population",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 49, [21], 5, 2, [26, 5, 49, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.49868151545524597, 1), ('WHERE_COL', ('country', 'population', 49), 0.7388203144073486, 3), ('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9185047149658203, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'root', 0.9951080679893494, 5), ('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9906171071635337, 7), ('O', '##END_NESTED##', 0.8319182991981506, 8)]",
        "logprob": "-1.3150807144718706",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.49868151545524597, 1), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.7388203144073486, 3), 'yes'), (('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9185047149658203, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'root', 0.9951080679893494, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9906171071635337, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.49868151545524597, 1), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.7388203144073486, 3), 'yes'), (('WHERE_OP', (('country', 'population', 49),), ('<', 2), 0.9185047149658203, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('<', 2), 'root', 0.9951080679893494, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9906171071635337, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 855
    },
    {
        "nl": "Which Asian countries have a population that is larger than any country in Africa ?",
        "true_sql": "select country.name where country.continent = value and country.population > ( select max ( country.population ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None], 'and', [False, 3, [0, [0, 14, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.population",
            ">",
            "(",
            "select",
            "max",
            "(",
            "country.population",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 49, [14], 5, 2, [19, 5, 49, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.8065456748008728, 1), ('WHERE_COL', ('country', 'population', 49), 0.12524285912513733, 3), ('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.9972355961799622, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('>', 1), 'root', 0.3058988153934479, 5), ('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.7663226729443636, 7), ('O', '##END_NESTED##', 0.8571344017982483, 8)]",
        "logprob": "-4.705708244201195",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.8065456748008728, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.8530097007751465, 3), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.9972355961799622, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('>', 1), 'terminal', 0.6938703656196594, 5), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.8940439980175511, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.8065456748008728, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.8530097007751465, 3), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.12524285912513733, 3), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.021317362785339355, 3), 'yes'), (('WHERE_COL', ('country', 'headofstate', 55), 0.0002450643223710358, 3), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.9972355961799622, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('>', 1), 'terminal', 0.6938703656196594, 5), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.8940439980175511, 7), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.7663226729443636, 7), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.3024955676964376, 7), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.0016679927939549084, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 856
    },
    {
        "nl": "What are the Asian countries which have a population larger than that of any country in Africa ?",
        "true_sql": "select country.name where country.continent = value and country.population > ( select min ( country.population ) where country.continent = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None], 'and', [False, 3, [0, [0, 14, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 14, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Africa\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "country.population",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 49, [14], 5, 2, [26, 5, 49, 4], 6, 45, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.4483077824115753, 1), ('WHERE_COL', ('country', 'population', 49), 0.8428552746772766, 3), ('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.9995933175086975, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('>', 1), 'root', 0.17957451939582825, 5), ('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9399133646942466, 7), ('WHERE_COL', ('country', 'continent', 45), 0.5098111033439636, 9), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998406171798706, 10), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999954700469971, 11), ('O', '##END_NESTED##', 0.9979825019836426, 12)]",
        "logprob": "-4.038428435797888",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.4483077824115753, 1), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.8428552746772766, 3), 'yes'), (('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.9995933175086975, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('>', 1), 'terminal', 0.8202970623970032, 5), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9399133646942466, 7), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.5098111033439636, 9), 'yes'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998406171798706, 10), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999954700469971, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.4483077824115753, 1), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.8428552746772766, 3), 'yes'), (('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.9995933175086975, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('>', 1), 'terminal', 0.8202970623970032, 5), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.9399133646942466, 7), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.5098111033439636, 9), 'yes'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9998406171798706, 10), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999954700469971, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 857
    },
    {
        "nl": "What are the country codes for countries that do not speak English ?",
        "true_sql": "select countrylanguage.countrycode except select countrylanguage.countrycode where countrylanguage.language = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.countrycode",
            "except",
            "select",
            "countrylanguage.countrycode",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [58], 28, 2, [58], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 4.5372548811428715e-06, 1), ('IUEN_v2', ('except', 3), 0.0005575675750151277, 2), ('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.004603265784680843, 4), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9921776652336121, 6), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.02563423663377762, 7), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999978542327881, 8)]",
        "logprob": "-28.848154533352407",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9850522875785828, 1), 'no'), (('WHERE_COL', ('country', 'code2', 57), 0.6171789765357971, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0005575675750151277, 2), 'yes'), (('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.5693373084068298, 4), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9921776652336121, 6), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.9704906940460205, 7), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999978542327881, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9850522875785828, 1), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.014942088164389135, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 4.5372548811428715e-06, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 6.407405521713371e-07, 1), 'no'), (('WHERE_COL', ('country', 'code2', 57), 0.6171789765357971, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.2391631007194519, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.09244587272405624, 3), 'no'), (('WHERE_COL', ('country', 'code', 43), 0.03736426308751106, 3), 'no'), (('IUEN_v2', ('except', 3), 0.0005575675750151277, 2), 'yes'), (('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.5693373084068298, 4), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.33914756774902344, 4), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.08676933497190477, 4), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.004603265784680843, 4), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9921776652336121, 6), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.9704906940460205, 7), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.02563423663377762, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('not in', 7), 0.06003351481203006, 7), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('<', 2), 0.00010260241833748296, 7), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999978542327881, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 858
    },
    {
        "nl": "Return the country codes for countries that do not speak English .",
        "true_sql": "select countrylanguage.countrycode except select countrylanguage.countrycode where countrylanguage.language = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.countrycode",
            "except",
            "select",
            "countrylanguage.countrycode",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [58], 28, 2, [58], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 1.843882024843421e-08, 1), ('IUEN_v2', ('except', 3), 0.002322206273674965, 2), ('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.00015909021021798242, 4), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9999105930328369, 6), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.023024579510092735, 7), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999997615814209, 8)]",
        "logprob": "-36.39167564461762",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9869309663772583, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.7119808197021484, 3), 'no'), (('IUEN_v2', ('except', 3), 0.002322206273674965, 2), 'yes'), (('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.7061148285865784, 4), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9999105930328369, 6), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.9755861759185791, 7), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999997615814209, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9869309663772583, 1), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.01306888833642006, 1), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 6.004530916925424e-08, 1), 'no'), (('SELECT_AGG_v2', ('city', 'countrycode', 38), ('none_agg', 0), False, 2.2507073538235993e-08, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.7119808197021484, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.2748430073261261, 3), 'no'), (('WHERE_COL', ('country', 'code2', 57), 0.012073501944541931, 3), 'no'), (('WHERE_COL', ('country', 'code', 43), 0.0009115682332776487, 3), 'no'), (('IUEN_v2', ('except', 3), 0.002322206273674965, 2), 'yes'), (('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.7061148285865784, 4), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.24149677157402036, 4), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.0521678999066353, 4), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.00015909021021798242, 4), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9999105930328369, 6), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.9755861759185791, 7), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.023024579510092735, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('not in', 7), 0.03472265596861802, 7), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('<', 2), 4.930294744553976e-05, 7), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999997615814209, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 859
    },
    {
        "nl": "What are the country codes of countries where people use languages other than English ?",
        "true_sql": "select distinct countrylanguage.countrycode where countrylanguage.language != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.countrycode",
            "where",
            "country.name",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [58], 6, 44, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.010115149430930618, 1), ('WHERE_COL', ('country', 'name', 44), 0.00367289362475276, 3), ('WHERE_OP', (('country', 'name', 44),), ('<', 2), 0.5664281845092773, 4), ('WHERE_ROOT_TERM', (('country', 'name', 44),), ('<', 2), 'terminal', 0.9999885559082031, 5)]",
        "logprob": "-11.034045169233874",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.8960782885551453, 1), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9447945952415466, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('<', 2), 0.5664281845092773, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('<', 2), 'terminal', 0.9999885559082031, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.8960782885551453, 1), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.09379322826862334, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.010115149430930618, 1), 'yes'), (('SELECT_AGG_v2', ('city', 'countrycode', 38), ('none_agg', 0), False, 6.785735877201661e-06, 1), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.9447945952415466, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.022148586809635162, 3), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.02028028853237629, 3), 'no'), (('WHERE_COL', ('country', 'code2', 57), 0.008274136111140251, 3), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('<', 2), 0.5664281845092773, 4), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('>', 1), 0.3999125361442566, 4), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('not in', 7), 0.10810000181466906, 4), 'no'), (('WHERE_OP', (('country', 'name', 44),), ('not like', 10), 0.08973213344784713, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'name', 44),), ('<', 2), 'terminal', 0.9999885559082031, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 860
    },
    {
        "nl": "Give the country codes for countries in which people speak langauges that are not English .",
        "true_sql": "select distinct countrylanguage.countrycode where countrylanguage.language != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 24, False], None], '\"English\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.countrycode",
            "where",
            "countrylanguage.language",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [58], 6, 59, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.0003009756037499755, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9299667477607727, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.39636266231536865, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999938011169434, 5)]",
        "logprob": "-9.286218932340653",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9728440046310425, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9299667477607727, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.5862336754798889, 4), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999938011169434, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9728440046310425, 1), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.026854960247874267, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.0003009756037499755, 1), 'yes'), (('SELECT_AGG_v2', ('city', 'countrycode', 38), ('none_agg', 0), False, 8.023979347626661e-08, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9299667477607727, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.5862336754798889, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('!=', 5), 0.39636266231536865, 4), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('in', 8), 0.00704019283875823, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('not in', 7), 0.07683886068195399, 4), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('!=', 5), 'terminal', 0.9999938011169434, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 861
    },
    {
        "nl": "What are the codes of the countries that do not speak English and whose government forms are not Republic ?",
        "true_sql": "select country.code where country.governmentform != value except select countrylanguage.countrycode where countrylanguage.language = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "country.governmentform",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 54, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9887195229530334, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9995633959770203, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.9449142813682556, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999830722808838, 5)]",
        "logprob": "-0.20203668005204484",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9887195229530334, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9995633959770203, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.9449142813682556, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999830722808838, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9887195229530334, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9995633959770203, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.9449142813682556, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999830722808838, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 862
    },
    {
        "nl": "Return the codes of countries that do not speak English and do not have Republics for governments .",
        "true_sql": "select country.code where country.governmentform != value except select countrylanguage.countrycode where countrylanguage.language = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 19, False], None], '\"Republic\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.code",
            "where",
            "country.governmentform",
            "!=",
            "value",
            "except",
            "select",
            "countrylanguage.countrycode",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 54, [29], 3, 28, 2, [58], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9161444306373596, 1), ('WHERE_COL', ('country', 'governmentform', 54), 0.9606561660766602, 3), ('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.7207705974578857, 4), ('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999849796295166, 5), ('IUEN_v2', ('except', 3), 0.03907054290175438, 6), ('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.03601681441068649, 8), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9538134336471558, 10), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9952648878097534, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999992847442627, 12)]",
        "logprob": "-7.075802130142391",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9161444306373596, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9606561660766602, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.7207705974578857, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999849796295166, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.5218592286109924, 6), 'no'), (('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9110438227653503, 8), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9538134336471558, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9952648878097534, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999992847442627, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9161444306373596, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.9606561660766602, 3), 'yes'), (('WHERE_OP', (('country', 'governmentform', 54),), ('!=', 5), 0.7207705974578857, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'governmentform', 54),), ('!=', 5), 'terminal', 0.9999849796295166, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.5218592286109924, 6), 'no'), (('IUEN_v2', ('except', 3), 0.03907054290175438, 6), 'yes'), (('IUEN_v2', ('union', 2), 0.005136700347065926, 6), 'no'), (('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9110438227653503, 8), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.0487413927912712, 8), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 0.03601681441068649, 8), 'yes'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.0037249468732625237, 8), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9538134336471558, 10), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9952648878097534, 11), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999992847442627, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 863
    },
    {
        "nl": "Which cities are in European countries where English is not the official language ?",
        "true_sql": "select distinct city.name where country.continent = value and country.name not in ( select country.name where countrylanguage.isofficial = value and countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None], 'and', [True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"T\"', None], 'and', [False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "except",
            "select",
            "city.name",
            "where",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 60, [7], 3, 28, 2, [37], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9537374377250671, 1), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.018099816516041756, 3), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.6715047359466553, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.999996542930603, 5), ('IUEN_v2', ('except', 3), 0.8793946504592896, 6), ('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.8313461542129517, 8), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9689249396324158, 10), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.8499409556388855, 11), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999972581863403, 12)]",
        "logprob": "-5.43136709777325",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9537374377250671, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.3962923288345337, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.6715047359466553, 4), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.999996542930603, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9537374377250671, 1), 'yes'), (('WHERE_COL', ('country', 'governmentform', 54), 0.3962923288345337, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.37512046098709106, 3), 'no'), (('WHERE_COL', ('country', 'localname', 53), 0.16185171902179718, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.028488535434007645, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.6715047359466553, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('!=', 5), 0.28868556022644043, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('in', 8), 0.020511558279395103, 4), 'no'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('not in', 7), 0.1170764324515987, 4), 'no'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.999996542930603, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 864
    },
    {
        "nl": "What are the names of cities in Europe for which English is not the official language ?",
        "true_sql": "select distinct city.name where country.continent = value and country.name not in ( select country.name where countrylanguage.isofficial = value and countrylanguage.language = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None], 'and', [True, 8, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"T\"', None], 'and', [False, 2, [0, [0, 24, False], None], '\"English\"', None]]}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "sqlite_sequence.seq",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 42, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999815225601196, 1), ('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.021581096574664116, 3), ('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 0.8478806614875793, 4), ('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 'terminal', 0.9999877214431763, 5)]",
        "logprob": "-4.038593809199444",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999815225601196, 1), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.6716038584709167, 3), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 0.8478806614875793, 4), 'no'), (('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 'terminal', 0.9999877214431763, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999815225601196, 1), 'yes'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.6716038584709167, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.22185152769088745, 3), 'no'), (('WHERE_COL', ('city', 'name', 37), 0.03651626035571098, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.031493399292230606, 3), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 0.8478806614875793, 4), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('not in', 7), 0.2513324484747402, 4), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('in', 8), 0.03865927830338478, 4), 'no'), (('WHERE_OP', (('sqlite_sequence', 'seq', 42),), ('=', 0), 0.03316180408000946, 4), 'no'), (('WHERE_ROOT_TERM', (('sqlite_sequence', 'seq', 42),), ('!=', 5), 'terminal', 0.9999877214431763, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 865
    },
    {
        "nl": "Whic ` h unique cities are in Asian countries where Chinese is the official language ?",
        "true_sql": "select distinct city.name where countrylanguage.isofficial = value and countrylanguage.language = value and country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"T\"', None], 'and', [False, 2, [0, [0, 24, False], None], '\"Chinese\"', None], 'and', [False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "and",
            "countrylanguage.isofficial",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 59, [7], 3, 16, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9300666451454163, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.0003504406486172229, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999719858169556, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999915361404419, 5), ('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9134445786476135, 7), ('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998598098754883, 8), ('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999896287918091, 9)]",
        "logprob": "-8.172483434259428",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9300666451454163, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.8975204229354858, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999719858169556, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999915361404419, 5), 'yes'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9134445786476135, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998598098754883, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999896287918091, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9300666451454163, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.8975204229354858, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.09776869416236877, 3), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.003138019470497966, 3), 'no'), (('WHERE_COL', ('country', 'localname', 53), 0.0009810688206925988, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999719858169556, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999915361404419, 5), 'yes'), (('WHERE_COL', ('countrylanguage', 'isofficial', 60), 0.9134445786476135, 7), 'yes'), (('WHERE_OP', (('countrylanguage', 'isofficial', 60),), ('=', 0), 0.9998598098754883, 8), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'isofficial', 60),), ('=', 0), 'terminal', 0.9999896287918091, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 866
    },
    {
        "nl": "Return the different names of cities that are in Asia and for which Chinese is the official language .",
        "true_sql": "select distinct city.name where countrylanguage.isofficial = value and countrylanguage.language = value and country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"T\"', None], 'and', [False, 2, [0, [0, 24, False], None], '\"Chinese\"', None], 'and', [False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "city.name",
            ",",
            "city.name",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 8, [37], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9986875653266907, 2), ('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.10289774090051652, 4), ('WHERE_COL', ('countrylanguage', 'language', 59), 1.0, 6), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.999874472618103, 7), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999995231628418, 8)]",
        "logprob": "-10.837095199066091",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9986875653266907, 2), 'yes'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.3967396020889282, 4), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.998895525932312, 6), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.999874472618103, 7), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999995231628418, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9986875653266907, 2), 'yes'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.3967396020889282, 4), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'isofficial', 60), ('none_agg', 0), False, 0.3083149790763855, 4), 'no'), (('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.10289774090051652, 4), 'yes'), (('SELECT_AGG_v2', ('city', 'countrycode', 38), ('none_agg', 0), False, 0.09158165752887727, 4), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.998895525932312, 6), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 0.00042670188122428954, 6), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.0003130768018309027, 6), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.00019827589858323336, 6), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.999874472618103, 7), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999995231628418, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 867
    },
    {
        "nl": "What are the name , independence year , and surface area of the country with the smallest population ?",
        "true_sql": "select country.name , country.surfacearea , country.indepyear order_by country.population limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.surfacearea",
            ",",
            "country.indepyear",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [47], 8, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9989147186279297, 1), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.2721141278743744, 3), ('SELECT_AGG_v2', ('country', 'indepyear', 48), ('none_agg', 0), False, 0.0056742653250694275, 5)]",
        "logprob": "-9.727432593269876",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9989147186279297, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.30814051628112793, 3), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.8904376029968262, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9989147186279297, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.30814051628112793, 3), 'no'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.2721141278743744, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.2223567068576813, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'indepyear', 48), ('none_agg', 0), False, 0.17953255772590637, 3), 'yes'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.8904376029968262, 7), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.10938806086778641, 7), 'no'), (('WHERE_COL', ('country', 'indepyear', 48), 0.00010009061224991456, 7), 'no'), (('WHERE_COL', ('country', 'name', 44), 3.520934114931151e-05, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 868
    },
    {
        "nl": "Give the name , year of independence , and surface area of the country that has the lowest population .",
        "true_sql": "select country.name , country.surfacearea , country.indepyear order_by country.population limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 13, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.indepyear",
            ",",
            "country.surfacearea",
            "order_by",
            "country.population",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [48], 8, [47], 11, [49], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999890327453613, 1), ('SELECT_AGG_v2', ('country', 'indepyear', 48), ('none_agg', 0), False, 0.3388216197490692, 3), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.018777990713715557, 5), ('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.2186023443937302, 7), ('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'asc', 0.6717234253883362, 8), ('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9980050921440125, 9)]",
        "logprob": "-7.559594665230095",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999890327453613, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'indepyear', 48), ('none_agg', 0), False, 0.3388216197490692, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9604910612106323, 5), 'no'), (('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.7813965678215027, 7), 'no'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'asc', 0.6717234253883362, 8), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9980050921440125, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999890327453613, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'indepyear', 48), ('none_agg', 0), False, 0.3388216197490692, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9604910612106323, 5), 'no'), (('SELECT_AGG_v2', ('country', 'indepyear', 48), ('none_agg', 0), False, 0.02070320211350918, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.018777990713715557, 5), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.057099571535133786, 5), 'no'), (('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.7813965678215027, 7), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.2186023443937302, 7), 'yes'), (('ORDER_AGG_v2', ('country', 'indepyear', 48), ('none_agg', 0), False, 8.37894788219273e-07, 7), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('none_agg', 0), False, 1.714015382958678e-07, 7), 'no'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'asc', 0.6717234253883362, 8), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9980050921440125, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 869
    },
    {
        "nl": "What are the population , name and leader of the country with the largest area ?",
        "true_sql": "select country.name , country.population , country.headofstate order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.population",
            ",",
            "country.name",
            ",",
            "country.name",
            "order_by",
            "country.surfacearea",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [49], 8, [44], 8, [44], 11, [47], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9970632195472717, 1), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5814651250839233, 3), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5778114795684814, 5), ('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.9946812987327576, 7), ('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9873809814453125, 8), ('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.99993896484375, 9)]",
        "logprob": "-1.1785983582400368",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9970632195472717, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5814651250839233, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5778114795684814, 5), 'yes'), (('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.9946812987327576, 7), 'yes'), (('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9873809814453125, 8), 'yes'), (('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.99993896484375, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9970632195472717, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5814651250839233, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.5778114795684814, 5), 'yes'), (('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.9946812987327576, 7), 'yes'), (('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9873809814453125, 8), 'yes'), (('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.99993896484375, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 870
    },
    {
        "nl": "Give the name , population , and head of state for the country that has the largest area .",
        "true_sql": "select country.name , country.population , country.headofstate order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.headofstate",
            ",",
            "country.population",
            "order_by",
            "country.surfacearea",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [55], 8, [49], 11, [47], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9996939897537231, 1), ('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.30321916937828064, 3), ('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.6780336499214172, 5), ('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.02012214064598084, 7), ('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9665339589118958, 8), ('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9999228715896606, 9)]",
        "logprob": "-5.527296888342433",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9996939897537231, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'localname', 53), ('none_agg', 0), False, 0.6924610733985901, 3), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.6780336499214172, 5), 'yes'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9797167181968689, 7), 'no'), (('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9665339589118958, 8), 'yes'), (('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9999228715896606, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9996939897537231, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'localname', 53), ('none_agg', 0), False, 0.6924610733985901, 3), 'no'), (('SELECT_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.30321916937828064, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.0021893002558499575, 3), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.0013633519411087043, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.6780336499214172, 5), 'yes'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9797167181968689, 7), 'no'), (('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.02012214064598084, 7), 'yes'), (('ORDER_AGG_v2', ('country', 'headofstate', 55), ('none_agg', 0), False, 0.00013765400217380367, 7), 'no'), (('ORDER_AGG_v2', ('country', 'localname', 53), ('none_agg', 0), False, 1.2523257282737187e-05, 7), 'no'), (('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9665339589118958, 8), 'yes'), (('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9999228715896606, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 871
    },
    {
        "nl": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages .",
        "true_sql": "select count ( countrylanguage.language ) , country.name group_by country.name having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 9, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.name",
            ",",
            "max",
            "(",
            "country.population",
            ")",
            "group_by",
            "country.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [44], 8, [19, 5, 49, 4], 10, 44, 18, [9, 5, 35, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9988754391670227, 1), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.013635397888720039, 3), ('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.07546801449574145, 5), ('GROUP_COL', ('country', 'name', 44), 0.08299597352743149, 7), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.11927100061817532, 9), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9995073080062866, 10), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.023483239114284515, 11)]",
        "logprob": "-30.039089581829874",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9988754391670227, 1), 'yes'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9893620331890804, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.16562485568424562, 5), 'no'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.916823148727417, 7), 'no'), (('HAV_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9990086991195182, 9), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.986064031683978, 10), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.023483239114284515, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9988754391670227, 1), 'yes'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9893620331890804, 3), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.3731179613349888, 3), 'no'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.013635397888720039, 3), 'yes'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.0050000343471765536, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.16562485568424562, 5), 'no'), (('SELECT_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.11110922483759013, 5), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.11079815237145299, 5), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 7.040169293759393e-05, 5), 'no'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.916823148727417, 7), 'no'), (('GROUP_COL', ('country', 'name', 44), 0.08299597352743149, 7), 'yes'), (('GROUP_COL', ('countrylanguage', 'countrycode', 58), 0.00016513315495103598, 7), 'no'), (('GROUP_COL', ('country', 'localname', 53), 7.090590315783629e-06, 7), 'no'), (('HAV_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9990086991195182, 9), 'no'), (('HAV_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.24497549042723613, 9), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.11927100061817532, 9), 'yes'), (('HAV_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.09920452510955963, 9), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.986064031683978, 10), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9995073080062866, 10), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('between', 9), 5.514846634468995e-05, 10), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('<', 2), 1.6574955225223675e-05, 10), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 'terminal', 0.023483239114284515, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 872
    },
    {
        "nl": "What are the names of countries that speak more than 2 languages , as well as how many languages they speak ?",
        "true_sql": "select count ( countrylanguage.language ) , country.name group_by country.name having count ( * ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [[0, 9, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 24, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.name",
            "group_by",
            "country.name",
            "having",
            "(",
            "country.*",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [44], 10, 44, 18, [5, 64, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999986886978149, 1), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.4961492121219635, 3), ('GROUP_COL', ('country', 'name', 44), 0.02006181888282299, 5), ('HAV_AGG_v2', ('country', '*', 64), ('none_agg', 0), False, 0.019625478501401086, 7), ('HAV_OP_v2', (('country', '*', 64), ('none_agg', 0), False), ('>', 1), 0.9999068975448608, 8), ('HAV_ROOT_TERM_v2', (('country', '*', 64), ('none_agg', 0), False), ('>', 1), 'terminal', 0.9987278580665588, 9)]",
        "logprob": "-16.49293959851768",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.4961492121219635, 3), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9633995294570923, 5), 'no'), (('HAV_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9994104163673427, 7), 'no'), (('HAV_OP_v2', (('country', '*', 64), ('none_agg', 0), False), ('>', 1), 0.9999068975448608, 8), 'no'), (('HAV_ROOT_TERM_v2', (('country', '*', 64), ('none_agg', 0), False), ('>', 1), 'terminal', 0.9987278580665588, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999986886978149, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.4961492121219635, 3), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9633995294570923, 5), 'no'), (('GROUP_COL', ('country', 'name', 44), 0.02006181888282299, 5), 'yes'), (('GROUP_COL', ('country', 'continent', 45), 0.010076620616018772, 5), 'no'), (('GROUP_COL', ('country', 'code2', 57), 0.0023117035161703825, 5), 'no'), (('HAV_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9994104163673427, 7), 'no'), (('HAV_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.21728466108710645, 7), 'no'), (('HAV_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.09192882712281471, 7), 'no'), (('HAV_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.05523747899855113, 7), 'no'), (('HAV_OP_v2', (('country', '*', 64), ('none_agg', 0), False), ('>', 1), 0.9999068975448608, 8), 'no'), (('HAV_OP_v2', (('country', '*', 64), ('none_agg', 0), False), ('>=', 3), 0.035557833723802036, 8), 'no'), (('HAV_OP_v2', (('country', '*', 64), ('none_agg', 0), False), ('<', 2), 1.6827403669594787e-05, 8), 'no'), (('HAV_OP_v2', (('country', '*', 64), ('none_agg', 0), False), ('between', 9), 1.3901454622100573e-05, 8), 'no'), (('HAV_ROOT_TERM_v2', (('country', '*', 64), ('none_agg', 0), False), ('>', 1), 'terminal', 0.9987278580665588, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 873
    },
    {
        "nl": "Find the number of cities in each district whose population is greater than the average population of cities ?",
        "true_sql": "select count ( city.* ) , city.district where city.population > ( select avg ( city.population ) ) group_by city.district",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 5, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'city.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "city.*",
            ")",
            ",",
            "city.district",
            "where",
            "city.population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "city.population",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 62, 4], 8, [39], 6, 40, [14], 5, 2, [17, 5, 40, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.9915668459026383, 1), ('SELECT_AGG_v2', ('city', 'district', 39), ('none_agg', 0), False, 0.9928492307662964, 3), ('WHERE_COL', ('city', 'population', 40), 0.9930082559585571, 5), ('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.9998260140419006, 6), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('>', 1), 'root', 0.8638195991516113, 7), ('SELECT_AGG_v2', ('city', 'population', 40), ('avg', 5), False, 0.9986348190683397, 9), ('O', '##END_NESTED##', 0.999422550201416, 10)]",
        "logprob": "-0.33422016188425746",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.9915668459026383, 1), 'yes'), (('SELECT_AGG_v2', ('city', 'district', 39), ('none_agg', 0), False, 0.9928492307662964, 3), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9930082559585571, 5), 'yes'), (('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.9998260140419006, 6), 'yes'), (('WHERE_ROOT_TERM', (('city', 'population', 40),), ('>', 1), 'root', 0.8638195991516113, 7), 'yes'), (('SELECT_AGG_v2', ('city', 'population', 40), ('avg', 5), False, 0.9986348190683397, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.9915668459026383, 1), 'yes'), (('SELECT_AGG_v2', ('city', 'district', 39), ('none_agg', 0), False, 0.9928492307662964, 3), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9930082559585571, 5), 'yes'), (('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.9998260140419006, 6), 'yes'), (('WHERE_ROOT_TERM', (('city', 'population', 40),), ('>', 1), 'root', 0.8638195991516113, 7), 'yes'), (('SELECT_AGG_v2', ('city', 'population', 40), ('avg', 5), False, 0.9986348190683397, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 874
    },
    {
        "nl": "How many cities in each district have a population that is above the average population across all cities ?",
        "true_sql": "select count ( city.* ) , city.district where city.population > ( select avg ( city.population ) ) group_by city.district",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 5, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {'select': 'city.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "city.*",
            ")",
            ",",
            "city.district",
            "group_by",
            "city.district",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 62, 4], 8, [39], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.9994571039639696, 1), ('SELECT_AGG_v2', ('city', 'district', 39), ('none_agg', 0), False, 0.9995670914649963, 3), ('GROUP_COL', ('city', 'district', 39), 0.9999762773513794, 5)]",
        "logprob": "-1.3326319651948222",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.9994571039639696, 1), 'yes'), (('SELECT_AGG_v2', ('city', 'district', 39), ('none_agg', 0), False, 0.9995670914649963, 3), 'yes'), (('GROUP_COL', ('city', 'district', 39), 0.9999762773513794, 5), 'yes'), (('HAV_AGG_v2', ('city', 'population', 40), ('avg', 5), False, 0.9946274122332323, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.9994571039639696, 1), 'yes'), (('SELECT_AGG_v2', ('city', 'district', 39), ('none_agg', 0), False, 0.9995670914649963, 3), 'yes'), (('GROUP_COL', ('city', 'district', 39), 0.9999762773513794, 5), 'yes'), (('HAV_AGG_v2', ('city', 'population', 40), ('avg', 5), False, 0.9946274122332323, 7), 'no'), (('HAV_AGG_v2', ('city', '*', 62), ('count', 3), False, 0.3797136418133916, 7), 'no'), (('HAV_AGG_v2', ('city', 'population', 40), ('sum', 4), False, 0.11867085855286404, 7), 'no'), (('HAV_AGG_v2', ('city', 'population', 40), ('count', 3), False, 0.09687926867645909, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 875
    },
    {
        "nl": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
        "true_sql": "select sum ( country.population ) , country.governmentform group_by country.governmentform having avg ( country.lifeexpectancy ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [[False, 3, [0, [5, 15, False], None], 72.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.governmentform",
            ",",
            "country.governmentform",
            ",",
            "max",
            "(",
            "country.lifeexpectancy",
            ")",
            "group_by",
            "country.governmentform",
            "having",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [54], 8, [54], 8, [19, 5, 50, 4], 10, 54, 18, [17, 5, 50, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.9913903474807739, 1), ('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.4582907557487488, 3), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('max', 1), False, 0.15064445030682633, 5), ('GROUP_COL', ('country', 'governmentform', 54), 0.9993103742599487, 7), ('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996921691617001, 9), ('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 0.9972201585769653, 10), ('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 'terminal', 0.9895915389060974, 11)]",
        "logprob": "-15.203705823251848",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.9913903474807739, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.4582907557487488, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9865359642036989, 5), 'no'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9904025793075562, 7), 'no'), (('GROUP_COL', ('country', 'governmentform', 54), 0.9993103742599487, 7), 'yes'), (('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996921691617001, 9), 'yes'), (('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 0.9972201585769653, 10), 'yes'), (('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 'terminal', 0.9895915389060974, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.9913903474807739, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.4582907557487488, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9865359642036989, 5), 'no'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.04818103834986687, 5), 'no'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('min', 2), False, 0.18851670215969943, 5), 'no'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('none_agg', 0), False, 0.8101720808798932, 5), 'no'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.9904025793075562, 7), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 0.003448758739978075, 7), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.002795029664412141, 7), 'no'), (('WHERE_COL', ('countrylanguage', 'percentage', 61), 0.002237647073343396, 7), 'no'), (('GROUP_COL', ('country', 'governmentform', 54), 0.9993103742599487, 7), 'yes'), (('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996921691617001, 9), 'yes'), (('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 0.9972201585769653, 10), 'yes'), (('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 'terminal', 0.9895915389060974, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 876
    },
    {
        "nl": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
        "true_sql": "select sum ( country.population ) , country.governmentform group_by country.governmentform having avg ( country.lifeexpectancy ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [[False, 3, [0, [5, 15, False], None], 72.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "country.governmentform",
            ",",
            "count",
            "(",
            "distinct",
            "country.lifeexpectancy",
            ")",
            "group_by",
            "country.governmentform",
            "having",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [54], 8, [9, 5, 15, 50, 4], 10, 54, 18, [17, 5, 50, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.9996042847633362, 2), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('count', 3), True, 0.2748037172398149, 4), ('GROUP_COL', ('country', 'governmentform', 54), 0.9999995231628418, 6), ('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9990635155919951, 8), ('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 0.9990719556808472, 9), ('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 'terminal', 0.9826822280883789, 10)]",
        "logprob": "-10.886864326170528",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.9996042847633362, 2), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.993506824472433, 4), 'no'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.999896764755249, 6), 'no'), (('GROUP_COL', ('country', 'governmentform', 54), 0.9999995231628418, 6), 'yes'), (('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9990635155919951, 8), 'yes'), (('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 0.9990719556808472, 9), 'yes'), (('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 'terminal', 0.9826822280883789, 10), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'governmentform', 54), ('none_agg', 0), False, 0.9996042847633362, 2), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.993506824472433, 4), 'no'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('sum', 4), False, 0.34789945934880795, 4), 'no'), (('SELECT_AGG_v2', ('country', 'governmentform', 54), ('count', 3), True, 0.3492656577386881, 4), 'no'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('max', 1), False, 0.20206075532885076, 4), 'no'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.999896764755249, 6), 'no'), (('WHERE_COL', ('country', 'population', 49), 4.69220794911962e-05, 6), 'no'), (('WHERE_COL', ('city', 'population', 40), 4.1633065848145634e-05, 6), 'no'), (('WHERE_COL', ('country', 'governmentform', 54), 1.0024626135418657e-05, 6), 'no'), (('GROUP_COL', ('country', 'governmentform', 54), 0.9999995231628418, 6), 'yes'), (('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9990635155919951, 8), 'yes'), (('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 0.9990719556808472, 9), 'yes'), (('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('>', 1), 'terminal', 0.9826822280883789, 10), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 877
    },
    {
        "nl": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 ?",
        "true_sql": "select sum ( country.population ) , avg ( country.lifeexpectancy ) , country.continent group_by country.continent having avg ( country.lifeexpectancy ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 4, [0, [5, 15, False], None], 72.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 15, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            ",",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            ",",
            "country.continent",
            "group_by",
            "country.continent",
            "having",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 50, 4], 8, [17, 5, 50, 4], 8, [45], 10, 45, 18, [17, 5, 50, 4], [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.986913087080993, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.8588405471950263, 3), ('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9103010296821594, 5), ('GROUP_COL', ('country', 'continent', 45), 0.9998525381088257, 7), ('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9956641302170013, 9), ('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 0.9703148007392883, 10), ('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 'terminal', 0.9642688632011414, 11)]",
        "logprob": "-6.791158052584472",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.986913087080993, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.8588405471950263, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9103010296821594, 5), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.4967261552810669, 7), 'no'), (('GROUP_COL', ('country', 'continent', 45), 0.9998525381088257, 7), 'yes'), (('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9956641302170013, 9), 'yes'), (('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 0.9703148007392883, 10), 'yes'), (('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 'terminal', 0.9642688632011414, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.986913087080993, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.8588405471950263, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9103010296821594, 5), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.4967261552810669, 7), 'no'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.4903205633163452, 7), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.012941419146955013, 7), 'no'), (('WHERE_COL', ('countrylanguage', 'percentage', 61), 6.8966514845669735e-06, 7), 'no'), (('GROUP_COL', ('country', 'continent', 45), 0.9998525381088257, 7), 'yes'), (('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9956641302170013, 9), 'yes'), (('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 0.9703148007392883, 10), 'yes'), (('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 'terminal', 0.9642688632011414, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 878
    },
    {
        "nl": "What are the different continents and the total popuation and average life expectancy corresponding to each , for continents that have an average life expectancy less than 72 ?",
        "true_sql": "select sum ( country.population ) , avg ( country.lifeexpectancy ) , country.continent group_by country.continent having avg ( country.lifeexpectancy ) < value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 4, [0, [5, 15, False], None], 72.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 15, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.continent",
            ",",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "group_by",
            "country.continent",
            "having",
            "avg",
            "(",
            "country.lifeexpectancy",
            ")",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [17, 5, 50, 4], 10, 45, 18, [17, 5, 50, 4], [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9203805923461914, 1), ('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9987091565802031, 3), ('GROUP_COL', ('country', 'continent', 45), 1.0, 5), ('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996538637461957, 7), ('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 0.9907435774803162, 8), ('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 'terminal', 0.957112193107605, 9)]",
        "logprob": "-5.710529026646453",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9203805923461914, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9987091565802031, 3), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.985882043838501, 5), 'no'), (('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996538637461957, 7), 'yes'), (('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 0.9907435774803162, 8), 'yes'), (('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 'terminal', 0.957112193107605, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.9203805923461914, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9987091565802031, 3), 'yes'), (('WHERE_COL', ('country', 'lifeexpectancy', 50), 0.985882043838501, 5), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.01344115287065506, 5), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.00045238775783218443, 5), 'no'), (('WHERE_COL', ('countrylanguage', 'percentage', 61), 0.00019546561816241592, 5), 'no'), (('HAV_AGG_v2', ('country', 'lifeexpectancy', 50), ('avg', 5), False, 0.9996538637461957, 7), 'yes'), (('HAV_OP_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 0.9907435774803162, 8), 'yes'), (('HAV_ROOT_TERM_v2', (('country', 'lifeexpectancy', 50), ('avg', 5), False), ('<', 2), 'terminal', 0.957112193107605, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 879
    },
    {
        "nl": "What are the names and areas of countries with the top 5 largest area ?",
        "true_sql": "select country.name , country.surfacearea order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 5, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.name",
            "order_by",
            "country.surfacearea",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [44], 11, [47], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999889135360718, 1), ('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.8291024565696716, 3), ('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.9992889165878296, 5), ('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9781889319419861, 6), ('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9999549388885498, 7)]",
        "logprob": "-0.21500274435919006",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999889135360718, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.8291024565696716, 3), 'yes'), (('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.9992889165878296, 5), 'yes'), (('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9781889319419861, 6), 'yes'), (('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9999549388885498, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999889135360718, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.8291024565696716, 3), 'yes'), (('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.9992889165878296, 5), 'yes'), (('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9781889319419861, 6), 'yes'), (('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9999549388885498, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 880
    },
    {
        "nl": "Return the names and surface areas of the 5 largest countries .",
        "true_sql": "select country.name , country.surfacearea order_by country.surfacearea desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 5, 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            ",",
            "country.surfacearea",
            "order_by",
            "country.surfacearea",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [47], 11, [47], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999282360076904, 1), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.8750751614570618, 3), ('ORDER_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 1.0, 5), ('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9906871914863586, 6), ('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9998689889907837, 7)]",
        "logprob": "-0.17636518372323162",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999282360076904, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.8750751614570618, 3), 'yes'), (('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9906871914863586, 6), 'yes'), (('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9998689889907837, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999282360076904, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('none_agg', 0), False, 0.8750751614570618, 3), 'yes'), (('ORDER_DESC_ASC', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'desc', 0.9906871914863586, 6), 'yes'), (('ORDER_LIMIT', (('country', 'surfacearea', 47), ('none_agg', 0), False), 'limit_value', 0.9998689889907837, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 881
    },
    {
        "nl": "What are names of countries with the top 3 largest population ?",
        "true_sql": "select country.name order_by country.population desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['desc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "order_by",
            "country.population",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [49], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999943971633911, 1), ('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999978542327881, 3), ('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'desc', 0.9903053045272827, 4), ('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9999454021453857, 5)]",
        "logprob": "-0.5474339718027084",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999943971633911, 1), 'yes'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999978542327881, 3), 'yes'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'desc', 0.9903053045272827, 4), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9999454021453857, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999943971633911, 1), 'yes'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999978542327881, 3), 'yes'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'desc', 0.9903053045272827, 4), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9999454021453857, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 882
    },
    {
        "nl": "Return the names of the 3 most populated countries .",
        "true_sql": "select country.name order_by country.population desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['desc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "order_by",
            "country.population",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [49], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999227523803711, 1), ('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999748468399048, 3), ('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'desc', 0.9962583780288696, 4), ('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9999009370803833, 5)]",
        "logprob": "-4.508976341895108",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999227523803711, 1), 'yes'), (('GROUP_COL', ('country', 'region', 46), 0.5970579385757446, 3), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999748468399048, 3), 'yes'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'desc', 0.9962583780288696, 4), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9999009370803833, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999227523803711, 1), 'yes'), (('GROUP_COL', ('country', 'region', 46), 0.5970579385757446, 3), 'no'), (('GROUP_COL', ('country', 'name', 44), 0.3088310658931732, 3), 'no'), (('GROUP_COL', ('country', 'continent', 45), 0.08770464360713959, 3), 'no'), (('GROUP_COL', ('country', 'population', 49), 0.002832088153809309, 3), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999748468399048, 3), 'yes'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'desc', 0.9962583780288696, 4), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9999009370803833, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 883
    },
    {
        "nl": "What are the names of the nations with the 3 lowest populations ?",
        "true_sql": "select country.name order_by country.population asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "order_by",
            "country.population",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [49], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9997803568840027, 1), ('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999997615814209, 3), ('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9469318389892578, 4)]",
        "logprob": "-0.1795823182649861",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9997803568840027, 1), 'yes'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999997615814209, 3), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9469318389892578, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9997803568840027, 1), 'yes'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9999997615814209, 3), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9469318389892578, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 884
    },
    {
        "nl": "Return the names of the 3 countries with the fewest people .",
        "true_sql": "select country.name order_by country.population asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 3, 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "order_by",
            "country.population",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 11, [49], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999239444732666, 1), ('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9998314380645752, 3), ('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'asc', 0.5501874685287476, 4), ('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9998903274536133, 5)]",
        "logprob": "-7.029801183511996",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999239444732666, 1), 'yes'), (('GROUP_COL', ('country', 'region', 46), 0.7881021499633789, 3), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9998314380645752, 3), 'yes'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'asc', 0.5501874685287476, 4), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9998903274536133, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9999239444732666, 1), 'yes'), (('GROUP_COL', ('country', 'region', 46), 0.7881021499633789, 3), 'no'), (('GROUP_COL', ('country', 'name', 44), 0.21104618906974792, 3), 'no'), (('GROUP_COL', ('country', 'code2', 57), 0.0006339027895592153, 3), 'no'), (('GROUP_COL', ('country', 'population', 49), 5.791349394712597e-05, 3), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('none_agg', 0), False, 0.9998314380645752, 3), 'yes'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('none_agg', 0), False), 'asc', 0.5501874685287476, 4), 'yes'), (('ORDER_LIMIT', (('country', 'population', 49), ('none_agg', 0), False), 'limit_value', 0.9998903274536133, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 885
    },
    {
        "nl": "how many countries are in Asia ?",
        "true_sql": "select count ( country.* ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {'select': 'country.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9999508676027259, 1), ('WHERE_COL', ('country', 'continent', 45), 1.0, 3), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9991511106491089, 4), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-3.7375557112925284",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9999508676027259, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9760529398918152, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9991511106491089, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9999508676027259, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9760529398918152, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.023870155215263367, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 4.838700988329947e-05, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 2.8392243621055968e-05, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9991511106491089, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 886
    },
    {
        "nl": "Count the number of countries in Asia .",
        "true_sql": "select count ( country.* ) where country.continent = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Asia\"', None]], 'extracted_clause_asterisk': {'select': 'country.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.*",
            ")",
            "where",
            "country.continent",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 64, 4], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998463042885425, 1), ('WHERE_COL', ('country', 'continent', 45), 1.0, 3), ('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9967890977859497, 4), ('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999960660934448, 5)]",
        "logprob": "-5.507437808931192",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998463042885425, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9956029653549194, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9967890977859497, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999960660934448, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998463042885425, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9956029653549194, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.004360859747976065, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 2.0027619029860944e-05, 3), 'no'), (('WHERE_COL', ('country', 'headofstate', 55), 1.6060019333963282e-05, 3), 'no'), (('WHERE_OP', (('country', 'continent', 45),), ('=', 0), 0.9967890977859497, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'continent', 45),), ('=', 0), 'terminal', 0.9999960660934448, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 887
    },
    {
        "nl": "What are the names of the countries that are in the continent of Europe and have a population of 80000 ?",
        "true_sql": "select country.name where country.continent = value and country.population = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None], 'and', [False, 2, [0, [0, 14, False], None], '\"80000\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.population",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 49, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9881548881530762, 1), ('WHERE_COL', ('country', 'population', 49), 0.09607008099555969, 3), ('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.7814725041389465, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999816417694092, 5)]",
        "logprob": "-11.301666494058873",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9881548881530762, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9004800915718079, 3), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.7814725041389465, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999816417694092, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9862515330314636, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9881548881530762, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9004800915718079, 3), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.09607008099555969, 3), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.0033721113577485085, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 5.727916141040623e-05, 3), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.7814725041389465, 4), 'yes'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999816417694092, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9862515330314636, 6), 'no'), (('IUEN_v2', ('except', 3), 0.0031486796215176582, 6), 'no'), (('IUEN_v2', ('union', 2), 0.0007148672011680901, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 888
    },
    {
        "nl": "Give the names of countries that are in Europe and have a population equal to 80000 .",
        "true_sql": "select country.name where country.continent = value and country.population = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 9, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"Europe\"', None], 'and', [False, 2, [0, [0, 14, False], None], '\"80000\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "country.name",
            "where",
            "country.population",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 6, 49, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9774214029312134, 1), ('WHERE_COL', ('country', 'population', 49), 0.08788827061653137, 3), ('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.33656740188598633, 4), ('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999903440475464, 5)]",
        "logprob": "-12.18814376491211",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9774214029312134, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9096609950065613, 3), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.4942532777786255, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999903440475464, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.7664587497711182, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'name', 44), ('none_agg', 0), False, 0.9774214029312134, 1), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9096609950065613, 3), 'no'), (('WHERE_COL', ('country', 'population', 49), 0.08788827061653137, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 0.001869275700300932, 3), 'no'), (('WHERE_COL', ('country', 'continent', 45), 0.0005665878998115659, 3), 'yes'), (('WHERE_OP', (('country', 'population', 49),), ('>', 1), 0.4942532777786255, 4), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('=', 0), 0.33656740188598633, 4), 'yes'), (('WHERE_OP', (('country', 'population', 49),), ('in', 8), 0.14141498506069183, 4), 'no'), (('WHERE_OP', (('country', 'population', 49),), ('between', 9), 0.01104712300002575, 4), 'no'), (('WHERE_ROOT_TERM', (('country', 'population', 49),), ('=', 0), 'terminal', 0.9999903440475464, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.7664587497711182, 6), 'no'), (('IUEN_v2', ('except', 3), 0.01977609284222126, 6), 'no'), (('IUEN_v2', ('union', 2), 0.014150024391710758, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 889
    },
    {
        "nl": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
        "true_sql": "select sum ( country.population ) , avg ( country.surfacearea ) where country.continent = value and country.surfacearea > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"North America\"', None], 'and', [False, 3, [0, [0, 12, False], None], 3000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.population",
            ")",
            ",",
            "avg",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.surfacearea",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 49, 4], 8, [17, 5, 47, 4], 6, 47, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.998198070855851, 1), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('avg', 5), False, 0.7011004787328997, 3), ('WHERE_COL', ('country', 'surfacearea', 47), 1.0, 5), ('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.999258816242218, 6), ('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'terminal', 0.9904611706733704, 7)]",
        "logprob": "-6.556391317199713",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.998198070855851, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.8068264038066955, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.9909083247184753, 5), 'no'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.999258816242218, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'terminal', 0.9904611706733704, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.998198070855851, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.8068264038066955, 3), 'no'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('avg', 5), False, 0.7011004787328997, 3), 'yes'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 0.20223343372344973, 3), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('min', 2), False, 0.49355046849669687, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.9909083247184753, 5), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.006166429258882999, 5), 'yes'), (('WHERE_COL', ('country', 'population', 49), 0.002602974884212017, 5), 'no'), (('WHERE_COL', ('country', 'continent', 45), 7.818764424882829e-05, 5), 'yes'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.999258816242218, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'terminal', 0.9904611706733704, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 890
    },
    {
        "nl": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000 .",
        "true_sql": "select sum ( country.population ) , avg ( country.surfacearea ) where country.continent = value and country.surfacearea > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"North America\"', None], 'and', [False, 3, [0, [0, 12, False], None], 3000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "country.population",
            ")",
            ",",
            "avg",
            "(",
            "country.surfacearea",
            ")",
            "where",
            "country.surfacearea",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 49, 4], 8, [17, 5, 47, 4], 6, 47, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.8971976149578728, 1), ('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('avg', 5), False, 0.8721443102771734, 3), ('WHERE_COL', ('country', 'surfacearea', 47), 1.0, 5), ('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9999750852584839, 6), ('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'terminal', 0.9951319694519043, 7)]",
        "logprob": "-4.356445904960938",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.8971976149578728, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('avg', 5), False, 0.8721443102771734, 3), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9615034461021423, 5), 'no'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9999750852584839, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'terminal', 0.9951319694519043, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.8971976149578728, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'surfacearea', 47), ('avg', 5), False, 0.8721443102771734, 3), 'yes'), (('WHERE_COL', ('country', 'region', 46), 0.9615034461021423, 5), 'no'), (('WHERE_COL', ('country', 'surfacearea', 47), 0.03453882411122322, 5), 'yes'), (('WHERE_COL', ('country', 'continent', 45), 0.0023347134701907635, 5), 'yes'), (('WHERE_COL', ('country', 'headofstate', 55), 0.0008581529837101698, 5), 'no'), (('WHERE_OP', (('country', 'surfacearea', 47),), ('>', 1), 0.9999750852584839, 6), 'yes'), (('WHERE_ROOT_TERM', (('country', 'surfacearea', 47),), ('>', 1), 'terminal', 0.9951319694519043, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 891
    },
    {
        "nl": "What are the cities whose population is between 160000 and 900000 ?",
        "true_sql": "select city.name where city.population between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 1, [0, [0, 5, False], None], 160000.0, 900000.0]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "city.population",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999580383300781, 1), ('WHERE_COL', ('city', 'population', 40), 0.9999933242797852, 3), ('WHERE_OP', (('city', 'population', 40),), ('between', 9), 0.23576106131076813, 4), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('between', 9), 'terminal', 0.9999343156814575, 5)]",
        "logprob": "-1.4453627475083972",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999580383300781, 1), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9999933242797852, 3), 'yes'), (('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.599763035774231, 4), 'no'), (('WHERE_ROOT_TERM', (('city', 'population', 40),), ('between', 9), 'terminal', 0.9999343156814575, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999580383300781, 1), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9999933242797852, 3), 'yes'), (('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.599763035774231, 4), 'no'), (('WHERE_OP', (('city', 'population', 40),), ('between', 9), 0.23576106131076813, 4), 'yes'), (('WHERE_OP', (('city', 'population', 40),), ('<', 2), 0.15932002663612366, 4), 'no'), (('WHERE_OP', (('city', 'population', 40),), ('in', 8), 0.0018518556607887149, 4), 'no'), (('WHERE_ROOT_TERM', (('city', 'population', 40),), ('between', 9), 'terminal', 0.9999343156814575, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 892
    },
    {
        "nl": "Return the names of cities that have a population between 160000 and 900000 .",
        "true_sql": "select city.name where city.population between value and value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 1, [0, [0, 5, False], None], 160000.0, 90000.0]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "city.name",
            "where",
            "city.population",
            "between",
            "value",
            "and",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 40, [32], 3, 16, 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999969005584717, 1), ('WHERE_COL', ('city', 'population', 40), 0.9999872446060181, 3), ('WHERE_OP', (('city', 'population', 40),), ('between', 9), 0.03623666986823082, 4), ('WHERE_ROOT_TERM', (('city', 'population', 40),), ('between', 9), 'terminal', 0.9999724626541138, 5)]",
        "logprob": "-3.3184216610823842",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999969005584717, 1), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9999872446060181, 3), 'yes'), (('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.9202908277511597, 4), 'no'), (('WHERE_ROOT_TERM', (('city', 'population', 40),), ('between', 9), 'terminal', 0.9999724626541138, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('city', 'name', 37), ('none_agg', 0), False, 0.9999969005584717, 1), 'yes'), (('WHERE_COL', ('city', 'population', 40), 0.9999872446060181, 3), 'yes'), (('WHERE_OP', (('city', 'population', 40),), ('>', 1), 0.9202908277511597, 4), 'no'), (('WHERE_OP', (('city', 'population', 40),), ('<', 2), 0.04109399765729904, 4), 'no'), (('WHERE_OP', (('city', 'population', 40),), ('between', 9), 0.03623666986823082, 4), 'yes'), (('WHERE_OP', (('city', 'population', 40),), ('in', 8), 0.0008422698592767119, 4), 'no'), (('WHERE_ROOT_TERM', (('city', 'population', 40),), ('between', 9), 'terminal', 0.9999724626541138, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 893
    },
    {
        "nl": "Which language is spoken by the largest number of countries ?",
        "true_sql": "select countrylanguage.language group_by countrylanguage.language order_by count ( countrylanguage.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'countrylanguage.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "avg",
            "(",
            "country.population",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 10, 59, 11, [17, 5, 49, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999481439590454, 1), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9985077977180481, 3), ('ORDER_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.10281584977022573, 5), ('ORDER_DESC_ASC', (('country', 'population', 49), ('avg', 5), False), 'asc', 0.003976284060627222, 6), ('ORDER_LIMIT', (('country', 'population', 49), ('avg', 5), False), 'limit_value', 0.999956488609314, 7)]",
        "logprob": "-14.632868207222023",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999481439590454, 1), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9985077977180481, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9997030798584706, 5), 'no'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('avg', 5), False), 'desc', 0.994963526725769, 6), 'no'), (('ORDER_LIMIT', (('country', 'population', 49), ('avg', 5), False), 'limit_value', 0.999956488609314, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999481439590454, 1), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9985077977180481, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9997030798584706, 5), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.15608239155554587, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.1240205423532014, 5), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.102964599159161, 5), 'no'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('avg', 5), False), 'desc', 0.994963526725769, 6), 'no'), (('ORDER_LIMIT', (('country', 'population', 49), ('avg', 5), False), 'limit_value', 0.999956488609314, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 894
    },
    {
        "nl": "Give the language that is spoken in the most countries .",
        "true_sql": "select countrylanguage.language group_by countrylanguage.language order_by count ( countrylanguage.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 24, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 24, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': 'countrylanguage.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            "group_by",
            "countrylanguage.language",
            "order_by",
            "avg",
            "(",
            "country.population",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 10, 59, 11, [17, 5, 49, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999974966049194, 1), ('GROUP_COL', ('countrylanguage', 'language', 59), 0.9999972581863403, 3), ('ORDER_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.07627472444035588, 5), ('ORDER_DESC_ASC', (('country', 'population', 49), ('avg', 5), False), 'asc', 0.0013423215132206678, 6), ('ORDER_LIMIT', (('country', 'population', 49), ('avg', 5), False), 'limit_value', 0.9999417066574097, 7)]",
        "logprob": "-16.907262667044552",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999974966049194, 1), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9999972581863403, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9994943069382061, 5), 'no'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('avg', 5), False), 'desc', 0.9983481168746948, 6), 'no'), (('ORDER_LIMIT', (('country', 'population', 49), ('avg', 5), False), 'limit_value', 0.9999417066574097, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999974966049194, 1), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9999972581863403, 3), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9994943069382061, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.18266862538042092, 5), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.164659067663585, 5), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('sum', 4), False, 0.08553992417746895, 5), 'no'), (('ORDER_DESC_ASC', (('country', 'population', 49), ('avg', 5), False), 'desc', 0.9983481168746948, 6), 'no'), (('ORDER_LIMIT', (('country', 'population', 49), ('avg', 5), False), 'limit_value', 0.9999417066574097, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 895
    },
    {
        "nl": "What is the language spoken by the largest percentage of people in each country ?",
        "true_sql": "select countrylanguage.language , countrylanguage.countrycode , max ( countrylanguage.percentage ) group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            ",",
            "max",
            "(",
            "countrylanguage.percentage",
            ")",
            "group_by",
            "country.headofstate",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 8, [19, 5, 61, 4], 10, 55, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999594688415527, 1), ('SELECT_AGG_v2', ('countrylanguage', 'percentage', 61), ('max', 1), False, 0.3152549867609512, 3), ('GROUP_COL', ('country', 'headofstate', 55), 1.1090983065287219e-07, 5)]",
        "logprob": "-22.70983967211639",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999594688415527, 1), 'yes'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9859494499158269, 3), 'no'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9999589920043945, 5), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9995399873138698, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.9999594688415527, 1), 'yes'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9859494499158269, 3), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.3613306492108105, 3), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.34922082677306815, 3), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'percentage', 61), ('sum', 4), False, 0.3216047227313729, 3), 'no'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9999589920043945, 5), 'no'), (('GROUP_COL', ('country', 'code2', 57), 4.010838165413588e-05, 5), 'no'), (('GROUP_COL', ('country', 'code', 43), 3.043728327156714e-07, 5), 'no'), (('GROUP_COL', ('country', 'region', 46), 2.3462554565867322e-07, 5), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9995399873138698, 7), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.18732132814441618, 7), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('avg', 5), False, 0.10784297679284015, 7), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.09527501178067754, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 896
    },
    {
        "nl": "What are the country codes of the different countries , and what are the languages spoken by the greatest percentage of people for each ?",
        "true_sql": "select countrylanguage.language , countrylanguage.countrycode , max ( countrylanguage.percentage ) group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "countrylanguage.countrycode",
            "_EOS"
        ],
        "dec_seq": "[2, [59], 8, [9, 5, 35, 4], 10, 58, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.0005989238270558419, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.32638922177773527, 3), ('GROUP_COL', ('countrylanguage', 'countrycode', 58), 0.00029280080343596637, 5)]",
        "logprob": "-22.441890532879103",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9899832010269165, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9051741493493743, 3), 'no'), (('GROUP_COL', ('country', 'code', 43), 0.8875024318695068, 5), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9966750841845163, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9899832010269165, 1), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.00933517515659332, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.0005989238270558419, 1), 'yes'), (('SELECT_AGG_v2', ('country', 'continent', 45), ('none_agg', 0), False, 7.143485709093515e-05, 1), 'no'), (('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9051741493493743, 3), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.5947694346750085, 3), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('max', 1), False, 0.5429817386956755, 3), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'percentage', 61), ('sum', 4), False, 0.35821188796522757, 3), 'no'), (('GROUP_COL', ('country', 'code', 43), 0.8875024318695068, 5), 'no'), (('GROUP_COL', ('country', 'code2', 57), 0.08331062644720078, 5), 'no'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.028871282935142517, 5), 'no'), (('GROUP_COL', ('countrylanguage', 'countrycode', 58), 0.00029280080343596637, 5), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9966750841845163, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.2802850313204152, 7), 'no'), (('ORDER_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.24714650277883207, 7), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('sum', 4), False, 0.1778230067631028, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 897
    },
    {
        "nl": "What is the total number of countries where Spanish is spoken by the largest percentage of people ?",
        "true_sql": "select count ( countrylanguage.* ) , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Spanish\"', None]], 'extracted_clause_asterisk': {'select': 'countrylanguage.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.region",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "group_by",
            "countrylanguage.countrycode",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 46, 4], 6, 59, [7], 3, 10, 58, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'region', 46), ('count', 3), False, 0.052588028610645356, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.9123829007148743, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999887943267822, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999692440032959, 5), ('GROUP_COL', ('countrylanguage', 'countrycode', 58), 0.0014145881868898869, 7)]",
        "logprob": "-24.665412161281488",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9996719997841165, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9123829007148743, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999887943267822, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999692440032959, 5), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9963085055351257, 7), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9995295767716086, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9996719997841165, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.18525845334973798, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'percentage', 61), ('sum', 4), False, 0.09528895659524066, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'percentage', 61), ('count', 3), False, 0.06646287846560217, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.9123829007148743, 3), 'yes'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999887943267822, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999692440032959, 5), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9963085055351257, 7), 'no'), (('GROUP_COL', ('countrylanguage', 'countrycode', 58), 0.0014145881868898869, 7), 'yes'), (('GROUP_COL', ('country', 'region', 46), 0.0011324963998049498, 7), 'no'), (('GROUP_COL', ('country', 'name', 44), 0.0008700450416654348, 7), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9995295767716086, 9), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.17880877386208124, 9), 'no'), (('ORDER_AGG_v2', ('countrylanguage', 'percentage', 61), ('sum', 4), False, 0.16187373303113745, 9), 'no'), (('ORDER_AGG_v2', ('countrylanguage', 'percentage', 61), ('avg', 5), False, 0.0943977142289773, 9), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 898
    },
    {
        "nl": "Count the number of countries for which Spanish is the predominantly spoken language .",
        "true_sql": "select count ( countrylanguage.* ) , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Spanish\"', None]], 'extracted_clause_asterisk': {'select': 'countrylanguage.*'}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "country.gnp",
            ")",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "group_by",
            "countrylanguage.countrycode",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 51, 4], 6, 59, [7], 3, 10, 58, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.052635714371074886, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.1321890950202942, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999750852584839, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999998927116394, 5), ('GROUP_COL', ('countrylanguage', 'countrycode', 58), 3.4115489597752457e-06, 7)]",
        "logprob": "-31.86476952589483",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998487516938042, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.8621078133583069, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999750852584839, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9998278617858887, 7), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998731401939717, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998487516938042, 1), 'no'), (('SELECT_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.1540243014004065, 1), 'no'), (('SELECT_AGG_v2', ('country', 'region', 46), ('count', 3), False, 0.05850488022312785, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 9.66653897194192e-06, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.8621078133583069, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.1321890950202942, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 0.005198631901293993, 3), 'no'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.000371800793800503, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999750852584839, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999998927116394, 5), 'yes'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.9998278617858887, 7), 'no'), (('GROUP_COL', ('country', 'region', 46), 0.00013346574269235134, 7), 'no'), (('GROUP_COL', ('country', 'name', 44), 3.516456490615383e-05, 7), 'no'), (('GROUP_COL', ('countrylanguage', 'countrycode', 58), 3.4115489597752457e-06, 7), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9998731401939717, 9), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.146643579899481, 9), 'no'), (('ORDER_AGG_v2', ('country', 'gnp', 51), ('count', 3), False, 0.055920009418261515, 9), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.05300353536178606, 9), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 899
    },
    {
        "nl": "What are the codes of countries where Spanish is spoken by the largest percentage of people ?",
        "true_sql": "select countrylanguage.countrycode , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Spanish\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.countrycode",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "group_by",
            "countrylanguage.countrycode",
            "_EOS"
        ],
        "dec_seq": "[2, [58], 6, 59, [7], 3, 10, 58, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 1.9307370166643513e-05, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.19060462713241577, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999923706054688, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999582827091217, 5), ('GROUP_COL', ('countrylanguage', 'countrycode', 58), 0.01147295068949461, 7)]",
        "logprob": "-29.29502863738",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.8081464171409607, 1), 'no'), (('WHERE_COL', ('countrylanguage', 'percentage', 61), 0.4071047008037567, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999923706054688, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999582827091217, 5), 'yes'), (('GROUP_COL', ('country', 'code', 43), 0.7525358200073242, 7), 'no'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9990990079707609, 9), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.8081464171409607, 1), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.1910293698310852, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 0.0008044527494348589, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 1.9307370166643513e-05, 1), 'yes'), (('WHERE_COL', ('countrylanguage', 'percentage', 61), 0.4071047008037567, 3), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.37799039483070374, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.19060462713241577, 3), 'yes'), (('WHERE_COL', ('country', 'name', 44), 0.021663466468453407, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9999923706054688, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.999582827091217, 5), 'yes'), (('GROUP_COL', ('country', 'code', 43), 0.7525358200073242, 7), 'no'), (('GROUP_COL', ('country', 'code2', 57), 0.2028496116399765, 7), 'no'), (('GROUP_COL', ('countrylanguage', 'language', 59), 0.033129896968603134, 7), 'no'), (('GROUP_COL', ('countrylanguage', 'countrycode', 58), 0.01147295068949461, 7), 'yes'), (('ORDER_AGG_v2', ('country', '*', 64), ('count', 3), False, 0.9990990079707609, 9), 'no'), (('ORDER_AGG_v2', ('country', 'population', 49), ('count', 3), False, 0.2251800583014602, 9), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.14306933918313908, 9), 'no'), (('ORDER_AGG_v2', ('countrylanguage', 'percentage', 61), ('sum', 4), False, 0.11085999065595176, 9), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 900
    },
    {
        "nl": "Return the codes of countries for which Spanish is the predominantly spoken language .",
        "true_sql": "select countrylanguage.countrycode , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [[0, 23, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 24, False], None], '\"Spanish\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'city.id': 1, 'city.name': 2, 'city.countrycode': 3, 'city.district': 4, 'city.population': 5, 'sqlite_sequence.name': 6, 'sqlite_sequence.seq': 7, 'country.code': 8, 'country.name': 9, 'country.continent': 10, 'country.region': 11, 'country.surfacearea': 12, 'country.indepyear': 13, 'country.population': 14, 'country.lifeexpectancy': 15, 'country.gnp': 16, 'country.gnpold': 17, 'country.localname': 18, 'country.governmentform': 19, 'country.headofstate': 20, 'country.capital': 21, 'country.code2': 22, 'countrylanguage.countrycode': 23, 'countrylanguage.language': 24, 'countrylanguage.isofficial': 25, 'countrylanguage.percentage': 26, 'city.*': 27, 'sqlite_sequence.*': 28, 'country.*': 29, 'countrylanguage.*': 30}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "countrylanguage.countrycode",
            "where",
            "countrylanguage.language",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [58], 6, 59, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 6.021274020895365e-05, 1), ('WHERE_COL', ('countrylanguage', 'language', 59), 0.34094691276550293, 3), ('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998853206634521, 4), ('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999972581863403, 5)]",
        "logprob": "-13.646063506090776",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9964585900306702, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.6254357695579529, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998853206634521, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999972581863403, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.36018308997154236, 6), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('country', 'code', 43), ('none_agg', 0), False, 0.9964585900306702, 1), 'no'), (('SELECT_AGG_v2', ('country', 'code2', 57), ('none_agg', 0), False, 0.0034804453607648615, 1), 'no'), (('SELECT_AGG_v2', ('countrylanguage', 'countrycode', 58), ('none_agg', 0), False, 6.021274020895365e-05, 1), 'yes'), (('SELECT_AGG_v2', ('countrylanguage', 'language', 59), ('none_agg', 0), False, 6.072835390114048e-07, 1), 'no'), (('WHERE_COL', ('country', 'region', 46), 0.6254357695579529, 3), 'no'), (('WHERE_COL', ('countrylanguage', 'language', 59), 0.34094691276550293, 3), 'yes'), (('WHERE_COL', ('sqlite_sequence', 'seq', 42), 0.021653423085808754, 3), 'no'), (('WHERE_COL', ('country', 'name', 44), 0.01181250624358654, 3), 'no'), (('WHERE_OP', (('countrylanguage', 'language', 59),), ('=', 0), 0.9998853206634521, 4), 'yes'), (('WHERE_ROOT_TERM', (('countrylanguage', 'language', 59),), ('=', 0), 'terminal', 0.9999972581863403, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.36018308997154236, 6), 'no'), (('IUEN_v2', ('except', 3), 0.1080562174320221, 6), 'no'), (('IUEN_v2', ('union', 2), 0.0452704094350338, 6), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 901
    },
    {
        "nl": "what are all the addresses including line 1 and line 2 ?",
        "true_sql": "select addresses.line_1 , addresses.line_2",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "addresses.line_1",
            ",",
            "addresses.line_2",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9840298891067505, 1), ('SELECT_AGG_v2', ('addresses', 'line_2', 38), ('none_agg', 0), False, 0.5135009288787842, 3)]",
        "logprob": "-5.944431020272306",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9840298891067505, 1), 'yes'), (('SELECT_AGG_v2', ('addresses', 'line_2', 38), ('none_agg', 0), False, 0.5135009288787842, 3), 'yes'), (('WHERE_COL', ('addresses', 'line_1', 37), 0.5307270288467407, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9840298891067505, 1), 'yes'), (('SELECT_AGG_v2', ('addresses', 'line_2', 38), ('none_agg', 0), False, 0.5135009288787842, 3), 'yes'), (('WHERE_COL', ('addresses', 'line_1', 37), 0.5307270288467407, 5), 'no'), (('WHERE_COL', ('addresses', 'line_2', 38), 0.2792816758155823, 5), 'no'), (('WHERE_COL', ('addresses', 'line_3', 39), 0.17991003394126892, 5), 'no'), (('WHERE_COL', ('addresses', 'address_id', 36), 0.007533147931098938, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 902
    },
    {
        "nl": "What is the first and second line for all addresses ?",
        "true_sql": "select addresses.line_1 , addresses.line_2",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "addresses.line_1",
            ",",
            "addresses.line_1",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9946534633636475, 1), ('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.553467333316803, 3)]",
        "logprob": "-0.5992379531818532",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9946534633636475, 1), 'yes'), (('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.553467333316803, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9946534633636475, 1), 'yes'), (('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.553467333316803, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 903
    },
    {
        "nl": "How many courses in total are listed ?",
        "true_sql": "select count ( courses.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'courses.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "courses.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 93, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.9065050188933412, 1)]",
        "logprob": "-0.39275764205510266",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.9065050188933412, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.9065050188933412, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 904
    },
    {
        "nl": "How many courses are there ?",
        "true_sql": "select count ( courses.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'courses.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "courses.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 93, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.6959431776140473, 1)]",
        "logprob": "-1.4500373913439697",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student_enrolment_courses', 'course_id', 85), ('count', 3), False, 0.8742639915624099, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student_enrolment_courses', 'course_id', 85), ('count', 3), False, 0.8742639915624099, 1), 'no'), (('SELECT_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.6959431776140473, 1), 'yes'), (('SELECT_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.4944880076607751, 1), 'no'), (('SELECT_AGG_v2', ('courses', 'course_name', 46), ('count', 3), False, 0.4774637492860519, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 905
    },
    {
        "nl": "How is the math course described ?",
        "true_sql": "select courses.course_description where courses.course_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"math\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "courses.course_description",
            "where",
            "courses.course_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_description', 47), ('none_agg', 0), False, 0.18879413604736328, 1), ('WHERE_COL', ('courses', 'course_name', 46), 1.0, 3), ('WHERE_OP', (('courses', 'course_name', 46),), ('=', 0), 0.9999960660934448, 4), ('WHERE_ROOT_TERM', (('courses', 'course_name', 46),), ('=', 0), 'terminal', 0.9999980926513672, 5)]",
        "logprob": "-2.650746706076817",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.8108934164047241, 1), 'no'), (('WHERE_COL', ('courses', 'course_description', 47), 0.6197324395179749, 3), 'no'), (('WHERE_OP', (('courses', 'course_name', 46),), ('=', 0), 0.9999960660934448, 4), 'yes'), (('WHERE_ROOT_TERM', (('courses', 'course_name', 46),), ('=', 0), 'terminal', 0.9999980926513672, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.8108934164047241, 1), 'no'), (('SELECT_AGG_v2', ('courses', 'course_description', 47), ('none_agg', 0), False, 0.18879413604736328, 1), 'yes'), (('SELECT_AGG_v2', ('courses', 'course_id', 45), ('none_agg', 0), False, 0.00020137384126428498, 1), 'no'), (('SELECT_AGG_v2', ('courses', '*', 93), ('none_agg', 0), False, 5.265363870421426e-05, 1), 'no'), (('WHERE_COL', ('courses', 'course_description', 47), 0.6197324395179749, 3), 'no'), (('WHERE_COL', ('courses', 'course_name', 46), 0.3739834129810333, 3), 'yes'), (('WHERE_COL', ('courses', 'course_id', 45), 0.0019690548069775105, 3), 'no'), (('WHERE_COL', ('courses', 'other_details', 48), 0.0018868667539209127, 3), 'no'), (('WHERE_OP', (('courses', 'course_name', 46),), ('=', 0), 0.9999960660934448, 4), 'yes'), (('WHERE_ROOT_TERM', (('courses', 'course_name', 46),), ('=', 0), 'terminal', 0.9999980926513672, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 906
    },
    {
        "nl": "What are the descriptions for all the math courses ?",
        "true_sql": "select courses.course_description where courses.course_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 12, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"math\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "courses.course_description",
            "where",
            "courses.course_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [47], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_description', 47), ('none_agg', 0), False, 0.9999475479125977, 1), ('WHERE_COL', ('courses', 'course_name', 46), 0.8852044343948364, 3), ('WHERE_OP', (('courses', 'course_name', 46),), ('=', 0), 0.9999960660934448, 4), ('WHERE_ROOT_TERM', (('courses', 'course_name', 46),), ('=', 0), 'terminal', 0.9999982118606567, 5)]",
        "logprob": "-0.12207327920165795",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', 'course_description', 47), ('none_agg', 0), False, 0.9999475479125977, 1), 'yes'), (('WHERE_COL', ('courses', 'course_name', 46), 0.8852044343948364, 3), 'yes'), (('WHERE_OP', (('courses', 'course_name', 46),), ('=', 0), 0.9999960660934448, 4), 'yes'), (('WHERE_ROOT_TERM', (('courses', 'course_name', 46),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', 'course_description', 47), ('none_agg', 0), False, 0.9999475479125977, 1), 'yes'), (('WHERE_COL', ('courses', 'course_name', 46), 0.8852044343948364, 3), 'yes'), (('WHERE_OP', (('courses', 'course_name', 46),), ('=', 0), 0.9999960660934448, 4), 'yes'), (('WHERE_ROOT_TERM', (('courses', 'course_name', 46),), ('=', 0), 'terminal', 0.9999982118606567, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 907
    },
    {
        "nl": "What is the zip code of the address in the city Port Chelsea ?",
        "true_sql": "select addresses.zip_postcode where addresses.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Port Chelsea\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "addresses.zip_postcode",
            "where",
            "addresses.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'zip_postcode', 41), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('addresses', 'city', 40), 0.9999990463256836, 3), ('WHERE_OP', (('addresses', 'city', 40),), ('=', 0), 0.9999831914901733, 4), ('WHERE_ROOT_TERM', (('addresses', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.01483071857118914",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('addresses', 'city', 40), 0.9999990463256836, 3), 'yes'), (('WHERE_OP', (('addresses', 'city', 40),), ('=', 0), 0.9999831914901733, 4), 'yes'), (('WHERE_ROOT_TERM', (('addresses', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('addresses', 'city', 40), 0.9999990463256836, 3), 'yes'), (('WHERE_OP', (('addresses', 'city', 40),), ('=', 0), 0.9999831914901733, 4), 'yes'), (('WHERE_ROOT_TERM', (('addresses', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 908
    },
    {
        "nl": "What is the zip code for Port Chelsea ?",
        "true_sql": "select addresses.zip_postcode where addresses.city = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 5, False], None], '\"Port Chelsea\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "addresses.zip_postcode",
            "where",
            "addresses.city",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 40, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'zip_postcode', 41), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('addresses', 'city', 40), 0.8945163488388062, 3), ('WHERE_OP', (('addresses', 'city', 40),), ('=', 0), 0.999982476234436, 4), ('WHERE_ROOT_TERM', (('addresses', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.17948386890364781",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('addresses', 'zip_postcode', 41), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('addresses', 'city', 40), 0.8945163488388062, 3), 'yes'), (('WHERE_OP', (('addresses', 'city', 40),), ('=', 0), 0.999982476234436, 4), 'yes'), (('WHERE_ROOT_TERM', (('addresses', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('addresses', 'zip_postcode', 41), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('addresses', 'city', 40), 0.8945163488388062, 3), 'yes'), (('WHERE_OP', (('addresses', 'city', 40),), ('=', 0), 0.999982476234436, 4), 'yes'), (('WHERE_ROOT_TERM', (('addresses', 'city', 40),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 909
    },
    {
        "nl": "Which department offers the most number of degrees ? List department name and id .",
        "true_sql": "select departments.department_name , degree_programs.department_id group_by degree_programs.department_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 19, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "departments.department_name",
            ",",
            "sum",
            "(",
            "degree_programs.other_details",
            ")",
            "group_by",
            "degree_programs.department_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [24, 5, 57, 4], 10, 54, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('departments', 'department_name', 50), ('none_agg', 0), False, 0.8914932012557983, 1), ('SELECT_AGG_v2', ('degree_programs', 'other_details', 57), ('sum', 4), False, 0.18587828185014083, 3), ('GROUP_COL', ('degree_programs', 'department_id', 54), 0.9998177886009216, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.48982640820632967, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9925650358200073, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.998673677444458, 9)]",
        "logprob": "-9.912738113113555",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('departments', 'department_name', 50), ('none_agg', 0), False, 0.8914932012557983, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8937683057197711, 3), 'no'), (('GROUP_COL', ('degree_programs', 'department_id', 54), 0.9998177886009216, 5), 'yes'), (('ORDER_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9813537788718726, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9925650358200073, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.998673677444458, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('departments', 'department_name', 50), ('none_agg', 0), False, 0.8914932012557983, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8937683057197711, 3), 'no'), (('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.7666412676214799, 3), 'no'), (('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.27268573038309735, 3), 'no'), (('SELECT_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.263752574776238, 3), 'no'), (('GROUP_COL', ('degree_programs', 'department_id', 54), 0.9998177886009216, 5), 'yes'), (('ORDER_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9813537788718726, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.48982640820632967, 7), 'yes'), (('ORDER_AGG_v2', ('degree_programs', 'degree_program_id', 53), ('count', 3), False, 0.3063261098114719, 7), 'no'), (('ORDER_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.24993741108467601, 7), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9925650358200073, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.998673677444458, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 910
    },
    {
        "nl": "For each department id , what is the name of the department with the most number of degrees ?",
        "true_sql": "select departments.department_name , degree_programs.department_id group_by degree_programs.department_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 19, False], None], [0, 14, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 2]]}, 'groupBy': [[0, 19, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 19, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "departments.department_name",
            ",",
            "degree_programs.department_id",
            "group_by",
            "degree_programs.department_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [50], 8, [54], 10, 54, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('departments', 'department_name', 50), ('none_agg', 0), False, 0.32328706979751587, 1), ('SELECT_AGG_v2', ('degree_programs', 'department_id', 54), ('none_agg', 0), False, 7.803777180015459e-08, 3), ('GROUP_COL', ('degree_programs', 'department_id', 54), 0.9999641180038452, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8938837001961335, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9988008737564087, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999427795410156, 9)]",
        "logprob": "-17.953131434568515",
        "q_counter": 5,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.5603934526443481, 1), 'no'), (('GROUP_COL', ('degree_programs', 'department_id', 54), 0.9999641180038452, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8938837001961335, 7), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9988008737564087, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999427795410156, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.5603934526443481, 1), 'no'), (('SELECT_AGG_v2', ('departments', 'department_name', 50), ('none_agg', 0), False, 0.32328706979751587, 1), 'yes'), (('SELECT_AGG_v2', ('degree_programs', 'department_id', 54), ('none_agg', 0), False, 0.11167027056217192, 1), 'yes'), (('SELECT_AGG_v2', ('degree_programs', 'degree_program_id', 53), ('none_agg', 0), False, 0.0020540186669677505, 1), 'no'), (('GROUP_COL', ('degree_programs', 'department_id', 54), 0.9999641180038452, 5), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8938837001961335, 7), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9988008737564087, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999427795410156, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 911
    },
    {
        "nl": "How many departments offer any degree ?",
        "true_sql": "select count ( distinct degree_programs.department_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 19, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "courses.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 93, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', '*', 93), ('count', 3), False, 0.3998689072176318, 1)]",
        "logprob": "-7.829430414217486",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.906926076023034, 1), 'no'), (('WHERE_COL', ('degree_programs', 'degree_program_id', 53), 0.540153980255127, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.906926076023034, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6187883994866813, 1), 'no'), (('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.5105488101590375, 1), 'no'), (('SELECT_AGG_v2', ('departments', '*', 94), ('count', 3), False, 0.44479024584764676, 1), 'no'), (('WHERE_COL', ('degree_programs', 'degree_program_id', 53), 0.540153980255127, 3), 'no'), (('WHERE_COL', ('degree_programs', 'department_id', 54), 0.355326384305954, 3), 'no'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.08897089213132858, 3), 'no'), (('WHERE_COL', ('degree_programs', 'other_details', 57), 0.00644924771040678, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 912
    },
    {
        "nl": "How many different departments offer degrees ?",
        "true_sql": "select count ( distinct degree_programs.department_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 19, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_programs.department_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 54, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'department_id', 54), ('count', 3), True, 0.9994449805873155, 1)]",
        "logprob": "-0.0028256981835012417",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('degree_programs', 'department_id', 54), ('count', 3), True, 0.9994449805873155, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('degree_programs', 'department_id', 54), ('count', 3), True, 0.9994449805873155, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 913
    },
    {
        "nl": "How many different degree names are offered ?",
        "true_sql": "select count ( distinct degree_programs.degree_summary_name )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 20, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_programs.degree_summary_name",
            ")",
            ",",
            "courses.course_name",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 55, 4], 8, [46], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('count', 3), True, 0.9994926993614625, 1), ('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.00033810152672231187, 3)]",
        "logprob": "-14.03001767497497",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('count', 3), True, 0.9994926993614625, 1), 'yes'), (('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.9880191683769226, 3), 'no'), (('GROUP_COL', ('degree_programs', 'degree_summary_name', 55), 0.9989798665046692, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('count', 3), True, 0.9994926993614625, 1), 'yes'), (('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.9880191683769226, 3), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'degree_summary_description', 56), ('none_agg', 0), False, 0.007665118202567097, 3), 'no'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.0017347775865346198, 3), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'degree_program_id', 53), ('none_agg', 0), False, 0.0012162534985691313, 3), 'no'), (('GROUP_COL', ('degree_programs', 'degree_summary_name', 55), 0.9989798665046692, 5), 'no'), (('GROUP_COL', ('degree_programs', 'degree_summary_description', 56), 0.0005251487018540502, 5), 'no'), (('GROUP_COL', ('degree_programs', 'degree_program_id', 53), 0.00032215952523984015, 5), 'no'), (('GROUP_COL', ('courses', 'course_name', 46), 7.458467007381842e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 914
    },
    {
        "nl": "How many different degrees are offered ?",
        "true_sql": "select count ( distinct degree_programs.degree_summary_name )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 20, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_programs.degree_summary_name",
            ")",
            ",",
            "degree_programs.*",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 55, 4], 8, [95], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('count', 3), True, 0.956068359018444, 1), ('SELECT_AGG_v2', ('degree_programs', '*', 95), ('none_agg', 0), False, 0.0009613613947294648, 3)]",
        "logprob": "-15.60582592641062",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('count', 3), True, 0.956068359018444, 1), 'yes'), (('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.821666955947876, 3), 'no'), (('GROUP_COL', ('degree_programs', 'degree_summary_name', 55), 0.9432830810546875, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('count', 3), True, 0.956068359018444, 1), 'yes'), (('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.821666955947876, 3), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'degree_summary_description', 56), ('none_agg', 0), False, 0.10963281989097594, 3), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'degree_program_id', 53), ('none_agg', 0), False, 0.04479127377271653, 3), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'other_details', 57), ('none_agg', 0), False, 0.020512456074357036, 3), 'no'), (('GROUP_COL', ('degree_programs', 'degree_summary_name', 55), 0.9432830810546875, 5), 'no'), (('GROUP_COL', ('degree_programs', 'degree_program_id', 53), 0.03177820146083832, 5), 'no'), (('GROUP_COL', ('degree_programs', 'degree_summary_description', 56), 0.024138718843460083, 5), 'no'), (('GROUP_COL', ('degree_programs', 'other_details', 57), 0.00023615482496097684, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 915
    },
    {
        "nl": "How many degrees does the engineering department offer ?",
        "true_sql": "select count ( * ) where departments.department_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 19, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"engineer\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "where",
            "departments.department_name",
            "=",
            "value",
            ",",
            "departments.department_name",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 35, 4], 6, 50, [7], 3, 8, 50, [1]]",
        "tag_seq": "[('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.4509445054437183, 1), ('WHERE_COL', ('departments', 'department_name', 50), 1.0, 3), ('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.9999788999557495, 4), ('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('WHERE_COL', ('departments', 'department_name', 50), 0.5196295976638794, 7)]",
        "logprob": "-9.670565047968845",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9271453118801227, 1), 'no'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.8530434966087341, 3), 'no'), (('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.9999788999557495, 4), 'yes'), (('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('departments', 'department_name', 50), 0.5196295976638794, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9271453118801227, 1), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'degree_summary_description', 56), ('sum', 4), False, 0.481845985544102, 1), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'degree_program_id', 53), ('sum', 4), False, 0.46932548930446233, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.4627531890863454, 1), 'no'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.8530434966087341, 3), 'no'), (('WHERE_COL', ('degree_programs', 'department_id', 54), 0.12841182947158813, 3), 'no'), (('WHERE_COL', ('departments', 'department_name', 50), 0.009197256527841091, 3), 'yes'), (('WHERE_COL', ('degree_programs', 'other_details', 57), 0.0033623126801103354, 3), 'no'), (('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.9999788999557495, 4), 'yes'), (('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('departments', 'department_name', 50), 0.5196295976638794, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 916
    },
    {
        "nl": "How many degrees does the engineering department have ?",
        "true_sql": "select count ( * ) where departments.department_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 19, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 15, False], None], '\"engineer\"', None]], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_programs.department_id",
            ")",
            "where",
            "departments.department_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 54, 4], 6, 50, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'department_id', 54), ('count', 3), True, 0.3745757009175359, 1), ('WHERE_COL', ('departments', 'department_name', 50), 1.0, 3), ('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.9999974966049194, 4), ('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-6.163788227104776",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9646522404085663, 1), 'no'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.5895848274230957, 3), 'no'), (('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('degree_programs', '*', 95), ('count', 3), False, 0.9646522404085663, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.46610805303132335, 1), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'degree_program_id', 53), ('count', 3), False, 0.45262147418946524, 1), 'no'), (('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.40908387783172584, 1), 'no'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.5895848274230957, 3), 'no'), (('WHERE_COL', ('departments', 'department_name', 50), 0.28550347685813904, 3), 'yes'), (('WHERE_COL', ('degree_programs', 'department_id', 54), 0.12416420876979828, 3), 'no'), (('WHERE_COL', ('departments', 'department_description', 51), 0.0004959092475473881, 3), 'no'), (('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.9999974966049194, 4), 'yes'), (('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 917
    },
    {
        "nl": "What are the names and descriptions of all the sections ?",
        "true_sql": "select sections.section_name , sections.section_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sections.section_name",
            ",",
            "sections.section_description",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [61], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9983254075050354, 1), ('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9942969679832458, 3)]",
        "logprob": "-0.007570126721349036",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9983254075050354, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9942969679832458, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9983254075050354, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9942969679832458, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 918
    },
    {
        "nl": "What are the names and descriptions for all the sections ?",
        "true_sql": "select sections.section_name , sections.section_description",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sections.section_name",
            ",",
            "sections.section_description",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 8, [61], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9925116300582886, 1), ('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9755359292030334, 3)]",
        "logprob": "-0.03246736064890511",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9925116300582886, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9755359292030334, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9925116300582886, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9755359292030334, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 919
    },
    {
        "nl": "What are the names and id of courses having at most 2 sections ?",
        "true_sql": "select courses.course_name , courses.course_id group_by courses.course_id having count ( * ) < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 24, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 4]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 6, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "courses.course_name",
            ",",
            "courses.course_id",
            "group_by",
            "courses.course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "(",
            "select",
            "min",
            "(",
            "sections.other_details",
            ")",
            "group_by",
            "sections.section_id",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [45], 10, 45, 18, [9, 5, 35, 4], [14, 7], 5, 2, [26, 5, 62, 4], 10, 58, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9998800754547119, 1), ('SELECT_AGG_v2', ('courses', 'course_id', 45), ('none_agg', 0), False, 0.033200427889823914, 3), ('GROUP_COL', ('courses', 'course_id', 45), 0.002219180343672633, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.99250569389973, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9917146575302005, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'root', 4.5423399797073216e-07, 9), ('SELECT_AGG_v2', ('sections', 'other_details', 62), ('min', 2), False, 0.9830125406641953, 11), ('GROUP_COL', ('sections', 'section_id', 58), 0.7580573558807373, 13)]",
        "logprob": "-25.0661416102715",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9998800754547119, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.8448787927627563, 3), 'no'), (('GROUP_COL', ('sections', 'section_id', 58), 0.904136061668396, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.99250569389973, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9917146575302005, 8), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999942779541016, 9), 'no'), (('SELECT_AGG_v2', ('sections', 'other_details', 62), ('min', 2), False, 0.9830125406641953, 11), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9998800754547119, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.8448787927627563, 3), 'no'), (('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.1102675497531891, 3), 'yes'), (('SELECT_AGG_v2', ('courses', 'course_id', 45), ('none_agg', 0), False, 0.033200427889823914, 3), 'yes'), (('SELECT_AGG_v2', ('sections', 'course_id', 59), ('none_agg', 0), False, 0.009749892167747022, 3), 'no'), (('GROUP_COL', ('sections', 'section_id', 58), 0.904136061668396, 5), 'no'), (('GROUP_COL', ('sections', 'course_id', 59), 0.09281275421380997, 5), 'no'), (('GROUP_COL', ('courses', 'course_id', 45), 0.002219180343672633, 5), 'yes'), (('GROUP_COL', ('student_enrolment_courses', 'course_id', 85), 0.0004183019045740366, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.99250569389973, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9917146575302005, 8), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.9949449896812439, 8), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('between', 9), 9.694373875390738e-05, 8), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('=', 0), 8.882230758899823e-05, 8), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999942779541016, 9), 'no'), (('SELECT_AGG_v2', ('sections', 'other_details', 62), ('min', 2), False, 0.9830125406641953, 11), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 920
    },
    {
        "nl": "What are the names and ids of every course with less than 2 sections ?",
        "true_sql": "select courses.course_name , courses.course_id group_by courses.course_id having count ( * ) < = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 24, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 4]]}, 'groupBy': [[0, 10, False]], 'having': [[False, 6, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "courses.course_name",
            ",",
            "courses.course_id",
            "group_by",
            "courses.course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 8, [45], 10, 45, 18, [9, 5, 35, 4], [21, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9929351210594177, 1), ('SELECT_AGG_v2', ('courses', 'course_id', 45), ('none_agg', 0), False, 0.22885122895240784, 3), ('GROUP_COL', ('courses', 'course_id', 45), 0.050520237535238266, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8604291428792217, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('<=', 4), 0.05984291637981391, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('<=', 4), 'terminal', 0.9999977350234985, 9)]",
        "logprob": "-12.911137270354729",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9929351210594177, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'course_id', 59), ('none_agg', 0), False, 0.3446319103240967, 3), 'no'), (('WHERE_COL', ('sections', 'course_id', 59), 0.6377103924751282, 5), 'no'), (('GROUP_COL', ('sections', 'section_id', 58), 0.7686922550201416, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8604291428792217, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('<', 2), 0.9306322336196899, 8), 'no'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('<=', 4), 'terminal', 0.9999977350234985, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9929351210594177, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'course_id', 59), ('none_agg', 0), False, 0.3446319103240967, 3), 'no'), (('SELECT_AGG_v2', ('courses', 'course_id', 45), ('none_agg', 0), False, 0.22885122895240784, 3), 'yes'), (('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.21943020820617676, 3), 'no'), (('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.10643950849771498, 3), 'yes'), (('WHERE_COL', ('sections', 'course_id', 59), 0.6377103924751282, 5), 'no'), (('WHERE_COL', ('courses', 'course_id', 45), 0.16221442818641663, 5), 'no'), (('WHERE_COL', ('sections', 'section_id', 58), 0.10299251973628998, 5), 'no'), (('WHERE_COL', ('sections', 'other_details', 62), 0.04526006430387497, 5), 'no'), (('GROUP_COL', ('sections', 'section_id', 58), 0.7686922550201416, 5), 'no'), (('GROUP_COL', ('sections', 'course_id', 59), 0.11470845341682434, 5), 'no'), (('GROUP_COL', ('courses', 'course_id', 45), 0.050520237535238266, 5), 'yes'), (('GROUP_COL', ('courses', 'course_name', 46), 0.030677832663059235, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8604291428792217, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('<', 2), 0.9306322336196899, 8), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>', 1), 0.04149435833096504, 8), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('between', 9), 0.022350024431943893, 8), 'no'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('<=', 4), 0.05984291637981391, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('<=', 4), 'terminal', 0.9999977350234985, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 921
    },
    {
        "nl": "List the section_name in reversed lexicographical order .",
        "true_sql": "select sections.section_name order_by sections.section_name desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 25, False], None]]], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sections.section_name",
            "order_by",
            "sections.section_name",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 11, [60], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.999997615814209, 1), ('ORDER_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9569720029830933, 3), ('ORDER_DESC_ASC', (('sections', 'section_name', 60), ('none_agg', 0), False), 'desc', 0.4670484662055969, 4)]",
        "logprob": "-0.8116208754371377",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.999997615814209, 1), 'yes'), (('ORDER_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9569720029830933, 3), 'yes'), (('ORDER_DESC_ASC', (('sections', 'section_name', 60), ('none_agg', 0), False), 'asc', 0.5003862977027893, 4), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.999997615814209, 1), 'yes'), (('ORDER_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9569720029830933, 3), 'yes'), (('ORDER_DESC_ASC', (('sections', 'section_name', 60), ('none_agg', 0), False), 'asc', 0.5003862977027893, 4), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 922
    },
    {
        "nl": "What are the names of the sections in reverse alphabetical order ?",
        "true_sql": "select sections.section_name order_by sections.section_name desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 25, False], None]]], 'select': [False, [[0, [0, [0, 25, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sections.section_name",
            "order_by",
            "sections.section_name",
            "_EOS"
        ],
        "dec_seq": "[2, [60], 11, [60], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9607523083686829, 3)]",
        "logprob": "-0.3068928752482277",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9607523083686829, 3), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.9607523083686829, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 923
    },
    {
        "nl": "What is the semester which most student registered in ? Show both the name and the id .",
        "true_sql": "select semesters.semester_name , semesters.semester_id group_by semesters.semester_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 28, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [[0, 28, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 29, False], None]], [0, [0, [0, 28, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "semesters.semester_name",
            ",",
            "semesters.semester_name",
            "order_by",
            "student_enrolment.student_enrolment_id",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 8, [64], 11, [79], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9977915287017822, 1), ('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.01803872734308243, 3), ('ORDER_AGG_v2', ('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False, 0.014401292428374292, 5), ('ORDER_DESC_ASC', (('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False), 'desc', 0.22213177382946014, 6), ('ORDER_LIMIT', (('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False), 'limit_value', 0.9990515112876892, 7)]",
        "logprob": "-10.145186386268465",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9977915287017822, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9317333698272705, 3), 'no'), (('ORDER_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.7780044078826904, 5), 'no'), (('ORDER_DESC_ASC', (('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False), 'asc', 0.6671020984649658, 6), 'no'), (('ORDER_LIMIT', (('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False), 'limit_value', 0.9990515112876892, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9977915287017822, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9317333698272705, 3), 'no'), (('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.03823142126202583, 3), 'no'), (('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.01803872734308243, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'date_first_registered', 76), ('none_agg', 0), False, 0.00877093989402056, 3), 'no'), (('ORDER_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.7780044078826904, 5), 'no'), (('ORDER_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.0762585774064064, 5), 'no'), (('ORDER_AGG_v2', ('student_enrolment_courses', 'student_enrolment_id', 86), ('none_agg', 0), False, 0.059292335063219063, 5), 'no'), (('ORDER_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.05155998095870019, 5), 'no'), (('ORDER_DESC_ASC', (('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False), 'asc', 0.6671020984649658, 6), 'no'), (('ORDER_LIMIT', (('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False), 'limit_value', 0.9990515112876892, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 924
    },
    {
        "nl": "For each semester , what is the name and id of the one with the most students registered ?",
        "true_sql": "select semesters.semester_name , semesters.semester_id group_by semesters.semester_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 28, False], None], [0, 46, False], None]], 'table_units': [['table_unit', 5], ['table_unit', 7]]}, 'groupBy': [[0, 28, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 29, False], None]], [0, [0, [0, 28, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "semesters.semester_name",
            ",",
            "semesters.semester_name",
            "group_by",
            "semesters.semester_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 8, [64], 10, 63, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.15848490595817563, 1), ('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.016087787225842476, 3), ('GROUP_COL', ('semesters', 'semester_id', 63), 0.07273998856544495, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9911679010808372, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9977604150772095, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998759031295776, 9)]",
        "logprob": "-8.954396247957698",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.830865740776062, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6329131301230246, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'semester_id', 81), 0.772063136100769, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9911679010808372, 7), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9977604150772095, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998759031295776, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.830865740776062, 1), 'no'), (('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.15848490595817563, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.0037551010027527813, 1), 'no'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.002211522078141571, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.6329131301230246, 3), 'no'), (('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.016087787225842476, 3), 'yes'), (('SELECT_AGG_v2', ('student_enrolment', 'student_enrolment_id', 79), ('sum', 4), False, 0.34808124831289167, 3), 'no'), (('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.27938047622538287, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'semester_id', 81), 0.772063136100769, 5), 'no'), (('GROUP_COL', ('student_enrolment', 'student_enrolment_id', 79), 0.1269311159849167, 5), 'no'), (('GROUP_COL', ('semesters', 'semester_id', 63), 0.07273998856544495, 5), 'yes'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.020004166290163994, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9911679010808372, 7), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9977604150772095, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998759031295776, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 925
    },
    {
        "nl": "What is the description of the department whose name has the substring the computer ?",
        "true_sql": "select departments.department_description where departments.department_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 15, False], None], '\"%computer%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "departments.department_description",
            "where",
            "departments.department_name",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 50, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('departments', 'department_description', 51), ('none_agg', 0), False, 0.9986212253570557, 1), ('WHERE_COL', ('departments', 'department_name', 50), 0.7498912215232849, 3), ('WHERE_OP', (('departments', 'department_name', 50),), ('like', 6), 0.04285859316587448, 4), ('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('like', 6), 'terminal', 0.9999963045120239, 5)]",
        "logprob": "-3.4393716743047302",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('departments', 'department_description', 51), ('none_agg', 0), False, 0.9986212253570557, 1), 'yes'), (('WHERE_COL', ('departments', 'department_name', 50), 0.7498912215232849, 3), 'yes'), (('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.9530114531517029, 4), 'no'), (('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('like', 6), 'terminal', 0.9999963045120239, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('departments', 'department_description', 51), ('none_agg', 0), False, 0.9986212253570557, 1), 'yes'), (('WHERE_COL', ('departments', 'department_name', 50), 0.7498912215232849, 3), 'yes'), (('WHERE_OP', (('departments', 'department_name', 50),), ('=', 0), 0.9530114531517029, 4), 'no'), (('WHERE_OP', (('departments', 'department_name', 50),), ('like', 6), 0.04285859316587448, 4), 'yes'), (('WHERE_OP', (('departments', 'department_name', 50),), ('!=', 5), 0.001655396306887269, 4), 'no'), (('WHERE_OP', (('departments', 'department_name', 50),), ('not like', 10), 0.03175456079984863, 4), 'no'), (('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('like', 6), 'terminal', 0.9999963045120239, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 926
    },
    {
        "nl": "What is the department description for the one whose name has the word computer ?",
        "true_sql": "select departments.department_description where departments.department_name like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 15, False], None], '\"%computer%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "departments.department_description",
            "where",
            "departments.department_name",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 50, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('departments', 'department_description', 51), ('none_agg', 0), False, 0.9764018654823303, 1), ('WHERE_COL', ('departments', 'department_name', 50), 0.9910274147987366, 3), ('WHERE_OP', (('departments', 'department_name', 50),), ('like', 6), 0.9983768463134766, 4), ('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('like', 6), 'terminal', 0.9999963045120239, 5)]",
        "logprob": "-0.03474421068417536",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('departments', 'department_description', 51), ('none_agg', 0), False, 0.9764018654823303, 1), 'yes'), (('WHERE_COL', ('departments', 'department_name', 50), 0.9910274147987366, 3), 'yes'), (('WHERE_OP', (('departments', 'department_name', 50),), ('like', 6), 0.9983768463134766, 4), 'yes'), (('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('like', 6), 'terminal', 0.9999963045120239, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('departments', 'department_description', 51), ('none_agg', 0), False, 0.9764018654823303, 1), 'yes'), (('WHERE_COL', ('departments', 'department_name', 50), 0.9910274147987366, 3), 'yes'), (('WHERE_OP', (('departments', 'department_name', 50),), ('like', 6), 0.9983768463134766, 4), 'yes'), (('WHERE_ROOT_TERM', (('departments', 'department_name', 50),), ('like', 6), 'terminal', 0.9999963045120239, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 927
    },
    {
        "nl": "Who are enrolled in 2 degree programs in one semester ? List the first name , middle name and last name and the id .",
        "true_sql": "select students.first_name , students.middle_name , students.last_name , students.student_id group_by students.student_id having count ( * ) = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 32, False]], 'having': [[False, 2, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.4756459593772888, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.802250862121582, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.8877654671669006, 5)]",
        "logprob": "-1.123253060937425",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.4756459593772888, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.802250862121582, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.8877654671669006, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.4756459593772888, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.802250862121582, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.8877654671669006, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 928
    },
    {
        "nl": "What are the first , middle , and last names , along with the ids , of all students who enrolled in 2 degree programs in one semester ?",
        "true_sql": "select students.first_name , students.middle_name , students.last_name , students.student_id group_by students.student_id having count ( * ) = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 32, False]], 'having': [[False, 2, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.7676359415054321, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9268975257873535, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9127101898193359, 5)]",
        "logprob": "-0.923954333419957",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.7676359415054321, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9268975257873535, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9127101898193359, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.7676359415054321, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9268975257873535, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9127101898193359, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 929
    },
    {
        "nl": "Who is enrolled in a Bachelor degree program ? List the first name , middle name , last name .",
        "true_sql": "select distinct students.first_name , students.middle_name , students.last_name where degree_programs.degree_summary_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Bachelor\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9950436353683472, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9243196845054626, 3), ('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.798660397529602, 5), ('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999650716781616, 6), ('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999990463256836, 7)]",
        "logprob": "-0.4198874818546659",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9950436353683472, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9243196845054626, 3), 'yes'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.798660397529602, 5), 'yes'), (('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999650716781616, 6), 'yes'), (('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999990463256836, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9950436353683472, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9243196845054626, 3), 'yes'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.798660397529602, 5), 'yes'), (('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999650716781616, 6), 'yes'), (('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999990463256836, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 930
    },
    {
        "nl": "What are the first , middle , and last names for everybody enrolled in a Bachelors program ?",
        "true_sql": "select distinct students.first_name , students.middle_name , students.last_name where degree_programs.degree_summary_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Bachelor\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 6, 55, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.5409802198410034, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.7071254253387451, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9988811612129211, 5), ('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.8254243731498718, 7), ('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999964237213135, 8), ('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999988079071045, 9)]",
        "logprob": "-1.1684565662197264",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.5409802198410034, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.7071254253387451, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9988811612129211, 5), 'yes'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.8254243731498718, 7), 'yes'), (('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999964237213135, 8), 'yes'), (('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999988079071045, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.5409802198410034, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.7071254253387451, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9988811612129211, 5), 'yes'), (('WHERE_COL', ('degree_programs', 'degree_summary_name', 55), 0.8254243731498718, 7), 'yes'), (('WHERE_OP', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 0.9999964237213135, 8), 'yes'), (('WHERE_ROOT_TERM', (('degree_programs', 'degree_summary_name', 55),), ('=', 0), 'terminal', 0.9999988079071045, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 931
    },
    {
        "nl": "Find the kind of program which most number of students are enrolled in ?",
        "true_sql": "select degree_programs.degree_summary_name group_by degree_programs.degree_summary_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 20, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.date_first_registered",
            "group_by",
            "students.student_id",
            "order_by",
            "count",
            "(",
            "student_enrolment.student_id",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [76], 10, 67, 11, [9, 5, 82, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'date_first_registered', 76), ('none_agg', 0), False, 0.06041753292083741, 1), ('GROUP_COL', ('students', 'student_id', 67), 6.959093298064545e-05, 3), ('ORDER_AGG_v2', ('student_enrolment', 'student_id', 82), ('count', 3), False, 0.7244861554540263, 5), ('ORDER_DESC_ASC', (('student_enrolment', 'student_id', 82), ('count', 3), False), 'desc', 0.9988665580749512, 6), ('ORDER_LIMIT', (('student_enrolment', 'student_id', 82), ('count', 3), False), 'limit_value', 0.9999599456787109, 7)]",
        "logprob": "-13.669880090625897",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.3627893328666687, 1), 'no'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.5716549754142761, 3), 'no'), (('ORDER_AGG_v2', ('student_enrolment', 'student_id', 82), ('count', 3), False, 0.7244861554540263, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.3627893328666687, 1), 'no'), (('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.12503693997859955, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.11585451662540436, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', 'student_enrolment_id', 86), ('none_agg', 0), False, 0.07151901721954346, 1), 'no'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.5716549754142761, 3), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.2864587903022766, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'degree_program_id', 80), 0.1362152248620987, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'student_enrolment_id', 79), 0.005564090330153704, 3), 'no'), (('ORDER_AGG_v2', ('student_enrolment', 'student_id', 82), ('count', 3), False, 0.7244861554540263, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 932
    },
    {
        "nl": "What is the degree summary name that has the most number of students enrolled ?",
        "true_sql": "select degree_programs.degree_summary_name group_by degree_programs.degree_summary_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 20, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "degree_programs.degree_summary_name",
            "group_by",
            "degree_programs.degree_summary_name",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 10, 55, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.9999997615814209, 1), ('GROUP_COL', ('degree_programs', 'degree_summary_name', 55), 0.0021664961241185665, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7947094152532866, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.99957674741745, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999557733535767, 7)]",
        "logprob": "-7.054485665096105",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.5571836829185486, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7947094152532866, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.99957674741745, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999557733535767, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.5571836829185486, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.39613014459609985, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'student_enrolment_id', 79), 0.04427365958690643, 3), 'no'), (('GROUP_COL', ('degree_programs', 'degree_summary_name', 55), 0.0021664961241185665, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7947094152532866, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.99957674741745, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999557733535767, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 933
    },
    {
        "nl": "Find the program which most number of students are enrolled in . List both the id and the summary .",
        "true_sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name group_by degree_programs.degree_program_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 18, False], None]], [0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student_enrolment.degree_program_id",
            ",",
            "count",
            "(",
            "student_enrolment.*",
            ")",
            "group_by",
            "student_enrolment.student_id",
            "order_by",
            "count",
            "(",
            "student_enrolment_courses.student_course_id",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [80], 8, [9, 5, 99, 4], 10, 82, 11, [9, 5, 84, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment', 'degree_program_id', 80), ('none_agg', 0), False, 0.015888106077909473, 1), ('SELECT_AGG_v2', ('student_enrolment', '*', 99), ('count', 3), False, 0.4585511670389217, 3), ('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.9703993201255798, 5), ('ORDER_AGG_v2', ('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False, 0.7581068332487795, 7), ('ORDER_DESC_ASC', (('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False), 'desc', 0.9993979930877686, 8), ('ORDER_LIMIT', (('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False), 'limit_value', 0.9995761513710022, 9)]",
        "logprob": "-8.412891574588436",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.5528778433799744, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.8095661481511764, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.9703993201255798, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.5528778433799744, 1), 'no'), (('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.3508438467979431, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False, 0.04185766726732255, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', 'student_enrolment_id', 86), ('none_agg', 0), False, 0.03576931357383728, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.8095661481511764, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.7976053918708245, 3), 'no'), (('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.48429652918480987, 3), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False, 0.46245823058325847, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.9703993201255798, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 934
    },
    {
        "nl": "What is the program id and the summary of the degree that has the most students enrolled ?",
        "true_sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name group_by degree_programs.degree_program_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [[0, 18, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 18, False], None]], [0, [0, [0, 20, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "degree_programs.degree_program_id",
            ",",
            "degree_programs.degree_summary_name",
            "group_by",
            "degree_programs.degree_program_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [53], 8, [55], 10, 53, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('degree_programs', 'degree_program_id', 53), ('none_agg', 0), False, 0.06062774360179901, 1), ('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.046288385987281806, 3), ('GROUP_COL', ('degree_programs', 'degree_program_id', 53), 0.14789997041225433, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9013770953112975, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.998658299446106, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999463558197021, 9)]",
        "logprob": "-8.205963405581244",
        "q_counter": 5,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student_enrolment', 'degree_program_id', 80), ('none_agg', 0), False, 0.8972226977348328, 1), 'no'), (('GROUP_COL', ('student_enrolment', 'degree_program_id', 80), 0.8359436988830566, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9013770953112975, 7), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.998658299446106, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999463558197021, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student_enrolment', 'degree_program_id', 80), ('none_agg', 0), False, 0.8972226977348328, 1), 'no'), (('SELECT_AGG_v2', ('degree_programs', 'degree_program_id', 53), ('none_agg', 0), False, 0.06062774360179901, 1), 'yes'), (('SELECT_AGG_v2', ('degree_programs', 'degree_summary_name', 55), ('none_agg', 0), False, 0.039030816406011574, 1), 'yes'), (('SELECT_AGG_v2', ('student_enrolment_courses', 'student_enrolment_id', 86), ('none_agg', 0), False, 0.0013101113727316263, 1), 'no'), (('GROUP_COL', ('student_enrolment', 'degree_program_id', 80), 0.8359436988830566, 5), 'no'), (('GROUP_COL', ('degree_programs', 'degree_program_id', 53), 0.14789997041225433, 5), 'yes'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.010211055167019367, 5), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.005805601831525564, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9013770953112975, 7), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.998658299446106, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999463558197021, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 935
    },
    {
        "nl": "Which student has enrolled for the most times in any program ? List the id , first name , middle name , last name , the number of enrollments and student id .",
        "true_sql": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id group_by students.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 32, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 32, False], None]], [0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [3, [0, [0, 0, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*', 'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "group_by",
            "students.student_id",
            "order_by",
            "count",
            "(",
            "student_enrolment.student_enrolment_id",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 10, 67, 11, [9, 5, 79, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.31966090202331543, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8548405170440674, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 5.235318531049416e-05, 5), ('GROUP_COL', ('students', 'student_id', 67), 0.0001757996215019375, 7), ('ORDER_AGG_v2', ('student_enrolment', 'student_enrolment_id', 79), ('count', 3), False, 0.3253383362332496, 9), ('ORDER_DESC_ASC', (('student_enrolment', 'student_enrolment_id', 79), ('count', 3), False), 'asc', 0.19815638661384583, 10), ('ORDER_LIMIT', (('student_enrolment', 'student_enrolment_id', 79), ('count', 3), False), 'limit_value', 0.9994828701019287, 11)]",
        "logprob": "-25.97018221156082",
        "q_counter": 5,
        "questioned_indices": [
            0,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.39542707800865173, 1), 'no'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.992797315120697, 7), 'no'), (('ORDER_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.9598836585263145, 9), 'no'), (('ORDER_DESC_ASC', (('student_enrolment', 'student_enrolment_id', 79), ('count', 3), False), 'desc', 0.799437403678894, 10), 'no'), (('ORDER_LIMIT', (('student_enrolment', 'student_enrolment_id', 79), ('count', 3), False), 'limit_value', 0.9994828701019287, 11), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.39542707800865173, 1), 'no'), (('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.31966090202331543, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.17789264023303986, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.07028369605541228, 1), 'yes'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.992797315120697, 7), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.006234460044652224, 7), 'no'), (('GROUP_COL', ('student_enrolment', 'student_enrolment_id', 79), 0.0004786674689967185, 7), 'no'), (('GROUP_COL', ('students', 'student_id', 67), 0.0001757996215019375, 7), 'yes'), (('ORDER_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.9598836585263145, 9), 'no'), (('ORDER_AGG_v2', ('student_enrolment', '*', 99), ('count', 3), False, 0.4558886135091197, 9), 'no'), (('ORDER_AGG_v2', ('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False, 0.45488062467247486, 9), 'no'), (('ORDER_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.45240037979356507, 9), 'no'), (('ORDER_DESC_ASC', (('student_enrolment', 'student_enrolment_id', 79), ('count', 3), False), 'desc', 0.799437403678894, 10), 'no'), (('ORDER_LIMIT', (('student_enrolment', 'student_enrolment_id', 79), ('count', 3), False), 'limit_value', 0.9994828701019287, 11), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 936
    },
    {
        "nl": "What is the first , middle , and last name , along with the id and number of enrollments , for the student who enrolled the most in any program ?",
        "true_sql": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id group_by students.student_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [[0, 32, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 32, False], None]], [0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [3, [0, [0, 0, False], None]], [0, [0, [0, 32, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*', 'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "group_by",
            "students.student_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 10, 67, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9376152157783508, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9413896203041077, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.8109724521636963, 5), ('GROUP_COL', ('students', 'student_id', 67), 0.0048516299575567245, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.21976998021549196, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.6482565999031067, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9996980428695679, 11)]",
        "logprob": "-12.405710195130085",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9376152157783508, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9413896203041077, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.8109724521636963, 5), 'yes'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.6874591708183289, 7), 'no'), (('ORDER_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.9293974155436514, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.6482565999031067, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9996980428695679, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9376152157783508, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9413896203041077, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.8109724521636963, 5), 'yes'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.6874591708183289, 7), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.2916409373283386, 7), 'no'), (('GROUP_COL', ('degree_programs', 'degree_program_id', 53), 0.013350938446819782, 7), 'no'), (('GROUP_COL', ('students', 'student_id', 67), 0.0048516299575567245, 7), 'yes'), (('ORDER_AGG_v2', ('student_enrolment_courses', '*', 100), ('count', 3), False, 0.9293974155436514, 9), 'no'), (('ORDER_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.6461766876027247, 9), 'no'), (('ORDER_AGG_v2', ('student_enrolment', '*', 99), ('count', 3), False, 0.5239067896918483, 9), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.21976998021549196, 9), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.6482565999031067, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9996980428695679, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 937
    },
    {
        "nl": "Which semesters do not have any student enrolled ? List the semester name .",
        "true_sql": "select semesters.semester_name where semesters.semester_id not in ( select student_enrolment.semester_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 29, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 28, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "semesters.semester_name",
            "where",
            "semesters.semester_id",
            "not",
            "in",
            "(",
            "select",
            "student_enrolment.semester_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 6, 63, [22, 20], 5, 2, [81], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9999997615814209, 1), ('WHERE_COL', ('semesters', 'semester_id', 63), 0.5393669605255127, 3), ('WHERE_OP', (('semesters', 'semester_id', 63),), ('not in', 7), 0.9997445857071637, 4), ('WHERE_ROOT_TERM', (('semesters', 'semester_id', 63),), ('not in', 7), 'root', 0.9999933242797852, 5), ('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.0016169165028259156, 7), ('O', '##END_NESTED##', 0.9999649524688721, 8)]",
        "logprob": "-7.045882629407359",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('WHERE_COL', ('semesters', 'semester_id', 63), 0.5393669605255127, 3), 'yes'), (('WHERE_OP', (('semesters', 'semester_id', 63),), ('not in', 7), 0.9997445857071637, 4), 'yes'), (('WHERE_ROOT_TERM', (('semesters', 'semester_id', 63),), ('not in', 7), 'root', 0.9999933242797852, 5), 'yes'), (('SELECT_AGG_v2', ('student_enrolment_courses', 'student_enrolment_id', 86), ('none_agg', 0), False, 0.9906108975410461, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('WHERE_COL', ('semesters', 'semester_id', 63), 0.5393669605255127, 3), 'yes'), (('WHERE_OP', (('semesters', 'semester_id', 63),), ('not in', 7), 0.9997445857071637, 4), 'yes'), (('WHERE_ROOT_TERM', (('semesters', 'semester_id', 63),), ('not in', 7), 'root', 0.9999933242797852, 5), 'yes'), (('SELECT_AGG_v2', ('student_enrolment_courses', 'student_enrolment_id', 86), ('none_agg', 0), False, 0.9906108975410461, 7), 'no'), (('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.007551644928753373, 7), 'no'), (('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.0016169165028259156, 7), 'yes'), (('SELECT_AGG_v2', ('student_enrolment', 'student_enrolment_id', 79), ('none_agg', 0), False, 0.00020748583483509725, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 938
    },
    {
        "nl": "What is the name of the semester with no students enrolled ?",
        "true_sql": "select semesters.semester_name where semesters.semester_id not in ( select student_enrolment.semester_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 5]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 29, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 28, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "semesters.semester_name",
            "_EOS"
        ],
        "dec_seq": "[2, [64], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 1.0, 1)]",
        "logprob": "-7.325984290871765",
        "q_counter": 1,
        "questioned_indices": [
            1
        ],
        "questioned_tags": "[(('IUEN_v2', ('except', 3), 0.5961109399795532, 2), 'no')]",
        "feedback_records": "[(('IUEN_v2', ('except', 3), 0.5961109399795532, 2), 'no'), (('IUEN_v2', ('union', 2), 0.01732153259217739, 2), 'no'), (('IUEN_v2', ('intersect', 1), 0.00014065761934034526, 2), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 939
    },
    {
        "nl": "What are all the course names of the courses which ever have students enrolled in ?",
        "true_sql": "select distinct courses.course_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 8]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "courses.course_name",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9992586970329285, 1)]",
        "logprob": "-5.57436233986736",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9992586970329285, 1), 'yes'), (('WHERE_COL', ('students', 'first_name', 70), 0.8331887722015381, 3), 'no'), (('IUEN_v2', ('except', 3), 0.015800584107637405, 2), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9992586970329285, 1), 'yes'), (('WHERE_COL', ('students', 'first_name', 70), 0.8331887722015381, 3), 'no'), (('WHERE_COL', ('students', 'student_id', 67), 0.06177457049489021, 3), 'no'), (('WHERE_COL', ('students', 'date_first_registered', 76), 0.04810640960931778, 3), 'no'), (('WHERE_COL', ('student_enrolment', 'student_id', 82), 0.026035621762275696, 3), 'no'), (('IUEN_v2', ('except', 3), 0.015800584107637405, 2), 'no'), (('IUEN_v2', ('union', 2), 0.001952446298673749, 2), 'no'), (('IUEN_v2', ('intersect', 1), 2.221980321337469e-05, 2), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 940
    },
    {
        "nl": "What are the names of all courses that have some students enrolled ?",
        "true_sql": "select distinct courses.course_name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 8]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "courses.course_name",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999961853027344, 1)]",
        "logprob": "-10.325469510006394",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            1,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999961853027344, 1), 'yes'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.5822780728340149, 3), 'no'), (('WHERE_COL', ('students', 'date_first_registered', 76), 0.4179348349571228, 3), 'no'), (('IUEN_v2', ('union', 2), 8.744613296585158e-05, 2), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999961853027344, 1), 'yes'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.5822780728340149, 3), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.2600083351135254, 3), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_course_id', 84), 0.1103920042514801, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'student_enrolment_id', 79), 0.0296968724578619, 3), 'no'), (('WHERE_COL', ('students', 'date_first_registered', 76), 0.4179348349571228, 3), 'no'), (('WHERE_COL', ('students', 'first_name', 70), 0.3459729850292206, 3), 'no'), (('WHERE_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.050066281110048294, 3), 'no'), (('WHERE_COL', ('student_enrolment', 'student_enrolment_id', 79), 0.04324466362595558, 3), 'no'), (('IUEN_v2', ('union', 2), 8.744613296585158e-05, 2), 'no'), (('IUEN_v2', ('except', 3), 2.6275927666574717e-05, 2), 'no'), (('IUEN_v2', ('intersect', 1), 9.010458938973898e-07, 2), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 941
    },
    {
        "nl": "What 's the name of the course with most number of enrollments ?",
        "true_sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 8]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "courses.course_name",
            "group_by",
            "courses.*",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 10, 93, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999982118606567, 1), ('GROUP_COL', ('courses', '*', 93), 0.010061345063149929, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9959238219170861, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997816681861877, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999237060546875, 7)]",
        "logprob": "-4.630662699081032",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999982118606567, 1), 'yes'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.4676537811756134, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9959238219170861, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997816681861877, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999237060546875, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999982118606567, 1), 'yes'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.4676537811756134, 3), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'course_id', 85), 0.31694620847702026, 3), 'no'), (('GROUP_COL', ('courses', 'course_id', 45), 0.10466259717941284, 3), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_course_id', 84), 0.08487046509981155, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9959238219170861, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997816681861877, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999237060546875, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 942
    },
    {
        "nl": "What is the name of the course with the most students enrolled ?",
        "true_sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]], 'table_units': [['table_unit', 1], ['table_unit', 8]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "courses.course_name",
            "group_by",
            "student_enrolment_courses.course_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [46], 10, 85, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999964237213135, 1), ('GROUP_COL', ('student_enrolment_courses', 'course_id', 85), 0.0014343630755320191, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8110508769608019, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997119307518005, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999456405639648, 7)]",
        "logprob": "-7.385972509535172",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999964237213135, 1), 'yes'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.6325720548629761, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8110508769608019, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997119307518005, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999456405639648, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.9999964237213135, 1), 'yes'), (('GROUP_COL', ('student_enrolment', 'student_id', 82), 0.6325720548629761, 3), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_enrolment_id', 86), 0.28493010997772217, 3), 'no'), (('GROUP_COL', ('student_enrolment', 'student_enrolment_id', 79), 0.0536402203142643, 3), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'student_course_id', 84), 0.027114152908325195, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8110508769608019, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9997119307518005, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999456405639648, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 943
    },
    {
        "nl": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program .",
        "true_sql": "select students.last_name where addresses.state_province_county = value except select distinct students.last_name",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 37, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 37, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"NorthCarolina\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.last_name",
            "where",
            "students.middle_name",
            "=",
            "value",
            "except",
            "select",
            "students.last_name",
            "where",
            "addresses.state_province_county",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [72], 6, 71, [7], 3, 28, 2, [72], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9999459981918335, 1), ('WHERE_COL', ('students', 'middle_name', 71), 0.008943257853388786, 3), ('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.9753307104110718, 4), ('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999977350234985, 5), ('IUEN_v2', ('except', 3), 0.6280778050422668, 6), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9828500151634216, 8), ('WHERE_COL', ('addresses', 'state_province_county', 42), 0.8358177542686462, 10), ('WHERE_OP', (('addresses', 'state_province_county', 42),), ('=', 0), 0.9999902248382568, 11), ('WHERE_ROOT_TERM', (('addresses', 'state_province_county', 42),), ('=', 0), 'terminal', 0.9999996423721313, 12)]",
        "logprob": "-5.404272646735362",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9999459981918335, 1), 'yes'), (('WHERE_COL', ('students', 'permanent_address_id', 69), 0.7109972834587097, 3), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.9753307104110718, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9999459981918335, 1), 'yes'), (('WHERE_COL', ('students', 'permanent_address_id', 69), 0.7109972834587097, 3), 'no'), (('WHERE_COL', ('students', 'student_id', 67), 0.235368013381958, 3), 'no'), (('WHERE_COL', ('students', 'current_address_id', 68), 0.024914344772696495, 3), 'no'), (('WHERE_COL', ('students', 'date_first_registered', 76), 0.013635695911943913, 3), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.9753307104110718, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('not in', 7), 0.12677826942634993, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('in', 8), 0.0040794722735881805, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('>', 1), 0.003373075509443879, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999977350234985, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 944
    },
    {
        "nl": "What are the last name of the students who live in North Carolina but have not registered in any degree programs ?",
        "true_sql": "select students.last_name where addresses.state_province_county = value except select distinct students.last_name",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 37, False], None]]]], 'union': None, 'where': []}, 'from': {'conds': [[False, 2, [0, [0, 33, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 37, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 7, False], None], '\"NorthCarolina\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.last_name",
            "where",
            "students.middle_name",
            "=",
            "value",
            "except",
            "select",
            "students.last_name",
            "where",
            "addresses.state_province_county",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [72], 6, 71, [7], 3, 28, 2, [72], 6, 42, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9999957084655762, 1), ('WHERE_COL', ('students', 'middle_name', 71), 0.020783163607120514, 3), ('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.997527539730072, 4), ('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999983310699463, 5), ('IUEN_v2', ('except', 3), 0.3961746394634247, 6), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9915355443954468, 8), ('WHERE_COL', ('addresses', 'state_province_county', 42), 0.9395506381988525, 10), ('WHERE_OP', (('addresses', 'state_province_county', 42),), ('=', 0), 0.9999958276748657, 11), ('WHERE_ROOT_TERM', (('addresses', 'state_province_county', 42),), ('=', 0), 'terminal', 0.9999995231628418, 12)]",
        "logprob": "-4.873688670767971",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9999957084655762, 1), 'yes'), (('WHERE_COL', ('students', 'permanent_address_id', 69), 0.7254925966262817, 3), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.997527539730072, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9999957084655762, 1), 'yes'), (('WHERE_COL', ('students', 'permanent_address_id', 69), 0.7254925966262817, 3), 'no'), (('WHERE_COL', ('students', 'student_id', 67), 0.1554528772830963, 3), 'no'), (('WHERE_COL', ('degree_programs', 'degree_program_id', 53), 0.036090124398469925, 3), 'no'), (('WHERE_COL', ('students', 'date_first_registered', 76), 0.03171999007463455, 3), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.997527539730072, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('not in', 7), 0.04093478421458831, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('>', 1), 0.0004564912524074316, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('in', 8), 0.00023923415574245155, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999983310699463, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 945
    },
    {
        "nl": "Show the date and id of the transcript with at least 2 course results .",
        "true_sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]], 'table_units': [['table_unit', 10], ['table_unit', 9]]}, 'groupBy': [[0, 56, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "group_by",
            "transcript_contents.transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [91], 10, 91, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999929666519165, 1), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.583480179309845, 3), ('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.00015959350275807083, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999833866757512, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9987629817195073, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999899864196777, 9)]",
        "logprob": "-9.288428797402917",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999929666519165, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.583480179309845, 3), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9998371601104736, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999833866757512, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9987629817195073, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999899864196777, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999929666519165, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.583480179309845, 3), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9998371601104736, 5), 'no'), (('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.00015959350275807083, 5), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_id', 87), 3.054498165511177e-06, 5), 'no'), (('GROUP_COL', ('transcript_contents', 'student_course_id', 90), 1.028465703711845e-07, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.999833866757512, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9987629817195073, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999899864196777, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 946
    },
    {
        "nl": "What is the date and id of the transcript with at least 2 courses listed ?",
        "true_sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id having count ( * ) > = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]], 'table_units': [['table_unit', 10], ['table_unit', 9]]}, 'groupBy': [[0, 56, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'having': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "group_by",
            "transcript_contents.transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [91], 10, 91, 18, [9, 5, 35, 4], [14, 7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999709129333496, 1), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.7020925283432007, 3), ('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.00043943439959548414, 5), ('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9997596742192577, 7), ('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9983785580542803, 8), ('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999889135360718, 9)]",
        "logprob": "-8.090940662653875",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999709129333496, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.7020925283432007, 3), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9995445609092712, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9997596742192577, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9983785580542803, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999889135360718, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999709129333496, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.7020925283432007, 3), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9995445609092712, 5), 'no'), (('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.00043943439959548414, 5), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_id', 87), 1.562890065542888e-05, 5), 'no'), (('GROUP_COL', ('transcript_contents', 'student_course_id', 90), 2.7212504960516526e-07, 5), 'no'), (('HAV_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9997596742192577, 7), 'yes'), (('HAV_OP_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 0.9983785580542803, 8), 'yes'), (('HAV_ROOT_TERM_v2', ((None, '*', 35), ('count', 3), False), ('>=', 3), 'terminal', 0.9999889135360718, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 947
    },
    {
        "nl": "What is the phone number of the man with the first name Timmothy and the last name Ward ?",
        "true_sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 35, False], None], '\"Timmothy\"', None], 'and', [False, 2, [0, [0, 37, False], None], '\"Ward\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "addresses.line_1",
            ")",
            "where",
            "students.first_name",
            "=",
            "value",
            "and",
            "students.last_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 37, 4], 6, 70, [7], 3, 16, 72, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('count', 3), True, 0.2785220011329844, 1), ('WHERE_COL', ('students', 'first_name', 70), 0.9995555281639099, 3), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9999735355377197, 4), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999992847442627, 5), ('WHERE_COL', ('students', 'last_name', 72), 0.767049252986908, 7), ('WHERE_OP', (('students', 'last_name', 72),), ('=', 0), 0.9995570778846741, 8), ('WHERE_ROOT_TERM', (('students', 'last_name', 72),), ('=', 0), 'terminal', 0.9999967813491821, 9)]",
        "logprob": "-6.707995646859457",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.5360241532325745, 1), 'no'), (('WHERE_COL', ('students', 'first_name', 70), 0.9995555281639099, 3), 'yes'), (('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9999735355377197, 4), 'yes'), (('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('students', 'last_name', 72), 0.767049252986908, 7), 'yes'), (('WHERE_OP', (('students', 'last_name', 72),), ('=', 0), 0.9995570778846741, 8), 'yes'), (('WHERE_ROOT_TERM', (('students', 'last_name', 72),), ('=', 0), 'terminal', 0.9999967813491821, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.5360241532325745, 1), 'no'), (('SELECT_AGG_v2', ('addresses', 'line_2', 38), ('none_agg', 0), False, 0.2753548324108124, 1), 'no'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.11671651154756547, 1), 'no'), (('SELECT_AGG_v2', ('addresses', 'line_3', 39), ('none_agg', 0), False, 0.0630321428179741, 1), 'no'), (('WHERE_COL', ('students', 'first_name', 70), 0.9995555281639099, 3), 'yes'), (('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9999735355377197, 4), 'yes'), (('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999992847442627, 5), 'yes'), (('WHERE_COL', ('students', 'last_name', 72), 0.767049252986908, 7), 'yes'), (('WHERE_OP', (('students', 'last_name', 72),), ('=', 0), 0.9995570778846741, 8), 'yes'), (('WHERE_ROOT_TERM', (('students', 'last_name', 72),), ('=', 0), 'terminal', 0.9999967813491821, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 948
    },
    {
        "nl": "What is the mobile phone number of the student named Timothy Ward ?",
        "true_sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 38, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 35, False], None], '\"Timmothy\"', None], 'and', [False, 2, [0, [0, 37, False], None], '\"Ward\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.cell_mobile_number",
            "where",
            "students.first_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [73], 6, 70, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'cell_mobile_number', 73), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('students', 'first_name', 70), 0.9971137046813965, 3), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9999955892562866, 4), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999990463256836, 5)]",
        "logprob": "-0.08385551075996911",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('students', 'first_name', 70), 0.9971137046813965, 3), 'yes'), (('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9999955892562866, 4), 'yes'), (('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('students', 'first_name', 70), 0.9971137046813965, 3), 'yes'), (('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9999955892562866, 4), 'yes'), (('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.9999990463256836, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 949
    },
    {
        "nl": "Who is the first student to register ? List the first name , middle name and last name .",
        "true_sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_first_registered asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 41, False], None]]], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "order_by",
            "students.date_first_registered",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 11, [76], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9998651742935181, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9906132221221924, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9851566553115845, 5), ('ORDER_AGG_v2', ('students', 'date_first_registered', 76), ('none_agg', 0), False, 0.6772391200065613, 7), ('ORDER_LIMIT', (('students', 'date_first_registered', 76), ('none_agg', 0), False), 'limit_value', 0.3757130205631256, 8)]",
        "logprob": "-1.541753428517936",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9998651742935181, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9906132221221924, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9851566553115845, 5), 'yes'), (('ORDER_AGG_v2', ('students', 'date_first_registered', 76), ('none_agg', 0), False, 0.6772391200065613, 7), 'yes'), (('ORDER_LIMIT', (('students', 'date_first_registered', 76), ('none_agg', 0), False), 'limit_value', 0.3757130205631256, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9998651742935181, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9906132221221924, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9851566553115845, 5), 'yes'), (('ORDER_AGG_v2', ('students', 'date_first_registered', 76), ('none_agg', 0), False, 0.6772391200065613, 7), 'yes'), (('ORDER_LIMIT', (('students', 'date_first_registered', 76), ('none_agg', 0), False), 'limit_value', 0.3757130205631256, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 950
    },
    {
        "nl": "What is the first , middle , and last name of the first student to register ?",
        "true_sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_first_registered asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 41, False], None]]], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9726476073265076, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8274001479148865, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9987962245941162, 5)]",
        "logprob": "-0.48907294212869856",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9726476073265076, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8274001479148865, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9987962245941162, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9726476073265076, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8274001479148865, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9987962245941162, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 951
    },
    {
        "nl": "Who is the earliest graduate of the school ? List the first name , middle name and last name .",
        "true_sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_left asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 42, False], None]]], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            "order_by",
            "students.date_left",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 11, [77], 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9931623935699463, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9610491394996643, 3), ('ORDER_AGG_v2', ('students', 'date_left', 77), ('none_agg', 0), False, 0.6120088696479797, 5), ('ORDER_LIMIT', (('students', 'date_left', 77), ('none_agg', 0), False), 'limit_value', 0.934286892414093, 6)]",
        "logprob": "-0.6188477612962167",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9931623935699463, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9610491394996643, 3), 'yes'), (('ORDER_AGG_v2', ('students', 'date_left', 77), ('none_agg', 0), False, 0.6120088696479797, 5), 'yes'), (('ORDER_LIMIT', (('students', 'date_left', 77), ('none_agg', 0), False), 'limit_value', 0.934286892414093, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9931623935699463, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.9610491394996643, 3), 'yes'), (('ORDER_AGG_v2', ('students', 'date_left', 77), ('none_agg', 0), False, 0.6120088696479797, 5), 'yes'), (('ORDER_LIMIT', (('students', 'date_left', 77), ('none_agg', 0), False), 'limit_value', 0.934286892414093, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 952
    },
    {
        "nl": "What is the first , middle , and last name of the earliest school graduate ?",
        "true_sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_left asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 42, False], None]]], 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 8, [71], 8, [72], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.6893364191055298, 1), ('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8512392044067383, 3), ('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9887456297874451, 5)]",
        "logprob": "-2.387854031178734",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.6893364191055298, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8512392044067383, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9887456297874451, 5), 'yes'), (('WHERE_COL', ('students', 'first_name', 70), 0.6616441011428833, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.6893364191055298, 1), 'yes'), (('SELECT_AGG_v2', ('students', 'middle_name', 71), ('none_agg', 0), False, 0.8512392044067383, 3), 'yes'), (('SELECT_AGG_v2', ('students', 'last_name', 72), ('none_agg', 0), False, 0.9887456297874451, 5), 'yes'), (('WHERE_COL', ('students', 'first_name', 70), 0.6616441011428833, 7), 'no'), (('WHERE_COL', ('students', 'middle_name', 71), 0.14074069261550903, 7), 'no'), (('WHERE_COL', ('students', 'date_left', 77), 0.05258980020880699, 7), 'no'), (('WHERE_COL', ('students', 'last_name', 72), 0.03654836118221283, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 953
    },
    {
        "nl": "Whose permanent address is different from his or her current address ? List his or her first name .",
        "true_sql": "select students.first_name where students.current_address_id != students.permanent_address_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 33, False], None], [0, 34, False], None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "students.permanent_address_id",
            ",",
            "students.first_name",
            "where",
            "sections.section_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [69], 8, [70], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'permanent_address_id', 69), ('none_agg', 0), False, 0.05017932876944543, 2), ('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.11939062178134918, 4), ('WHERE_COL', ('sections', 'section_name', 60), 0.00047010573325678706, 6), ('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9998588562011719, 7), ('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999980926513672, 8)]",
        "logprob": "-13.72992148726453",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.5690492391586304, 2), 'no'), (('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.11939062178134918, 4), 'yes'), (('WHERE_COL', ('students', 'first_name', 70), 0.9826123714447021, 6), 'no'), (('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9998588562011719, 7), 'no'), (('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999980926513672, 8), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.5690492391586304, 2), 'no'), (('SELECT_AGG_v2', ('addresses', 'line_3', 39), ('none_agg', 0), False, 0.2081796228885651, 2), 'no'), (('SELECT_AGG_v2', ('addresses', 'address_id', 36), ('none_agg', 0), False, 0.10804358124732973, 2), 'no'), (('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('none_agg', 0), False, 0.05386085435748099, 2), 'no'), (('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.11939062178134918, 4), 'yes'), (('WHERE_COL', ('students', 'first_name', 70), 0.9826123714447021, 6), 'no'), (('WHERE_COL', ('addresses', 'line_1', 37), 0.007504062727093697, 6), 'no'), (('WHERE_COL', ('addresses', 'other_address_details', 44), 0.004329747520387173, 6), 'no'), (('WHERE_COL', ('addresses', 'line_3', 39), 0.002550478558987379, 6), 'no'), (('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9998588562011719, 7), 'no'), (('WHERE_OP', (('sections', 'section_name', 60),), ('>', 1), 5.1269129471620545e-05, 7), 'no'), (('WHERE_OP', (('sections', 'section_name', 60),), ('!=', 5), 4.4287888158578426e-05, 7), 'no'), (('WHERE_OP', (('sections', 'section_name', 60),), ('not in', 7), 0.00506137780169245, 7), 'no'), (('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999980926513672, 8), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 954
    },
    {
        "nl": "What is the first name of the student whose permanent address is different from his or her current one ?",
        "true_sql": "select students.first_name where students.current_address_id != students.permanent_address_id",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 33, False], None], [0, 34, False], None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            "where",
            "students.current_address_id",
            "=",
            "(",
            "select",
            "min",
            "(",
            "students.other_student_details",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 6, 68, [7], 5, 2, [26, 5, 78, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9893813133239746, 1), ('WHERE_COL', ('students', 'current_address_id', 68), 0.03689814731478691, 3), ('WHERE_OP', (('students', 'current_address_id', 68),), ('=', 0), 0.9897011518478394, 4), ('WHERE_ROOT_TERM', (('students', 'current_address_id', 68),), ('=', 0), 'root', 8.843475370667875e-05, 5), ('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('min', 2), False, 0.9327845083931672, 7), ('O', '##END_NESTED##', 0.9999144077301025, 8)]",
        "logprob": "-13.350115478626225",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9893813133239746, 1), 'yes'), (('WHERE_COL', ('students', 'first_name', 70), 0.4342755973339081, 3), 'no'), (('WHERE_OP', (('students', 'current_address_id', 68),), ('=', 0), 0.9897011518478394, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'current_address_id', 68),), ('=', 0), 'terminal', 0.9999082088470459, 5), 'no'), (('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('min', 2), False, 0.9327845083931672, 7), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9893813133239746, 1), 'yes'), (('WHERE_COL', ('students', 'first_name', 70), 0.4342755973339081, 3), 'no'), (('WHERE_COL', ('students', 'permanent_address_id', 69), 0.24807126820087433, 3), 'no'), (('WHERE_COL', ('students', 'last_name', 72), 0.2285793125629425, 3), 'no'), (('WHERE_COL', ('students', 'other_student_details', 78), 0.03724159672856331, 3), 'no'), (('WHERE_OP', (('students', 'current_address_id', 68),), ('=', 0), 0.9897011518478394, 4), 'no'), (('WHERE_OP', (('students', 'current_address_id', 68),), ('>', 1), 0.004870531614869833, 4), 'no'), (('WHERE_OP', (('students', 'current_address_id', 68),), ('not in', 7), 0.062265714316589844, 4), 'no'), (('WHERE_OP', (('students', 'current_address_id', 68),), ('<', 2), 0.00016163307009264827, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'current_address_id', 68),), ('=', 0), 'terminal', 0.9999082088470459, 5), 'no'), (('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('min', 2), False, 0.9327845083931672, 7), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 955
    },
    {
        "nl": "Which address holds the most number of students currently ? List the address id and all lines .",
        "true_sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 group_by addresses.address_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 33, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 6]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "addresses.address_id",
            ",",
            "max",
            "(",
            "addresses.*",
            ")",
            "group_by",
            "addresses.address_id",
            "order_by",
            "sum",
            "(",
            "addresses.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [36], 8, [19, 5, 92, 4], 10, 36, 11, [24, 5, 92, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'address_id', 36), ('none_agg', 0), False, 0.01210757438093424, 1), ('SELECT_AGG_v2', ('addresses', '*', 92), ('max', 1), False, 0.11692892543758225, 3), ('GROUP_COL', ('addresses', 'address_id', 36), 0.6092671155929565, 5), ('ORDER_AGG_v2', ('addresses', '*', 92), ('sum', 4), False, 0.10947494996084253, 7), ('ORDER_DESC_ASC', (('addresses', '*', 92), ('sum', 4), False), 'asc', 0.0025866390205919743, 8), ('ORDER_LIMIT', (('addresses', '*', 92), ('sum', 4), False), 'limit_value', 0.9979814291000366, 9)]",
        "logprob": "-28.315275864007504",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('none_agg', 0), False, 0.9451923966407776, 1), 'no'), (('SELECT_AGG_v2', ('addresses', '*', 92), ('count', 3), False, 0.9992420211062042, 3), 'no'), (('GROUP_COL', ('addresses', 'address_id', 36), 0.6092671155929565, 5), 'yes'), (('ORDER_AGG_v2', ('addresses', '*', 92), ('count', 3), False, 0.9984695141424621, 7), 'no'), (('ORDER_DESC_ASC', (('addresses', '*', 92), ('sum', 4), False), 'desc', 0.9955573678016663, 8), 'no'), (('ORDER_LIMIT', (('addresses', '*', 92), ('sum', 4), False), 'limit_value', 0.9979814291000366, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('none_agg', 0), False, 0.9451923966407776, 1), 'no'), (('SELECT_AGG_v2', ('addresses', 'line_3', 39), ('none_agg', 0), False, 0.018877968192100525, 1), 'no'), (('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.01234343089163303, 1), 'no'), (('SELECT_AGG_v2', ('addresses', 'address_id', 36), ('none_agg', 0), False, 0.01210757438093424, 1), 'yes'), (('SELECT_AGG_v2', ('addresses', '*', 92), ('count', 3), False, 0.9992420211062042, 3), 'no'), (('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.19725419958849044, 3), 'no'), (('SELECT_AGG_v2', ('addresses', '*', 92), ('sum', 4), False, 0.15139956205555782, 3), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.11949225207648964, 3), 'no'), (('GROUP_COL', ('addresses', 'address_id', 36), 0.6092671155929565, 5), 'yes'), (('ORDER_AGG_v2', ('addresses', '*', 92), ('count', 3), False, 0.9984695141424621, 7), 'no'), (('ORDER_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.22393916018818402, 7), 'no'), (('ORDER_AGG_v2', ('addresses', 'address_id', 36), ('count', 3), False, 0.20452902594809536, 7), 'no'), (('ORDER_AGG_v2', ('student_enrolment', 'student_id', 82), ('count', 3), False, 0.1924535879132441, 7), 'no'), (('ORDER_DESC_ASC', (('addresses', '*', 92), ('sum', 4), False), 'desc', 0.9955573678016663, 8), 'no'), (('ORDER_LIMIT', (('addresses', '*', 92), ('sum', 4), False), 'limit_value', 0.9979814291000366, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 956
    },
    {
        "nl": "What is the id , line 1 , and line 2 of the address with the most students ?",
        "true_sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 group_by addresses.address_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 33, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 6]]}, 'groupBy': [[0, 1, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "addresses.line_1",
            ",",
            "addresses.line_1",
            ",",
            "addresses.line_2",
            "group_by",
            "addresses.address_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 8, [38], 10, 36, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.8763803243637085, 1), ('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9587370753288269, 3), ('SELECT_AGG_v2', ('addresses', 'line_2', 38), ('none_agg', 0), False, 0.20360018312931058, 5), ('GROUP_COL', ('addresses', 'address_id', 36), 0.9485130906105042, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.27114207141608065, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9976720213890076, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998832941055298, 11)]",
        "logprob": "-7.3882349218628685",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.8763803243637085, 1), 'yes'), (('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9587370753288269, 3), 'yes'), (('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.7548612444366867, 5), 'no'), (('GROUP_COL', ('addresses', 'address_id', 36), 0.9485130906105042, 7), 'yes'), (('ORDER_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.963091452930248, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9976720213890076, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998832941055298, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.8763803243637085, 1), 'yes'), (('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.9587370753288269, 3), 'yes'), (('SELECT_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.7548612444366867, 5), 'no'), (('SELECT_AGG_v2', ('addresses', 'line_3', 39), ('none_agg', 0), False, 0.22572976350784305, 5), 'no'), (('SELECT_AGG_v2', ('addresses', 'line_2', 38), ('none_agg', 0), False, 0.20360018312931058, 5), 'yes'), (('SELECT_AGG_v2', ('addresses', 'line_1', 37), ('none_agg', 0), False, 0.09157168120145799, 5), 'yes'), (('GROUP_COL', ('addresses', 'address_id', 36), 0.9485130906105042, 7), 'yes'), (('ORDER_AGG_v2', ('students', '*', 98), ('count', 3), False, 0.963091452930248, 9), 'no'), (('ORDER_AGG_v2', ('addresses', '*', 92), ('count', 3), False, 0.6038487403551585, 9), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.27114207141608065, 9), 'yes'), (('ORDER_AGG_v2', ('students', '*', 98), ('sum', 4), False, 0.12268818441458025, 9), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9976720213890076, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998832941055298, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 957
    },
    {
        "nl": "On average , when were the transcripts printed ?",
        "true_sql": "select avg ( transcripts.transcript_date )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 53, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "transcripts.transcript_date",
            ")",
            ",",
            "avg",
            "(",
            "transcripts.transcript_date",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 88, 4], 8, [17, 5, 88, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.9973815582808822, 1), ('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.6383237440311135, 3)]",
        "logprob": "-1.810765933738223",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.9973815582808822, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.4476669132709503, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.9973815582808822, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.4476669132709503, 3), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('none_agg', 0), False, 0.34857752919197077, 3), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.6383237440311135, 3), 'yes'), (('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('min', 2), False, 0.3659464203833342, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 958
    },
    {
        "nl": "What is the average transcript date ?",
        "true_sql": "select avg ( transcripts.transcript_date )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 53, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "transcripts.transcript_date",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 88, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.9966638467880162, 1)]",
        "logprob": "-0.07114183116541689",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.9966638467880162, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('avg', 5), False, 0.9966638467880162, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 959
    },
    {
        "nl": "When is the first transcript released ? List the date and details .",
        "true_sql": "select transcripts.transcript_date , transcripts.other_details order_by transcripts.transcript_date asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 53, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 54, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcripts.other_details",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [89], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999997615814209, 1), ('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.9991855025291443, 3)]",
        "logprob": "-0.6990189636239311",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.9991855025291443, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999997615814209, 1), 'yes'), (('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.9991855025291443, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 960
    },
    {
        "nl": "What is the earliest date of a transcript release , and what details can you tell me ?",
        "true_sql": "select transcripts.transcript_date , transcripts.other_details order_by transcripts.transcript_date asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [0, 53, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 54, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcripts.other_details",
            ",",
            "transcripts.other_details",
            "order_by",
            "courses.other_details",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [89], 8, [89], 11, [48], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.9589038491249084, 3), ('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.5652170777320862, 5), ('ORDER_AGG_v2', ('courses', 'other_details', 48), ('none_agg', 0), False, 0.0008042319095693529, 7)]",
        "logprob": "-13.17978867672748",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.9589038491249084, 3), 'yes'), (('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.5652170777320862, 5), 'yes'), (('ORDER_AGG_v2', ('semesters', 'other_details', 66), ('none_agg', 0), False, 0.8099983930587769, 7), 'no'), (('ORDER_LIMIT', (('courses', 'other_details', 48), ('none_agg', 0), False), 'limit_value', 0.7982528805732727, 8), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.9589038491249084, 3), 'yes'), (('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.5652170777320862, 5), 'yes'), (('ORDER_AGG_v2', ('semesters', 'other_details', 66), ('none_agg', 0), False, 0.8099983930587769, 7), 'no'), (('ORDER_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.15239955484867096, 7), 'no'), (('ORDER_AGG_v2', ('sections', 'other_details', 62), ('none_agg', 0), False, 0.03396799042820931, 7), 'no'), (('ORDER_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.0014422240201383836, 7), 'no'), (('ORDER_LIMIT', (('courses', 'other_details', 48), ('none_agg', 0), False), 'limit_value', 0.7982528805732727, 8), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 961
    },
    {
        "nl": "How many transcripts are released ?",
        "true_sql": "select count ( transcripts.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'transcripts.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "transcripts.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 101, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', '*', 101), ('count', 3), False, 0.23953301888528067, 1)]",
        "logprob": "-5.726778059525953",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), False, 0.9936445087399859, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), False, 0.9936445087399859, 1), 'no'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('count', 3), False, 0.35048475951531394, 1), 'no'), (('SELECT_AGG_v2', ('transcripts', '*', 101), ('count', 3), False, 0.23953301888528067, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', '*', 102), ('count', 3), False, 0.23209915667411163, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 962
    },
    {
        "nl": "How many transcripts are listed ?",
        "true_sql": "select count ( transcripts.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'transcripts.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "transcripts.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 101, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', '*', 101), ('count', 3), False, 0.24144777424052058, 1)]",
        "logprob": "-5.684517780152104",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), False, 0.9914079980085678, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), False, 0.9914079980085678, 1), 'no'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('count', 3), False, 0.3387593006358634, 1), 'no'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('count', 3), True, 0.3788550888428094, 1), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), True, 0.35144200239626855, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 963
    },
    {
        "nl": "What is the last transcript release date ?",
        "true_sql": "select transcripts.transcript_date order_by transcripts.transcript_date desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 53, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            "order_by",
            "transcripts.transcript_date",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 11, [88], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999291896820068, 1), ('ORDER_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9056122303009033, 3), ('ORDER_DESC_ASC', (('transcripts', 'transcript_date', 88), ('none_agg', 0), False), 'desc', 0.039763983339071274, 4), ('ORDER_LIMIT', (('transcripts', 'transcript_date', 88), ('none_agg', 0), False), 'limit_value', 0.9939234852790833, 5)]",
        "logprob": "-6.261538110615832",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999291896820068, 1), 'yes'), (('WHERE_COL', ('transcripts', 'transcript_id', 87), 0.5902665257453918, 3), 'no'), (('ORDER_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9056122303009033, 3), 'yes'), (('ORDER_DESC_ASC', (('transcripts', 'transcript_date', 88), ('none_agg', 0), False), 'asc', 0.4709665775299072, 4), 'no'), (('ORDER_LIMIT', (('transcripts', 'transcript_date', 88), ('none_agg', 0), False), 'limit_value', 0.9939234852790833, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999291896820068, 1), 'yes'), (('WHERE_COL', ('transcripts', 'transcript_id', 87), 0.5902665257453918, 3), 'no'), (('WHERE_COL', ('transcripts', 'transcript_date', 88), 0.19133000075817108, 3), 'no'), (('WHERE_COL', ('transcripts', 'other_details', 89), 0.16324591636657715, 3), 'no'), (('WHERE_COL', ('transcript_contents', 'transcript_id', 91), 0.05454761162400246, 3), 'no'), (('ORDER_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9056122303009033, 3), 'yes'), (('ORDER_DESC_ASC', (('transcripts', 'transcript_date', 88), ('none_agg', 0), False), 'asc', 0.4709665775299072, 4), 'no'), (('ORDER_LIMIT', (('transcripts', 'transcript_date', 88), ('none_agg', 0), False), 'limit_value', 0.9939234852790833, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 964
    },
    {
        "nl": "When was the last transcript released ?",
        "true_sql": "select transcripts.transcript_date order_by transcripts.transcript_date desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 9]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 53, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9385931491851807, 1)]",
        "logprob": "-2.260937503986698",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9385931491851807, 1), 'yes'), (('WHERE_COL', ('transcripts', 'transcript_date', 88), 0.9738272428512573, 3), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9385931491851807, 1), 'yes'), (('WHERE_COL', ('transcripts', 'transcript_date', 88), 0.9738272428512573, 3), 'no'), (('WHERE_COL', ('transcripts', 'transcript_id', 87), 0.013926368206739426, 3), 'no'), (('WHERE_COL', ('transcripts', 'other_details', 89), 0.006781812757253647, 3), 'no'), (('WHERE_COL', ('transcript_contents', 'transcript_id', 91), 0.0051189023070037365, 3), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 965
    },
    {
        "nl": "How many times at most can a course enrollment result show in different transcripts ? Also show the course enrollment id .",
        "true_sql": "select count ( transcript_contents.* ) , transcript_contents.student_course_id group_by transcript_contents.student_course_id order_by count ( transcript_contents.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 10]]}, 'groupBy': [[0, 55, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 55, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'transcript_contents.*', 'order_by': 'transcript_contents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "transcript_contents.*",
            ")",
            ",",
            "transcript_contents.student_course_id",
            "group_by",
            "transcript_contents.student_course_id",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 102, 4], 8, [90], 10, 90, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcript_contents', '*', 102), ('count', 3), False, 0.349062295891349, 1), ('SELECT_AGG_v2', ('transcript_contents', 'student_course_id', 90), ('none_agg', 0), False, 0.0006299007218331097, 3), ('GROUP_COL', ('transcript_contents', 'student_course_id', 90), 1.9616941244748887e-06, 5)]",
        "logprob": "-24.75635449961118",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student_enrolment_courses', 'course_id', 85), ('count', 3), False, 0.8304618183619195, 1), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('none_agg', 0), False, 0.8614860773086548, 3), 'no'), (('GROUP_COL', ('transcripts', 'transcript_id', 87), 0.9338477849960327, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student_enrolment_courses', 'course_id', 85), ('count', 3), False, 0.8304618183619195, 1), 'no'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('count', 3), False, 0.7887645993762444, 1), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), False, 0.528744301335344, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.392991310526719, 1), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('none_agg', 0), False, 0.8614860773086548, 3), 'no'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.1325119137763977, 3), 'no'), (('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.002712730783969163, 3), 'no'), (('SELECT_AGG_v2', ('courses', 'course_id', 45), ('none_agg', 0), False, 0.0023077623918652543, 3), 'no'), (('GROUP_COL', ('transcripts', 'transcript_id', 87), 0.9338477849960327, 5), 'no'), (('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.06612667441368103, 5), 'no'), (('GROUP_COL', ('courses', 'course_name', 46), 1.3590520211437251e-05, 5), 'no'), (('GROUP_COL', ('courses', 'course_id', 45), 7.27064525563037e-06, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 966
    },
    {
        "nl": "What is the maximum number of times that a course shows up in different transcripts and what is that course 's enrollment id ?",
        "true_sql": "select count ( transcript_contents.* ) , transcript_contents.student_course_id group_by transcript_contents.student_course_id order_by count ( transcript_contents.* ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 10]]}, 'groupBy': [[0, 55, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 55, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'transcript_contents.*', 'order_by': 'transcript_contents.*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "student_enrolment_courses.student_course_id",
            ")",
            ",",
            "transcript_contents.student_course_id",
            "group_by",
            "transcript_contents.student_course_id",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 84, 4], 8, [90], 10, 90, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment_courses', 'student_course_id', 84), ('sum', 4), False, 0.2849004828964736, 1), ('SELECT_AGG_v2', ('transcript_contents', 'student_course_id', 90), ('none_agg', 0), False, 0.0035527034197002662, 3), ('GROUP_COL', ('transcript_contents', 'student_course_id', 90), 4.7678619012003765e-05, 5)]",
        "logprob": "-20.614125200195275",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), True, 0.9384377058254907, 1), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('none_agg', 0), False, 0.9380761384963989, 3), 'no'), (('GROUP_COL', ('transcripts', 'transcript_id', 87), 0.9851834177970886, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('count', 3), True, 0.9384377058254907, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', 'course_id', 85), ('count', 3), False, 0.5460970860894635, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment_courses', 'student_course_id', 84), ('count', 3), False, 0.5376052643717398, 1), 'no'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('count', 3), True, 0.49987287582521334, 1), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('none_agg', 0), False, 0.9380761384963989, 3), 'no'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.04727650061249734, 3), 'no'), (('SELECT_AGG_v2', ('courses', 'course_name', 46), ('none_agg', 0), False, 0.005928780883550643, 3), 'no'), (('SELECT_AGG_v2', ('transcript_contents', 'student_course_id', 90), ('none_agg', 0), False, 0.0035527034197002662, 3), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_id', 87), 0.9851834177970886, 5), 'no'), (('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.01452668197453022, 5), 'no'), (('GROUP_COL', ('courses', 'course_name', 46), 0.00014276814181357622, 5), 'no'), (('GROUP_COL', ('student_enrolment_courses', 'course_id', 85), 8.384026295971125e-05, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 967
    },
    {
        "nl": "Show the date of the transcript which shows the least number of results , also list the id .",
        "true_sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id order_by count ( * ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]], 'table_units': [['table_unit', 10], ['table_unit', 9]]}, 'groupBy': [[0, 56, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "group_by",
            "transcript_contents.transcript_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [91], 10, 91, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9987115859985352, 1), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.041723020374774926, 3), ('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.3075411319732666, 5), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9982087413483863, 7), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9485570788383484, 8), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9997095465660095, 9)]",
        "logprob": "-4.710836368105504",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9987115859985352, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8526116878338179, 3), 'no'), (('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.6837859153747559, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9982087413483863, 7), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9485570788383484, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9997095465660095, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9987115859985352, 1), 'yes'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.8526116878338179, 3), 'no'), (('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('none_agg', 0), False, 0.269645094871521, 3), 'no'), (('SELECT_AGG_v2', ('transcripts', 'transcript_id', 87), ('none_agg', 0), False, 0.08401526510715485, 3), 'no'), (('SELECT_AGG_v2', ('transcripts', 'other_details', 89), ('sum', 4), False, 0.4250829106871806, 3), 'no'), (('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.6837859153747559, 5), 'no'), (('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.3075411319732666, 5), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_id', 87), 0.008597617968916893, 5), 'no'), (('GROUP_COL', ('semesters', 'semester_id', 63), 7.509545685024932e-05, 5), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9982087413483863, 7), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9485570788383484, 8), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9997095465660095, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 968
    },
    {
        "nl": "What is the date and id of the transcript with the least number of results ?",
        "true_sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id order_by count ( * ) asc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]], 'table_units': [['table_unit', 10], ['table_unit', 9]]}, 'groupBy': [[0, 56, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            ",",
            "transcript_contents.transcript_id",
            "group_by",
            "transcript_contents.transcript_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [88], 8, [91], 8, [91], 10, 91, 11, [9, 5, 35, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999998807907104, 1), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.6742604970932007, 3), ('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.4365752935409546, 5), ('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.0004678248369600624, 7), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9987688428512758, 9), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9011456370353699, 10), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9995641112327576, 11)]",
        "logprob": "-9.731885717935583",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.6742604970932007, 3), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.4365752935409546, 5), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9995146989822388, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9987688428512758, 9), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9011456370353699, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9995641112327576, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('transcripts', 'transcript_date', 88), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.6742604970932007, 3), 'yes'), (('SELECT_AGG_v2', ('transcript_contents', 'transcript_id', 91), ('none_agg', 0), False, 0.4365752935409546, 5), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_date', 88), 0.9995146989822388, 7), 'no'), (('GROUP_COL', ('transcript_contents', 'transcript_id', 91), 0.0004678248369600624, 7), 'yes'), (('GROUP_COL', ('transcripts', 'transcript_id', 87), 1.6348370991181582e-05, 7), 'no'), (('GROUP_COL', ('semesters', 'semester_id', 63), 5.916265877203841e-07, 7), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9987688428512758, 9), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'asc', 0.9011456370353699, 10), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9995641112327576, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 969
    },
    {
        "nl": "Find the semester when both Master students and Bachelor students got enrolled in .",
        "true_sql": "select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value intersect select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Bachelor\"', None]]}, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Master\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student_enrolment.semester_id",
            "where",
            "students.middle_name",
            "=",
            "value",
            "intersect",
            "select",
            "student_enrolment.student_id",
            "where",
            "students.date_first_registered",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [81], 6, 71, [7], 3, 23, 2, [82], 6, 76, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.033943939954042435, 1), ('WHERE_COL', ('students', 'middle_name', 71), 6.72997384754126e-06, 3), ('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.9999932050704956, 4), ('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999994039535522, 5), ('IUEN_v2', ('intersect', 1), 0.6693002581596375, 6), ('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.3826950490474701, 8), ('WHERE_COL', ('students', 'date_first_registered', 76), 0.9064999222755432, 10), ('WHERE_OP', (('students', 'date_first_registered', 76),), ('=', 0), 0.9995570778846741, 11), ('WHERE_ROOT_TERM', (('students', 'date_first_registered', 76),), ('=', 0), 'terminal', 0.9999980926513672, 12)]",
        "logprob": "-16.97828385478324",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.6007562279701233, 1), 'no'), (('WHERE_COL', ('students', 'date_first_registered', 76), 0.9955068826675415, 3), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.9999932050704956, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('semesters', 'semester_name', 64), ('none_agg', 0), False, 0.6007562279701233, 1), 'no'), (('SELECT_AGG_v2', ('student_enrolment', 'student_id', 82), ('none_agg', 0), False, 0.1442858874797821, 1), 'no'), (('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.1029747724533081, 1), 'no'), (('SELECT_AGG_v2', ('students', 'date_first_registered', 76), ('none_agg', 0), False, 0.042551252990961075, 1), 'no'), (('WHERE_COL', ('students', 'date_first_registered', 76), 0.9955068826675415, 3), 'no'), (('WHERE_COL', ('students', 'first_name', 70), 0.004053784999996424, 3), 'no'), (('WHERE_COL', ('semesters', 'semester_name', 64), 0.0002970979840029031, 3), 'no'), (('WHERE_COL', ('students', 'student_id', 67), 0.00012413728109095246, 3), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('=', 0), 0.9999932050704956, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('>', 1), 2.296383854627493e-06, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('not in', 7), 0.0014274582318274495, 4), 'no'), (('WHERE_OP', (('students', 'middle_name', 71),), ('!=', 5), 9.421527806807717e-07, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'middle_name', 71),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 970
    },
    {
        "nl": "What is the id of the semester that had both Masters and Bachelors students enrolled ?",
        "true_sql": "select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value intersect select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]], 'table_units': [['table_unit', 3], ['table_unit', 7]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Bachelor\"', None]]}, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 46, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 20, False], None], '\"Master\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "student_enrolment.semester_id",
            "where",
            "student_enrolment.student_enrolment_id",
            "=",
            "value",
            "intersect",
            "select",
            "student_enrolment.semester_id",
            "where",
            "semesters.semester_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [81], 6, 79, [7], 3, 23, 2, [81], 6, 64, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.8155484199523926, 1), ('WHERE_COL', ('student_enrolment', 'student_enrolment_id', 79), 0.09449470788240433, 3), ('WHERE_OP', (('student_enrolment', 'student_enrolment_id', 79),), ('=', 0), 0.9994713664054871, 4), ('WHERE_ROOT_TERM', (('student_enrolment', 'student_enrolment_id', 79),), ('=', 0), 'terminal', 0.9999988079071045, 5), ('IUEN_v2', ('intersect', 1), 0.9944313168525696, 6), ('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.7759144306182861, 8), ('WHERE_COL', ('semesters', 'semester_name', 64), 0.8221537470817566, 10), ('WHERE_OP', (('semesters', 'semester_name', 64),), ('=', 0), 0.9999886751174927, 11), ('WHERE_ROOT_TERM', (('semesters', 'semester_name', 64),), ('=', 0), 'terminal', 0.9999988079071045, 12)]",
        "logprob": "-3.0293263882467993",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.8155484199523926, 1), 'yes'), (('WHERE_COL', ('semesters', 'semester_name', 64), 0.30865243077278137, 3), 'no'), (('WHERE_OP', (('student_enrolment', 'student_enrolment_id', 79),), ('=', 0), 0.9994713664054871, 4), 'no'), (('WHERE_ROOT_TERM', (('student_enrolment', 'student_enrolment_id', 79),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('student_enrolment', 'semester_id', 81), ('none_agg', 0), False, 0.8155484199523926, 1), 'yes'), (('WHERE_COL', ('semesters', 'semester_name', 64), 0.30865243077278137, 3), 'no'), (('WHERE_COL', ('students', 'student_id', 67), 0.24991002678871155, 3), 'no'), (('WHERE_COL', ('student_enrolment', 'student_id', 82), 0.2345293015241623, 3), 'no'), (('WHERE_COL', ('students', 'first_name', 70), 0.10661718994379044, 3), 'no'), (('WHERE_OP', (('student_enrolment', 'student_enrolment_id', 79),), ('=', 0), 0.9994713664054871, 4), 'no'), (('WHERE_OP', (('student_enrolment', 'student_enrolment_id', 79),), ('>', 1), 0.0004727946943603456, 4), 'no'), (('WHERE_OP', (('student_enrolment', 'student_enrolment_id', 79),), ('not in', 7), 0.005012729085288602, 4), 'no'), (('WHERE_OP', (('student_enrolment', 'student_enrolment_id', 79),), ('in', 8), 1.7875801859190688e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('student_enrolment', 'student_enrolment_id', 79),), ('=', 0), 'terminal', 0.9999988079071045, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 971
    },
    {
        "nl": "How many different addresses do the students currently live ?",
        "true_sql": "select count ( distinct students.current_address_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 33, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "students.current_address_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 68, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('count', 3), True, 0.9999246532821021, 1)]",
        "logprob": "-0.00039331801155512077",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('count', 3), True, 0.9999246532821021, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('count', 3), True, 0.9999246532821021, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 972
    },
    {
        "nl": "What are the different addresses that have students living there ?",
        "true_sql": "select count ( distinct students.current_address_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 33, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "addresses.city",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [40], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('addresses', 'city', 40), ('none_agg', 0), False, 0.017982335761189464, 2)]",
        "logprob": "-4.026623644549776",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('none_agg', 0), False, 0.8672913908958435, 2), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'current_address_id', 68), ('none_agg', 0), False, 0.8672913908958435, 2), 'no'), (('SELECT_AGG_v2', ('students', 'student_id', 67), ('none_agg', 0), False, 0.05130767449736595, 2), 'no'), (('SELECT_AGG_v2', ('addresses', 'address_id', 36), ('none_agg', 0), False, 0.03269410878419876, 2), 'no'), (('SELECT_AGG_v2', ('students', 'email_address', 74), ('none_agg', 0), False, 0.029828799888491627, 2), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 973
    },
    {
        "nl": "List all the student details in reversed lexicographical order .",
        "true_sql": "select students.other_student_details order_by students.other_student_details desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'select': [False, [[0, [0, [0, 43, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.other_student_details",
            "order_by",
            "students.other_student_details",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [78], 11, [78], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.9979296922683716, 1), ('ORDER_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.8403037786483765, 3), ('ORDER_DESC_ASC', (('students', 'other_student_details', 78), ('none_agg', 0), False), 'desc', 0.6215227246284485, 4)]",
        "logprob": "-0.6525194530858336",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.9979296922683716, 1), 'yes'), (('ORDER_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.8403037786483765, 3), 'yes'), (('ORDER_DESC_ASC', (('students', 'other_student_details', 78), ('none_agg', 0), False), 'desc', 0.6215227246284485, 4), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.9979296922683716, 1), 'yes'), (('ORDER_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.8403037786483765, 3), 'yes'), (('ORDER_DESC_ASC', (('students', 'other_student_details', 78), ('none_agg', 0), False), 'desc', 0.6215227246284485, 4), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 974
    },
    {
        "nl": "What other details can you tell me about students in reverse alphabetical order ?",
        "true_sql": "select students.other_student_details order_by students.other_student_details desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'select': [False, [[0, [0, [0, 43, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.other_student_details",
            "order_by",
            "students.other_student_details",
            "_EOS"
        ],
        "dec_seq": "[2, [78], 11, [78], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.9942895174026489, 1), ('ORDER_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.8402458429336548, 3)]",
        "logprob": "-0.34238275820766073",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.9942895174026489, 1), 'yes'), (('ORDER_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.8402458429336548, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.9942895174026489, 1), 'yes'), (('ORDER_AGG_v2', ('students', 'other_student_details', 78), ('none_agg', 0), False, 0.8402458429336548, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 975
    },
    {
        "nl": "Describe the section h .",
        "true_sql": "select sections.section_description where sections.section_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"h\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sections.section_description",
            "where",
            "sections.section_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [61], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.11768960952758788, 1), ('WHERE_COL', ('sections', 'section_name', 60), 0.9668442010879517, 3), ('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9999951124191284, 4), ('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999995231628418, 5)]",
        "logprob": "-2.173534998536351",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.7606576681137085, 1), 'no'), (('WHERE_COL', ('sections', 'section_name', 60), 0.9668442010879517, 3), 'yes'), (('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9999951124191284, 4), 'yes'), (('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('sections', 'section_name', 60), ('none_agg', 0), False, 0.7606576681137085, 1), 'no'), (('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.11768960952758788, 1), 'yes'), (('SELECT_AGG_v2', ('sections', 'other_details', 62), ('none_agg', 0), False, 0.012691150419414043, 1), 'no'), (('SELECT_AGG_v2', ('sections', 'section_id', 58), ('none_agg', 0), False, 0.01158689707517624, 1), 'no'), (('WHERE_COL', ('sections', 'section_name', 60), 0.9668442010879517, 3), 'yes'), (('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9999951124191284, 4), 'yes'), (('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999995231628418, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 976
    },
    {
        "nl": "What is the description for the section named h ?",
        "true_sql": "select sections.section_description where sections.section_name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 4]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 26, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 25, False], None], '\"h\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sections.section_description",
            "where",
            "sections.section_name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [61], 6, 60, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9999977350234985, 1), ('WHERE_COL', ('sections', 'section_name', 60), 1.0, 3), ('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9999971389770508, 4), ('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999994039535522, 5)]",
        "logprob": "-3.325958823017092e-05",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9999977350234985, 1), 'yes'), (('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9999971389770508, 4), 'yes'), (('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('sections', 'section_description', 61), ('none_agg', 0), False, 0.9999977350234985, 1), 'yes'), (('WHERE_OP', (('sections', 'section_name', 60),), ('=', 0), 0.9999971389770508, 4), 'yes'), (('WHERE_ROOT_TERM', (('sections', 'section_name', 60),), ('=', 0), 'terminal', 0.9999994039535522, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 977
    },
    {
        "nl": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "true_sql": "select students.first_name where addresses.country = value union select students.first_name where students.cell_mobile_number = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 34, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], '\"09700166582\"', None]]}, 'where': [[False, 2, [0, [0, 8, False], None], '\"Haiti\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            "where",
            "addresses.country",
            "=",
            "value",
            "or",
            "addresses.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 6, 43, [7], 3, 25, 43, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9991796612739563, 1), ('WHERE_COL', ('addresses', 'country', 43), 0.5939220786094666, 3), ('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9998437166213989, 4), ('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999985694885254, 5), ('WHERE_COL', ('addresses', 'country', 43), 0.9932460188865662, 7), ('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9998573064804077, 8), ('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999949932098389, 9)]",
        "logprob": "-0.5508420777837313",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9991796612739563, 1), 'yes'), (('WHERE_COL', ('addresses', 'country', 43), 0.5939220786094666, 3), 'yes'), (('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9998437166213989, 4), 'yes'), (('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('WHERE_COL', ('addresses', 'country', 43), 0.9932460188865662, 7), 'yes'), (('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9998573064804077, 8), 'yes'), (('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999949932098389, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9991796612739563, 1), 'yes'), (('WHERE_COL', ('addresses', 'country', 43), 0.5939220786094666, 3), 'yes'), (('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9998437166213989, 4), 'yes'), (('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes'), (('WHERE_COL', ('addresses', 'country', 43), 0.9932460188865662, 7), 'yes'), (('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9998573064804077, 8), 'yes'), (('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999949932098389, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 978
    },
    {
        "nl": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "true_sql": "select students.first_name where addresses.country = value union select students.first_name where students.cell_mobile_number = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 34, False], None], [0, 1, False], None]], 'table_units': [['table_unit', 6], ['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 6]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 35, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 38, False], None], '\"09700166582\"', None]]}, 'where': [[False, 2, [0, [0, 8, False], None], '\"Haiti\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'addresses.address_id': 1, 'addresses.line_1': 2, 'addresses.line_2': 3, 'addresses.line_3': 4, 'addresses.city': 5, 'addresses.zip_postcode': 6, 'addresses.state_province_county': 7, 'addresses.country': 8, 'addresses.other_address_details': 9, 'courses.course_id': 10, 'courses.course_name': 11, 'courses.course_description': 12, 'courses.other_details': 13, 'departments.department_id': 14, 'departments.department_name': 15, 'departments.department_description': 16, 'departments.other_details': 17, 'degree_programs.degree_program_id': 18, 'degree_programs.department_id': 19, 'degree_programs.degree_summary_name': 20, 'degree_programs.degree_summary_description': 21, 'degree_programs.other_details': 22, 'sections.section_id': 23, 'sections.course_id': 24, 'sections.section_name': 25, 'sections.section_description': 26, 'sections.other_details': 27, 'semesters.semester_id': 28, 'semesters.semester_name': 29, 'semesters.semester_description': 30, 'semesters.other_details': 31, 'students.student_id': 32, 'students.current_address_id': 33, 'students.permanent_address_id': 34, 'students.first_name': 35, 'students.middle_name': 36, 'students.last_name': 37, 'students.cell_mobile_number': 38, 'students.email_address': 39, 'students.ssn': 40, 'students.date_first_registered': 41, 'students.date_left': 42, 'students.other_student_details': 43, 'student_enrolment.student_enrolment_id': 44, 'student_enrolment.degree_program_id': 45, 'student_enrolment.semester_id': 46, 'student_enrolment.student_id': 47, 'student_enrolment.other_details': 48, 'student_enrolment_courses.student_course_id': 49, 'student_enrolment_courses.course_id': 50, 'student_enrolment_courses.student_enrolment_id': 51, 'transcripts.transcript_id': 52, 'transcripts.transcript_date': 53, 'transcripts.other_details': 54, 'transcript_contents.student_course_id': 55, 'transcript_contents.transcript_id': 56, 'addresses.*': 57, 'courses.*': 58, 'departments.*': 59, 'degree_programs.*': 60, 'sections.*': 61, 'semesters.*': 62, 'students.*': 63, 'student_enrolment.*': 64, 'student_enrolment_courses.*': 65, 'transcripts.*': 66, 'transcript_contents.*': 67}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "students.first_name",
            "where",
            "students.first_name",
            "=",
            "value",
            "or",
            "addresses.country",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [70], 6, 70, [7], 3, 25, 43, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9988512992858887, 1), ('WHERE_COL', ('students', 'first_name', 70), 0.0055846706964075565, 3), ('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9996829032897949, 4), ('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.999997615814209, 5), ('WHERE_COL', ('addresses', 'country', 43), 0.15780897438526154, 7), ('WHERE_OP', (('addresses', 'country', 43),), ('=', 0), 0.9994586110115051, 8), ('WHERE_ROOT_TERM', (('addresses', 'country', 43),), ('=', 0), 'terminal', 0.9999880790710449, 9)]",
        "logprob": "-7.07083379882643",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9988512992858887, 1), 'yes'), (('WHERE_COL', ('students', 'cell_mobile_number', 73), 0.9452319145202637, 3), 'no'), (('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9996829032897949, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.999997615814209, 5), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('students', 'first_name', 70), ('none_agg', 0), False, 0.9988512992858887, 1), 'yes'), (('WHERE_COL', ('students', 'cell_mobile_number', 73), 0.9452319145202637, 3), 'no'), (('WHERE_COL', ('addresses', 'line_1', 37), 0.01817093789577484, 3), 'no'), (('WHERE_COL', ('students', 'last_name', 72), 0.017226293683052063, 3), 'no'), (('WHERE_COL', ('students', 'permanent_address_id', 69), 0.011642983183264732, 3), 'no'), (('WHERE_OP', (('students', 'first_name', 70),), ('=', 0), 0.9996829032897949, 4), 'no'), (('WHERE_OP', (('students', 'first_name', 70),), ('in', 8), 0.00019165327830705792, 4), 'no'), (('WHERE_OP', (('students', 'first_name', 70),), ('!=', 5), 6.529573147417977e-05, 4), 'no'), (('WHERE_OP', (('students', 'first_name', 70),), ('>', 1), 1.701245128060691e-05, 4), 'no'), (('WHERE_ROOT_TERM', (('students', 'first_name', 70),), ('=', 0), 'terminal', 0.999997615814209, 5), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 979
    },
    {
        "nl": "How many ships ended up being 'Captured ' ?",
        "true_sql": "select count ( ship.* ) where ship.disposition_of_ship = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 13, False], None], '\"Captured\"', None]], 'extracted_clause_asterisk': {'select': 'ship.*'}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "ship.*",
            ")",
            "where",
            "ship.disposition_of_ship",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 55, 4], 6, 48, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ship', '*', 55), ('count', 3), False, 0.9933445498028601, 1), ('WHERE_COL', ('ship', 'disposition_of_ship', 48), 0.0007707418990321457, 3), ('WHERE_OP', (('ship', 'disposition_of_ship', 48),), ('=', 0), 0.9998480081558228, 4), ('WHERE_ROOT_TERM', (('ship', 'disposition_of_ship', 48),), ('=', 0), 'terminal', 0.9999985694885254, 5)]",
        "logprob": "-7.195339318711294",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ship', '*', 55), ('count', 3), False, 0.9933445498028601, 1), 'yes'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.989992082118988, 3), 'no'), (('WHERE_OP', (('ship', 'disposition_of_ship', 48),), ('=', 0), 0.9998480081558228, 4), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'disposition_of_ship', 48),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ship', '*', 55), ('count', 3), False, 0.9933445498028601, 1), 'yes'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.989992082118988, 3), 'no'), (('WHERE_COL', ('ship', 'name', 44), 0.0048871878534555435, 3), 'no'), (('WHERE_COL', ('battle', 'result', 41), 0.0030811671167612076, 3), 'no'), (('WHERE_COL', ('ship', 'ship_type', 46), 0.0011634986149147153, 3), 'no'), (('WHERE_OP', (('ship', 'disposition_of_ship', 48),), ('=', 0), 0.9998480081558228, 4), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'disposition_of_ship', 48),), ('=', 0), 'terminal', 0.9999985694885254, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 980
    },
    {
        "nl": "List the name and tonnage ordered by in descending alphaetical order for the names .",
        "true_sql": "select ship.name , ship.tonnage order_by ship.name desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ship.name",
            ",",
            "ship.tonnage",
            "order_by",
            "ship.name",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [44], 8, [45], 11, [44], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.03621560335159302, 1), ('SELECT_AGG_v2', ('ship', 'tonnage', 45), ('none_agg', 0), False, 0.02794667147099972, 3), ('ORDER_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 1.7293544374297215e-08, 5), ('ORDER_DESC_ASC', (('ship', 'name', 44), ('none_agg', 0), False), 'desc', 0.9989043474197388, 6)]",
        "logprob": "-24.77092793317789",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9606719017028809, 1), 'no'), (('ORDER_AGG_v2', ('ship', 'tonnage', 45), ('none_agg', 0), False, 0.9999998807907104, 5), 'no'), (('ORDER_DESC_ASC', (('ship', 'name', 44), ('none_agg', 0), False), 'desc', 0.9989043474197388, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9606719017028809, 1), 'no'), (('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.03621560335159302, 1), 'yes'), (('SELECT_AGG_v2', ('ship', 'tonnage', 45), ('max', 1), False, 0.14194295855884143, 1), 'no'), (('SELECT_AGG_v2', ('ship', 'tonnage', 45), ('none_agg', 0), False, 8.428979344898832e-05, 1), 'yes'), (('ORDER_AGG_v2', ('ship', 'tonnage', 45), ('none_agg', 0), False, 0.9999998807907104, 5), 'no'), (('ORDER_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 1.7293544374297215e-08, 5), 'yes'), (('ORDER_AGG_v2', ('ship', 'tonnage', 45), ('max', 1), False, 0.005123177556509794, 5), 'no'), (('ORDER_AGG_v2', ('ship', 'tonnage', 45), ('count', 3), True, 0.008038684868967102, 5), 'no'), (('ORDER_DESC_ASC', (('ship', 'name', 44), ('none_agg', 0), False), 'desc', 0.9989043474197388, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 981
    },
    {
        "nl": "List the name , date and result of each battle .",
        "true_sql": "select battle.name , battle.date",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.date",
            ",",
            "battle.date",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 8, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.9479615092277527, 3), ('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.4368388056755066, 5)]",
        "logprob": "-0.8827484021463143",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.9479615092277527, 3), 'yes'), (('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.5631611943244934, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.9479615092277527, 3), 'yes'), (('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.5631611943244934, 5), 'no'), (('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.4368388056755066, 5), 'yes'), (('SELECT_AGG_v2', ('battle', '*', 54), ('count', 3), False, 0.011449413007459237, 5), 'no'), (('SELECT_AGG_v2', ('battle', 'result', 41), ('min', 2), False, 0.0090137886168406, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 982
    },
    {
        "nl": "What is maximum and minimum death toll caused each time ?",
        "true_sql": "select max ( death.killed ) , min ( death.killed )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[1, [0, [0, 17, False], None]], [2, [0, [0, 17, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "death.killed",
            ")",
            ",",
            "min",
            "(",
            "death.killed",
            ")",
            ",",
            "min",
            "(",
            "death.killed",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 52, 4], 8, [26, 5, 52, 4], 8, [26, 5, 52, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.8502096589655954, 1), ('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.8508917677786186, 3), ('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.9139746028260504, 5)]",
        "logprob": "-6.6796021503485346",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.8502096589655954, 1), 'yes'), (('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.8508917677786186, 3), 'yes'), (('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.9139746028260504, 5), 'yes'), (('GROUP_COL', ('death', 'id', 50), 0.6071274280548096, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.8502096589655954, 1), 'yes'), (('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.8508917677786186, 3), 'yes'), (('SELECT_AGG_v2', ('death', 'killed', 52), ('min', 2), False, 0.9139746028260504, 5), 'yes'), (('GROUP_COL', ('death', 'id', 50), 0.6071274280548096, 7), 'no'), (('GROUP_COL', ('death', 'caused_by_ship_id', 49), 0.38753238320350647, 7), 'no'), (('GROUP_COL', ('death', 'killed', 52), 0.0024161285255104303, 7), 'no'), (('GROUP_COL', ('death', 'note', 51), 0.0019042701460421085, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 983
    },
    {
        "nl": "What is the average number of injuries caused each time ?",
        "true_sql": "select avg ( death.injured )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 18, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "avg",
            "(",
            "death.injured",
            ")",
            ",",
            "avg",
            "(",
            "death.injured",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [17, 5, 53, 4], 8, [17, 5, 53, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.9998728094137488, 1), ('SELECT_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.9669843029602073, 3)]",
        "logprob": "-3.3360326023515317",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.9998728094137488, 1), 'yes'), (('SELECT_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.9669843029602073, 3), 'yes'), (('GROUP_COL', ('death', 'caused_by_ship_id', 49), 0.7266064286231995, 5), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.9998728094137488, 1), 'yes'), (('SELECT_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.9669843029602073, 3), 'yes'), (('GROUP_COL', ('death', 'caused_by_ship_id', 49), 0.7266064286231995, 5), 'no'), (('GROUP_COL', ('death', 'id', 50), 0.034909576177597046, 5), 'no'), (('GROUP_COL', ('death', 'injured', 53), 0.03416617214679718, 5), 'no'), (('GROUP_COL', ('death', 'note', 51), 0.004437629133462906, 5), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 984
    },
    {
        "nl": "What are the death and injury situations caused by the ship with tonnage 't ' ?",
        "true_sql": "select death.killed , death.injured where ship.tonnage = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 17, False], None]], [0, [0, [0, 18, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"t\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "death.killed",
            ",",
            "death.injured",
            "where",
            "ship.tonnage",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [52], 8, [53], 6, 45, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('death', 'killed', 52), ('none_agg', 0), False, 0.9990062117576599, 1), ('SELECT_AGG_v2', ('death', 'injured', 53), ('none_agg', 0), False, 0.970317006111145, 3), ('WHERE_COL', ('ship', 'tonnage', 45), 0.9999833106994629, 5), ('WHERE_OP', (('ship', 'tonnage', 45),), ('=', 0), 0.999596893787384, 6), ('WHERE_ROOT_TERM', (('ship', 'tonnage', 45),), ('=', 0), 'terminal', 0.9999902248382568, 7)]",
        "logprob": "-0.03166033835583835",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('death', 'killed', 52), ('none_agg', 0), False, 0.9990062117576599, 1), 'yes'), (('SELECT_AGG_v2', ('death', 'injured', 53), ('none_agg', 0), False, 0.970317006111145, 3), 'yes'), (('WHERE_COL', ('ship', 'tonnage', 45), 0.9999833106994629, 5), 'yes'), (('WHERE_OP', (('ship', 'tonnage', 45),), ('=', 0), 0.999596893787384, 6), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'tonnage', 45),), ('=', 0), 'terminal', 0.9999902248382568, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('death', 'killed', 52), ('none_agg', 0), False, 0.9990062117576599, 1), 'yes'), (('SELECT_AGG_v2', ('death', 'injured', 53), ('none_agg', 0), False, 0.970317006111145, 3), 'yes'), (('WHERE_COL', ('ship', 'tonnage', 45), 0.9999833106994629, 5), 'yes'), (('WHERE_OP', (('ship', 'tonnage', 45),), ('=', 0), 0.999596893787384, 6), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'tonnage', 45),), ('=', 0), 'terminal', 0.9999902248382568, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 985
    },
    {
        "nl": "What are the name and results of the battles when the bulgarian commander is not 'Boril '",
        "true_sql": "select battle.name , battle.result where battle.bulgarian_commander != value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 7, [0, [0, 4, False], None], '\"Boril\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.result",
            "where",
            "battle.bulgarian_commander",
            "!=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [41], 6, 39, [29], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999978542327881, 1), ('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.6138653755187988, 3), ('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.9789327383041382, 5), ('WHERE_OP', (('battle', 'bulgarian_commander', 39),), ('!=', 5), 0.9990531802177429, 6), ('WHERE_ROOT_TERM', (('battle', 'bulgarian_commander', 39),), ('!=', 5), 'terminal', 0.9999402761459351, 7)]",
        "logprob": "-0.5105172273727463",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999978542327881, 1), 'yes'), (('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.6138653755187988, 3), 'yes'), (('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.9789327383041382, 5), 'yes'), (('WHERE_OP', (('battle', 'bulgarian_commander', 39),), ('!=', 5), 0.9990531802177429, 6), 'yes'), (('WHERE_ROOT_TERM', (('battle', 'bulgarian_commander', 39),), ('!=', 5), 'terminal', 0.9999402761459351, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999978542327881, 1), 'yes'), (('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.6138653755187988, 3), 'yes'), (('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.9789327383041382, 5), 'yes'), (('WHERE_OP', (('battle', 'bulgarian_commander', 39),), ('!=', 5), 0.9990531802177429, 6), 'yes'), (('WHERE_ROOT_TERM', (('battle', 'bulgarian_commander', 39),), ('!=', 5), 'terminal', 0.9999402761459351, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 986
    },
    {
        "nl": "What are the different ids and names of the battles that lost any 'Brig ' type shipes ?",
        "true_sql": "select distinct battle.id , battle.name where ship.ship_type = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [True, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 11, False], None], '\"Brig\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "battle.id",
            ",",
            "battle.name",
            "where",
            "ship.ship_type",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [36], 8, [37], 6, 46, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'id', 36), ('none_agg', 0), False, 0.7446687817573547, 2), ('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.01027618255466223, 4), ('WHERE_COL', ('ship', 'ship_type', 46), 0.5903151035308838, 6), ('WHERE_OP', (('ship', 'ship_type', 46),), ('=', 0), 0.49519047141075134, 7), ('WHERE_ROOT_TERM', (('ship', 'ship_type', 46),), ('=', 0), 'terminal', 0.999991774559021, 8)]",
        "logprob": "-6.103173772545645",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'id', 36), ('none_agg', 0), False, 0.7446687817573547, 2), 'yes'), (('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.8876466751098633, 4), 'no'), (('WHERE_COL', ('ship', 'ship_type', 46), 0.5903151035308838, 6), 'yes'), (('WHERE_OP', (('ship', 'ship_type', 46),), ('=', 0), 0.49519047141075134, 7), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'ship_type', 46),), ('=', 0), 'terminal', 0.999991774559021, 8), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'id', 36), ('none_agg', 0), False, 0.7446687817573547, 2), 'yes'), (('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.8876466751098633, 4), 'no'), (('SELECT_AGG_v2', ('ship', 'ship_type', 46), ('none_agg', 0), False, 0.09216233342885971, 4), 'no'), (('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.01027618255466223, 4), 'yes'), (('SELECT_AGG_v2', ('ship', 'id', 43), ('none_agg', 0), False, 0.008966285735368729, 4), 'no'), (('WHERE_COL', ('ship', 'ship_type', 46), 0.5903151035308838, 6), 'yes'), (('WHERE_OP', (('ship', 'ship_type', 46),), ('=', 0), 0.49519047141075134, 7), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'ship_type', 46),), ('=', 0), 'terminal', 0.999991774559021, 8), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 987
    },
    {
        "nl": "What are the ids and names of the battles that led to more than 10 people killed in total .",
        "true_sql": "select battle.id , battle.name group_by battle.id having sum ( death.killed ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [4, 17, False], None], 10.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.name",
            "group_by",
            "battle.id",
            "having",
            "sum",
            "(",
            "death.killed",
            ")",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [37], 10, 36, 18, [24, 5, 52, 4], [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.7644615173339844, 1), ('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9996565580368042, 3), ('GROUP_COL', ('battle', 'id', 36), 0.08896460384130478, 5), ('HAV_AGG_v2', ('death', 'killed', 52), ('sum', 4), False, 1.0, 7), ('HAV_OP_v2', (('death', 'killed', 52), ('sum', 4), False), ('>', 1), 0.9998496770858765, 8), ('HAV_ROOT_TERM_v2', (('death', 'killed', 52), ('sum', 4), False), ('>', 1), 'terminal', 0.9988241791725159, 9)]",
        "logprob": "-12.862701742320207",
        "q_counter": 7,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.7644615173339844, 1), 'yes'), (('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9996565580368042, 3), 'yes'), (('WHERE_COL', ('death', 'killed', 52), 0.9999997615814209, 5), 'no'), (('GROUP_COL', ('death', 'id', 50), 0.9105562567710876, 5), 'no'), (('HAV_AGG_v2', ('battle', '*', 54), ('count', 3), False, 0.9984154071889568, 7), 'no'), (('HAV_OP_v2', (('death', 'killed', 52), ('sum', 4), False), ('>', 1), 0.9998496770858765, 8), 'yes'), (('HAV_ROOT_TERM_v2', (('death', 'killed', 52), ('sum', 4), False), ('>', 1), 'terminal', 0.9988241791725159, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.7644615173339844, 1), 'yes'), (('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9996565580368042, 3), 'yes'), (('WHERE_COL', ('death', 'killed', 52), 0.9999997615814209, 5), 'no'), (('WHERE_COL', ('battle', 'result', 41), 1.5958588051034894e-07, 5), 'no'), (('WHERE_COL', ('death', 'injured', 53), 1.1642229225117262e-07, 5), 'no'), (('WHERE_COL', ('ship', 'name', 44), 1.5150879661973704e-08, 5), 'no'), (('GROUP_COL', ('death', 'id', 50), 0.9105562567710876, 5), 'no'), (('GROUP_COL', ('battle', 'id', 36), 0.08896460384130478, 5), 'yes'), (('GROUP_COL', ('battle', '*', 54), 0.00028823004686273634, 5), 'no'), (('GROUP_COL', ('battle', 'name', 37), 0.00010922933870460838, 5), 'no'), (('HAV_AGG_v2', ('battle', '*', 54), ('count', 3), False, 0.9984154071889568, 7), 'no'), (('HAV_AGG_v2', ('death', 'killed', 52), ('sum', 4), False, 0.23433345076467862, 7), 'yes'), (('HAV_AGG_v2', ('death', 'killed', 52), ('avg', 5), False, 0.23003502416674101, 7), 'no'), (('HAV_AGG_v2', ('death', 'killed', 52), ('max', 1), False, 0.11187725797069321, 7), 'no'), (('HAV_OP_v2', (('death', 'killed', 52), ('sum', 4), False), ('>', 1), 0.9998496770858765, 8), 'yes'), (('HAV_ROOT_TERM_v2', (('death', 'killed', 52), ('sum', 4), False), ('>', 1), 'terminal', 0.9988241791725159, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 988
    },
    {
        "nl": "What is the ship id and name that caused most total injuries ?",
        "true_sql": "select ship.id , ship.name group_by ship.id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 14, False], None], [0, 8, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 8, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "ship.id",
            ",",
            "ship.name",
            "group_by",
            "ship.id",
            "order_by",
            "max",
            "(",
            "ship.*",
            ")",
            "asc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 8, [44], 10, 43, 11, [19, 5, 55, 4], 27, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('ship', 'id', 43), ('none_agg', 0), False, 0.6123031377792358, 1), ('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.9939422011375427, 3), ('GROUP_COL', ('ship', 'id', 43), 0.7581121921539307, 5), ('ORDER_AGG_v2', ('ship', '*', 55), ('max', 1), False, 0.14652470659111422, 7), ('ORDER_DESC_ASC', (('ship', '*', 55), ('max', 1), False), 'asc', 0.0005231632385402918, 8), ('ORDER_LIMIT', (('ship', '*', 55), ('max', 1), False), 'limit_value', 0.9999752044677734, 9)]",
        "logprob": "-16.096194741401295",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('ship', 'id', 43), ('none_agg', 0), False, 0.6123031377792358, 1), 'yes'), (('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.9939422011375427, 3), 'yes'), (('GROUP_COL', ('ship', 'id', 43), 0.7581121921539307, 5), 'yes'), (('ORDER_AGG_v2', ('ship', '*', 55), ('count', 3), False, 0.857683373630328, 7), 'no'), (('ORDER_DESC_ASC', (('ship', '*', 55), ('max', 1), False), 'desc', 0.9993034601211548, 8), 'no'), (('ORDER_LIMIT', (('ship', '*', 55), ('max', 1), False), 'limit_value', 0.9999752044677734, 9), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('ship', 'id', 43), ('none_agg', 0), False, 0.6123031377792358, 1), 'yes'), (('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.9939422011375427, 3), 'yes'), (('GROUP_COL', ('ship', 'id', 43), 0.7581121921539307, 5), 'yes'), (('ORDER_AGG_v2', ('ship', '*', 55), ('count', 3), False, 0.857683373630328, 7), 'no'), (('ORDER_AGG_v2', ('ship', '*', 55), ('sum', 4), False, 0.8170163398639524, 7), 'no'), (('ORDER_AGG_v2', ('death', 'injured', 53), ('sum', 4), False, 0.31840631076937215, 7), 'no'), (('ORDER_AGG_v2', ('death', 'injured', 53), ('avg', 5), False, 0.19864404703905042, 7), 'no'), (('ORDER_DESC_ASC', (('ship', '*', 55), ('max', 1), False), 'desc', 0.9993034601211548, 8), 'no'), (('ORDER_LIMIT', (('ship', '*', 55), ('max', 1), False), 'limit_value', 0.9999752044677734, 9), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 989
    },
    {
        "nl": "What are the distinct battle names which are between bulgarian commander 'Kaloyan ' and latin commander 'Baldwin I ' ?",
        "true_sql": "select battle.name where battle.bulgarian_commander = value and battle.latin_commander = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 4, False], None], '\"Kaloyan\"', None], 'and', [False, 2, [0, [0, 5, False], None], '\"Baldwin I\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "distinct",
            "battle.name",
            "where",
            "battle.bulgarian_commander",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, 15, [37], 6, 39, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.999994158744812, 2), ('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.7748908996582031, 4), ('WHERE_OP', (('battle', 'bulgarian_commander', 39),), ('=', 0), 0.999995231628418, 5), ('WHERE_ROOT_TERM', (('battle', 'bulgarian_commander', 39),), ('=', 0), 'terminal', 0.9999879598617554, 6)]",
        "logprob": "-4.150017449994701",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.999994158744812, 2), 'yes'), (('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.7748908996582031, 4), 'yes'), (('WHERE_OP', (('battle', 'bulgarian_commander', 39),), ('=', 0), 0.999995231628418, 5), 'yes'), (('WHERE_ROOT_TERM', (('battle', 'bulgarian_commander', 39),), ('=', 0), 'terminal', 0.9999879598617554, 6), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9579827189445496, 7), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.999994158744812, 2), 'yes'), (('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.7748908996582031, 4), 'yes'), (('WHERE_OP', (('battle', 'bulgarian_commander', 39),), ('=', 0), 0.999995231628418, 5), 'yes'), (('WHERE_ROOT_TERM', (('battle', 'bulgarian_commander', 39),), ('=', 0), 'terminal', 0.9999879598617554, 6), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9579827189445496, 7), 'no'), (('IUEN_v2', ('except', 3), 0.0008756824536249042, 7), 'no'), (('IUEN_v2', ('union', 2), 0.0007036154856905341, 7), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 990
    },
    {
        "nl": "How many different results are there for the battles ?",
        "true_sql": "select count ( distinct battle.result )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 6, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "battle.result",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 41, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'result', 41), ('count', 3), True, 0.9999594782262285, 1)]",
        "logprob": "-0.00020761977611587576",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'result', 41), ('count', 3), True, 0.9999594782262285, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'result', 41), ('count', 3), True, 0.9999594782262285, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 991
    },
    {
        "nl": "How many battles did not lose any ship with tonnage '225 ' ?",
        "true_sql": "select count ( battle.* ) where battle.id not in ( select ship.lost_in_battle where ship.tonnage = value )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 7, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 10, False], None], '\"225\"', None]]}, None]], 'extracted_clause_asterisk': {'select': 'battle.*'}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "battle.*",
            ")",
            "where",
            "battle.id",
            "not",
            "in",
            "(",
            "select",
            "battle.id",
            "where",
            "ship.tonnage",
            "=",
            "value",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 6, 36, [22, 20], 5, 2, [36], 6, 45, [7], 3, 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', '*', 54), ('count', 3), False, 0.8343403915158493, 1), ('WHERE_COL', ('battle', 'id', 36), 1.9786335542448796e-05, 3), ('WHERE_OP', (('battle', 'id', 36),), ('not in', 7), 0.9358698168348175, 4), ('WHERE_ROOT_TERM', (('battle', 'id', 36),), ('not in', 7), 'root', 0.9999548196792603, 5), ('SELECT_AGG_v2', ('battle', 'id', 36), ('none_agg', 0), False, 0.04883327707648277, 7), ('WHERE_COL', ('ship', 'tonnage', 45), 1.0, 9), ('WHERE_OP', (('ship', 'tonnage', 45),), ('=', 0), 0.9810412526130676, 10), ('WHERE_ROOT_TERM', (('ship', 'tonnage', 45),), ('=', 0), 'terminal', 0.9998354911804199, 11), ('O', '##END_NESTED##', 0.9993952512741089, 12)]",
        "logprob": "-15.754658692403787",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', '*', 54), ('count', 3), False, 0.8343403915158493, 1), 'yes'), (('WHERE_COL', ('ship', 'tonnage', 45), 0.9975242018699646, 3), 'no'), (('WHERE_OP', (('battle', 'id', 36),), ('not in', 7), 0.9358698168348175, 4), 'yes'), (('WHERE_ROOT_TERM', (('battle', 'id', 36),), ('not in', 7), 'root', 0.9999548196792603, 5), 'yes'), (('SELECT_AGG_v2', ('ship', 'id', 43), ('none_agg', 0), False, 0.46881353855133057, 7), 'no'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.4876166582107544, 9), 'no'), (('WHERE_OP', (('ship', 'tonnage', 45),), ('=', 0), 0.9810412526130676, 10), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'tonnage', 45),), ('=', 0), 'terminal', 0.9998354911804199, 11), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', '*', 54), ('count', 3), False, 0.8343403915158493, 1), 'yes'), (('WHERE_COL', ('ship', 'tonnage', 45), 0.9975242018699646, 3), 'no'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.001923087053000927, 3), 'no'), (('WHERE_COL', ('battle', 'result', 41), 0.0005189698422327638, 3), 'no'), (('WHERE_COL', ('battle', 'id', 36), 1.9786335542448796e-05, 3), 'yes'), (('WHERE_OP', (('battle', 'id', 36),), ('not in', 7), 0.9358698168348175, 4), 'yes'), (('WHERE_ROOT_TERM', (('battle', 'id', 36),), ('not in', 7), 'root', 0.9999548196792603, 5), 'yes'), (('SELECT_AGG_v2', ('ship', 'id', 43), ('none_agg', 0), False, 0.46881353855133057, 7), 'no'), (('SELECT_AGG_v2', ('death', 'id', 50), ('none_agg', 0), False, 0.20464937388896942, 7), 'no'), (('SELECT_AGG_v2', ('death', 'caused_by_ship_id', 49), ('none_agg', 0), False, 0.06793090701103212, 7), 'no'), (('SELECT_AGG_v2', ('death', 'note', 51), ('none_agg', 0), False, 0.06136472150683404, 7), 'no'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.4876166582107544, 9), 'no'), (('WHERE_COL', ('ship', 'tonnage', 45), 0.37352973222732544, 9), 'yes'), (('WHERE_COL', ('ship', 'ship_type', 46), 0.07311338186264038, 9), 'no'), (('WHERE_COL', ('ship', 'name', 44), 0.04454472288489342, 9), 'no'), (('WHERE_OP', (('ship', 'tonnage', 45),), ('=', 0), 0.9810412526130676, 10), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'tonnage', 45),), ('=', 0), 'terminal', 0.9998354911804199, 11), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 992
    },
    {
        "nl": "List the name and date the battle that has lost the ship named 'Lettice ' and the ship named 'HMS Atalanta '",
        "true_sql": "select battle.name , battle.date where ship.name = value intersect select battle.name , battle.date where ship.name = value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"HMS Atalanta\"', None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 9, False], None], '\"Lettice\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.date",
            "where",
            "ship.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [38], 6, 44, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999364614486694, 1), ('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.999875545501709, 3), ('WHERE_COL', ('ship', 'name', 44), 1.0, 5), ('WHERE_OP', (('ship', 'name', 44),), ('=', 0), 0.9999390840530396, 6), ('WHERE_ROOT_TERM', (('ship', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 7)]",
        "logprob": "-7.121273405893821",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999364614486694, 1), 'yes'), (('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.999875545501709, 3), 'yes'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.9979155659675598, 5), 'no'), (('WHERE_OP', (('ship', 'name', 44),), ('=', 0), 0.9999390840530396, 6), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9999364614486694, 1), 'yes'), (('SELECT_AGG_v2', ('battle', 'date', 38), ('none_agg', 0), False, 0.999875545501709, 3), 'yes'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.9979155659675598, 5), 'no'), (('WHERE_COL', ('battle', 'date', 38), 0.0010024926159530878, 5), 'no'), (('WHERE_COL', ('ship', 'name', 44), 0.0009654678287915885, 5), 'yes'), (('WHERE_COL', ('battle', 'name', 37), 7.865687075536698e-05, 5), 'no'), (('WHERE_OP', (('ship', 'name', 44),), ('=', 0), 0.9999390840530396, 6), 'yes'), (('WHERE_ROOT_TERM', (('ship', 'name', 44),), ('=', 0), 'terminal', 0.9999995231628418, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 993
    },
    {
        "nl": "Show names , results and bulgarian commanders of the battles with no ships lost in the 'English Channel ' .",
        "true_sql": "select battle.name , battle.result , battle.bulgarian_commander except select battle.name , battle.result , battle.bulgarian_commander where ship.location = value",
        "true_sql_i": "{'except': {'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 2, [0, [0, 12, False], None], '\"English Channel\"', None]]}, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "battle.name",
            ",",
            "battle.bulgarian_commander",
            ",",
            "battle.result",
            "except",
            "select",
            "battle.bulgarian_commander",
            "where",
            "battle.name",
            "=",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 8, [39], 8, [41], 28, 2, [39], 6, 37, [7], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9839712977409363, 1), ('SELECT_AGG_v2', ('battle', 'bulgarian_commander', 39), ('none_agg', 0), False, 0.38294681906700134, 3), ('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.018956312909722328, 5), ('IUEN_v2', ('except', 3), 8.12215489531809e-07, 6), ('SELECT_AGG_v2', ('battle', 'bulgarian_commander', 39), ('none_agg', 0), False, 0.037593256682157516, 8), ('WHERE_COL', ('battle', 'name', 37), 8.644240733701736e-05, 10), ('WHERE_OP', (('battle', 'name', 37),), ('=', 0), 0.9970344305038452, 11), ('WHERE_ROOT_TERM', (('battle', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 12)]",
        "logprob": "-35.45862006916189",
        "q_counter": 8,
        "questioned_indices": [
            0,
            1,
            3,
            3,
            4,
            5,
            6,
            7
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9839712977409363, 1), 'yes'), (('SELECT_AGG_v2', ('battle', 'latin_commander', 40), ('none_agg', 0), False, 0.6141537427902222, 3), 'no'), (('WHERE_COL', ('battle', 'result', 41), 0.913955569267273, 7), 'no'), (('IUEN_v2', ('except', 3), 8.12215489531809e-07, 6), 'yes'), (('SELECT_AGG_v2', ('ship', 'lost_in_battle', 42), ('none_agg', 0), False, 0.35484939813613886, 8), 'no'), (('WHERE_COL', ('battle', 'result', 41), 0.7611729502677917, 10), 'no'), (('WHERE_OP', (('battle', 'name', 37),), ('=', 0), 0.9970344305038452, 11), 'no'), (('WHERE_ROOT_TERM', (('battle', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 12), 'exit')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.9839712977409363, 1), 'yes'), (('SELECT_AGG_v2', ('battle', 'latin_commander', 40), ('none_agg', 0), False, 0.6141537427902222, 3), 'no'), (('SELECT_AGG_v2', ('battle', 'bulgarian_commander', 39), ('none_agg', 0), False, 0.38294681906700134, 3), 'yes'), (('SELECT_AGG_v2', ('battle', 'result', 41), ('none_agg', 0), False, 0.0024468074552714825, 3), 'yes'), (('SELECT_AGG_v2', ('battle', 'name', 37), ('none_agg', 0), False, 0.0004150440800003709, 3), 'yes'), (('WHERE_COL', ('battle', 'result', 41), 0.913955569267273, 7), 'no'), (('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.07392531633377075, 7), 'no'), (('WHERE_COL', ('battle', 'latin_commander', 40), 0.009997463785111904, 7), 'no'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.0018444923916831613, 7), 'no'), (('IUEN_v2', ('except', 3), 8.12215489531809e-07, 6), 'yes'), (('SELECT_AGG_v2', ('ship', 'lost_in_battle', 42), ('none_agg', 0), False, 0.35484939813613886, 8), 'no'), (('SELECT_AGG_v2', ('ship', 'lost_in_battle', 42), ('min', 2), False, 0.707405375842527, 8), 'no'), (('SELECT_AGG_v2', ('ship', 'name', 44), ('none_agg', 0), False, 0.11965458840131757, 8), 'no'), (('SELECT_AGG_v2', ('battle', 'bulgarian_commander', 39), ('none_agg', 0), False, 0.037593256682157516, 8), 'yes'), (('WHERE_COL', ('battle', 'result', 41), 0.7611729502677917, 10), 'no'), (('WHERE_COL', ('battle', 'bulgarian_commander', 39), 0.20402346551418304, 10), 'no'), (('WHERE_COL', ('battle', 'latin_commander', 40), 0.034016333520412445, 10), 'no'), (('WHERE_COL', ('ship', 'lost_in_battle', 42), 0.0006891885423101485, 10), 'no'), (('WHERE_OP', (('battle', 'name', 37),), ('=', 0), 0.9970344305038452, 11), 'no'), (('WHERE_OP', (('battle', 'name', 37),), ('!=', 5), 0.0028596585616469383, 11), 'no'), (('WHERE_OP', (('battle', 'name', 37),), ('not in', 7), 0.007858595564794072, 11), 'no'), (('WHERE_OP', (('battle', 'name', 37),), ('like', 6), 1.5274043107638136e-05, 11), 'no'), (('WHERE_ROOT_TERM', (('battle', 'name', 37),), ('=', 0), 'terminal', 0.9999984502792358, 12), 'exit')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": true,
        "exception": false,
        "idx": 994
    },
    {
        "nl": "What are the notes of the death events which has substring 'East ' ?",
        "true_sql": "select death.note where death.note like value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 16, False], None]]]], 'union': None, 'where': [[False, 9, [0, [0, 16, False], None], '\"%East%\"', None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'battle.id': 1, 'battle.name': 2, 'battle.date': 3, 'battle.bulgarian_commander': 4, 'battle.latin_commander': 5, 'battle.result': 6, 'ship.lost_in_battle': 7, 'ship.id': 8, 'ship.name': 9, 'ship.tonnage': 10, 'ship.ship_type': 11, 'ship.location': 12, 'ship.disposition_of_ship': 13, 'death.caused_by_ship_id': 14, 'death.id': 15, 'death.note': 16, 'death.killed': 17, 'death.injured': 18, 'battle.*': 19, 'ship.*': 20, 'death.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "death.note",
            "where",
            "death.note",
            "like",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [51], 6, 51, [30], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('death', 'note', 51), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('death', 'note', 51), 9.82061692411662e-07, 3), ('WHERE_OP', (('death', 'note', 51),), ('like', 6), 0.0007972720195539296, 4), ('WHERE_ROOT_TERM', (('death', 'note', 51),), ('like', 6), 'terminal', 0.9999982118606567, 5)]",
        "logprob": "-20.96794696370793",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('WHERE_COL', ('death', 'killed', 52), 0.9999959468841553, 3), 'no'), (('WHERE_OP', (('death', 'note', 51),), ('=', 0), 0.9985923171043396, 4), 'no'), (('WHERE_ROOT_TERM', (('death', 'note', 51),), ('like', 6), 'terminal', 0.9999982118606567, 5), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('death', 'killed', 52), 0.9999959468841553, 3), 'no'), (('WHERE_COL', ('death', 'caused_by_ship_id', 49), 2.1842372461833293e-06, 3), 'no'), (('WHERE_COL', ('death', 'note', 51), 9.82061692411662e-07, 3), 'yes'), (('WHERE_COL', ('death', 'id', 50), 7.338423984037945e-07, 3), 'no'), (('WHERE_OP', (('death', 'note', 51),), ('=', 0), 0.9985923171043396, 4), 'no'), (('WHERE_OP', (('death', 'note', 51),), ('like', 6), 0.0007972720195539296, 4), 'yes'), (('WHERE_OP', (('death', 'note', 51),), ('!=', 5), 0.0003720823733601719, 4), 'no'), (('WHERE_OP', (('death', 'note', 51),), ('in', 8), 0.0001086076590581797, 4), 'no'), (('WHERE_ROOT_TERM', (('death', 'note', 51),), ('like', 6), 'terminal', 0.9999982118606567, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 995
    },
    {
        "nl": "How many employees are there ?",
        "true_sql": "select count ( employee.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "employee.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 53, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.9970421880040974, 1)]",
        "logprob": "-0.011912082002716432",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.9970421880040974, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.9970421880040974, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 996
    },
    {
        "nl": "Count the number of employees",
        "true_sql": "select count ( employee.* )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "employee.*",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 53, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.2956034251368669, 1)]",
        "logprob": "-4.8750678509362695",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('hiring', '*', 55), ('count', 3), False, 0.9974623064778656, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('hiring', '*', 55), ('count', 3), False, 0.9974623064778656, 1), 'no'), (('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.2956034251368669, 1), 'yes'), (('SELECT_AGG_v2', ('employee', 'name', 37), ('count', 3), True, 0.29870973232709536, 1), 'no'), (('SELECT_AGG_v2', ('hiring', '*', 55), ('count', 3), True, 0.12673556325510296, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 997
    },
    {
        "nl": "Sort employee names by their age in ascending order .",
        "true_sql": "select employee.name order_by employee.age",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "employee.age",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [38], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), ('ORDER_AGG_v2', ('employee', 'age', 38), ('none_agg', 0), False, 0.9999990463256836, 3)]",
        "logprob": "-0.6826388175576225",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('ORDER_AGG_v2', ('employee', 'age', 38), ('none_agg', 0), False, 0.9999990463256836, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('ORDER_AGG_v2', ('employee', 'age', 38), ('none_agg', 0), False, 0.9999990463256836, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 998
    },
    {
        "nl": "List the names of employees and sort in ascending order of age .",
        "true_sql": "select employee.name order_by employee.age",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "employee.age",
            "asc",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [38], 27, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('employee', 'age', 38), ('none_agg', 0), False, 0.9999961853027344, 3), ('ORDER_DESC_ASC', (('employee', 'age', 38), ('none_agg', 0), False), 'asc', 0.18505309522151947, 4)]",
        "logprob": "-1.7922390067623601",
        "q_counter": 2,
        "questioned_indices": [
            1,
            2
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('employee', 'age', 38), ('none_agg', 0), False, 0.9999961853027344, 3), 'yes'), (('ORDER_DESC_ASC', (('employee', 'age', 38), ('none_agg', 0), False), 'desc', 0.7524253129959106, 4), 'no')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('employee', 'age', 38), ('none_agg', 0), False, 0.9999961853027344, 3), 'yes'), (('ORDER_DESC_ASC', (('employee', 'age', 38), ('none_agg', 0), False), 'desc', 0.7524253129959106, 4), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 999
    },
    {
        "nl": "What is the number of employees from each city ?",
        "true_sql": "select count ( employee.* ) , employee.city group_by employee.city",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "employee.*",
            ")",
            ",",
            "employee.city",
            "group_by",
            "employee.city",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 53, 4], 8, [39], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.8407232319820442, 1), ('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999581575393677, 3), ('GROUP_COL', ('employee', 'city', 39), 0.9999767541885376, 5)]",
        "logprob": "-0.6941786174138721",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.8407232319820442, 1), 'yes'), (('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999581575393677, 3), 'yes'), (('GROUP_COL', ('employee', 'city', 39), 0.9999767541885376, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.8407232319820442, 1), 'yes'), (('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999581575393677, 3), 'yes'), (('GROUP_COL', ('employee', 'city', 39), 0.9999767541885376, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1000
    },
    {
        "nl": "Count the number of employees for each city .",
        "true_sql": "select count ( employee.* ) , employee.city group_by employee.city",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "employee.*",
            ")",
            ",",
            "employee.city",
            "group_by",
            "employee.city",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 53, 4], 8, [39], 10, 39, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.8496437063335386, 1), ('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999974966049194, 3), ('GROUP_COL', ('employee', 'city', 39), 0.9999991655349731, 5)]",
        "logprob": "-0.6518730302182685",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.8496437063335386, 1), 'yes'), (('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999974966049194, 3), 'yes'), (('GROUP_COL', ('employee', 'city', 39), 0.9999991655349731, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('employee', '*', 53), ('count', 3), False, 0.8496437063335386, 1), 'yes'), (('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999974966049194, 3), 'yes'), (('GROUP_COL', ('employee', 'city', 39), 0.9999991655349731, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1001
    },
    {
        "nl": "Which cities do more than one employee under age 30 come from ?",
        "true_sql": "select employee.city where employee.age < value group_by employee.city having count ( employee.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 3, False], None], 30.0, None]], 'extracted_clause_asterisk': {'having': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.city",
            "where",
            "employee.age",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 38, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999994039535522, 1), ('WHERE_COL', ('employee', 'age', 38), 1.0, 3), ('WHERE_OP', (('employee', 'age', 38),), ('<', 2), 2.114502785843797e-05, 4), ('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9998785257339478, 5)]",
        "logprob": "-11.465784882656298",
        "q_counter": 3,
        "questioned_indices": [
            0,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999994039535522, 1), 'yes'), (('WHERE_OP', (('employee', 'age', 38),), ('>', 1), 0.9998807907104492, 4), 'no'), (('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9998785257339478, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999994039535522, 1), 'yes'), (('WHERE_OP', (('employee', 'age', 38),), ('>', 1), 0.9998807907104492, 4), 'no'), (('WHERE_OP', (('employee', 'age', 38),), ('=', 0), 5.891610271646641e-05, 4), 'no'), (('WHERE_OP', (('employee', 'age', 38),), ('<', 2), 2.114502785843797e-05, 4), 'yes'), (('WHERE_OP', (('employee', 'age', 38),), ('not in', 7), 0.0027840304418646255, 4), 'no'), (('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9998785257339478, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1002
    },
    {
        "nl": "Find the cities that have more than one employee under age 30 .",
        "true_sql": "select employee.city where employee.age < value group_by employee.city having count ( employee.* ) > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [[0, 4, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 4, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 3, False], None], 30.0, None]], 'extracted_clause_asterisk': {'having': 'employee.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.city",
            "where",
            "employee.age",
            "<",
            "value",
            "and",
            "employee.age",
            "<",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [39], 6, 38, [21], 3, 16, 38, [21], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999994039535522, 1), ('WHERE_COL', ('employee', 'age', 38), 1.0, 3), ('WHERE_OP', (('employee', 'age', 38),), ('<', 2), 0.00308897509239614, 4), ('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9999312162399292, 5), ('WHERE_COL', ('employee', 'age', 38), 0.9944422841072083, 7), ('WHERE_OP', (('employee', 'age', 38),), ('<', 2), 0.9509337544441223, 8), ('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9985799789428711, 9)]",
        "logprob": "-6.798612604519961",
        "q_counter": 6,
        "questioned_indices": [
            0,
            2,
            3,
            4,
            5,
            6
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999994039535522, 1), 'yes'), (('WHERE_OP', (('employee', 'age', 38),), ('>', 1), 0.9947100877761841, 4), 'no'), (('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9999312162399292, 5), 'yes'), (('WHERE_COL', ('employee', 'age', 38), 0.9944422841072083, 7), 'yes'), (('WHERE_OP', (('employee', 'age', 38),), ('<', 2), 0.9509337544441223, 8), 'yes'), (('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9985799789428711, 9), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('employee', 'city', 39), ('none_agg', 0), False, 0.9999994039535522, 1), 'yes'), (('WHERE_OP', (('employee', 'age', 38),), ('>', 1), 0.9947100877761841, 4), 'no'), (('WHERE_OP', (('employee', 'age', 38),), ('<', 2), 0.00308897509239614, 4), 'yes'), (('WHERE_OP', (('employee', 'age', 38),), ('between', 9), 0.000806773139629513, 4), 'no'), (('WHERE_OP', (('employee', 'age', 38),), ('not in', 7), 0.015122062406945297, 4), 'no'), (('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9999312162399292, 5), 'yes'), (('WHERE_COL', ('employee', 'age', 38), 0.9944422841072083, 7), 'yes'), (('WHERE_OP', (('employee', 'age', 38),), ('<', 2), 0.9509337544441223, 8), 'yes'), (('WHERE_ROOT_TERM', (('employee', 'age', 38),), ('<', 2), 'terminal', 0.9985799789428711, 9), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1003
    },
    {
        "nl": "Find the number of shops in each location .",
        "true_sql": "select count ( shop.* ) , shop.location group_by shop.location",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'shop.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.location",
            ",",
            "count",
            "(",
            "shop.*",
            ")",
            "group_by",
            "shop.location",
            "_EOS"
        ],
        "dec_seq": "[2, [42], 8, [9, 5, 54, 4], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'location', 42), ('none_agg', 0), False, 0.9997015595436096, 1), ('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.9999960958833242, 3), ('GROUP_COL', ('shop', 'location', 42), 0.9999996423721313, 5)]",
        "logprob": "-0.00047027181224800017",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'location', 42), ('none_agg', 0), False, 0.9997015595436096, 1), 'yes'), (('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.9999960958833242, 3), 'yes'), (('GROUP_COL', ('shop', 'location', 42), 0.9999996423721313, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'location', 42), ('none_agg', 0), False, 0.9997015595436096, 1), 'yes'), (('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.9999960958833242, 3), 'yes'), (('GROUP_COL', ('shop', 'location', 42), 0.9999996423721313, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1004
    },
    {
        "nl": "How many shops are there in each location ?",
        "true_sql": "select count ( shop.* ) , shop.location group_by shop.location",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [[0, 7, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 7, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'shop.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "shop.*",
            ")",
            ",",
            "shop.location",
            "group_by",
            "shop.location",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 54, 4], 8, [42], 10, 42, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.9588523685261345, 1), ('SELECT_AGG_v2', ('shop', 'location', 42), ('none_agg', 0), False, 0.9999961853027344, 3), ('GROUP_COL', ('shop', 'location', 42), 0.999998927116394, 5)]",
        "logprob": "-0.16833860469117384",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.9588523685261345, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'location', 42), ('none_agg', 0), False, 0.9999961853027344, 3), 'yes'), (('GROUP_COL', ('shop', 'location', 42), 0.999998927116394, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.9588523685261345, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'location', 42), ('none_agg', 0), False, 0.9999961853027344, 3), 'yes'), (('GROUP_COL', ('shop', 'location', 42), 0.999998927116394, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1005
    },
    {
        "nl": "Find the manager name and district of the shop whose number of products is the largest .",
        "true_sql": "select shop.manager_name , shop.district order_by shop.number_products desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.manager_name",
            ",",
            "shop.district",
            "order_by",
            "shop.number_products",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [43], 11, [44], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'manager_name', 45), ('none_agg', 0), False, 0.9965223073959351, 1), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9978663325309753, 3), ('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 1.0, 5), ('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.8920135498046875, 6), ('ORDER_LIMIT', (('shop', 'number_products', 44), ('none_agg', 0), False), 'limit_value', 0.9999028444290161, 7)]",
        "logprob": "-0.4179389578316704",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'manager_name', 45), ('none_agg', 0), False, 0.9965223073959351, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9978663325309753, 3), 'yes'), (('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.8920135498046875, 6), 'yes'), (('ORDER_LIMIT', (('shop', 'number_products', 44), ('none_agg', 0), False), 'limit_value', 0.9999028444290161, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'manager_name', 45), ('none_agg', 0), False, 0.9965223073959351, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9978663325309753, 3), 'yes'), (('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.8920135498046875, 6), 'yes'), (('ORDER_LIMIT', (('shop', 'number_products', 44), ('none_agg', 0), False), 'limit_value', 0.9999028444290161, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1006
    },
    {
        "nl": "What are the manager name and district of the shop that sells the largest number of products ?",
        "true_sql": "select shop.manager_name , shop.district order_by shop.number_products desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.manager_name",
            ",",
            "shop.district",
            "order_by",
            "shop.number_products",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [45], 8, [43], 11, [44], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'manager_name', 45), ('none_agg', 0), False, 0.9750032424926758, 1), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9965150356292725, 3), ('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.9999909400939941, 5), ('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9881788492202759, 6), ('ORDER_LIMIT', (('shop', 'number_products', 44), ('none_agg', 0), False), 'limit_value', 0.9996911287307739, 7)]",
        "logprob": "-2.1069701892255086",
        "q_counter": 6,
        "questioned_indices": [
            0,
            1,
            2,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'manager_name', 45), ('none_agg', 0), False, 0.9750032424926758, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9965150356292725, 3), 'yes'), (('GROUP_COL', ('shop', 'district', 43), 0.9366448521614075, 5), 'no'), (('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.9999909400939941, 5), 'yes'), (('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9881788492202759, 6), 'yes'), (('ORDER_LIMIT', (('shop', 'number_products', 44), ('none_agg', 0), False), 'limit_value', 0.9996911287307739, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'manager_name', 45), ('none_agg', 0), False, 0.9750032424926758, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9965150356292725, 3), 'yes'), (('GROUP_COL', ('shop', 'district', 43), 0.9366448521614075, 5), 'no'), (('GROUP_COL', ('shop', 'manager_name', 45), 0.03882259130477905, 5), 'no'), (('GROUP_COL', ('shop', 'shop_id', 40), 0.02429719641804695, 5), 'no'), (('GROUP_COL', ('shop', 'name', 41), 0.00017075576761271805, 5), 'no'), (('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.9999909400939941, 5), 'yes'), (('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9881788492202759, 6), 'yes'), (('ORDER_LIMIT', (('shop', 'number_products', 44), ('none_agg', 0), False), 'limit_value', 0.9996911287307739, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1007
    },
    {
        "nl": "find the minimum and maximum number of products of all stores .",
        "true_sql": "select min ( shop.number_products ) , max ( shop.number_products )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 9, False], None]], [1, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "shop.number_products",
            ")",
            ",",
            "max",
            "(",
            "shop.number_products",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 44, 4], 8, [19, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'number_products', 44), ('min', 2), False, 0.9992247672447071, 1), ('SELECT_AGG_v2', ('shop', 'number_products', 44), ('max', 1), False, 0.8716180176518463, 3)]",
        "logprob": "-0.5578946271721843",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'number_products', 44), ('min', 2), False, 0.9992247672447071, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'number_products', 44), ('max', 1), False, 0.8716180176518463, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'number_products', 44), ('min', 2), False, 0.9992247672447071, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'number_products', 44), ('max', 1), False, 0.8716180176518463, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1008
    },
    {
        "nl": "What are the minimum and maximum number of products across all the shops ?",
        "true_sql": "select min ( shop.number_products ) , max ( shop.number_products )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[2, [0, [0, 9, False], None]], [1, [0, [0, 9, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "min",
            "(",
            "shop.number_products",
            ")",
            ",",
            "max",
            "(",
            "shop.number_products",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [26, 5, 44, 4], 8, [19, 5, 44, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'number_products', 44), ('min', 2), False, 0.9927307392948113, 1), ('SELECT_AGG_v2', ('shop', 'number_products', 44), ('max', 1), False, 0.9265594711303546, 3)]",
        "logprob": "-0.33892284411152673",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'number_products', 44), ('min', 2), False, 0.9927307392948113, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'number_products', 44), ('max', 1), False, 0.9265594711303546, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'number_products', 44), ('min', 2), False, 0.9927307392948113, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'number_products', 44), ('max', 1), False, 0.9265594711303546, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1009
    },
    {
        "nl": "Return the name , location and district of all shops in descending order of number of products .",
        "true_sql": "select shop.name , shop.location , shop.district order_by shop.number_products desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            ",",
            "shop.district",
            "order_by",
            "shop.number_products",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [43], 11, [44], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9978079199790955, 1), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.5754278302192688, 3), ('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.997931957244873, 5), ('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9977453351020813, 6)]",
        "logprob": "-0.6302560827556589",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9978079199790955, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.5754278302192688, 3), 'yes'), (('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.997931957244873, 5), 'yes'), (('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9977453351020813, 6), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9978079199790955, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.5754278302192688, 3), 'yes'), (('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.997931957244873, 5), 'yes'), (('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9977453351020813, 6), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1010
    },
    {
        "nl": "Sort all the shops by number products in descending order , and return the name , location and district of each shop .",
        "true_sql": "select shop.name , shop.location , shop.district order_by shop.number_products desc",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 8, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            ",",
            "shop.district",
            ",",
            "order_by",
            "shop.number_products",
            "desc",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [43], 8, 11, [44], 13, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9923627376556396, 1), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9496351480484009, 3), ('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.9934802055358887, 6), ('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9825725555419922, 7)]",
        "logprob": "-0.8247395398407851",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9923627376556396, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9496351480484009, 3), 'yes'), (('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.9934802055358887, 6), 'yes'), (('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9825725555419922, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9923627376556396, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9496351480484009, 3), 'yes'), (('ORDER_AGG_v2', ('shop', 'number_products', 44), ('none_agg', 0), False, 0.9934802055358887, 6), 'yes'), (('ORDER_DESC_ASC', (('shop', 'number_products', 44), ('none_agg', 0), False), 'desc', 0.9825725555419922, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1011
    },
    {
        "nl": "Find the names of stores whose number products is more than the average number of products .",
        "true_sql": "select shop.name where shop.number_products > ( select avg ( shop.number_products ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            "where",
            "shop.number_products",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "shop.number_products",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 44, [14], 5, 2, [17, 5, 44, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9981127977371216, 1), ('WHERE_COL', ('shop', 'number_products', 44), 0.9968589544296265, 3), ('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.9994382262229919, 4), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'root', 0.8905113339424133, 5), ('SELECT_AGG_v2', ('shop', 'number_products', 44), ('avg', 5), False, 0.9995137042772518, 7), ('O', '##END_NESTED##', 0.9993458390235901, 8)]",
        "logprob": "-0.19133283339731302",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9981127977371216, 1), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.9968589544296265, 3), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.9994382262229919, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'root', 0.8905113339424133, 5), 'yes'), (('SELECT_AGG_v2', ('shop', 'number_products', 44), ('avg', 5), False, 0.9995137042772518, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9981127977371216, 1), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.9968589544296265, 3), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.9994382262229919, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'root', 0.8905113339424133, 5), 'yes'), (('SELECT_AGG_v2', ('shop', 'number_products', 44), ('avg', 5), False, 0.9995137042772518, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1012
    },
    {
        "nl": "Which shops ' number products is above the average ? Give me the shop names .",
        "true_sql": "select shop.name where shop.number_products > ( select avg ( shop.number_products ) )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[5, [0, [0, 9, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            "where",
            "shop.number_products",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "shop.number_products",
            ")",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 44, [14], 5, 2, [17, 5, 44, 4], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.6875224709510803, 1), ('WHERE_COL', ('shop', 'number_products', 44), 0.7409602999687195, 3), ('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.998108983039856, 4), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'root', 0.5558405518531799, 5), ('SELECT_AGG_v2', ('shop', 'number_products', 44), ('avg', 5), False, 0.9961291801658838, 7), ('O', '##END_NESTED##', 0.9999184608459473, 8)]",
        "logprob": "-1.5742344800454506",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.6875224709510803, 1), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.7409602999687195, 3), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.998108983039856, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'root', 0.5558405518531799, 5), 'yes'), (('SELECT_AGG_v2', ('shop', 'number_products', 44), ('avg', 5), False, 0.9961291801658838, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.6875224709510803, 1), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.7409602999687195, 3), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.998108983039856, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'root', 0.5558405518531799, 5), 'yes'), (('SELECT_AGG_v2', ('shop', 'number_products', 44), ('avg', 5), False, 0.9961291801658838, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1013
    },
    {
        "nl": "find the name of employee who was awarded the most times in the evaluation .",
        "true_sql": "select employee.name group_by evaluation.employee_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.name",
            "group_by",
            "evaluation.employee_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 10, 50, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999996423721313, 1), ('GROUP_COL', ('evaluation', 'employee_id', 50), 0.9999488592147827, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998490325484879, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993414282798767, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999734163284302, 7)]",
        "logprob": "-0.001444145408798017",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('GROUP_COL', ('evaluation', 'employee_id', 50), 0.9999488592147827, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998490325484879, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993414282798767, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999734163284302, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999996423721313, 1), 'yes'), (('GROUP_COL', ('evaluation', 'employee_id', 50), 0.9999488592147827, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9998490325484879, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9993414282798767, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999734163284302, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1014
    },
    {
        "nl": "Which employee received the most awards in evaluations ? Give me the employee name .",
        "true_sql": "select employee.name group_by evaluation.employee_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [[0, 15, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.017928663710221296, 3), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996265172958374, 4), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998562335968018, 5)]",
        "logprob": "-16.7568234067326",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9847531914710999, 3), 'no'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996265172958374, 4), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998562335968018, 5), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9847531914710999, 3), 'no'), (('ORDER_AGG_v2', ('evaluation', 'year_awarded', 51), ('none_agg', 0), False, 0.015246468596160405, 3), 'no'), (('ORDER_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.3747623484050575e-07, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.017928663710221296, 3), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9996265172958374, 4), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9998562335968018, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1015
    },
    {
        "nl": "Find the name of the employee who got the highest one time bonus .",
        "true_sql": "select employee.name order_by evaluation.bonus desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "evaluation.bonus",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [52], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9999871253967285, 3), ('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.8819751739501953, 4), ('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999809265136719, 5)]",
        "logprob": "-0.26441829039800385",
        "q_counter": 3,
        "questioned_indices": [
            1,
            2,
            3
        ],
        "questioned_tags": "[(('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9999871253967285, 3), 'yes'), (('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.8819751739501953, 4), 'yes'), (('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999809265136719, 5), 'yes')]",
        "feedback_records": "[(('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9999871253967285, 3), 'yes'), (('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.8819751739501953, 4), 'yes'), (('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999809265136719, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1016
    },
    {
        "nl": "Which employee received the biggest bonus ? Give me the employee name .",
        "true_sql": "select employee.name order_by evaluation.bonus desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]], 'table_units': [['table_unit', 0], ['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.name",
            "order_by",
            "evaluation.bonus",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 11, [52], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999992847442627, 1), ('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9999902248382568, 3), ('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.9890241622924805, 4), ('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999653100967407, 5)]",
        "logprob": "-0.02148281600530136",
        "q_counter": 4,
        "questioned_indices": [
            0,
            1,
            2,
            3
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999992847442627, 1), 'yes'), (('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9999902248382568, 3), 'yes'), (('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.9890241622924805, 4), 'yes'), (('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999653100967407, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.9999992847442627, 1), 'yes'), (('ORDER_AGG_v2', ('evaluation', 'bonus', 52), ('none_agg', 0), False, 0.9999902248382568, 3), 'yes'), (('ORDER_DESC_ASC', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'desc', 0.9890241622924805, 4), 'yes'), (('ORDER_LIMIT', (('evaluation', 'bonus', 52), ('none_agg', 0), False), 'limit_value', 0.9999653100967407, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1017
    },
    {
        "nl": "Find the names of employees who never won any award in the evaluation .",
        "true_sql": "select employee.name where employee.employee_id not in ( select evaluation.employee_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.name",
            "where",
            "employee.employee_id",
            "not",
            "in",
            "(",
            "select",
            "evaluation.employee_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [50], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('employee', 'employee_id', 36), 0.9991183876991272, 3), ('WHERE_OP', (('employee', 'employee_id', 36),), ('not in', 7), 0.9996626929128497, 4), ('WHERE_ROOT_TERM', (('employee', 'employee_id', 36),), ('not in', 7), 'root', 0.9999780654907227, 5), ('SELECT_AGG_v2', ('evaluation', 'employee_id', 50), ('none_agg', 0), False, 0.9931021928787231, 7), ('O', '##END_NESTED##', 0.9997894167900085, 8)]",
        "logprob": "-0.009613928410899013",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('employee', 'employee_id', 36), 0.9991183876991272, 3), 'yes'), (('WHERE_OP', (('employee', 'employee_id', 36),), ('not in', 7), 0.9996626929128497, 4), 'yes'), (('WHERE_ROOT_TERM', (('employee', 'employee_id', 36),), ('not in', 7), 'root', 0.9999780654907227, 5), 'yes'), (('SELECT_AGG_v2', ('evaluation', 'employee_id', 50), ('none_agg', 0), False, 0.9931021928787231, 7), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('employee', 'employee_id', 36), 0.9991183876991272, 3), 'yes'), (('WHERE_OP', (('employee', 'employee_id', 36),), ('not in', 7), 0.9996626929128497, 4), 'yes'), (('WHERE_ROOT_TERM', (('employee', 'employee_id', 36),), ('not in', 7), 'root', 0.9999780654907227, 5), 'yes'), (('SELECT_AGG_v2', ('evaluation', 'employee_id', 50), ('none_agg', 0), False, 0.9931021928787231, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1018
    },
    {
        "nl": "What are the names of the employees who never received any evaluation ?",
        "true_sql": "select employee.name where employee.employee_id not in ( select evaluation.employee_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 0]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 2, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 1, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 15, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "employee.name",
            "where",
            "employee.employee_id",
            "not",
            "in",
            "(",
            "select",
            "evaluation.employee_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [37], 6, 36, [22, 20], 5, 2, [50], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('employee', 'employee_id', 36), 0.9999662637710571, 3), ('WHERE_OP', (('employee', 'employee_id', 36),), ('not in', 7), 0.9997932249034005, 4), ('WHERE_ROOT_TERM', (('employee', 'employee_id', 36),), ('not in', 7), 'root', 0.9999781847000122, 5), ('SELECT_AGG_v2', ('evaluation', 'employee_id', 50), ('none_agg', 0), False, 0.9999971389770508, 7), ('O', '##END_NESTED##', 0.9998470544815063, 8)]",
        "logprob": "-0.0011282092684023555",
        "q_counter": 4,
        "questioned_indices": [
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('WHERE_COL', ('employee', 'employee_id', 36), 0.9999662637710571, 3), 'yes'), (('WHERE_OP', (('employee', 'employee_id', 36),), ('not in', 7), 0.9997932249034005, 4), 'yes'), (('WHERE_ROOT_TERM', (('employee', 'employee_id', 36),), ('not in', 7), 'root', 0.9999781847000122, 5), 'yes'), (('SELECT_AGG_v2', ('evaluation', 'employee_id', 50), ('none_agg', 0), False, 0.9999971389770508, 7), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('employee', 'employee_id', 36), 0.9999662637710571, 3), 'yes'), (('WHERE_OP', (('employee', 'employee_id', 36),), ('not in', 7), 0.9997932249034005, 4), 'yes'), (('WHERE_ROOT_TERM', (('employee', 'employee_id', 36),), ('not in', 7), 'root', 0.9999781847000122, 5), 'yes'), (('SELECT_AGG_v2', ('evaluation', 'employee_id', 50), ('none_agg', 0), False, 0.9999971389770508, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1019
    },
    {
        "nl": "What is the name of the shop that is hiring the largest number of employees ?",
        "true_sql": "select shop.name group_by hiring.shop_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            "group_by",
            "hiring.shop_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 46, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999687671661377, 1), ('GROUP_COL', ('hiring', 'shop_id', 46), 0.9970021843910217, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9995629400288495, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.999423623085022, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999693632125854, 7)]",
        "logprob": "-0.39332536001826474",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999687671661377, 1), 'yes'), (('GROUP_COL', ('hiring', 'shop_id', 46), 0.9970021843910217, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9995629400288495, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.999423623085022, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999693632125854, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999687671661377, 1), 'yes'), (('GROUP_COL', ('hiring', 'shop_id', 46), 0.9970021843910217, 3), 'yes'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9995629400288495, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.999423623085022, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.9999693632125854, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1020
    },
    {
        "nl": "Which shop has the most employees ? Give me the shop name .",
        "true_sql": "select shop.name group_by hiring.shop_id order_by count ( * ) desc limit_value",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 11, False]], 'having': [], 'intersect': None, 'limit': 1, 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'order_by': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            "group_by",
            "hiring.shop_id",
            "order_by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit_value",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 10, 46, 11, [9, 5, 35, 4], 13, 12, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9971209168434143, 1), ('GROUP_COL', ('hiring', 'shop_id', 46), 0.010388265363872051, 3), ('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9952114750053394, 5), ('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9974103569984436, 6), ('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999962568283081, 7)]",
        "logprob": "-4.638286654619114",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9971209168434143, 1), 'yes'), (('GROUP_COL', ('shop', 'shop_id', 40), 0.5051290988922119, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9952114750053394, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9974103569984436, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999962568283081, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9971209168434143, 1), 'yes'), (('GROUP_COL', ('shop', 'shop_id', 40), 0.5051290988922119, 3), 'no'), (('GROUP_COL', ('shop', 'name', 41), 0.3051091134548187, 3), 'no'), (('GROUP_COL', ('employee', 'name', 37), 0.16277232766151428, 3), 'no'), (('GROUP_COL', ('hiring', 'employee_id', 47), 0.01515111979097128, 3), 'no'), (('ORDER_AGG_v2', (None, '*', 35), ('count', 3), False, 0.9952114750053394, 5), 'yes'), (('ORDER_DESC_ASC', ((None, '*', 35), ('count', 3), False), 'desc', 0.9974103569984436, 6), 'yes'), (('ORDER_LIMIT', ((None, '*', 35), ('count', 3), False), 'limit_value', 0.999962568283081, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1021
    },
    {
        "nl": "Find the name of the shops that do not hire any employee .",
        "true_sql": "select shop.name where shop.shop_id not in ( select hiring.shop_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            "where",
            "shop.shop_id",
            "not",
            "in",
            "(",
            "select",
            "hiring.shop_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 40, [22, 20], 5, 2, [46], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999970197677612, 1), ('WHERE_COL', ('shop', 'shop_id', 40), 0.9997336268424988, 3), ('WHERE_OP', (('shop', 'shop_id', 40),), ('not in', 7), 0.9997818147301464, 4), ('WHERE_ROOT_TERM', (('shop', 'shop_id', 40),), ('not in', 7), 'root', 0.9999903440475464, 5), ('SELECT_AGG_v2', ('hiring', 'shop_id', 46), ('none_agg', 0), False, 0.9992602467536926, 7), ('O', '##END_NESTED##', 0.999945878982544, 8)]",
        "logprob": "-0.0035177921987627724",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999970197677612, 1), 'yes'), (('WHERE_COL', ('shop', 'shop_id', 40), 0.9997336268424988, 3), 'yes'), (('WHERE_OP', (('shop', 'shop_id', 40),), ('not in', 7), 0.9997818147301464, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'shop_id', 40),), ('not in', 7), 'root', 0.9999903440475464, 5), 'yes'), (('SELECT_AGG_v2', ('hiring', 'shop_id', 46), ('none_agg', 0), False, 0.9992602467536926, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999970197677612, 1), 'yes'), (('WHERE_COL', ('shop', 'shop_id', 40), 0.9997336268424988, 3), 'yes'), (('WHERE_OP', (('shop', 'shop_id', 40),), ('not in', 7), 0.9997818147301464, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'shop_id', 40),), ('not in', 7), 'root', 0.9999903440475464, 5), 'yes'), (('SELECT_AGG_v2', ('hiring', 'shop_id', 46), ('none_agg', 0), False, 0.9992602467536926, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1022
    },
    {
        "nl": "Which shops run with no employees ? Find the shop names",
        "true_sql": "select shop.name where shop.shop_id not in ( select hiring.shop_id )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 6, False], None]]]], 'union': None, 'where': [[True, 8, [0, [0, 5, False], None], {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 11, False], None]]]], 'union': None, 'where': []}, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            "where",
            "shop.shop_id",
            "not",
            "in",
            "(",
            "select",
            "hiring.shop_id",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 6, 40, [22, 20], 5, 2, [46], 4, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999523162841797, 1), ('WHERE_COL', ('shop', 'shop_id', 40), 0.7318852543830872, 3), ('WHERE_OP', (('shop', 'shop_id', 40),), ('not in', 7), 0.9603915264593105, 4), ('WHERE_ROOT_TERM', (('shop', 'shop_id', 40),), ('not in', 7), 'root', 0.9999978542327881, 5), ('SELECT_AGG_v2', ('hiring', 'shop_id', 46), ('none_agg', 0), False, 0.5831120014190674, 7), ('O', '##END_NESTED##', 0.9996852874755859, 8)]",
        "logprob": "-1.4990537613351684",
        "q_counter": 5,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999523162841797, 1), 'yes'), (('WHERE_COL', ('shop', 'shop_id', 40), 0.7318852543830872, 3), 'yes'), (('WHERE_OP', (('shop', 'shop_id', 40),), ('not in', 7), 0.9603915264593105, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'shop_id', 40),), ('not in', 7), 'root', 0.9999978542327881, 5), 'yes'), (('SELECT_AGG_v2', ('hiring', 'shop_id', 46), ('none_agg', 0), False, 0.5831120014190674, 7), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.9999523162841797, 1), 'yes'), (('WHERE_COL', ('shop', 'shop_id', 40), 0.7318852543830872, 3), 'yes'), (('WHERE_OP', (('shop', 'shop_id', 40),), ('not in', 7), 0.9603915264593105, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'shop_id', 40),), ('not in', 7), 'root', 0.9999978542327881, 5), 'yes'), (('SELECT_AGG_v2', ('hiring', 'shop_id', 46), ('none_agg', 0), False, 0.5831120014190674, 7), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1023
    },
    {
        "nl": "Find the number of employees hired in each shop ; show the shop name as well .",
        "true_sql": "select count ( * ) , shop.name group_by shop.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "group_by",
            "shop.name",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [9, 5, 35, 4], 10, 41, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.25684916973114014, 1), ('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.452827789939805, 3), ('GROUP_COL', ('shop', 'name', 41), 0.9670589566230774, 5)]",
        "logprob": "-4.5630072714016245",
        "q_counter": 3,
        "questioned_indices": [
            0,
            1,
            2
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.7787597056333672, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.452827789939805, 3), 'yes'), (('GROUP_COL', ('shop', 'name', 41), 0.9670589566230774, 5), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', '*', 54), ('count', 3), False, 0.7787597056333672, 1), 'no'), (('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.25684916973114014, 1), 'yes'), (('SELECT_AGG_v2', ('employee', 'name', 37), ('none_agg', 0), False, 0.1824606955051422, 1), 'no'), (('SELECT_AGG_v2', ('hiring', '*', 55), ('count', 3), False, 0.561158763642546, 1), 'no'), (('SELECT_AGG_v2', (None, '*', 35), ('count', 3), False, 0.452827789939805, 3), 'yes'), (('GROUP_COL', ('shop', 'name', 41), 0.9670589566230774, 5), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1024
    },
    {
        "nl": "For each shop , return the number of employees working there and the name of the shop .",
        "true_sql": "select count ( * ) , shop.name group_by shop.name",
        "true_sql_i": "{'except': None, 'from': {'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]], 'table_units': [['table_unit', 2], ['table_unit', 1]]}, 'groupBy': [[0, 6, False]], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': '*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.name",
            ",",
            "shop.name",
            "_EOS"
        ],
        "dec_seq": "[2, [41], 8, [41], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.8145437240600586, 1), ('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.6060856580734253, 3)]",
        "logprob": "-0.7554082403552876",
        "q_counter": 2,
        "questioned_indices": [
            0,
            1
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.8145437240600586, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.6060856580734253, 3), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.8145437240600586, 1), 'yes'), (('SELECT_AGG_v2', ('shop', 'name', 41), ('none_agg', 0), False, 0.6060856580734253, 3), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1025
    },
    {
        "nl": "What is total bonus given in all evaluations ?",
        "true_sql": "select sum ( evaluation.bonus )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 17, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "evaluation.bonus",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 52, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('evaluation', 'bonus', 52), ('sum', 4), False, 0.9998915384537268, 1)]",
        "logprob": "-0.0004531818037046896",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('evaluation', 'bonus', 52), ('sum', 4), False, 0.9998915384537268, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('evaluation', 'bonus', 52), ('sum', 4), False, 0.9998915384537268, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1026
    },
    {
        "nl": "Find the total amount of bonus given in all the evaluations .",
        "true_sql": "select sum ( evaluation.bonus )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 3]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[4, [0, [0, 17, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "sum",
            "(",
            "evaluation.bonus",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [24, 5, 52, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('evaluation', 'bonus', 52), ('sum', 4), False, 0.9999282177358811, 1)]",
        "logprob": "-0.0003167036996748036",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('evaluation', 'bonus', 52), ('sum', 4), False, 0.9999282177358811, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('evaluation', 'bonus', 52), ('sum', 4), False, 0.9999282177358811, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1027
    },
    {
        "nl": "Give me all the information about hiring .",
        "true_sql": "select hiring.*",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'hiring.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "hiring.*",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('hiring', '*', 55), ('none_agg', 0), False, 0.027128770947456353, 1)]",
        "logprob": "-3.6331802308832764",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('hiring', 'start_from', 48), ('none_agg', 0), False, 0.9726278781890869, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('hiring', 'start_from', 48), ('none_agg', 0), False, 0.9726278781890869, 1), 'no'), (('SELECT_AGG_v2', ('hiring', '*', 55), ('none_agg', 0), False, 0.027128770947456353, 1), 'yes'), (('SELECT_AGG_v2', ('hiring', 'is_full_time', 49), ('none_agg', 0), False, 1.7936690710484968e-05, 1), 'no'), (('SELECT_AGG_v2', ('employee', '*', 53), ('none_agg', 0), False, 9.834224329097191e-06, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1028
    },
    {
        "nl": "What is all the information about hiring ?",
        "true_sql": "select hiring.*",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 2]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 0, False], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {'select': 'hiring.*'}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "hiring.*",
            "_EOS"
        ],
        "dec_seq": "[2, [55], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('hiring', '*', 55), ('none_agg', 0), False, 0.006801584735512732, 1)]",
        "logprob": "-5.003837572600969",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('hiring', 'start_from', 48), ('none_agg', 0), False, 0.9931722283363342, 1), 'no')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('hiring', 'start_from', 48), ('none_agg', 0), False, 0.9931722283363342, 1), 'no'), (('SELECT_AGG_v2', ('hiring', '*', 55), ('none_agg', 0), False, 0.006801584735512732, 1), 'yes'), (('SELECT_AGG_v2', ('employee', '*', 53), ('none_agg', 0), False, 1.7203618654093587e-06, 1), 'no'), (('SELECT_AGG_v2', ('hiring', 'is_full_time', 49), ('none_agg', 0), False, 8.27592089081008e-07, 1), 'no')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1029
    },
    {
        "nl": "Which district has both stores with less than 3000 products and stores with more than 10000 products ?",
        "true_sql": "select shop.district where shop.number_products < value intersect select shop.district where shop.number_products > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], 10000.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 9, False], None], 3000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.district",
            "where",
            "shop.number_products",
            "<",
            "value",
            "intersect",
            "select",
            "shop.district",
            "where",
            "shop.number_products",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 44, [21], 3, 23, 2, [43], 6, 44, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999998807907104, 1), ('WHERE_COL', ('shop', 'number_products', 44), 0.9811592102050781, 3), ('WHERE_OP', (('shop', 'number_products', 44),), ('<', 2), 0.957355797290802, 4), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('<', 2), 'terminal', 0.9999489784240723, 5), ('IUEN_v2', ('intersect', 1), 0.9542890191078186, 6), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999988079071045, 8), ('WHERE_COL', ('shop', 'number_products', 44), 0.9993120431900024, 10), ('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.9937660694122314, 11), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'terminal', 0.9999710321426392, 12)]",
        "logprob": "-0.11688785549424649",
        "q_counter": 9,
        "questioned_indices": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.9811592102050781, 3), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('<', 2), 0.957355797290802, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('<', 2), 'terminal', 0.9999489784240723, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9542890191078186, 6), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999988079071045, 8), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.9993120431900024, 10), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.9937660694122314, 11), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'terminal', 0.9999710321426392, 12), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999998807907104, 1), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.9811592102050781, 3), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('<', 2), 0.957355797290802, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('<', 2), 'terminal', 0.9999489784240723, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9542890191078186, 6), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999988079071045, 8), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.9993120431900024, 10), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.9937660694122314, 11), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'terminal', 0.9999710321426392, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1030
    },
    {
        "nl": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products .",
        "true_sql": "select shop.district where shop.number_products < value intersect select shop.district where shop.number_products > value",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': {'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 3, [0, [0, 9, False], None], 10000.0, None]]}, 'limit': None, 'orderBy': [], 'select': [False, [[0, [0, [0, 8, False], None]]]], 'union': None, 'where': [[False, 4, [0, [0, 9, False], None], 3000.0, None]], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "shop.district",
            "where",
            "shop.number_products",
            "<",
            "value",
            "intersect",
            "select",
            "shop.district",
            "where",
            "shop.number_products",
            ">",
            "value",
            "_EOS"
        ],
        "dec_seq": "[2, [43], 6, 44, [21], 3, 23, 2, [43], 6, 44, [14], 3, 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 1.0, 1), ('WHERE_COL', ('shop', 'number_products', 44), 0.9995468258857727, 3), ('WHERE_OP', (('shop', 'number_products', 44),), ('<', 2), 0.968658983707428, 4), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('<', 2), 'terminal', 0.9999760389328003, 5), ('IUEN_v2', ('intersect', 1), 0.9946909546852112, 6), ('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999959468841553, 8), ('WHERE_COL', ('shop', 'number_products', 44), 0.9999946355819702, 10), ('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.985594630241394, 11), ('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'terminal', 0.9999849796295166, 12)]",
        "logprob": "-0.05258901500726129",
        "q_counter": 8,
        "questioned_indices": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "questioned_tags": "[(('WHERE_COL', ('shop', 'number_products', 44), 0.9995468258857727, 3), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('<', 2), 0.968658983707428, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('<', 2), 'terminal', 0.9999760389328003, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9946909546852112, 6), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999959468841553, 8), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.9999946355819702, 10), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.985594630241394, 11), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'terminal', 0.9999849796295166, 12), 'yes')]",
        "feedback_records": "[(('WHERE_COL', ('shop', 'number_products', 44), 0.9995468258857727, 3), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('<', 2), 0.968658983707428, 4), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('<', 2), 'terminal', 0.9999760389328003, 5), 'yes'), (('IUEN_v2', ('intersect', 1), 0.9946909546852112, 6), 'yes'), (('SELECT_AGG_v2', ('shop', 'district', 43), ('none_agg', 0), False, 0.9999959468841553, 8), 'yes'), (('WHERE_COL', ('shop', 'number_products', 44), 0.9999946355819702, 10), 'yes'), (('WHERE_OP', (('shop', 'number_products', 44),), ('>', 1), 0.985594630241394, 11), 'yes'), (('WHERE_ROOT_TERM', (('shop', 'number_products', 44),), ('>', 1), 'terminal', 0.9999849796295166, 12), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1031
    },
    {
        "nl": "How many different store locations are there ?",
        "true_sql": "select count ( distinct shop.location )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 7, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "shop.location",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 42, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'location', 42), ('count', 3), True, 0.9999914407499162, 1)]",
        "logprob": "-5.51942750743765e-05",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'location', 42), ('count', 3), True, 0.9999914407499162, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'location', 42), ('count', 3), True, 0.9999914407499162, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1032
    },
    {
        "nl": "Count the number of distinct store locations .",
        "true_sql": "select count ( distinct shop.location )",
        "true_sql_i": "{'except': None, 'from': {'conds': [], 'table_units': [['table_unit', 1]]}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, [[3, [0, [0, 7, True], None]]]], 'union': None, 'where': [], 'extracted_clause_asterisk': {}, 'column_names_surface_form_to_id': {'*': 0, 'employee.employee_id': 1, 'employee.name': 2, 'employee.age': 3, 'employee.city': 4, 'shop.shop_id': 5, 'shop.name': 6, 'shop.location': 7, 'shop.district': 8, 'shop.number_products': 9, 'shop.manager_name': 10, 'hiring.shop_id': 11, 'hiring.employee_id': 12, 'hiring.start_from': 13, 'hiring.is_full_time': 14, 'evaluation.employee_id': 15, 'evaluation.year_awarded': 16, 'evaluation.bonus': 17, 'employee.*': 18, 'shop.*': 19, 'hiring.*': 20, 'evaluation.*': 21}, 'base_vocab': <EditSQL.data_util.atis_vocab.ATISVocabulary object at 0x7fd69014ccc0>}",
        "sql": [
            "select",
            "count",
            "(",
            "distinct",
            "shop.location",
            ")",
            "_EOS"
        ],
        "dec_seq": "[2, [9, 5, 15, 42, 4], 1]",
        "tag_seq": "[('SELECT_AGG_v2', ('shop', 'location', 42), ('count', 3), True, 0.9999788043733236, 1)]",
        "logprob": "-0.0001276755800236912",
        "q_counter": 1,
        "questioned_indices": [
            0
        ],
        "questioned_tags": "[(('SELECT_AGG_v2', ('shop', 'location', 42), ('count', 3), True, 0.9999788043733236, 1), 'yes')]",
        "feedback_records": "[(('SELECT_AGG_v2', ('shop', 'location', 42), ('count', 3), True, 0.9999788043733236, 1), 'yes')]",
        "exact_score": 0.0,
        "partial_scores": "Exception",
        "hardness": "Unknown",
        "exit": false,
        "exception": false,
        "idx": 1033
    }
]